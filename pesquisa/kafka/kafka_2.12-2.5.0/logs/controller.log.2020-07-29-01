[2020-07-29 01:03:08,714] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-29 01:03:08,715] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-29 01:03:08,716] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-29 01:03:08,716] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-29 01:06:36,921] DEBUG [Controller id=0] Delete topics listener fired for topics APPS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:36,921] INFO [Controller id=0] Starting topic deletion for topics APPS (kafka.controller.KafkaController)
[2020-07-29 01:06:36,921] INFO [Topic Deletion Manager 0] Handling deletion for topics APPS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:36,922] INFO [Topic Deletion Manager 0] Deletion of topic APPS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:36,926] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=APPS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:36,926] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=APPS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:36,942] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(APPS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:06:36,942] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=APPS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:36,943] INFO [Topic Deletion Manager 0] Handling deletion for topics APPS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:36,969] INFO [Topic Deletion Manager 0] Deletion of topic APPS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:36,969] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:06:36,970] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:38,629] DEBUG [Controller id=0] Delete topics listener fired for topics APP_SERVICES to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:38,629] INFO [Controller id=0] Starting topic deletion for topics APP_SERVICES (kafka.controller.KafkaController)
[2020-07-29 01:06:38,629] INFO [Topic Deletion Manager 0] Handling deletion for topics APP_SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:38,629] INFO [Topic Deletion Manager 0] Deletion of topic APP_SERVICES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:38,633] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=APP_SERVICES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:38,634] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=APP_SERVICES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:38,644] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(APP_SERVICES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:06:38,644] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=APP_SERVICES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:38,644] INFO [Topic Deletion Manager 0] Handling deletion for topics APP_SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:38,656] INFO [Topic Deletion Manager 0] Deletion of topic APP_SERVICES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:38,657] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:06:38,658] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:40,308] DEBUG [Controller id=0] Delete topics listener fired for topics COMPONENT_TYPES to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:40,308] INFO [Controller id=0] Starting topic deletion for topics COMPONENT_TYPES (kafka.controller.KafkaController)
[2020-07-29 01:06:40,309] INFO [Topic Deletion Manager 0] Handling deletion for topics COMPONENT_TYPES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:40,309] INFO [Topic Deletion Manager 0] Deletion of topic COMPONENT_TYPES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:40,314] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=COMPONENT_TYPES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:40,314] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=COMPONENT_TYPES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:40,332] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(COMPONENT_TYPES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:06:40,332] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=COMPONENT_TYPES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:40,332] INFO [Topic Deletion Manager 0] Handling deletion for topics COMPONENT_TYPES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:40,345] INFO [Topic Deletion Manager 0] Deletion of topic COMPONENT_TYPES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:40,346] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:06:40,347] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:42,000] DEBUG [Controller id=0] Delete topics listener fired for topics CONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:42,000] INFO [Controller id=0] Starting topic deletion for topics CONDITIONS (kafka.controller.KafkaController)
[2020-07-29 01:06:42,000] INFO [Topic Deletion Manager 0] Handling deletion for topics CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:42,000] INFO [Topic Deletion Manager 0] Deletion of topic CONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:42,003] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=CONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:42,004] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=CONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:42,026] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(CONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:06:42,026] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=CONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:42,026] INFO [Topic Deletion Manager 0] Handling deletion for topics CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:42,048] INFO [Topic Deletion Manager 0] Deletion of topic CONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:42,049] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:06:42,049] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:43,651] DEBUG [Controller id=0] Delete topics listener fired for topics DECISIONS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:43,651] INFO [Controller id=0] Starting topic deletion for topics DECISIONS (kafka.controller.KafkaController)
[2020-07-29 01:06:43,651] INFO [Topic Deletion Manager 0] Handling deletion for topics DECISIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:43,651] INFO [Topic Deletion Manager 0] Deletion of topic DECISIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:43,659] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=DECISIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:43,659] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=DECISIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:43,681] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(DECISIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:06:43,682] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=DECISIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:43,682] INFO [Topic Deletion Manager 0] Handling deletion for topics DECISIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:43,697] INFO [Topic Deletion Manager 0] Deletion of topic DECISIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:43,697] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:06:43,698] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:45,358] DEBUG [Controller id=0] Delete topics listener fired for topics EDGE_HOSTS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:45,358] INFO [Controller id=0] Starting topic deletion for topics EDGE_HOSTS (kafka.controller.KafkaController)
[2020-07-29 01:06:45,358] INFO [Topic Deletion Manager 0] Handling deletion for topics EDGE_HOSTS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:45,359] INFO [Topic Deletion Manager 0] Deletion of topic EDGE_HOSTS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:45,362] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=EDGE_HOSTS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:45,362] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=EDGE_HOSTS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:45,384] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(EDGE_HOSTS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:06:45,384] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=EDGE_HOSTS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:45,384] INFO [Topic Deletion Manager 0] Handling deletion for topics EDGE_HOSTS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:45,408] INFO [Topic Deletion Manager 0] Deletion of topic EDGE_HOSTS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:45,410] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:06:45,411] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:47,047] DEBUG [Controller id=0] Delete topics listener fired for topics FIELDS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:47,047] INFO [Controller id=0] Starting topic deletion for topics FIELDS (kafka.controller.KafkaController)
[2020-07-29 01:06:47,047] INFO [Topic Deletion Manager 0] Handling deletion for topics FIELDS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:47,048] INFO [Topic Deletion Manager 0] Deletion of topic FIELDS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:47,050] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=FIELDS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:47,051] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=FIELDS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:47,063] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(FIELDS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:06:47,063] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=FIELDS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:47,063] INFO [Topic Deletion Manager 0] Handling deletion for topics FIELDS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:47,087] INFO [Topic Deletion Manager 0] Deletion of topic FIELDS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:47,088] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:06:47,089] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:48,979] DEBUG [Controller id=0] Delete topics listener fired for topics HOST_RULES to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:48,979] INFO [Controller id=0] Starting topic deletion for topics HOST_RULES (kafka.controller.KafkaController)
[2020-07-29 01:06:48,979] INFO [Topic Deletion Manager 0] Handling deletion for topics HOST_RULES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:48,979] INFO [Topic Deletion Manager 0] Deletion of topic HOST_RULES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:48,982] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=HOST_RULES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:48,982] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=HOST_RULES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:49,004] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(HOST_RULES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:06:49,005] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=HOST_RULES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:49,005] INFO [Topic Deletion Manager 0] Handling deletion for topics HOST_RULES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:49,028] INFO [Topic Deletion Manager 0] Deletion of topic HOST_RULES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:49,029] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:06:49,030] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:50,798] DEBUG [Controller id=0] Delete topics listener fired for topics HOST_RULE_CONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:50,798] INFO [Controller id=0] Starting topic deletion for topics HOST_RULE_CONDITIONS (kafka.controller.KafkaController)
[2020-07-29 01:06:50,798] INFO [Topic Deletion Manager 0] Handling deletion for topics HOST_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:50,798] INFO [Topic Deletion Manager 0] Deletion of topic HOST_RULE_CONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:50,801] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=HOST_RULE_CONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:50,802] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=HOST_RULE_CONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:50,817] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(HOST_RULE_CONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:06:50,817] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=HOST_RULE_CONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:50,817] INFO [Topic Deletion Manager 0] Handling deletion for topics HOST_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:50,841] INFO [Topic Deletion Manager 0] Deletion of topic HOST_RULE_CONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:50,842] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:06:50,842] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:52,691] DEBUG [Controller id=0] Delete topics listener fired for topics OPERATORS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:52,692] INFO [Controller id=0] Starting topic deletion for topics OPERATORS (kafka.controller.KafkaController)
[2020-07-29 01:06:52,692] INFO [Topic Deletion Manager 0] Handling deletion for topics OPERATORS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:52,692] INFO [Topic Deletion Manager 0] Deletion of topic OPERATORS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:52,696] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=OPERATORS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:52,696] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=OPERATORS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:52,718] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(OPERATORS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:06:52,718] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=OPERATORS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:52,718] INFO [Topic Deletion Manager 0] Handling deletion for topics OPERATORS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:52,741] INFO [Topic Deletion Manager 0] Deletion of topic OPERATORS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:52,742] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:06:52,743] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:54,480] DEBUG [Controller id=0] Delete topics listener fired for topics REGIONS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:54,480] INFO [Controller id=0] Starting topic deletion for topics REGIONS (kafka.controller.KafkaController)
[2020-07-29 01:06:54,480] INFO [Topic Deletion Manager 0] Handling deletion for topics REGIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:54,480] INFO [Topic Deletion Manager 0] Deletion of topic REGIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:54,485] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=REGIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:54,485] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=REGIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:54,507] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(REGIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:06:54,507] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=REGIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:54,507] INFO [Topic Deletion Manager 0] Handling deletion for topics REGIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:54,522] INFO [Topic Deletion Manager 0] Deletion of topic REGIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:54,523] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:06:54,524] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:56,206] DEBUG [Controller id=0] Delete topics listener fired for topics SERVICES to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:56,206] INFO [Controller id=0] Starting topic deletion for topics SERVICES (kafka.controller.KafkaController)
[2020-07-29 01:06:56,206] INFO [Topic Deletion Manager 0] Handling deletion for topics SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:56,207] INFO [Topic Deletion Manager 0] Deletion of topic SERVICES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:56,209] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=SERVICES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:56,210] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=SERVICES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:56,227] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(SERVICES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:06:56,227] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=SERVICES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:56,227] INFO [Topic Deletion Manager 0] Handling deletion for topics SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:56,250] INFO [Topic Deletion Manager 0] Deletion of topic SERVICES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:56,251] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:06:56,252] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:57,929] DEBUG [Controller id=0] Delete topics listener fired for topics SERVICE_DEPENDENCIES to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:57,929] INFO [Controller id=0] Starting topic deletion for topics SERVICE_DEPENDENCIES (kafka.controller.KafkaController)
[2020-07-29 01:06:57,929] INFO [Topic Deletion Manager 0] Handling deletion for topics SERVICE_DEPENDENCIES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:57,929] INFO [Topic Deletion Manager 0] Deletion of topic SERVICE_DEPENDENCIES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:57,934] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=SERVICE_DEPENDENCIES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:57,934] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=SERVICE_DEPENDENCIES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:57,955] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(SERVICE_DEPENDENCIES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:06:57,955] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=SERVICE_DEPENDENCIES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:57,956] INFO [Topic Deletion Manager 0] Handling deletion for topics SERVICE_DEPENDENCIES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:57,970] INFO [Topic Deletion Manager 0] Deletion of topic SERVICE_DEPENDENCIES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:57,971] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:06:57,971] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:59,637] DEBUG [Controller id=0] Delete topics listener fired for topics SERVICE_RULES to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:06:59,637] INFO [Controller id=0] Starting topic deletion for topics SERVICE_RULES (kafka.controller.KafkaController)
[2020-07-29 01:06:59,637] INFO [Topic Deletion Manager 0] Handling deletion for topics SERVICE_RULES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:59,637] INFO [Topic Deletion Manager 0] Deletion of topic SERVICE_RULES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:59,640] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=SERVICE_RULES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:59,640] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=SERVICE_RULES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:06:59,662] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(SERVICE_RULES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:06:59,662] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=SERVICE_RULES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:59,662] INFO [Topic Deletion Manager 0] Handling deletion for topics SERVICE_RULES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:59,685] INFO [Topic Deletion Manager 0] Deletion of topic SERVICE_RULES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:06:59,686] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:06:59,687] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:01,514] DEBUG [Controller id=0] Delete topics listener fired for topics SERVICE_RULE_CONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:01,514] INFO [Controller id=0] Starting topic deletion for topics SERVICE_RULE_CONDITIONS (kafka.controller.KafkaController)
[2020-07-29 01:07:01,514] INFO [Topic Deletion Manager 0] Handling deletion for topics SERVICE_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:01,514] INFO [Topic Deletion Manager 0] Deletion of topic SERVICE_RULE_CONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:01,517] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=SERVICE_RULE_CONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:01,518] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=SERVICE_RULE_CONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:01,531] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(SERVICE_RULE_CONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:01,531] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=SERVICE_RULE_CONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:01,532] INFO [Topic Deletion Manager 0] Handling deletion for topics SERVICE_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:01,557] INFO [Topic Deletion Manager 0] Deletion of topic SERVICE_RULE_CONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:01,558] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:01,558] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:03,215] DEBUG [Controller id=0] Delete topics listener fired for topics USERS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:03,215] INFO [Controller id=0] Starting topic deletion for topics USERS (kafka.controller.KafkaController)
[2020-07-29 01:07:03,215] INFO [Topic Deletion Manager 0] Handling deletion for topics USERS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:03,215] INFO [Topic Deletion Manager 0] Deletion of topic USERS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:03,220] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=USERS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:03,220] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=USERS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:03,241] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(USERS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:03,241] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=USERS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:03,241] INFO [Topic Deletion Manager 0] Handling deletion for topics USERS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:03,258] INFO [Topic Deletion Manager 0] Deletion of topic USERS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:03,259] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:03,260] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:05,012] DEBUG [Controller id=0] Delete topics listener fired for topics VALUE_MODES to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:05,012] INFO [Controller id=0] Starting topic deletion for topics VALUE_MODES (kafka.controller.KafkaController)
[2020-07-29 01:07:05,012] INFO [Topic Deletion Manager 0] Handling deletion for topics VALUE_MODES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:05,013] INFO [Topic Deletion Manager 0] Deletion of topic VALUE_MODES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:05,016] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=VALUE_MODES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:05,016] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=VALUE_MODES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:05,036] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(VALUE_MODES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:05,036] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=VALUE_MODES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:05,036] INFO [Topic Deletion Manager 0] Handling deletion for topics VALUE_MODES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:05,056] INFO [Topic Deletion Manager 0] Deletion of topic VALUE_MODES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:05,057] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:05,057] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:06,512] DEBUG [Controller id=0] Delete topics listener fired for topics database-APPS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:06,512] INFO [Controller id=0] Starting topic deletion for topics database-APPS (kafka.controller.KafkaController)
[2020-07-29 01:07:06,512] INFO [Topic Deletion Manager 0] Handling deletion for topics database-APPS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:06,512] INFO [Topic Deletion Manager 0] Deletion of topic database-APPS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:06,515] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-APPS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:06,516] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-APPS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:06,526] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-APPS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:06,526] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-APPS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:06,526] INFO [Topic Deletion Manager 0] Handling deletion for topics database-APPS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:06,546] INFO [Topic Deletion Manager 0] Deletion of topic database-APPS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:06,547] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:06,547] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:08,223] DEBUG [Controller id=0] Delete topics listener fired for topics database-APP_SERVICES to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:08,223] INFO [Controller id=0] Starting topic deletion for topics database-APP_SERVICES (kafka.controller.KafkaController)
[2020-07-29 01:07:08,223] INFO [Topic Deletion Manager 0] Handling deletion for topics database-APP_SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:08,223] INFO [Topic Deletion Manager 0] Deletion of topic database-APP_SERVICES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:08,226] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-APP_SERVICES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:08,226] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-APP_SERVICES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:08,240] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-APP_SERVICES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:08,240] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-APP_SERVICES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:08,240] INFO [Topic Deletion Manager 0] Handling deletion for topics database-APP_SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:08,263] INFO [Topic Deletion Manager 0] Deletion of topic database-APP_SERVICES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:08,264] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:08,265] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:09,934] DEBUG [Controller id=0] Delete topics listener fired for topics database-COMPONENT_TYPES to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:09,934] INFO [Controller id=0] Starting topic deletion for topics database-COMPONENT_TYPES (kafka.controller.KafkaController)
[2020-07-29 01:07:09,934] INFO [Topic Deletion Manager 0] Handling deletion for topics database-COMPONENT_TYPES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:09,934] INFO [Topic Deletion Manager 0] Deletion of topic database-COMPONENT_TYPES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:09,939] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-COMPONENT_TYPES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:09,939] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-COMPONENT_TYPES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:09,949] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-COMPONENT_TYPES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:09,949] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-COMPONENT_TYPES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:09,949] INFO [Topic Deletion Manager 0] Handling deletion for topics database-COMPONENT_TYPES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:09,962] INFO [Topic Deletion Manager 0] Deletion of topic database-COMPONENT_TYPES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:09,963] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:09,963] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:11,601] DEBUG [Controller id=0] Delete topics listener fired for topics database-CONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:11,601] INFO [Controller id=0] Starting topic deletion for topics database-CONDITIONS (kafka.controller.KafkaController)
[2020-07-29 01:07:11,601] INFO [Topic Deletion Manager 0] Handling deletion for topics database-CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:11,601] INFO [Topic Deletion Manager 0] Deletion of topic database-CONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:11,606] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-CONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:11,606] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-CONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:11,626] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-CONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:11,626] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-CONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:11,626] INFO [Topic Deletion Manager 0] Handling deletion for topics database-CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:11,640] INFO [Topic Deletion Manager 0] Deletion of topic database-CONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:11,640] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:11,641] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:13,307] DEBUG [Controller id=0] Delete topics listener fired for topics database-DECISIONS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:13,308] INFO [Controller id=0] Starting topic deletion for topics database-DECISIONS (kafka.controller.KafkaController)
[2020-07-29 01:07:13,308] INFO [Topic Deletion Manager 0] Handling deletion for topics database-DECISIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:13,308] INFO [Topic Deletion Manager 0] Deletion of topic database-DECISIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:13,311] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-DECISIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:13,311] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-DECISIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:13,333] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-DECISIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:13,333] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-DECISIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:13,333] INFO [Topic Deletion Manager 0] Handling deletion for topics database-DECISIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:13,356] INFO [Topic Deletion Manager 0] Deletion of topic database-DECISIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:13,357] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:13,358] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:14,999] DEBUG [Controller id=0] Delete topics listener fired for topics database-EDGE_HOSTS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:14,999] INFO [Controller id=0] Starting topic deletion for topics database-EDGE_HOSTS (kafka.controller.KafkaController)
[2020-07-29 01:07:14,999] INFO [Topic Deletion Manager 0] Handling deletion for topics database-EDGE_HOSTS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:14,999] INFO [Topic Deletion Manager 0] Deletion of topic database-EDGE_HOSTS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:15,002] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-EDGE_HOSTS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:15,002] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-EDGE_HOSTS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:15,014] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-EDGE_HOSTS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:15,014] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-EDGE_HOSTS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:15,015] INFO [Topic Deletion Manager 0] Handling deletion for topics database-EDGE_HOSTS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:15,036] INFO [Topic Deletion Manager 0] Deletion of topic database-EDGE_HOSTS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:15,037] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:15,038] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:16,734] DEBUG [Controller id=0] Delete topics listener fired for topics database-FIELDS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:16,735] INFO [Controller id=0] Starting topic deletion for topics database-FIELDS (kafka.controller.KafkaController)
[2020-07-29 01:07:16,735] INFO [Topic Deletion Manager 0] Handling deletion for topics database-FIELDS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:16,735] INFO [Topic Deletion Manager 0] Deletion of topic database-FIELDS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:16,739] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-FIELDS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:16,739] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-FIELDS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:16,752] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-FIELDS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:16,752] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-FIELDS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:16,752] INFO [Topic Deletion Manager 0] Handling deletion for topics database-FIELDS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:16,762] INFO [Topic Deletion Manager 0] Deletion of topic database-FIELDS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:16,762] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:16,763] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:18,420] DEBUG [Controller id=0] Delete topics listener fired for topics database-HOST_RULES to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:18,420] INFO [Controller id=0] Starting topic deletion for topics database-HOST_RULES (kafka.controller.KafkaController)
[2020-07-29 01:07:18,420] INFO [Topic Deletion Manager 0] Handling deletion for topics database-HOST_RULES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:18,420] INFO [Topic Deletion Manager 0] Deletion of topic database-HOST_RULES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:18,428] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-HOST_RULES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:18,428] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-HOST_RULES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:18,449] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-HOST_RULES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:18,449] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-HOST_RULES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:18,449] INFO [Topic Deletion Manager 0] Handling deletion for topics database-HOST_RULES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:18,463] INFO [Topic Deletion Manager 0] Deletion of topic database-HOST_RULES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:18,464] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:18,465] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:20,148] DEBUG [Controller id=0] Delete topics listener fired for topics database-HOST_RULE_CONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:20,148] INFO [Controller id=0] Starting topic deletion for topics database-HOST_RULE_CONDITIONS (kafka.controller.KafkaController)
[2020-07-29 01:07:20,148] INFO [Topic Deletion Manager 0] Handling deletion for topics database-HOST_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:20,148] INFO [Topic Deletion Manager 0] Deletion of topic database-HOST_RULE_CONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:20,151] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-HOST_RULE_CONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:20,151] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-HOST_RULE_CONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:20,170] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-HOST_RULE_CONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:20,170] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-HOST_RULE_CONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:20,170] INFO [Topic Deletion Manager 0] Handling deletion for topics database-HOST_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:20,193] INFO [Topic Deletion Manager 0] Deletion of topic database-HOST_RULE_CONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:20,194] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:20,194] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:21,824] DEBUG [Controller id=0] Delete topics listener fired for topics database-LOGGING_EVENT to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:21,824] INFO [Controller id=0] Starting topic deletion for topics database-LOGGING_EVENT (kafka.controller.KafkaController)
[2020-07-29 01:07:21,824] INFO [Topic Deletion Manager 0] Handling deletion for topics database-LOGGING_EVENT (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:21,824] INFO [Topic Deletion Manager 0] Deletion of topic database-LOGGING_EVENT (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:21,826] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-LOGGING_EVENT,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:21,827] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-LOGGING_EVENT,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:21,837] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-LOGGING_EVENT-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:21,837] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-LOGGING_EVENT,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:21,837] INFO [Topic Deletion Manager 0] Handling deletion for topics database-LOGGING_EVENT (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:21,854] INFO [Topic Deletion Manager 0] Deletion of topic database-LOGGING_EVENT successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:21,855] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:21,855] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:23,596] DEBUG [Controller id=0] Delete topics listener fired for topics database-OPERATORS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:23,596] INFO [Controller id=0] Starting topic deletion for topics database-OPERATORS (kafka.controller.KafkaController)
[2020-07-29 01:07:23,596] INFO [Topic Deletion Manager 0] Handling deletion for topics database-OPERATORS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:23,596] INFO [Topic Deletion Manager 0] Deletion of topic database-OPERATORS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:23,601] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-OPERATORS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:23,601] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-OPERATORS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:23,614] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-OPERATORS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:23,614] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-OPERATORS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:23,615] INFO [Topic Deletion Manager 0] Handling deletion for topics database-OPERATORS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:23,636] INFO [Topic Deletion Manager 0] Deletion of topic database-OPERATORS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:23,637] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:23,637] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:25,292] DEBUG [Controller id=0] Delete topics listener fired for topics database-REGIONS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:25,292] INFO [Controller id=0] Starting topic deletion for topics database-REGIONS (kafka.controller.KafkaController)
[2020-07-29 01:07:25,292] INFO [Topic Deletion Manager 0] Handling deletion for topics database-REGIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:25,292] INFO [Topic Deletion Manager 0] Deletion of topic database-REGIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:25,296] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-REGIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:25,296] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-REGIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:25,309] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-REGIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:25,309] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-REGIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:25,309] INFO [Topic Deletion Manager 0] Handling deletion for topics database-REGIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:25,320] INFO [Topic Deletion Manager 0] Deletion of topic database-REGIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:25,321] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:25,321] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:26,969] DEBUG [Controller id=0] Delete topics listener fired for topics database-SERVICES to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:26,969] INFO [Controller id=0] Starting topic deletion for topics database-SERVICES (kafka.controller.KafkaController)
[2020-07-29 01:07:26,969] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:26,969] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:26,973] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:26,973] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:26,995] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-SERVICES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:26,995] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-SERVICES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:26,995] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:27,008] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:27,009] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:27,010] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:28,857] DEBUG [Controller id=0] Delete topics listener fired for topics database-SERVICE_DEPENDENCIES to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:28,857] INFO [Controller id=0] Starting topic deletion for topics database-SERVICE_DEPENDENCIES (kafka.controller.KafkaController)
[2020-07-29 01:07:28,857] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICE_DEPENDENCIES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:28,857] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICE_DEPENDENCIES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:28,872] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICE_DEPENDENCIES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:28,873] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICE_DEPENDENCIES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:28,944] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-SERVICE_DEPENDENCIES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:28,945] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-SERVICE_DEPENDENCIES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:28,945] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICE_DEPENDENCIES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:29,031] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICE_DEPENDENCIES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:29,033] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:29,033] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:30,560] DEBUG [Controller id=0] Delete topics listener fired for topics database-SERVICE_RULES to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:30,560] INFO [Controller id=0] Starting topic deletion for topics database-SERVICE_RULES (kafka.controller.KafkaController)
[2020-07-29 01:07:30,560] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICE_RULES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:30,560] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICE_RULES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:30,573] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICE_RULES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:30,574] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICE_RULES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:30,653] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-SERVICE_RULES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:30,653] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-SERVICE_RULES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:30,654] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICE_RULES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:30,720] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICE_RULES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:30,721] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:30,721] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:32,240] DEBUG [Controller id=0] Delete topics listener fired for topics database-SERVICE_RULE_CONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:32,240] INFO [Controller id=0] Starting topic deletion for topics database-SERVICE_RULE_CONDITIONS (kafka.controller.KafkaController)
[2020-07-29 01:07:32,240] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICE_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:32,240] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICE_RULE_CONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:32,245] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICE_RULE_CONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:32,245] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICE_RULE_CONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:32,266] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-SERVICE_RULE_CONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:32,266] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-SERVICE_RULE_CONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:32,266] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICE_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:32,284] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICE_RULE_CONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:32,285] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:32,286] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:33,958] DEBUG [Controller id=0] Delete topics listener fired for topics database-USERS to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:33,958] INFO [Controller id=0] Starting topic deletion for topics database-USERS (kafka.controller.KafkaController)
[2020-07-29 01:07:33,958] INFO [Topic Deletion Manager 0] Handling deletion for topics database-USERS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:33,958] INFO [Topic Deletion Manager 0] Deletion of topic database-USERS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:33,961] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-USERS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:33,961] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-USERS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:33,982] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-USERS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:33,983] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-USERS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:33,983] INFO [Topic Deletion Manager 0] Handling deletion for topics database-USERS (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:34,002] INFO [Topic Deletion Manager 0] Deletion of topic database-USERS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:34,003] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:34,004] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:35,810] DEBUG [Controller id=0] Delete topics listener fired for topics database-VALUE_MODES to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:35,810] INFO [Controller id=0] Starting topic deletion for topics database-VALUE_MODES (kafka.controller.KafkaController)
[2020-07-29 01:07:35,810] INFO [Topic Deletion Manager 0] Handling deletion for topics database-VALUE_MODES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:35,810] INFO [Topic Deletion Manager 0] Deletion of topic database-VALUE_MODES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:35,813] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-VALUE_MODES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:35,813] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-VALUE_MODES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:35,835] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-VALUE_MODES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:35,835] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-VALUE_MODES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:35,835] INFO [Topic Deletion Manager 0] Handling deletion for topics database-VALUE_MODES (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:35,854] INFO [Topic Deletion Manager 0] Deletion of topic database-VALUE_MODES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:35,854] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:35,855] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:37,503] DEBUG [Controller id=0] Delete topics listener fired for topics worker-manager- to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:37,503] INFO [Controller id=0] Starting topic deletion for topics worker-manager- (kafka.controller.KafkaController)
[2020-07-29 01:07:37,503] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager- (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:37,503] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager- (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:37,506] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:37,506] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:37,522] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(worker-manager--0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:37,522] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=worker-manager-,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:37,522] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager- (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:37,545] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager- successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:37,546] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:37,547] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:39,174] DEBUG [Controller id=0] Delete topics listener fired for topics worker-manager-.DLT to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:07:39,174] INFO [Controller id=0] Starting topic deletion for topics worker-manager-.DLT (kafka.controller.KafkaController)
[2020-07-29 01:07:39,174] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager-.DLT (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:39,174] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager-.DLT (re)started (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:39,177] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-.DLT,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:39,177] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-.DLT,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-29 01:07:39,193] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(worker-manager-.DLT-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-29 01:07:39,193] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=worker-manager-.DLT,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:39,193] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager-.DLT (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:39,219] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager-.DLT successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-29 01:07:39,220] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-29 01:07:39,221] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-29 01:08:08,717] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-29 01:08:08,717] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-29 01:08:08,717] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-29 01:08:08,718] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
