[2020-07-28 18:02:55,470] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 18:02:55,473] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 18:02:55,474] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 18:02:55,474] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 18:04:44,530] DEBUG [Controller id=0] Delete topics listener fired for topics database.APPS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:04:44,531] INFO [Controller id=0] Starting topic deletion for topics database.APPS (kafka.controller.KafkaController)
[2020-07-28 18:04:44,531] INFO [Topic Deletion Manager 0] Handling deletion for topics database.APPS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,531] INFO [Topic Deletion Manager 0] Deletion of topic database.APPS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,537] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database.APPS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:04:44,537] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database.APPS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:04:44,538] DEBUG [Controller id=0] Delete topics listener fired for topics database.APPS,database.PUBLIC.APPS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:04:44,539] INFO [Controller id=0] Starting topic deletion for topics database.APPS,database.PUBLIC.APPS (kafka.controller.KafkaController)
[2020-07-28 18:04:44,539] INFO [Topic Deletion Manager 0] Handling deletion for topics database.APPS,database.PUBLIC.APPS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,539] INFO [Topic Deletion Manager 0] Deletion of topic database.PUBLIC.APPS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,550] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database.PUBLIC.APPS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:04:44,550] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database.PUBLIC.APPS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:04:44,557] DEBUG [Controller id=0] Delete topics listener fired for topics database.PUBLIC.APPS,database.apps,database.services,databaseAPPS,database.APPS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:04:44,557] INFO [Controller id=0] Starting topic deletion for topics database.PUBLIC.APPS,database.apps,database.services,databaseAPPS,database.APPS (kafka.controller.KafkaController)
[2020-07-28 18:04:44,557] INFO [Topic Deletion Manager 0] Handling deletion for topics database.PUBLIC.APPS,database.apps,database.services,databaseAPPS,database.APPS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,557] INFO [Topic Deletion Manager 0] Deletion of topic database.apps (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,558] INFO [Topic Deletion Manager 0] Deletion of topic database.services (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,558] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPPS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,573] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseAPPS,Partition=0,Replica=0],false),StopReplicaRequestInfo([Topic=database.services,Partition=0,Replica=0],false),StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:04:44,573] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseAPPS,Partition=0,Replica=0],true),StopReplicaRequestInfo([Topic=database.services,Partition=0,Replica=0],true),StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:04:44,577] DEBUG [Controller id=0] Delete topics listener fired for topics database.PUBLIC.APPS,databaseCOMPONENT_TYPES,databaseAPP_SERVICES,database.apps,database.services,databaseAPPS,database.APPS,databaseCONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:04:44,577] INFO [Controller id=0] Starting topic deletion for topics database.PUBLIC.APPS,databaseCOMPONENT_TYPES,databaseAPP_SERVICES,database.apps,database.services,databaseAPPS,database.APPS,databaseCONDITIONS (kafka.controller.KafkaController)
[2020-07-28 18:04:44,577] INFO [Topic Deletion Manager 0] Handling deletion for topics database.PUBLIC.APPS,databaseCOMPONENT_TYPES,databaseAPP_SERVICES,database.apps,database.services,databaseAPPS,database.APPS,databaseCONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,577] INFO [Topic Deletion Manager 0] Deletion of topic databaseCOMPONENT_TYPES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,578] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPP_SERVICES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,578] INFO [Topic Deletion Manager 0] Deletion of topic databaseCONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,588] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseCOMPONENT_TYPES,Partition=0,Replica=0],false),StopReplicaRequestInfo([Topic=databaseCONDITIONS,Partition=0,Replica=0],false),StopReplicaRequestInfo([Topic=databaseAPP_SERVICES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:04:44,588] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseCOMPONENT_TYPES,Partition=0,Replica=0],true),StopReplicaRequestInfo([Topic=databaseCONDITIONS,Partition=0,Replica=0],true),StopReplicaRequestInfo([Topic=databaseAPP_SERVICES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:04:44,589] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database.APPS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:04:44,589] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database.APPS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,589] INFO [Topic Deletion Manager 0] Handling deletion for topics database.PUBLIC.APPS,databaseCOMPONENT_TYPES,databaseAPP_SERVICES,database.apps,database.services,databaseAPPS,database.APPS,databaseCONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,637] INFO [Topic Deletion Manager 0] Deletion of topic database.APPS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,639] DEBUG [Controller id=0] Delete topics listener fired for topics databaseHOST_RULES,database.PUBLIC.APPS,databaseHOST_RULE_CONDITIONS,databaseCOMPONENT_TYPES,databaseSERVICE_RULES,databaseSERVICES,databaseFIELDS,databaseOPERATORS,databaseSERVICE_DEPENDENCIES,databaseAPP_SERVICES,database.apps,databaseEDGE_HOSTS,databaseDECISIONS,databaseREGIONS,database.services,databaseLOGGING_EVENT,databaseAPPS,databaseCONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:04:44,639] INFO [Controller id=0] Starting topic deletion for topics databaseHOST_RULES,database.PUBLIC.APPS,databaseHOST_RULE_CONDITIONS,databaseCOMPONENT_TYPES,databaseSERVICE_RULES,databaseSERVICES,databaseFIELDS,databaseOPERATORS,databaseSERVICE_DEPENDENCIES,databaseAPP_SERVICES,database.apps,databaseEDGE_HOSTS,databaseDECISIONS,databaseREGIONS,database.services,databaseLOGGING_EVENT,databaseAPPS,databaseCONDITIONS (kafka.controller.KafkaController)
[2020-07-28 18:04:44,639] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseHOST_RULES,database.PUBLIC.APPS,databaseHOST_RULE_CONDITIONS,databaseCOMPONENT_TYPES,databaseSERVICE_RULES,databaseSERVICES,databaseFIELDS,databaseOPERATORS,databaseSERVICE_DEPENDENCIES,databaseAPP_SERVICES,database.apps,databaseEDGE_HOSTS,databaseDECISIONS,databaseREGIONS,database.services,databaseLOGGING_EVENT,databaseAPPS,databaseCONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,639] INFO [Topic Deletion Manager 0] Deletion of topic databaseHOST_RULES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,639] INFO [Topic Deletion Manager 0] Deletion of topic databaseHOST_RULE_CONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,639] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICE_RULES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,639] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,640] INFO [Topic Deletion Manager 0] Deletion of topic databaseFIELDS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,640] INFO [Topic Deletion Manager 0] Deletion of topic databaseOPERATORS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,640] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICE_DEPENDENCIES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,640] INFO [Topic Deletion Manager 0] Deletion of topic databaseEDGE_HOSTS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,640] INFO [Topic Deletion Manager 0] Deletion of topic databaseDECISIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,640] INFO [Topic Deletion Manager 0] Deletion of topic databaseREGIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,640] INFO [Topic Deletion Manager 0] Deletion of topic databaseLOGGING_EVENT (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,663] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICE_RULES,Partition=0,Replica=0],false),StopReplicaRequestInfo([Topic=databaseFIELDS,Partition=0,Replica=0],false),StopReplicaRequestInfo([Topic=databaseSERVICE_DEPENDENCIES,Partition=0,Replica=0],false),StopReplicaRequestInfo([Topic=databaseEDGE_HOSTS,Partition=0,Replica=0],false),StopReplicaRequestInfo([Topic=databaseLOGGING_EVENT,Partition=0,Replica=0],false),StopReplicaRequestInfo([Topic=databaseHOST_RULES,Partition=0,Replica=0],false),StopReplicaRequestInfo([Topic=databaseREGIONS,Partition=0,Replica=0],false),StopReplicaRequestInfo([Topic=databaseOPERATORS,Partition=0,Replica=0],false),StopReplicaRequestInfo([Topic=databaseHOST_RULE_CONDITIONS,Partition=0,Replica=0],false),StopReplicaRequestInfo([Topic=databaseSERVICES,Partition=0,Replica=0],false),StopReplicaRequestInfo([Topic=databaseDECISIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:04:44,664] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICE_RULES,Partition=0,Replica=0],true),StopReplicaRequestInfo([Topic=databaseFIELDS,Partition=0,Replica=0],true),StopReplicaRequestInfo([Topic=databaseSERVICE_DEPENDENCIES,Partition=0,Replica=0],true),StopReplicaRequestInfo([Topic=databaseEDGE_HOSTS,Partition=0,Replica=0],true),StopReplicaRequestInfo([Topic=databaseLOGGING_EVENT,Partition=0,Replica=0],true),StopReplicaRequestInfo([Topic=databaseHOST_RULES,Partition=0,Replica=0],true),StopReplicaRequestInfo([Topic=databaseREGIONS,Partition=0,Replica=0],true),StopReplicaRequestInfo([Topic=databaseOPERATORS,Partition=0,Replica=0],true),StopReplicaRequestInfo([Topic=databaseHOST_RULE_CONDITIONS,Partition=0,Replica=0],true),StopReplicaRequestInfo([Topic=databaseSERVICES,Partition=0,Replica=0],true),StopReplicaRequestInfo([Topic=databaseDECISIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:04:44,664] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database.PUBLIC.APPS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:04:44,664] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database.PUBLIC.APPS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,665] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseHOST_RULES,database.PUBLIC.APPS,databaseHOST_RULE_CONDITIONS,databaseCOMPONENT_TYPES,databaseSERVICE_RULES,databaseSERVICES,databaseFIELDS,databaseOPERATORS,databaseSERVICE_DEPENDENCIES,databaseAPP_SERVICES,database.apps,databaseEDGE_HOSTS,databaseDECISIONS,databaseREGIONS,database.services,databaseLOGGING_EVENT,databaseAPPS,databaseCONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,692] INFO [Topic Deletion Manager 0] Deletion of topic database.PUBLIC.APPS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,695] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:04:44,696] DEBUG [Controller id=0] Delete topics listener fired for topics databaseHOST_RULES,databaseUSERS,databaseHOST_RULE_CONDITIONS,databaseCOMPONENT_TYPES,databaseSERVICE_RULES,databaseSERVICES,databaseFIELDS,databaseVALUE_MODES,databaseOPERATORS,databaseSERVICE_DEPENDENCIES,databaseSERVICE_RULE_CONDITIONS,databaseAPP_SERVICES,database.apps,databaseEDGE_HOSTS,databaseDECISIONS,databaseREGIONS,database.services,databaseLOGGING_EVENT,databaseAPPS,databaseCONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:04:44,696] INFO [Controller id=0] Starting topic deletion for topics databaseHOST_RULES,databaseUSERS,databaseHOST_RULE_CONDITIONS,databaseCOMPONENT_TYPES,databaseSERVICE_RULES,databaseSERVICES,databaseFIELDS,databaseVALUE_MODES,databaseOPERATORS,databaseSERVICE_DEPENDENCIES,databaseSERVICE_RULE_CONDITIONS,databaseAPP_SERVICES,database.apps,databaseEDGE_HOSTS,databaseDECISIONS,databaseREGIONS,database.services,databaseLOGGING_EVENT,databaseAPPS,databaseCONDITIONS (kafka.controller.KafkaController)
[2020-07-28 18:04:44,696] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseHOST_RULES,databaseUSERS,databaseHOST_RULE_CONDITIONS,databaseCOMPONENT_TYPES,databaseSERVICE_RULES,databaseSERVICES,databaseFIELDS,databaseVALUE_MODES,databaseOPERATORS,databaseSERVICE_DEPENDENCIES,databaseSERVICE_RULE_CONDITIONS,databaseAPP_SERVICES,database.apps,databaseEDGE_HOSTS,databaseDECISIONS,databaseREGIONS,database.services,databaseLOGGING_EVENT,databaseAPPS,databaseCONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,697] INFO [Topic Deletion Manager 0] Deletion of topic databaseUSERS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,697] INFO [Topic Deletion Manager 0] Deletion of topic databaseVALUE_MODES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,697] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICE_RULE_CONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,709] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICE_RULE_CONDITIONS,Partition=0,Replica=0],false),StopReplicaRequestInfo([Topic=databaseUSERS,Partition=0,Replica=0],false),StopReplicaRequestInfo([Topic=databaseVALUE_MODES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:04:44,709] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICE_RULE_CONDITIONS,Partition=0,Replica=0],true),StopReplicaRequestInfo([Topic=databaseUSERS,Partition=0,Replica=0],true),StopReplicaRequestInfo([Topic=databaseVALUE_MODES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:04:44,710] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database.apps-0 -> NONE, database.services-0 -> NONE, databaseAPPS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:04:44,710] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database.apps,Partition=0,Replica=0],[Topic=database.services,Partition=0,Replica=0],[Topic=databaseAPPS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,711] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseHOST_RULES,databaseUSERS,databaseHOST_RULE_CONDITIONS,databaseCOMPONENT_TYPES,databaseSERVICE_RULES,databaseSERVICES,databaseFIELDS,databaseVALUE_MODES,databaseOPERATORS,databaseSERVICE_DEPENDENCIES,databaseSERVICE_RULE_CONDITIONS,databaseAPP_SERVICES,database.apps,databaseEDGE_HOSTS,databaseDECISIONS,databaseREGIONS,database.services,databaseLOGGING_EVENT,databaseAPPS,databaseCONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,741] INFO [Topic Deletion Manager 0] Deletion of topic database.apps successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,765] INFO [Topic Deletion Manager 0] Deletion of topic database.services successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,794] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPPS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,795] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseCONDITIONS-0 -> NONE, databaseCOMPONENT_TYPES-0 -> NONE, databaseAPP_SERVICES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:04:44,795] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseCONDITIONS,Partition=0,Replica=0],[Topic=databaseCOMPONENT_TYPES,Partition=0,Replica=0],[Topic=databaseAPP_SERVICES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,795] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseHOST_RULES,databaseUSERS,databaseHOST_RULE_CONDITIONS,databaseCOMPONENT_TYPES,databaseSERVICE_RULES,databaseSERVICES,databaseFIELDS,databaseVALUE_MODES,databaseOPERATORS,databaseSERVICE_DEPENDENCIES,databaseSERVICE_RULE_CONDITIONS,databaseAPP_SERVICES,databaseEDGE_HOSTS,databaseDECISIONS,databaseREGIONS,databaseLOGGING_EVENT,databaseCONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,829] INFO [Topic Deletion Manager 0] Deletion of topic databaseCOMPONENT_TYPES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,849] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPP_SERVICES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,883] INFO [Topic Deletion Manager 0] Deletion of topic databaseCONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,888] INFO [Controller id=0] New topics: [Set(database.apps)], deleted topics: [Set()], new partition replica assignment [Map(database.apps-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:44,888] INFO [Controller id=0] New partition creation callback for database.apps-0 (kafka.controller.KafkaController)
[2020-07-28 18:04:44,899] DEBUG [Controller id=0] Delete topics listener fired for topics databaseHOST_RULES,databaseUSERS,databaseHOST_RULE_CONDITIONS,databaseSERVICE_RULES,databaseSERVICES,databaseFIELDS,databaseVALUE_MODES,databaseOPERATORS,databaseSERVICE_DEPENDENCIES,databaseSERVICE_RULE_CONDITIONS,databaseEDGE_HOSTS,databaseDECISIONS,databaseREGIONS,databaseLOGGING_EVENT to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:04:44,899] INFO [Controller id=0] Starting topic deletion for topics databaseHOST_RULES,databaseUSERS,databaseHOST_RULE_CONDITIONS,databaseSERVICE_RULES,databaseSERVICES,databaseFIELDS,databaseVALUE_MODES,databaseOPERATORS,databaseSERVICE_DEPENDENCIES,databaseSERVICE_RULE_CONDITIONS,databaseEDGE_HOSTS,databaseDECISIONS,databaseREGIONS,databaseLOGGING_EVENT (kafka.controller.KafkaController)
[2020-07-28 18:04:44,899] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseHOST_RULES,databaseUSERS,databaseHOST_RULE_CONDITIONS,databaseSERVICE_RULES,databaseSERVICES,databaseFIELDS,databaseVALUE_MODES,databaseOPERATORS,databaseSERVICE_DEPENDENCIES,databaseSERVICE_RULE_CONDITIONS,databaseEDGE_HOSTS,databaseDECISIONS,databaseREGIONS,databaseLOGGING_EVENT (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,900] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:04:44,911] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseHOST_RULES-0 -> NONE, databaseFIELDS-0 -> NONE, databaseHOST_RULE_CONDITIONS-0 -> NONE, databaseSERVICE_RULES-0 -> NONE, databaseREGIONS-0 -> NONE, databaseSERVICES-0 -> NONE, databaseLOGGING_EVENT-0 -> NONE, databaseOPERATORS-0 -> NONE, databaseSERVICE_DEPENDENCIES-0 -> NONE, databaseDECISIONS-0 -> NONE, databaseEDGE_HOSTS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:04:44,911] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseHOST_RULES,Partition=0,Replica=0],[Topic=databaseSERVICES,Partition=0,Replica=0],[Topic=databaseHOST_RULE_CONDITIONS,Partition=0,Replica=0],[Topic=databaseLOGGING_EVENT,Partition=0,Replica=0],[Topic=databaseREGIONS,Partition=0,Replica=0],[Topic=databaseDECISIONS,Partition=0,Replica=0],[Topic=databaseFIELDS,Partition=0,Replica=0],[Topic=databaseSERVICE_RULES,Partition=0,Replica=0],[Topic=databaseOPERATORS,Partition=0,Replica=0],[Topic=databaseSERVICE_DEPENDENCIES,Partition=0,Replica=0],[Topic=databaseEDGE_HOSTS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,912] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseHOST_RULES,databaseUSERS,databaseHOST_RULE_CONDITIONS,databaseSERVICE_RULES,databaseSERVICES,databaseFIELDS,databaseVALUE_MODES,databaseOPERATORS,databaseSERVICE_DEPENDENCIES,databaseSERVICE_RULE_CONDITIONS,databaseEDGE_HOSTS,databaseDECISIONS,databaseREGIONS,databaseLOGGING_EVENT (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,943] INFO [Topic Deletion Manager 0] Deletion of topic databaseHOST_RULES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,960] INFO [Topic Deletion Manager 0] Deletion of topic databaseHOST_RULE_CONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:44,989] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICE_RULES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:45,007] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:45,021] INFO [Topic Deletion Manager 0] Deletion of topic databaseFIELDS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:45,034] INFO [Topic Deletion Manager 0] Deletion of topic databaseOPERATORS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:45,064] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICE_DEPENDENCIES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:45,093] INFO [Topic Deletion Manager 0] Deletion of topic databaseEDGE_HOSTS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:45,108] INFO [Topic Deletion Manager 0] Deletion of topic databaseDECISIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:45,123] INFO [Topic Deletion Manager 0] Deletion of topic databaseREGIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:45,142] INFO [Topic Deletion Manager 0] Deletion of topic databaseLOGGING_EVENT successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:45,144] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:04:45,146] DEBUG [Controller id=0] Delete topics listener fired for topics databaseVALUE_MODES,databaseSERVICE_RULE_CONDITIONS,databaseUSERS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:04:45,146] INFO [Controller id=0] Starting topic deletion for topics databaseVALUE_MODES,databaseSERVICE_RULE_CONDITIONS,databaseUSERS (kafka.controller.KafkaController)
[2020-07-28 18:04:45,146] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseSERVICE_RULE_CONDITIONS,databaseUSERS,databaseVALUE_MODES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:45,146] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseUSERS-0 -> NONE, databaseVALUE_MODES-0 -> NONE, databaseSERVICE_RULE_CONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:04:45,147] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseUSERS,Partition=0,Replica=0],[Topic=databaseVALUE_MODES,Partition=0,Replica=0],[Topic=databaseSERVICE_RULE_CONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:45,147] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseSERVICE_RULE_CONDITIONS,databaseUSERS,databaseVALUE_MODES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:45,179] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICE_RULE_CONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:45,206] INFO [Topic Deletion Manager 0] Deletion of topic databaseUSERS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:45,222] INFO [Topic Deletion Manager 0] Deletion of topic databaseVALUE_MODES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:04:45,224] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:04:45,225] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:04:45,959] INFO [Controller id=0] New topics: [Set(databaseHOST_RULES)], deleted topics: [Set()], new partition replica assignment [Map(databaseHOST_RULES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:45,959] INFO [Controller id=0] New partition creation callback for databaseHOST_RULES-0 (kafka.controller.KafkaController)
[2020-07-28 18:04:45,972] INFO [Controller id=0] New topics: [Set(databaseUSERS)], deleted topics: [Set()], new partition replica assignment [Map(databaseUSERS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:45,972] INFO [Controller id=0] New partition creation callback for databaseUSERS-0 (kafka.controller.KafkaController)
[2020-07-28 18:04:45,999] INFO [Controller id=0] New topics: [Set(databaseHOST_RULE_CONDITIONS)], deleted topics: [Set()], new partition replica assignment [Map(databaseHOST_RULE_CONDITIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:45,999] INFO [Controller id=0] New partition creation callback for databaseHOST_RULE_CONDITIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:04:46,013] INFO [Controller id=0] New topics: [Set(databaseCOMPONENT_TYPES)], deleted topics: [Set()], new partition replica assignment [Map(databaseCOMPONENT_TYPES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:46,013] INFO [Controller id=0] New partition creation callback for databaseCOMPONENT_TYPES-0 (kafka.controller.KafkaController)
[2020-07-28 18:04:46,025] INFO [Controller id=0] New topics: [Set(databaseSERVICE_RULES)], deleted topics: [Set()], new partition replica assignment [Map(databaseSERVICE_RULES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:46,025] INFO [Controller id=0] New partition creation callback for databaseSERVICE_RULES-0 (kafka.controller.KafkaController)
[2020-07-28 18:04:46,047] INFO [Controller id=0] New topics: [Set(databaseSERVICES)], deleted topics: [Set()], new partition replica assignment [Map(databaseSERVICES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:46,047] INFO [Controller id=0] New partition creation callback for databaseSERVICES-0 (kafka.controller.KafkaController)
[2020-07-28 18:04:46,070] INFO [Controller id=0] New topics: [Set(databaseFIELDS)], deleted topics: [Set()], new partition replica assignment [Map(databaseFIELDS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:46,070] INFO [Controller id=0] New partition creation callback for databaseFIELDS-0 (kafka.controller.KafkaController)
[2020-07-28 18:04:46,082] INFO [Controller id=0] New topics: [Set(databaseVALUE_MODES)], deleted topics: [Set()], new partition replica assignment [Map(databaseVALUE_MODES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:46,082] INFO [Controller id=0] New partition creation callback for databaseVALUE_MODES-0 (kafka.controller.KafkaController)
[2020-07-28 18:04:46,096] INFO [Controller id=0] New topics: [Set(databaseOPERATORS)], deleted topics: [Set()], new partition replica assignment [Map(databaseOPERATORS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:46,096] INFO [Controller id=0] New partition creation callback for databaseOPERATORS-0 (kafka.controller.KafkaController)
[2020-07-28 18:04:46,119] INFO [Controller id=0] New topics: [Set(databaseSERVICE_DEPENDENCIES)], deleted topics: [Set()], new partition replica assignment [Map(databaseSERVICE_DEPENDENCIES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:46,119] INFO [Controller id=0] New partition creation callback for databaseSERVICE_DEPENDENCIES-0 (kafka.controller.KafkaController)
[2020-07-28 18:04:46,135] INFO [Controller id=0] New topics: [Set(databaseSERVICE_RULE_CONDITIONS)], deleted topics: [Set()], new partition replica assignment [Map(databaseSERVICE_RULE_CONDITIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:46,135] INFO [Controller id=0] New partition creation callback for databaseSERVICE_RULE_CONDITIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:04:46,147] INFO [Controller id=0] New topics: [Set(databaseAPP_SERVICES)], deleted topics: [Set()], new partition replica assignment [Map(databaseAPP_SERVICES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:46,147] INFO [Controller id=0] New partition creation callback for databaseAPP_SERVICES-0 (kafka.controller.KafkaController)
[2020-07-28 18:04:46,168] INFO [Controller id=0] New topics: [Set(databaseEDGE_HOSTS)], deleted topics: [Set()], new partition replica assignment [Map(databaseEDGE_HOSTS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:46,168] INFO [Controller id=0] New partition creation callback for databaseEDGE_HOSTS-0 (kafka.controller.KafkaController)
[2020-07-28 18:04:46,188] INFO [Controller id=0] New topics: [Set(databaseDECISIONS)], deleted topics: [Set()], new partition replica assignment [Map(databaseDECISIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:46,188] INFO [Controller id=0] New partition creation callback for databaseDECISIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:04:46,200] INFO [Controller id=0] New topics: [Set(databaseREGIONS)], deleted topics: [Set()], new partition replica assignment [Map(databaseREGIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:46,200] INFO [Controller id=0] New partition creation callback for databaseREGIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:04:46,218] INFO [Controller id=0] New topics: [Set(databaseLOGGING_EVENT)], deleted topics: [Set()], new partition replica assignment [Map(databaseLOGGING_EVENT-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:46,218] INFO [Controller id=0] New partition creation callback for databaseLOGGING_EVENT-0 (kafka.controller.KafkaController)
[2020-07-28 18:04:46,238] INFO [Controller id=0] New topics: [Set(databaseAPPS)], deleted topics: [Set()], new partition replica assignment [Map(databaseAPPS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:46,238] INFO [Controller id=0] New partition creation callback for databaseAPPS-0 (kafka.controller.KafkaController)
[2020-07-28 18:04:46,251] INFO [Controller id=0] New topics: [Set(databaseCONDITIONS)], deleted topics: [Set()], new partition replica assignment [Map(databaseCONDITIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:04:46,251] INFO [Controller id=0] New partition creation callback for databaseCONDITIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:05:33,220] DEBUG [Controller id=0] Delete topics listener fired for topics customers to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:05:33,220] INFO [Controller id=0] Starting topic deletion for topics customers (kafka.controller.KafkaController)
[2020-07-28 18:05:33,220] INFO [Topic Deletion Manager 0] Handling deletion for topics customers (kafka.controller.TopicDeletionManager)
[2020-07-28 18:05:33,220] INFO [Topic Deletion Manager 0] Deletion of topic customers (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:05:33,224] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=customers,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:05:33,224] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=customers,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:05:33,242] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(customers-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:05:33,242] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=customers,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:05:33,243] INFO [Topic Deletion Manager 0] Handling deletion for topics customers (kafka.controller.TopicDeletionManager)
[2020-07-28 18:05:33,267] INFO [Topic Deletion Manager 0] Deletion of topic customers successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:05:33,268] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:05:33,269] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:06:01,721] DEBUG [Controller id=0] Delete topics listener fired for topics database.apps to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:06:01,722] INFO [Controller id=0] Starting topic deletion for topics database.apps (kafka.controller.KafkaController)
[2020-07-28 18:06:01,722] INFO [Topic Deletion Manager 0] Handling deletion for topics database.apps (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:01,722] INFO [Topic Deletion Manager 0] Deletion of topic database.apps (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:01,725] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:06:01,725] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:06:01,737] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database.apps-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:06:01,737] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database.apps,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:01,737] INFO [Topic Deletion Manager 0] Handling deletion for topics database.apps (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:01,757] INFO [Topic Deletion Manager 0] Deletion of topic database.apps successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:01,758] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:06:01,759] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:06:01,857] INFO [Controller id=0] New topics: [Set(database.apps)], deleted topics: [Set()], new partition replica assignment [Map(database.apps-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:06:01,857] INFO [Controller id=0] New partition creation callback for database.apps-0 (kafka.controller.KafkaController)
[2020-07-28 18:06:14,218] DEBUG [Controller id=0] Delete topics listener fired for topics messages to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:06:14,218] INFO [Controller id=0] Starting topic deletion for topics messages (kafka.controller.KafkaController)
[2020-07-28 18:06:14,218] INFO [Topic Deletion Manager 0] Handling deletion for topics messages (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:14,218] INFO [Topic Deletion Manager 0] Deletion of topic messages (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:14,221] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=messages,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:06:14,221] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=messages,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:06:14,223] DEBUG [Controller id=0] Delete topics listener fired for topics messages,messages.DLT to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:06:14,223] INFO [Controller id=0] Starting topic deletion for topics messages,messages.DLT (kafka.controller.KafkaController)
[2020-07-28 18:06:14,223] INFO [Topic Deletion Manager 0] Handling deletion for topics messages.DLT,messages (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:14,223] INFO [Topic Deletion Manager 0] Deletion of topic messages.DLT (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:14,229] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=messages.DLT,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:06:14,229] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=messages.DLT,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:06:14,235] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(messages-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:06:14,235] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=messages,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:14,236] INFO [Topic Deletion Manager 0] Handling deletion for topics messages.DLT,messages (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:14,266] INFO [Topic Deletion Manager 0] Deletion of topic messages successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:14,267] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:06:14,267] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(messages.DLT-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:06:14,267] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=messages.DLT,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:14,268] INFO [Topic Deletion Manager 0] Handling deletion for topics messages.DLT (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:14,285] INFO [Topic Deletion Manager 0] Deletion of topic messages.DLT successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:14,286] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:06:14,287] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:06:30,136] DEBUG [Controller id=0] Delete topics listener fired for topics databaseAPPS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:06:30,136] INFO [Controller id=0] Starting topic deletion for topics databaseAPPS (kafka.controller.KafkaController)
[2020-07-28 18:06:30,136] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseAPPS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:30,136] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPPS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:30,141] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseAPPS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:06:30,141] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseAPPS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:06:30,162] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseAPPS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:06:30,163] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseAPPS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:30,163] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseAPPS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:30,187] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPPS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:30,188] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:06:30,188] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:06:30,962] INFO [Controller id=0] New topics: [Set(databaseAPPS)], deleted topics: [Set()], new partition replica assignment [Map(databaseAPPS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:06:30,962] INFO [Controller id=0] New partition creation callback for databaseAPPS-0 (kafka.controller.KafkaController)
[2020-07-28 18:06:38,500] DEBUG [Controller id=0] Delete topics listener fired for topics databaseAPP_SERVICES to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:06:38,500] INFO [Controller id=0] Starting topic deletion for topics databaseAPP_SERVICES (kafka.controller.KafkaController)
[2020-07-28 18:06:38,500] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseAPP_SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:38,500] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPP_SERVICES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:38,504] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseAPP_SERVICES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:06:38,504] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseAPP_SERVICES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:06:38,525] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseAPP_SERVICES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:06:38,525] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseAPP_SERVICES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:38,525] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseAPP_SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:38,548] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPP_SERVICES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:06:38,549] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:06:38,550] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:06:41,056] INFO [Controller id=0] New topics: [Set(databaseAPP_SERVICES)], deleted topics: [Set()], new partition replica assignment [Map(databaseAPP_SERVICES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:06:41,056] INFO [Controller id=0] New partition creation callback for databaseAPP_SERVICES-0 (kafka.controller.KafkaController)
[2020-07-28 18:07:55,474] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 18:07:55,476] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 18:07:55,477] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 18:07:55,477] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 18:09:44,030] DEBUG [Controller id=0] Delete topics listener fired for topics worker-manager-worker1.DLT to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:09:44,031] INFO [Controller id=0] Starting topic deletion for topics worker-manager-worker1.DLT (kafka.controller.KafkaController)
[2020-07-28 18:09:44,031] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager-worker1.DLT (kafka.controller.TopicDeletionManager)
[2020-07-28 18:09:44,031] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager-worker1.DLT (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:09:44,036] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-worker1.DLT,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:09:44,036] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-worker1.DLT,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:09:44,050] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(worker-manager-worker1.DLT-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:09:44,050] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=worker-manager-worker1.DLT,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:09:44,051] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager-worker1.DLT (kafka.controller.TopicDeletionManager)
[2020-07-28 18:09:44,066] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager-worker1.DLT successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:09:44,067] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:09:44,067] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:10:03,422] DEBUG [Controller id=0] Delete topics listener fired for topics databaseVALUE_MODES to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:10:03,422] INFO [Controller id=0] Starting topic deletion for topics databaseVALUE_MODES (kafka.controller.KafkaController)
[2020-07-28 18:10:03,422] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseVALUE_MODES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:10:03,422] INFO [Topic Deletion Manager 0] Deletion of topic databaseVALUE_MODES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:10:03,427] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseVALUE_MODES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:10:03,427] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseVALUE_MODES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:10:03,448] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseVALUE_MODES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:10:03,448] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseVALUE_MODES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:10:03,448] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseVALUE_MODES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:10:03,462] INFO [Topic Deletion Manager 0] Deletion of topic databaseVALUE_MODES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:10:03,463] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:10:03,463] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:10:06,237] INFO [Controller id=0] New topics: [Set(databaseVALUE_MODES)], deleted topics: [Set()], new partition replica assignment [Map(databaseVALUE_MODES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:10:06,237] INFO [Controller id=0] New partition creation callback for databaseVALUE_MODES-0 (kafka.controller.KafkaController)
[2020-07-28 18:10:56,251] DEBUG [Controller id=0] Delete topics listener fired for topics database.apps to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:10:56,251] INFO [Controller id=0] Starting topic deletion for topics database.apps (kafka.controller.KafkaController)
[2020-07-28 18:10:56,252] INFO [Topic Deletion Manager 0] Handling deletion for topics database.apps (kafka.controller.TopicDeletionManager)
[2020-07-28 18:10:56,252] INFO [Topic Deletion Manager 0] Deletion of topic database.apps (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:10:56,257] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:10:56,257] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:10:56,276] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database.apps-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:10:56,276] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database.apps,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:10:56,276] INFO [Topic Deletion Manager 0] Handling deletion for topics database.apps (kafka.controller.TopicDeletionManager)
[2020-07-28 18:10:56,289] INFO [Topic Deletion Manager 0] Deletion of topic database.apps successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:10:56,290] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:10:56,291] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:10:56,391] INFO [Controller id=0] New topics: [Set(database.apps)], deleted topics: [Set()], new partition replica assignment [Map(database.apps-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:10:56,391] INFO [Controller id=0] New partition creation callback for database.apps-0 (kafka.controller.KafkaController)
[2020-07-28 18:11:12,065] DEBUG [Controller id=0] Delete topics listener fired for topics database.apps to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:11:12,065] INFO [Controller id=0] Starting topic deletion for topics database.apps (kafka.controller.KafkaController)
[2020-07-28 18:11:12,065] INFO [Topic Deletion Manager 0] Handling deletion for topics database.apps (kafka.controller.TopicDeletionManager)
[2020-07-28 18:11:12,065] INFO [Topic Deletion Manager 0] Deletion of topic database.apps (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:11:12,068] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:11:12,069] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:11:12,090] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database.apps-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:11:12,090] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database.apps,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:11:12,091] INFO [Topic Deletion Manager 0] Handling deletion for topics database.apps (kafka.controller.TopicDeletionManager)
[2020-07-28 18:11:12,117] INFO [Topic Deletion Manager 0] Deletion of topic database.apps successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:11:12,118] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:11:12,119] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:11:12,213] INFO [Controller id=0] New topics: [Set(database.apps)], deleted topics: [Set()], new partition replica assignment [Map(database.apps-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:11:12,213] INFO [Controller id=0] New partition creation callback for database.apps-0 (kafka.controller.KafkaController)
[2020-07-28 18:11:54,018] DEBUG [Controller id=0] Delete topics listener fired for topics database.apps to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:11:54,018] INFO [Controller id=0] Starting topic deletion for topics database.apps (kafka.controller.KafkaController)
[2020-07-28 18:11:54,018] INFO [Topic Deletion Manager 0] Handling deletion for topics database.apps (kafka.controller.TopicDeletionManager)
[2020-07-28 18:11:54,018] INFO [Topic Deletion Manager 0] Deletion of topic database.apps (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:11:54,021] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:11:54,021] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:11:54,032] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database.apps-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:11:54,032] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database.apps,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:11:54,033] INFO [Topic Deletion Manager 0] Handling deletion for topics database.apps (kafka.controller.TopicDeletionManager)
[2020-07-28 18:11:54,054] INFO [Topic Deletion Manager 0] Deletion of topic database.apps successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:11:54,056] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:11:54,056] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:11:54,153] INFO [Controller id=0] New topics: [Set(database.apps)], deleted topics: [Set()], new partition replica assignment [Map(database.apps-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:11:54,153] INFO [Controller id=0] New partition creation callback for database.apps-0 (kafka.controller.KafkaController)
[2020-07-28 18:12:48,770] DEBUG [Controller id=0] Delete topics listener fired for topics database.apps to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:12:48,770] INFO [Controller id=0] Starting topic deletion for topics database.apps (kafka.controller.KafkaController)
[2020-07-28 18:12:48,770] INFO [Topic Deletion Manager 0] Handling deletion for topics database.apps (kafka.controller.TopicDeletionManager)
[2020-07-28 18:12:48,770] INFO [Topic Deletion Manager 0] Deletion of topic database.apps (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:12:48,775] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:12:48,775] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:12:48,787] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database.apps-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:12:48,787] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database.apps,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:12:48,787] INFO [Topic Deletion Manager 0] Handling deletion for topics database.apps (kafka.controller.TopicDeletionManager)
[2020-07-28 18:12:48,806] INFO [Topic Deletion Manager 0] Deletion of topic database.apps successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:12:48,807] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:12:48,807] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:12:48,908] INFO [Controller id=0] New topics: [Set(database.apps)], deleted topics: [Set()], new partition replica assignment [Map(database.apps-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:12:48,908] INFO [Controller id=0] New partition creation callback for database.apps-0 (kafka.controller.KafkaController)
[2020-07-28 18:12:53,615] DEBUG [Controller id=0] Delete topics listener fired for topics databaseAPPS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:12:53,615] INFO [Controller id=0] Starting topic deletion for topics databaseAPPS (kafka.controller.KafkaController)
[2020-07-28 18:12:53,615] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseAPPS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:12:53,615] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPPS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:12:53,619] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseAPPS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:12:53,619] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseAPPS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:12:53,641] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseAPPS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:12:53,641] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseAPPS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:12:53,641] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseAPPS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:12:53,664] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPPS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:12:53,665] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:12:53,666] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:12:55,477] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 18:12:55,477] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 18:12:55,478] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 18:12:55,478] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 18:12:55,988] INFO [Controller id=0] New topics: [Set(databaseAPPS)], deleted topics: [Set()], new partition replica assignment [Map(databaseAPPS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:12:55,988] INFO [Controller id=0] New partition creation callback for databaseAPPS-0 (kafka.controller.KafkaController)
[2020-07-28 18:13:01,182] DEBUG [Controller id=0] Delete topics listener fired for topics databaseAPP_SERVICES to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:13:01,182] INFO [Controller id=0] Starting topic deletion for topics databaseAPP_SERVICES (kafka.controller.KafkaController)
[2020-07-28 18:13:01,182] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseAPP_SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:13:01,182] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPP_SERVICES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:13:01,186] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseAPP_SERVICES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:13:01,186] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseAPP_SERVICES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:13:01,202] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseAPP_SERVICES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:13:01,202] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseAPP_SERVICES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:13:01,203] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseAPP_SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:13:01,226] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPP_SERVICES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:13:01,227] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:13:01,228] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:13:06,076] INFO [Controller id=0] New topics: [Set(databaseAPP_SERVICES)], deleted topics: [Set()], new partition replica assignment [Map(databaseAPP_SERVICES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:13:06,076] INFO [Controller id=0] New partition creation callback for databaseAPP_SERVICES-0 (kafka.controller.KafkaController)
[2020-07-28 18:13:10,688] DEBUG [Controller id=0] Delete topics listener fired for topics databaseCOMPONENT_TYPES to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:13:10,688] INFO [Controller id=0] Starting topic deletion for topics databaseCOMPONENT_TYPES (kafka.controller.KafkaController)
[2020-07-28 18:13:10,689] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseCOMPONENT_TYPES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:13:10,689] INFO [Topic Deletion Manager 0] Deletion of topic databaseCOMPONENT_TYPES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:13:10,692] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseCOMPONENT_TYPES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:13:10,692] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseCOMPONENT_TYPES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:13:10,708] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseCOMPONENT_TYPES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:13:10,708] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseCOMPONENT_TYPES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:13:10,709] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseCOMPONENT_TYPES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:13:10,735] INFO [Topic Deletion Manager 0] Deletion of topic databaseCOMPONENT_TYPES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:13:10,736] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:13:10,737] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:13:11,092] INFO [Controller id=0] New topics: [Set(databaseCOMPONENT_TYPES)], deleted topics: [Set()], new partition replica assignment [Map(databaseCOMPONENT_TYPES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:13:11,092] INFO [Controller id=0] New partition creation callback for databaseCOMPONENT_TYPES-0 (kafka.controller.KafkaController)
[2020-07-28 18:13:17,365] DEBUG [Controller id=0] Delete topics listener fired for topics databaseCONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:13:17,365] INFO [Controller id=0] Starting topic deletion for topics databaseCONDITIONS (kafka.controller.KafkaController)
[2020-07-28 18:13:17,365] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseCONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:13:17,365] INFO [Topic Deletion Manager 0] Deletion of topic databaseCONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:13:17,371] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseCONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:13:17,371] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseCONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:13:17,389] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseCONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:13:17,389] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseCONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:13:17,389] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseCONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:13:17,401] INFO [Topic Deletion Manager 0] Deletion of topic databaseCONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:13:17,402] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:13:17,402] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:13:21,092] INFO [Controller id=0] New topics: [Set(databaseCONDITIONS)], deleted topics: [Set()], new partition replica assignment [Map(databaseCONDITIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:13:21,092] INFO [Controller id=0] New partition creation callback for databaseCONDITIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:17:55,478] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 18:17:55,480] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 18:17:55,480] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 18:17:55,480] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 18:22:55,481] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 18:22:55,482] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 18:22:55,483] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 18:22:55,483] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 18:27:55,486] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 18:27:55,487] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 18:27:55,490] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 18:27:55,490] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 18:29:11,153] DEBUG [Controller id=0] Delete topics listener fired for topics database.apps to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:29:11,154] INFO [Controller id=0] Starting topic deletion for topics database.apps (kafka.controller.KafkaController)
[2020-07-28 18:29:11,154] INFO [Topic Deletion Manager 0] Handling deletion for topics database.apps (kafka.controller.TopicDeletionManager)
[2020-07-28 18:29:11,154] INFO [Topic Deletion Manager 0] Deletion of topic database.apps (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:29:11,155] INFO [RequestSendThread controllerId=0] Controller 0 connected to daniel:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-07-28 18:29:11,161] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:29:11,161] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:29:11,178] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database.apps-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:29:11,178] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database.apps,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:29:11,178] INFO [Topic Deletion Manager 0] Handling deletion for topics database.apps (kafka.controller.TopicDeletionManager)
[2020-07-28 18:29:11,200] INFO [Topic Deletion Manager 0] Deletion of topic database.apps successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:29:11,200] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:29:11,201] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:29:11,290] INFO [Controller id=0] New topics: [Set(database.apps)], deleted topics: [Set()], new partition replica assignment [Map(database.apps-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:29:11,290] INFO [Controller id=0] New partition creation callback for database.apps-0 (kafka.controller.KafkaController)
[2020-07-28 18:29:48,229] DEBUG [Controller id=0] Delete topics listener fired for topics database.apps to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:29:48,230] INFO [Controller id=0] Starting topic deletion for topics database.apps (kafka.controller.KafkaController)
[2020-07-28 18:29:48,231] INFO [Topic Deletion Manager 0] Handling deletion for topics database.apps (kafka.controller.TopicDeletionManager)
[2020-07-28 18:29:48,231] INFO [Topic Deletion Manager 0] Deletion of topic database.apps (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:29:48,235] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:29:48,235] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:29:48,263] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database.apps-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:29:48,263] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database.apps,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:29:48,263] INFO [Topic Deletion Manager 0] Handling deletion for topics database.apps (kafka.controller.TopicDeletionManager)
[2020-07-28 18:29:48,282] INFO [Topic Deletion Manager 0] Deletion of topic database.apps successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:29:48,283] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:29:48,283] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:29:48,376] INFO [Controller id=0] New topics: [Set(database.apps)], deleted topics: [Set()], new partition replica assignment [Map(database.apps-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:29:48,377] INFO [Controller id=0] New partition creation callback for database.apps-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:24,821] DEBUG [Controller id=0] Delete topics listener fired for topics database.apps to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:24,822] INFO [Controller id=0] Starting topic deletion for topics database.apps (kafka.controller.KafkaController)
[2020-07-28 18:30:24,822] INFO [Topic Deletion Manager 0] Handling deletion for topics database.apps (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:24,822] INFO [Topic Deletion Manager 0] Deletion of topic database.apps (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:24,826] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:24,826] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:24,842] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database.apps-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:24,842] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database.apps,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:24,842] INFO [Topic Deletion Manager 0] Handling deletion for topics database.apps (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:24,865] INFO [Topic Deletion Manager 0] Deletion of topic database.apps successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:24,866] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:24,867] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:24,958] INFO [Controller id=0] New topics: [Set(database.apps)], deleted topics: [Set()], new partition replica assignment [Map(database.apps-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:30:24,958] INFO [Controller id=0] New partition creation callback for database.apps-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:26,544] DEBUG [Controller id=0] Delete topics listener fired for topics databaseAPPS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:26,545] INFO [Controller id=0] Starting topic deletion for topics databaseAPPS (kafka.controller.KafkaController)
[2020-07-28 18:30:26,545] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseAPPS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:26,545] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPPS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:26,550] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseAPPS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:26,551] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseAPPS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:26,574] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseAPPS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:26,574] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseAPPS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:26,574] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseAPPS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:26,591] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPPS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:26,592] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:26,593] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:28,333] DEBUG [Controller id=0] Delete topics listener fired for topics databaseAPP_SERVICES to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:28,333] INFO [Controller id=0] Starting topic deletion for topics databaseAPP_SERVICES (kafka.controller.KafkaController)
[2020-07-28 18:30:28,333] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseAPP_SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:28,333] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPP_SERVICES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:28,336] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseAPP_SERVICES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:28,336] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseAPP_SERVICES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:28,359] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseAPP_SERVICES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:28,359] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseAPP_SERVICES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:28,360] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseAPP_SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:28,381] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPP_SERVICES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:28,382] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:28,383] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:30,063] DEBUG [Controller id=0] Delete topics listener fired for topics databaseCOMPONENT_TYPES to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:30,063] INFO [Controller id=0] Starting topic deletion for topics databaseCOMPONENT_TYPES (kafka.controller.KafkaController)
[2020-07-28 18:30:30,063] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseCOMPONENT_TYPES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:30,063] INFO [Topic Deletion Manager 0] Deletion of topic databaseCOMPONENT_TYPES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:30,067] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseCOMPONENT_TYPES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:30,067] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseCOMPONENT_TYPES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:30,084] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseCOMPONENT_TYPES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:30,084] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseCOMPONENT_TYPES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:30,084] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseCOMPONENT_TYPES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:30,108] INFO [Topic Deletion Manager 0] Deletion of topic databaseCOMPONENT_TYPES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:30,109] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:30,110] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:31,045] INFO [Controller id=0] New topics: [Set(databaseCOMPONENT_TYPES)], deleted topics: [Set()], new partition replica assignment [Map(databaseCOMPONENT_TYPES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:30:31,045] INFO [Controller id=0] New partition creation callback for databaseCOMPONENT_TYPES-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:31,060] INFO [Controller id=0] New topics: [Set(databaseAPP_SERVICES)], deleted topics: [Set()], new partition replica assignment [Map(databaseAPP_SERVICES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:30:31,060] INFO [Controller id=0] New partition creation callback for databaseAPP_SERVICES-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:31,088] INFO [Controller id=0] New topics: [Set(databaseAPPS)], deleted topics: [Set()], new partition replica assignment [Map(databaseAPPS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:30:31,088] INFO [Controller id=0] New partition creation callback for databaseAPPS-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:31,820] DEBUG [Controller id=0] Delete topics listener fired for topics databaseCONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:31,820] INFO [Controller id=0] Starting topic deletion for topics databaseCONDITIONS (kafka.controller.KafkaController)
[2020-07-28 18:30:31,820] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseCONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:31,821] INFO [Topic Deletion Manager 0] Deletion of topic databaseCONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:31,825] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseCONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:31,826] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseCONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:31,837] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseCONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:31,837] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseCONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:31,837] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseCONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:31,858] INFO [Topic Deletion Manager 0] Deletion of topic databaseCONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:31,859] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:31,859] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:33,650] DEBUG [Controller id=0] Delete topics listener fired for topics databaseDECISIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:33,650] INFO [Controller id=0] Starting topic deletion for topics databaseDECISIONS (kafka.controller.KafkaController)
[2020-07-28 18:30:33,650] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseDECISIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:33,650] INFO [Topic Deletion Manager 0] Deletion of topic databaseDECISIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:33,656] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseDECISIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:33,656] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseDECISIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:33,671] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseDECISIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:33,672] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseDECISIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:33,672] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseDECISIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:33,688] INFO [Topic Deletion Manager 0] Deletion of topic databaseDECISIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:33,689] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:33,689] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:35,446] DEBUG [Controller id=0] Delete topics listener fired for topics databaseEDGE_HOSTS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:35,446] INFO [Controller id=0] Starting topic deletion for topics databaseEDGE_HOSTS (kafka.controller.KafkaController)
[2020-07-28 18:30:35,446] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseEDGE_HOSTS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:35,446] INFO [Topic Deletion Manager 0] Deletion of topic databaseEDGE_HOSTS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:35,451] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseEDGE_HOSTS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:35,451] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseEDGE_HOSTS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:35,468] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseEDGE_HOSTS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:35,468] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseEDGE_HOSTS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:35,468] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseEDGE_HOSTS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:35,481] INFO [Topic Deletion Manager 0] Deletion of topic databaseEDGE_HOSTS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:35,482] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:35,483] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:36,206] INFO [Controller id=0] New topics: [Set(databaseEDGE_HOSTS)], deleted topics: [Set()], new partition replica assignment [Map(databaseEDGE_HOSTS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:30:36,206] INFO [Controller id=0] New partition creation callback for databaseEDGE_HOSTS-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:36,217] INFO [Controller id=0] New topics: [Set(databaseDECISIONS)], deleted topics: [Set()], new partition replica assignment [Map(databaseDECISIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:30:36,217] INFO [Controller id=0] New partition creation callback for databaseDECISIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:36,230] INFO [Controller id=0] New topics: [Set(databaseCONDITIONS)], deleted topics: [Set()], new partition replica assignment [Map(databaseCONDITIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:30:36,230] INFO [Controller id=0] New partition creation callback for databaseCONDITIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:37,297] DEBUG [Controller id=0] Delete topics listener fired for topics databaseFIELDS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:37,297] INFO [Controller id=0] Starting topic deletion for topics databaseFIELDS (kafka.controller.KafkaController)
[2020-07-28 18:30:37,298] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseFIELDS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:37,298] INFO [Topic Deletion Manager 0] Deletion of topic databaseFIELDS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:37,302] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseFIELDS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:37,302] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseFIELDS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:37,324] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseFIELDS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:37,324] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseFIELDS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:37,325] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseFIELDS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:37,352] INFO [Topic Deletion Manager 0] Deletion of topic databaseFIELDS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:37,353] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:37,354] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:39,053] DEBUG [Controller id=0] Delete topics listener fired for topics databaseHOST_RULES to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:39,053] INFO [Controller id=0] Starting topic deletion for topics databaseHOST_RULES (kafka.controller.KafkaController)
[2020-07-28 18:30:39,053] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseHOST_RULES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:39,053] INFO [Topic Deletion Manager 0] Deletion of topic databaseHOST_RULES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:39,056] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseHOST_RULES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:39,057] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseHOST_RULES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:39,067] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseHOST_RULES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:39,067] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseHOST_RULES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:39,068] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseHOST_RULES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:39,088] INFO [Topic Deletion Manager 0] Deletion of topic databaseHOST_RULES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:39,089] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:39,090] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:40,873] DEBUG [Controller id=0] Delete topics listener fired for topics databaseHOST_RULE_CONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:40,873] INFO [Controller id=0] Starting topic deletion for topics databaseHOST_RULE_CONDITIONS (kafka.controller.KafkaController)
[2020-07-28 18:30:40,873] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseHOST_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:40,873] INFO [Topic Deletion Manager 0] Deletion of topic databaseHOST_RULE_CONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:40,876] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseHOST_RULE_CONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:40,876] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseHOST_RULE_CONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:40,895] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseHOST_RULE_CONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:40,895] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseHOST_RULE_CONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:40,895] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseHOST_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:40,918] INFO [Topic Deletion Manager 0] Deletion of topic databaseHOST_RULE_CONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:40,919] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:40,920] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:41,210] INFO [Controller id=0] New topics: [Set(databaseHOST_RULES)], deleted topics: [Set()], new partition replica assignment [Map(databaseHOST_RULES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:30:41,210] INFO [Controller id=0] New partition creation callback for databaseHOST_RULES-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:41,230] INFO [Controller id=0] New topics: [Set(databaseHOST_RULE_CONDITIONS)], deleted topics: [Set()], new partition replica assignment [Map(databaseHOST_RULE_CONDITIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:30:41,230] INFO [Controller id=0] New partition creation callback for databaseHOST_RULE_CONDITIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:41,242] INFO [Controller id=0] New topics: [Set(databaseFIELDS)], deleted topics: [Set()], new partition replica assignment [Map(databaseFIELDS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:30:41,242] INFO [Controller id=0] New partition creation callback for databaseFIELDS-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:42,681] DEBUG [Controller id=0] Delete topics listener fired for topics databaseLOGGING_EVENT to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:42,681] INFO [Controller id=0] Starting topic deletion for topics databaseLOGGING_EVENT (kafka.controller.KafkaController)
[2020-07-28 18:30:42,681] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseLOGGING_EVENT (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:42,681] INFO [Topic Deletion Manager 0] Deletion of topic databaseLOGGING_EVENT (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:42,688] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseLOGGING_EVENT,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:42,688] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseLOGGING_EVENT,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:42,717] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseLOGGING_EVENT-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:42,717] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseLOGGING_EVENT,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:42,717] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseLOGGING_EVENT (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:42,732] INFO [Topic Deletion Manager 0] Deletion of topic databaseLOGGING_EVENT successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:42,732] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:42,733] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:44,793] DEBUG [Controller id=0] Delete topics listener fired for topics databaseOPERATORS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:44,794] INFO [Controller id=0] Starting topic deletion for topics databaseOPERATORS (kafka.controller.KafkaController)
[2020-07-28 18:30:44,794] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseOPERATORS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:44,794] INFO [Topic Deletion Manager 0] Deletion of topic databaseOPERATORS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:44,798] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseOPERATORS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:44,799] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseOPERATORS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:44,813] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseOPERATORS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:44,813] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseOPERATORS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:44,813] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseOPERATORS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:44,833] INFO [Topic Deletion Manager 0] Deletion of topic databaseOPERATORS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:44,833] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:44,834] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:46,242] INFO [Controller id=0] New topics: [Set(databaseOPERATORS)], deleted topics: [Set()], new partition replica assignment [Map(databaseOPERATORS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:30:46,242] INFO [Controller id=0] New partition creation callback for databaseOPERATORS-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:46,263] INFO [Controller id=0] New topics: [Set(databaseLOGGING_EVENT)], deleted topics: [Set()], new partition replica assignment [Map(databaseLOGGING_EVENT-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:30:46,263] INFO [Controller id=0] New partition creation callback for databaseLOGGING_EVENT-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:46,623] DEBUG [Controller id=0] Delete topics listener fired for topics databaseREGIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:46,623] INFO [Controller id=0] Starting topic deletion for topics databaseREGIONS (kafka.controller.KafkaController)
[2020-07-28 18:30:46,623] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseREGIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:46,623] INFO [Topic Deletion Manager 0] Deletion of topic databaseREGIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:46,628] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseREGIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:46,628] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseREGIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:46,651] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseREGIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:46,651] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseREGIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:46,651] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseREGIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:46,663] INFO [Topic Deletion Manager 0] Deletion of topic databaseREGIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:46,664] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:46,664] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:48,381] DEBUG [Controller id=0] Delete topics listener fired for topics databaseSERVICES to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:48,381] INFO [Controller id=0] Starting topic deletion for topics databaseSERVICES (kafka.controller.KafkaController)
[2020-07-28 18:30:48,381] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseSERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:48,381] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:48,388] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:48,388] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:48,402] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseSERVICES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:48,402] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseSERVICES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:48,402] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseSERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:48,427] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:48,428] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:48,429] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:50,133] DEBUG [Controller id=0] Delete topics listener fired for topics databaseSERVICE_DEPENDENCIES to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:50,133] INFO [Controller id=0] Starting topic deletion for topics databaseSERVICE_DEPENDENCIES (kafka.controller.KafkaController)
[2020-07-28 18:30:50,133] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseSERVICE_DEPENDENCIES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:50,133] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICE_DEPENDENCIES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:50,136] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICE_DEPENDENCIES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:50,136] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICE_DEPENDENCIES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:50,153] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseSERVICE_DEPENDENCIES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:50,153] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseSERVICE_DEPENDENCIES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:50,154] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseSERVICE_DEPENDENCIES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:50,177] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICE_DEPENDENCIES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:50,178] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:50,178] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:51,250] INFO [Controller id=0] New topics: [Set(databaseSERVICES)], deleted topics: [Set()], new partition replica assignment [Map(databaseSERVICES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:30:51,250] INFO [Controller id=0] New partition creation callback for databaseSERVICES-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:51,259] INFO [Controller id=0] New topics: [Set(databaseSERVICE_DEPENDENCIES)], deleted topics: [Set()], new partition replica assignment [Map(databaseSERVICE_DEPENDENCIES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:30:51,259] INFO [Controller id=0] New partition creation callback for databaseSERVICE_DEPENDENCIES-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:51,289] INFO [Controller id=0] New topics: [Set(databaseREGIONS)], deleted topics: [Set()], new partition replica assignment [Map(databaseREGIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:30:51,289] INFO [Controller id=0] New partition creation callback for databaseREGIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:51,917] DEBUG [Controller id=0] Delete topics listener fired for topics databaseSERVICE_RULES to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:51,917] INFO [Controller id=0] Starting topic deletion for topics databaseSERVICE_RULES (kafka.controller.KafkaController)
[2020-07-28 18:30:51,917] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseSERVICE_RULES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:51,917] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICE_RULES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:51,920] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICE_RULES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:51,920] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICE_RULES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:51,931] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseSERVICE_RULES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:51,931] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseSERVICE_RULES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:51,931] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseSERVICE_RULES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:51,952] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICE_RULES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:51,953] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:51,954] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:53,680] DEBUG [Controller id=0] Delete topics listener fired for topics databaseSERVICE_RULE_CONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:53,680] INFO [Controller id=0] Starting topic deletion for topics databaseSERVICE_RULE_CONDITIONS (kafka.controller.KafkaController)
[2020-07-28 18:30:53,680] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseSERVICE_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:53,680] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICE_RULE_CONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:53,685] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICE_RULE_CONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:53,685] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICE_RULE_CONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:53,700] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseSERVICE_RULE_CONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:53,700] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseSERVICE_RULE_CONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:53,700] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseSERVICE_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:53,710] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICE_RULE_CONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:53,711] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:53,712] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:55,503] DEBUG [Controller id=0] Delete topics listener fired for topics databaseUSERS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:55,504] INFO [Controller id=0] Starting topic deletion for topics databaseUSERS (kafka.controller.KafkaController)
[2020-07-28 18:30:55,504] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseUSERS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:55,504] INFO [Topic Deletion Manager 0] Deletion of topic databaseUSERS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:55,510] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseUSERS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:55,511] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseUSERS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:55,535] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseUSERS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:55,535] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseUSERS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:55,535] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseUSERS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:55,557] INFO [Topic Deletion Manager 0] Deletion of topic databaseUSERS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:55,558] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:55,558] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:56,282] INFO [Controller id=0] New topics: [Set(databaseUSERS)], deleted topics: [Set()], new partition replica assignment [Map(databaseUSERS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:30:56,282] INFO [Controller id=0] New partition creation callback for databaseUSERS-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:56,293] INFO [Controller id=0] New topics: [Set(databaseSERVICE_RULES)], deleted topics: [Set()], new partition replica assignment [Map(databaseSERVICE_RULES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:30:56,293] INFO [Controller id=0] New partition creation callback for databaseSERVICE_RULES-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:56,315] INFO [Controller id=0] New topics: [Set(databaseSERVICE_RULE_CONDITIONS)], deleted topics: [Set()], new partition replica assignment [Map(databaseSERVICE_RULE_CONDITIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:30:56,315] INFO [Controller id=0] New partition creation callback for databaseSERVICE_RULE_CONDITIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:30:57,444] DEBUG [Controller id=0] Delete topics listener fired for topics databaseVALUE_MODES to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:57,444] INFO [Controller id=0] Starting topic deletion for topics databaseVALUE_MODES (kafka.controller.KafkaController)
[2020-07-28 18:30:57,444] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseVALUE_MODES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:57,444] INFO [Topic Deletion Manager 0] Deletion of topic databaseVALUE_MODES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:57,447] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseVALUE_MODES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:57,448] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseVALUE_MODES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:57,465] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseVALUE_MODES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:57,465] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseVALUE_MODES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:57,465] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseVALUE_MODES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:57,488] INFO [Topic Deletion Manager 0] Deletion of topic databaseVALUE_MODES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:57,489] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:57,490] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:59,238] DEBUG [Controller id=0] Delete topics listener fired for topics test to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:30:59,238] INFO [Controller id=0] Starting topic deletion for topics test (kafka.controller.KafkaController)
[2020-07-28 18:30:59,238] INFO [Topic Deletion Manager 0] Handling deletion for topics test (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:59,238] INFO [Topic Deletion Manager 0] Deletion of topic test (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:59,243] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=test,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:59,243] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=test,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:30:59,255] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(test-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:30:59,255] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=test,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:59,255] INFO [Topic Deletion Manager 0] Handling deletion for topics test (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:59,267] INFO [Topic Deletion Manager 0] Deletion of topic test successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:30:59,268] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:30:59,269] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:31:01,012] DEBUG [Controller id=0] Delete topics listener fired for topics users to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:31:01,012] INFO [Controller id=0] Starting topic deletion for topics users (kafka.controller.KafkaController)
[2020-07-28 18:31:01,012] INFO [Topic Deletion Manager 0] Handling deletion for topics users (kafka.controller.TopicDeletionManager)
[2020-07-28 18:31:01,012] INFO [Topic Deletion Manager 0] Deletion of topic users (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:31:01,017] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=users,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:31:01,017] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=users,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:31:01,034] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(users-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:31:01,034] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=users,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:31:01,034] INFO [Topic Deletion Manager 0] Handling deletion for topics users (kafka.controller.TopicDeletionManager)
[2020-07-28 18:31:01,044] INFO [Topic Deletion Manager 0] Deletion of topic users successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:31:01,045] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:31:01,046] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:31:01,291] INFO [Controller id=0] New topics: [Set(databaseVALUE_MODES)], deleted topics: [Set()], new partition replica assignment [Map(databaseVALUE_MODES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:31:01,291] INFO [Controller id=0] New partition creation callback for databaseVALUE_MODES-0 (kafka.controller.KafkaController)
[2020-07-28 18:31:02,795] DEBUG [Controller id=0] Delete topics listener fired for topics users.DLT to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:31:02,796] INFO [Controller id=0] Starting topic deletion for topics users.DLT (kafka.controller.KafkaController)
[2020-07-28 18:31:02,796] INFO [Topic Deletion Manager 0] Handling deletion for topics users.DLT (kafka.controller.TopicDeletionManager)
[2020-07-28 18:31:02,796] INFO [Topic Deletion Manager 0] Deletion of topic users.DLT (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:31:02,800] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=users.DLT,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:31:02,800] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=users.DLT,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:31:02,816] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(users.DLT-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:31:02,816] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=users.DLT,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:31:02,816] INFO [Topic Deletion Manager 0] Handling deletion for topics users.DLT (kafka.controller.TopicDeletionManager)
[2020-07-28 18:31:02,831] INFO [Topic Deletion Manager 0] Deletion of topic users.DLT successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:31:02,831] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:31:02,832] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:31:04,522] DEBUG [Controller id=0] Delete topics listener fired for topics worker-manager-worker1 to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:31:04,522] INFO [Controller id=0] Starting topic deletion for topics worker-manager-worker1 (kafka.controller.KafkaController)
[2020-07-28 18:31:04,522] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager-worker1 (kafka.controller.TopicDeletionManager)
[2020-07-28 18:31:04,522] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager-worker1 (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:31:04,528] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-worker1,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:31:04,528] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-worker1,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:31:04,551] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(worker-manager-worker1-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:31:04,551] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=worker-manager-worker1,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:31:04,551] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager-worker1 (kafka.controller.TopicDeletionManager)
[2020-07-28 18:31:04,565] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager-worker1 successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:31:04,567] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:31:04,567] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:32:55,491] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 18:32:55,493] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 18:32:55,493] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 18:32:55,493] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 18:33:22,473] DEBUG [Controller id=0] Delete topics listener fired for topics database.apps to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:22,473] INFO [Controller id=0] Starting topic deletion for topics database.apps (kafka.controller.KafkaController)
[2020-07-28 18:33:22,473] INFO [Topic Deletion Manager 0] Handling deletion for topics database.apps (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:22,473] INFO [Topic Deletion Manager 0] Deletion of topic database.apps (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:22,478] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:22,478] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database.apps,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:22,499] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database.apps-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:22,499] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database.apps,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:22,499] INFO [Topic Deletion Manager 0] Handling deletion for topics database.apps (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:22,512] INFO [Topic Deletion Manager 0] Deletion of topic database.apps successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:22,512] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:22,513] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:22,616] INFO [Controller id=0] New topics: [Set(database.apps)], deleted topics: [Set()], new partition replica assignment [Map(database.apps-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:33:22,616] INFO [Controller id=0] New partition creation callback for database.apps-0 (kafka.controller.KafkaController)
[2020-07-28 18:33:24,612] DEBUG [Controller id=0] Delete topics listener fired for topics databaseAPPS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:24,612] INFO [Controller id=0] Starting topic deletion for topics databaseAPPS (kafka.controller.KafkaController)
[2020-07-28 18:33:24,612] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseAPPS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:24,612] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPPS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:24,615] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseAPPS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:24,615] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseAPPS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:24,627] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseAPPS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:24,627] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseAPPS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:24,627] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseAPPS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:24,647] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPPS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:24,648] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:24,649] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:26,059] INFO [Controller id=0] New topics: [Set(databaseAPPS)], deleted topics: [Set()], new partition replica assignment [Map(databaseAPPS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:33:26,059] INFO [Controller id=0] New partition creation callback for databaseAPPS-0 (kafka.controller.KafkaController)
[2020-07-28 18:33:26,439] DEBUG [Controller id=0] Delete topics listener fired for topics databaseAPP_SERVICES to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:26,439] INFO [Controller id=0] Starting topic deletion for topics databaseAPP_SERVICES (kafka.controller.KafkaController)
[2020-07-28 18:33:26,439] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseAPP_SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:26,439] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPP_SERVICES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:26,442] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseAPP_SERVICES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:26,442] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseAPP_SERVICES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:26,458] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseAPP_SERVICES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:26,458] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseAPP_SERVICES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:26,458] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseAPP_SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:26,484] INFO [Topic Deletion Manager 0] Deletion of topic databaseAPP_SERVICES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:26,485] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:26,486] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:28,164] DEBUG [Controller id=0] Delete topics listener fired for topics databaseCOMPONENT_TYPES to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:28,165] INFO [Controller id=0] Starting topic deletion for topics databaseCOMPONENT_TYPES (kafka.controller.KafkaController)
[2020-07-28 18:33:28,165] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseCOMPONENT_TYPES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:28,165] INFO [Topic Deletion Manager 0] Deletion of topic databaseCOMPONENT_TYPES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:28,169] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseCOMPONENT_TYPES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:28,169] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseCOMPONENT_TYPES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:28,179] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseCOMPONENT_TYPES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:28,179] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseCOMPONENT_TYPES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:28,179] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseCOMPONENT_TYPES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:28,196] INFO [Topic Deletion Manager 0] Deletion of topic databaseCOMPONENT_TYPES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:28,197] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:28,197] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:29,903] DEBUG [Controller id=0] Delete topics listener fired for topics databaseCONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:29,904] INFO [Controller id=0] Starting topic deletion for topics databaseCONDITIONS (kafka.controller.KafkaController)
[2020-07-28 18:33:29,904] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseCONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:29,904] INFO [Topic Deletion Manager 0] Deletion of topic databaseCONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:29,909] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseCONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:29,909] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseCONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:29,928] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseCONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:29,929] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseCONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:29,929] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseCONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:29,943] INFO [Topic Deletion Manager 0] Deletion of topic databaseCONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:29,944] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:29,945] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:31,141] INFO [Controller id=0] New topics: [Set(databaseCOMPONENT_TYPES)], deleted topics: [Set()], new partition replica assignment [Map(databaseCOMPONENT_TYPES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:33:31,141] INFO [Controller id=0] New partition creation callback for databaseCOMPONENT_TYPES-0 (kafka.controller.KafkaController)
[2020-07-28 18:33:31,169] INFO [Controller id=0] New topics: [Set(databaseAPP_SERVICES)], deleted topics: [Set()], new partition replica assignment [Map(databaseAPP_SERVICES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:33:31,169] INFO [Controller id=0] New partition creation callback for databaseAPP_SERVICES-0 (kafka.controller.KafkaController)
[2020-07-28 18:33:31,185] INFO [Controller id=0] New topics: [Set(databaseCONDITIONS)], deleted topics: [Set()], new partition replica assignment [Map(databaseCONDITIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:33:31,185] INFO [Controller id=0] New partition creation callback for databaseCONDITIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:33:31,833] DEBUG [Controller id=0] Delete topics listener fired for topics databaseDECISIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:31,833] INFO [Controller id=0] Starting topic deletion for topics databaseDECISIONS (kafka.controller.KafkaController)
[2020-07-28 18:33:31,833] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseDECISIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:31,834] INFO [Topic Deletion Manager 0] Deletion of topic databaseDECISIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:31,839] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseDECISIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:31,839] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseDECISIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:31,865] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseDECISIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:31,865] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseDECISIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:31,865] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseDECISIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:31,882] INFO [Topic Deletion Manager 0] Deletion of topic databaseDECISIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:31,882] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:31,883] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:34,161] DEBUG [Controller id=0] Delete topics listener fired for topics databaseEDGE_HOSTS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:34,162] INFO [Controller id=0] Starting topic deletion for topics databaseEDGE_HOSTS (kafka.controller.KafkaController)
[2020-07-28 18:33:34,162] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseEDGE_HOSTS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:34,162] INFO [Topic Deletion Manager 0] Deletion of topic databaseEDGE_HOSTS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:34,167] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseEDGE_HOSTS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:34,168] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseEDGE_HOSTS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:34,183] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseEDGE_HOSTS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:34,183] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseEDGE_HOSTS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:34,183] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseEDGE_HOSTS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:34,208] INFO [Topic Deletion Manager 0] Deletion of topic databaseEDGE_HOSTS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:34,208] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:34,209] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:36,037] DEBUG [Controller id=0] Delete topics listener fired for topics databaseFIELDS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:36,037] INFO [Controller id=0] Starting topic deletion for topics databaseFIELDS (kafka.controller.KafkaController)
[2020-07-28 18:33:36,037] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseFIELDS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:36,037] INFO [Topic Deletion Manager 0] Deletion of topic databaseFIELDS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:36,040] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseFIELDS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:36,040] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseFIELDS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:36,064] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseFIELDS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:36,064] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseFIELDS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:36,064] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseFIELDS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:36,086] INFO [Topic Deletion Manager 0] Deletion of topic databaseFIELDS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:36,086] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:36,087] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:36,300] INFO [Controller id=0] New topics: [Set(databaseFIELDS)], deleted topics: [Set()], new partition replica assignment [Map(databaseFIELDS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:33:36,300] INFO [Controller id=0] New partition creation callback for databaseFIELDS-0 (kafka.controller.KafkaController)
[2020-07-28 18:33:36,310] INFO [Controller id=0] New topics: [Set(databaseEDGE_HOSTS)], deleted topics: [Set()], new partition replica assignment [Map(databaseEDGE_HOSTS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:33:36,310] INFO [Controller id=0] New partition creation callback for databaseEDGE_HOSTS-0 (kafka.controller.KafkaController)
[2020-07-28 18:33:36,330] INFO [Controller id=0] New topics: [Set(databaseDECISIONS)], deleted topics: [Set()], new partition replica assignment [Map(databaseDECISIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:33:36,330] INFO [Controller id=0] New partition creation callback for databaseDECISIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:33:37,950] DEBUG [Controller id=0] Delete topics listener fired for topics databaseHOST_RULES to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:37,950] INFO [Controller id=0] Starting topic deletion for topics databaseHOST_RULES (kafka.controller.KafkaController)
[2020-07-28 18:33:37,950] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseHOST_RULES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:37,950] INFO [Topic Deletion Manager 0] Deletion of topic databaseHOST_RULES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:37,953] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseHOST_RULES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:37,953] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseHOST_RULES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:37,965] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseHOST_RULES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:37,965] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseHOST_RULES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:37,965] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseHOST_RULES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:37,988] INFO [Topic Deletion Manager 0] Deletion of topic databaseHOST_RULES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:37,989] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:37,990] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:39,707] DEBUG [Controller id=0] Delete topics listener fired for topics databaseHOST_RULE_CONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:39,707] INFO [Controller id=0] Starting topic deletion for topics databaseHOST_RULE_CONDITIONS (kafka.controller.KafkaController)
[2020-07-28 18:33:39,707] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseHOST_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:39,707] INFO [Topic Deletion Manager 0] Deletion of topic databaseHOST_RULE_CONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:39,710] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseHOST_RULE_CONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:39,710] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseHOST_RULE_CONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:39,736] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseHOST_RULE_CONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:39,736] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseHOST_RULE_CONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:39,736] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseHOST_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:39,753] INFO [Topic Deletion Manager 0] Deletion of topic databaseHOST_RULE_CONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:39,753] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:39,754] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:41,299] INFO [Controller id=0] New topics: [Set(databaseHOST_RULES)], deleted topics: [Set()], new partition replica assignment [Map(databaseHOST_RULES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:33:41,299] INFO [Controller id=0] New partition creation callback for databaseHOST_RULES-0 (kafka.controller.KafkaController)
[2020-07-28 18:33:41,315] INFO [Controller id=0] New topics: [Set(databaseHOST_RULE_CONDITIONS)], deleted topics: [Set()], new partition replica assignment [Map(databaseHOST_RULE_CONDITIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:33:41,315] INFO [Controller id=0] New partition creation callback for databaseHOST_RULE_CONDITIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:33:41,598] DEBUG [Controller id=0] Delete topics listener fired for topics databaseLOGGING_EVENT to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:41,598] INFO [Controller id=0] Starting topic deletion for topics databaseLOGGING_EVENT (kafka.controller.KafkaController)
[2020-07-28 18:33:41,598] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseLOGGING_EVENT (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:41,598] INFO [Topic Deletion Manager 0] Deletion of topic databaseLOGGING_EVENT (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:41,603] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseLOGGING_EVENT,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:41,603] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseLOGGING_EVENT,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:41,618] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseLOGGING_EVENT-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:41,618] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseLOGGING_EVENT,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:41,618] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseLOGGING_EVENT (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:41,630] INFO [Topic Deletion Manager 0] Deletion of topic databaseLOGGING_EVENT successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:41,631] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:41,631] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:43,538] DEBUG [Controller id=0] Delete topics listener fired for topics databaseOPERATORS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:43,538] INFO [Controller id=0] Starting topic deletion for topics databaseOPERATORS (kafka.controller.KafkaController)
[2020-07-28 18:33:43,538] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseOPERATORS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:43,538] INFO [Topic Deletion Manager 0] Deletion of topic databaseOPERATORS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:43,543] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseOPERATORS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:43,543] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseOPERATORS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:43,559] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseOPERATORS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:43,559] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseOPERATORS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:43,559] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseOPERATORS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:43,571] INFO [Topic Deletion Manager 0] Deletion of topic databaseOPERATORS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:43,572] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:43,572] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:45,345] DEBUG [Controller id=0] Delete topics listener fired for topics databaseREGIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:45,345] INFO [Controller id=0] Starting topic deletion for topics databaseREGIONS (kafka.controller.KafkaController)
[2020-07-28 18:33:45,345] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseREGIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:45,345] INFO [Topic Deletion Manager 0] Deletion of topic databaseREGIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:45,348] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseREGIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:45,348] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseREGIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:45,373] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseREGIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:45,373] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseREGIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:45,373] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseREGIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:45,389] INFO [Topic Deletion Manager 0] Deletion of topic databaseREGIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:45,390] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:45,391] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:46,298] INFO [Controller id=0] New topics: [Set(databaseOPERATORS)], deleted topics: [Set()], new partition replica assignment [Map(databaseOPERATORS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:33:46,298] INFO [Controller id=0] New partition creation callback for databaseOPERATORS-0 (kafka.controller.KafkaController)
[2020-07-28 18:33:46,311] INFO [Controller id=0] New topics: [Set(databaseREGIONS)], deleted topics: [Set()], new partition replica assignment [Map(databaseREGIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:33:46,311] INFO [Controller id=0] New partition creation callback for databaseREGIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:33:46,338] INFO [Controller id=0] New topics: [Set(databaseLOGGING_EVENT)], deleted topics: [Set()], new partition replica assignment [Map(databaseLOGGING_EVENT-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:33:46,338] INFO [Controller id=0] New partition creation callback for databaseLOGGING_EVENT-0 (kafka.controller.KafkaController)
[2020-07-28 18:33:47,335] DEBUG [Controller id=0] Delete topics listener fired for topics databaseSERVICES to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:47,335] INFO [Controller id=0] Starting topic deletion for topics databaseSERVICES (kafka.controller.KafkaController)
[2020-07-28 18:33:47,335] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseSERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:47,335] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:47,338] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:47,338] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:47,355] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseSERVICES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:47,355] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseSERVICES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:47,355] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseSERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:47,381] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:47,382] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:47,383] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:49,284] DEBUG [Controller id=0] Delete topics listener fired for topics databaseSERVICE_DEPENDENCIES to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:49,284] INFO [Controller id=0] Starting topic deletion for topics databaseSERVICE_DEPENDENCIES (kafka.controller.KafkaController)
[2020-07-28 18:33:49,284] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseSERVICE_DEPENDENCIES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:49,284] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICE_DEPENDENCIES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:49,288] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICE_DEPENDENCIES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:49,288] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICE_DEPENDENCIES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:49,299] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseSERVICE_DEPENDENCIES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:49,299] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseSERVICE_DEPENDENCIES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:49,300] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseSERVICE_DEPENDENCIES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:49,316] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICE_DEPENDENCIES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:49,317] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:49,317] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:51,305] INFO [Controller id=0] New topics: [Set(databaseSERVICES)], deleted topics: [Set()], new partition replica assignment [Map(databaseSERVICES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:33:51,305] INFO [Controller id=0] New partition creation callback for databaseSERVICES-0 (kafka.controller.KafkaController)
[2020-07-28 18:33:51,317] INFO [Controller id=0] New topics: [Set(databaseSERVICE_DEPENDENCIES)], deleted topics: [Set()], new partition replica assignment [Map(databaseSERVICE_DEPENDENCIES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:33:51,317] INFO [Controller id=0] New partition creation callback for databaseSERVICE_DEPENDENCIES-0 (kafka.controller.KafkaController)
[2020-07-28 18:33:51,582] DEBUG [Controller id=0] Delete topics listener fired for topics databaseSERVICE_RULES to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:51,582] INFO [Controller id=0] Starting topic deletion for topics databaseSERVICE_RULES (kafka.controller.KafkaController)
[2020-07-28 18:33:51,582] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseSERVICE_RULES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:51,582] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICE_RULES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:51,588] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICE_RULES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:51,588] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICE_RULES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:51,609] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseSERVICE_RULES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:51,609] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseSERVICE_RULES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:51,610] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseSERVICE_RULES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:51,625] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICE_RULES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:51,626] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:51,626] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:53,885] DEBUG [Controller id=0] Delete topics listener fired for topics databaseSERVICE_RULE_CONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:53,885] INFO [Controller id=0] Starting topic deletion for topics databaseSERVICE_RULE_CONDITIONS (kafka.controller.KafkaController)
[2020-07-28 18:33:53,885] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseSERVICE_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:53,885] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICE_RULE_CONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:53,889] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICE_RULE_CONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:53,889] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseSERVICE_RULE_CONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:53,913] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseSERVICE_RULE_CONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:53,913] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseSERVICE_RULE_CONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:53,913] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseSERVICE_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:53,936] INFO [Topic Deletion Manager 0] Deletion of topic databaseSERVICE_RULE_CONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:53,937] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:53,938] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:55,733] DEBUG [Controller id=0] Delete topics listener fired for topics databaseUSERS to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:55,733] INFO [Controller id=0] Starting topic deletion for topics databaseUSERS (kafka.controller.KafkaController)
[2020-07-28 18:33:55,733] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseUSERS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:55,733] INFO [Topic Deletion Manager 0] Deletion of topic databaseUSERS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:55,737] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseUSERS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:55,737] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseUSERS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:55,757] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseUSERS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:55,757] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseUSERS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:55,757] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseUSERS (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:55,776] INFO [Topic Deletion Manager 0] Deletion of topic databaseUSERS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:55,777] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:55,778] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:56,309] INFO [Controller id=0] New topics: [Set(databaseUSERS)], deleted topics: [Set()], new partition replica assignment [Map(databaseUSERS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:33:56,310] INFO [Controller id=0] New partition creation callback for databaseUSERS-0 (kafka.controller.KafkaController)
[2020-07-28 18:33:56,327] INFO [Controller id=0] New topics: [Set(databaseSERVICE_RULES)], deleted topics: [Set()], new partition replica assignment [Map(databaseSERVICE_RULES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:33:56,327] INFO [Controller id=0] New partition creation callback for databaseSERVICE_RULES-0 (kafka.controller.KafkaController)
[2020-07-28 18:33:56,353] INFO [Controller id=0] New topics: [Set(databaseSERVICE_RULE_CONDITIONS)], deleted topics: [Set()], new partition replica assignment [Map(databaseSERVICE_RULE_CONDITIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:33:56,353] INFO [Controller id=0] New partition creation callback for databaseSERVICE_RULE_CONDITIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:33:57,538] DEBUG [Controller id=0] Delete topics listener fired for topics databaseVALUE_MODES to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:33:57,538] INFO [Controller id=0] Starting topic deletion for topics databaseVALUE_MODES (kafka.controller.KafkaController)
[2020-07-28 18:33:57,538] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseVALUE_MODES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:57,538] INFO [Topic Deletion Manager 0] Deletion of topic databaseVALUE_MODES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:57,541] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseVALUE_MODES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:57,541] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=databaseVALUE_MODES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 18:33:57,558] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(databaseVALUE_MODES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 18:33:57,558] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=databaseVALUE_MODES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:57,558] INFO [Topic Deletion Manager 0] Handling deletion for topics databaseVALUE_MODES (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:57,581] INFO [Topic Deletion Manager 0] Deletion of topic databaseVALUE_MODES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 18:33:57,581] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 18:33:57,582] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 18:34:01,307] INFO [Controller id=0] New topics: [Set(databaseVALUE_MODES)], deleted topics: [Set()], new partition replica assignment [Map(databaseVALUE_MODES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:34:01,307] INFO [Controller id=0] New partition creation callback for databaseVALUE_MODES-0 (kafka.controller.KafkaController)
[2020-07-28 18:39:48,953] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-07-28 18:40:00,590] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-07-28 18:40:12,700] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-07-28 18:40:12,722] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2020-07-28 18:40:12,722] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2020-07-28 18:40:12,725] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-07-28 18:40:12,729] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-07-28 18:40:12,732] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2020-07-28 18:40:12,759] INFO [Controller id=0] Initialized broker epochs cache: Map(0 -> 24) (kafka.controller.KafkaController)
[2020-07-28 18:40:12,763] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2020-07-28 18:40:12,769] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-07-28 18:40:12,778] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-07-28 18:40:12,780] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2020-07-28 18:40:12,781] INFO [Controller id=0] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-07-28 18:40:12,781] INFO [Controller id=0] Current list of topics in the cluster: Set() (kafka.controller.KafkaController)
[2020-07-28 18:40:12,782] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-07-28 18:40:12,784] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-07-28 18:40:12,784] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-07-28 18:40:12,785] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-07-28 18:40:12,786] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-07-28 18:40:12,786] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2020-07-28 18:40:12,798] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-07-28 18:40:12,799] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-07-28 18:40:12,804] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-07-28 18:40:12,804] INFO [RequestSendThread controllerId=0] Controller 0 connected to daniel:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-07-28 18:40:12,805] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> Map() (kafka.controller.ZkReplicaStateMachine)
[2020-07-28 18:40:12,805] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-07-28 18:40:12,806] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-07-28 18:40:12,812] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> Map() (kafka.controller.ZkPartitionStateMachine)
[2020-07-28 18:40:12,812] INFO [Controller id=0] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2020-07-28 18:40:12,817] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-07-28 18:40:12,818] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-07-28 18:40:12,818] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-07-28 18:40:12,819] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-07-28 18:40:12,820] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-07-28 18:40:12,836] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-07-28 18:40:17,838] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 18:40:17,839] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 18:41:23,325] INFO [Controller id=0] New topics: [Set(database-APPS)], deleted topics: [Set()], new partition replica assignment [Map(database-APPS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:41:23,326] INFO [Controller id=0] New partition creation callback for database-APPS-0 (kafka.controller.KafkaController)
[2020-07-28 18:41:23,641] INFO [Controller id=0] New topics: [Set(database-APP_SERVICES)], deleted topics: [Set()], new partition replica assignment [Map(database-APP_SERVICES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:41:23,641] INFO [Controller id=0] New partition creation callback for database-APP_SERVICES-0 (kafka.controller.KafkaController)
[2020-07-28 18:41:23,781] INFO [Controller id=0] New topics: [Set(database-COMPONENT_TYPES)], deleted topics: [Set()], new partition replica assignment [Map(database-COMPONENT_TYPES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:41:23,781] INFO [Controller id=0] New partition creation callback for database-COMPONENT_TYPES-0 (kafka.controller.KafkaController)
[2020-07-28 18:41:23,908] INFO [Controller id=0] New topics: [Set(database-CONDITIONS)], deleted topics: [Set()], new partition replica assignment [Map(database-CONDITIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:41:23,908] INFO [Controller id=0] New partition creation callback for database-CONDITIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:41:24,040] INFO [Controller id=0] New topics: [Set(database-DECISIONS)], deleted topics: [Set()], new partition replica assignment [Map(database-DECISIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:41:24,041] INFO [Controller id=0] New partition creation callback for database-DECISIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:41:24,177] INFO [Controller id=0] New topics: [Set(database-EDGE_HOSTS)], deleted topics: [Set()], new partition replica assignment [Map(database-EDGE_HOSTS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:41:24,177] INFO [Controller id=0] New partition creation callback for database-EDGE_HOSTS-0 (kafka.controller.KafkaController)
[2020-07-28 18:41:24,307] INFO [Controller id=0] New topics: [Set(database-FIELDS)], deleted topics: [Set()], new partition replica assignment [Map(database-FIELDS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:41:24,307] INFO [Controller id=0] New partition creation callback for database-FIELDS-0 (kafka.controller.KafkaController)
[2020-07-28 18:41:24,438] INFO [Controller id=0] New topics: [Set(database-HOST_RULES)], deleted topics: [Set()], new partition replica assignment [Map(database-HOST_RULES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:41:24,438] INFO [Controller id=0] New partition creation callback for database-HOST_RULES-0 (kafka.controller.KafkaController)
[2020-07-28 18:41:24,577] INFO [Controller id=0] New topics: [Set(database-HOST_RULE_CONDITIONS)], deleted topics: [Set()], new partition replica assignment [Map(database-HOST_RULE_CONDITIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:41:24,577] INFO [Controller id=0] New partition creation callback for database-HOST_RULE_CONDITIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:41:24,712] INFO [Controller id=0] New topics: [Set(database-LOGGING_EVENT)], deleted topics: [Set()], new partition replica assignment [Map(database-LOGGING_EVENT-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:41:24,712] INFO [Controller id=0] New partition creation callback for database-LOGGING_EVENT-0 (kafka.controller.KafkaController)
[2020-07-28 18:41:24,847] INFO [Controller id=0] New topics: [Set(database-OPERATORS)], deleted topics: [Set()], new partition replica assignment [Map(database-OPERATORS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:41:24,847] INFO [Controller id=0] New partition creation callback for database-OPERATORS-0 (kafka.controller.KafkaController)
[2020-07-28 18:41:24,984] INFO [Controller id=0] New topics: [Set(database-REGIONS)], deleted topics: [Set()], new partition replica assignment [Map(database-REGIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:41:24,984] INFO [Controller id=0] New partition creation callback for database-REGIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:41:25,112] INFO [Controller id=0] New topics: [Set(database-SERVICES)], deleted topics: [Set()], new partition replica assignment [Map(database-SERVICES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:41:25,112] INFO [Controller id=0] New partition creation callback for database-SERVICES-0 (kafka.controller.KafkaController)
[2020-07-28 18:41:25,244] INFO [Controller id=0] New topics: [Set(database-SERVICE_DEPENDENCIES)], deleted topics: [Set()], new partition replica assignment [Map(database-SERVICE_DEPENDENCIES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:41:25,244] INFO [Controller id=0] New partition creation callback for database-SERVICE_DEPENDENCIES-0 (kafka.controller.KafkaController)
[2020-07-28 18:41:25,381] INFO [Controller id=0] New topics: [Set(database-SERVICE_RULES)], deleted topics: [Set()], new partition replica assignment [Map(database-SERVICE_RULES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:41:25,381] INFO [Controller id=0] New partition creation callback for database-SERVICE_RULES-0 (kafka.controller.KafkaController)
[2020-07-28 18:41:25,511] INFO [Controller id=0] New topics: [Set(database-SERVICE_RULE_CONDITIONS)], deleted topics: [Set()], new partition replica assignment [Map(database-SERVICE_RULE_CONDITIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:41:25,511] INFO [Controller id=0] New partition creation callback for database-SERVICE_RULE_CONDITIONS-0 (kafka.controller.KafkaController)
[2020-07-28 18:41:25,636] INFO [Controller id=0] New topics: [Set(database-USERS)], deleted topics: [Set()], new partition replica assignment [Map(database-USERS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:41:25,636] INFO [Controller id=0] New partition creation callback for database-USERS-0 (kafka.controller.KafkaController)
[2020-07-28 18:41:25,772] INFO [Controller id=0] New topics: [Set(database-VALUE_MODES)], deleted topics: [Set()], new partition replica assignment [Map(database-VALUE_MODES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:41:25,772] INFO [Controller id=0] New partition creation callback for database-VALUE_MODES-0 (kafka.controller.KafkaController)
[2020-07-28 18:43:26,950] INFO [Controller id=0] New topics: [Set(worker-manager-worker1.DLT, worker-manager-worker1)], deleted topics: [Set()], new partition replica assignment [Map(worker-manager-worker1.DLT-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), worker-manager-worker1-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:43:26,951] INFO [Controller id=0] New partition creation callback for worker-manager-worker1.DLT-0,worker-manager-worker1-0 (kafka.controller.KafkaController)
[2020-07-28 18:43:26,995] INFO [Controller id=0] New topics: [Set(__consumer_offsets)], deleted topics: [Set()], new partition replica assignment [Map(__consumer_offsets-22 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 18:43:26,996] INFO [Controller id=0] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-37,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-38,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-13,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2020-07-28 18:45:17,845] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 18:45:17,845] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 18:45:17,849] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 18:45:17,851] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 18:50:17,851] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 18:50:17,853] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 18:50:17,855] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 18:50:17,855] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 18:55:17,856] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 18:55:17,857] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 18:55:17,859] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 18:55:17,859] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
