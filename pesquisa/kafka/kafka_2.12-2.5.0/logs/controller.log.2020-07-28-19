[2020-07-28 19:00:17,859] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 19:00:17,859] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 19:00:17,860] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 19:00:17,860] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 19:05:17,861] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 19:05:17,862] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 19:05:17,864] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 19:05:17,864] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 19:10:17,864] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 19:10:17,866] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 19:10:17,868] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 19:10:17,868] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 19:15:17,868] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 19:15:17,869] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 19:15:17,870] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 19:15:17,870] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 19:17:07,685] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2020-07-28 19:17:08,466] INFO [Controller id=0] Shutting down broker 0 (kafka.controller.KafkaController)
[2020-07-28 19:17:08,466] DEBUG [Controller id=0] All shutting down brokers: 0 (kafka.controller.KafkaController)
[2020-07-28 19:17:08,466] DEBUG [Controller id=0] Live brokers:  (kafka.controller.KafkaController)
[2020-07-28 19:17:08,471] TRACE [Controller id=0] All leaders = __consumer_offsets-49 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-38 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-27 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-16 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),worker-manager-worker1.DLT-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-19 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-8 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-SERVICE_RULE_CONDITIONS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-HOST_RULES-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-LOGGING_EVENT-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-SERVICE_RULES-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-SERVICES-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-2 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-13 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-46 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-35 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-24 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-COMPONENT_TYPES-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-OPERATORS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-5 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-CONDITIONS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-43 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-32 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-21 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-10 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-37 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),worker-manager-worker1-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-48 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-40 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-29 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-18 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-FIELDS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-7 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-34 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-45 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-23 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-DECISIONS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-SERVICE_DEPENDENCIES-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-EDGE_HOSTS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-26 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-4 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-15 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-HOST_RULE_CONDITIONS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-42 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-20 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-9 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-31 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-1 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-12 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-REGIONS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-APPS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-APP_SERVICES-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-28 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-17 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-6 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-39 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-44 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-VALUE_MODES-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-47 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-36 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-14 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-25 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-3 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-30 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-41 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-11 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-22 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-33 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-USERS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1) (kafka.controller.KafkaController)
[2020-07-28 19:17:09,929] INFO [ControllerEventThread controllerId=0] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-07-28 19:17:09,930] INFO [ControllerEventThread controllerId=0] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-07-28 19:17:09,930] INFO [ControllerEventThread controllerId=0] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-07-28 19:17:09,930] DEBUG [Controller id=0] Resigning (kafka.controller.KafkaController)
[2020-07-28 19:17:09,931] DEBUG [Controller id=0] Unregister BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2020-07-28 19:17:09,932] INFO [PartitionStateMachine controllerId=0] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2020-07-28 19:17:09,932] INFO [ReplicaStateMachine controllerId=0] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2020-07-28 19:17:09,932] INFO [RequestSendThread controllerId=0] Shutting down (kafka.controller.RequestSendThread)
[2020-07-28 19:17:09,932] INFO [RequestSendThread controllerId=0] Shutdown completed (kafka.controller.RequestSendThread)
[2020-07-28 19:17:09,932] INFO [RequestSendThread controllerId=0] Stopped (kafka.controller.RequestSendThread)
[2020-07-28 19:17:09,935] INFO [Controller id=0] Resigned (kafka.controller.KafkaController)
[2020-07-28 19:17:19,139] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-07-28 19:17:19,160] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 2 and epoch zk version is now 2 (kafka.controller.KafkaController)
[2020-07-28 19:17:19,161] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2020-07-28 19:17:19,164] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-07-28 19:17:19,168] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-07-28 19:17:19,170] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2020-07-28 19:17:19,180] INFO [Controller id=0] Initialized broker epochs cache: Map(0 -> 268) (kafka.controller.KafkaController)
[2020-07-28 19:17:19,198] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2020-07-28 19:17:19,248] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-07-28 19:17:19,256] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-07-28 19:17:19,256] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2020-07-28 19:17:19,256] INFO [Controller id=0] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-07-28 19:17:19,257] INFO [Controller id=0] Current list of topics in the cluster: Set(database-DECISIONS, database-EDGE_HOSTS, database-APP_SERVICES, worker-manager-worker1.DLT, database-SERVICE_DEPENDENCIES, database-HOST_RULES, database-USERS, database-OPERATORS, database-SERVICES, database-LOGGING_EVENT, database-SERVICE_RULE_CONDITIONS, database-APPS, __consumer_offsets, worker-manager-worker1, database-HOST_RULE_CONDITIONS, database-REGIONS, database-CONDITIONS, database-FIELDS, database-COMPONENT_TYPES, database-SERVICE_RULES, database-VALUE_MODES) (kafka.controller.KafkaController)
[2020-07-28 19:17:19,257] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-07-28 19:17:19,268] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-07-28 19:17:19,268] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-07-28 19:17:19,268] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-07-28 19:17:19,269] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-07-28 19:17:19,270] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2020-07-28 19:17:19,283] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-07-28 19:17:19,288] INFO [RequestSendThread controllerId=0] Controller 0 connected to daniel:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-07-28 19:17:19,289] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-07-28 19:17:19,363] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-07-28 19:17:19,364] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> Map([Topic=__consumer_offsets,Partition=21,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=42,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=46,Replica=0] -> OnlineReplica, [Topic=worker-manager-worker1,Partition=0,Replica=0] -> OnlineReplica, [Topic=database-APP_SERVICES,Partition=0,Replica=0] -> OnlineReplica, [Topic=database-HOST_RULES,Partition=0,Replica=0] -> OnlineReplica, [Topic=database-VALUE_MODES,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=39,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=7,Replica=0] -> OnlineReplica, [Topic=database-SERVICES,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=13,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=49,Replica=0] -> OnlineReplica, [Topic=database-EDGE_HOSTS,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=48,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=15,Replica=0] -> OnlineReplica, [Topic=database-REGIONS,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=38,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=2,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=28,Replica=0] -> OnlineReplica, [Topic=database-FIELDS,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=23,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=32,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=10,Replica=0] -> OnlineReplica, [Topic=database-DECISIONS,Partition=0,Replica=0] -> OnlineReplica, [Topic=database-APPS,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=18,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=33,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=5,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=17,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=8,Replica=0] -> OnlineReplica, [Topic=database-SERVICE_DEPENDENCIES,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=19,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=37,Replica=0] -> OnlineReplica, [Topic=database-OPERATORS,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=43,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=6,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=9,Replica=0] -> OnlineReplica, [Topic=database-COMPONENT_TYPES,Partition=0,Replica=0] -> OnlineReplica, [Topic=database-SERVICE_RULE_CONDITIONS,Partition=0,Replica=0] -> OnlineReplica, [Topic=database-CONDITIONS,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=30,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=3,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=25,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=47,Replica=0] -> OnlineReplica, [Topic=database-HOST_RULE_CONDITIONS,Partition=0,Replica=0] -> OnlineReplica, [Topic=worker-manager-worker1.DLT,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=36,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=11,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=34,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=12,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=27,Replica=0] -> OnlineReplica, [Topic=database-USERS,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=44,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=1,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=45,Replica=0] -> OnlineReplica, [Topic=database-SERVICE_RULES,Partition=0,Replica=0] -> OnlineReplica, [Topic=database-LOGGING_EVENT,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=24,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=22,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=31,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=14,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=40,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=20,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=4,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=41,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=26,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=29,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=16,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=35,Replica=0] -> OnlineReplica) (kafka.controller.ZkReplicaStateMachine)
[2020-07-28 19:17:19,364] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-07-28 19:17:19,369] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-07-28 19:17:19,373] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> Map(__consumer_offsets-49 -> OnlinePartition, __consumer_offsets-38 -> OnlinePartition, __consumer_offsets-16 -> OnlinePartition, __consumer_offsets-27 -> OnlinePartition, worker-manager-worker1.DLT-0 -> OnlinePartition, database-SERVICE_RULE_CONDITIONS-0 -> OnlinePartition, __consumer_offsets-8 -> OnlinePartition, __consumer_offsets-19 -> OnlinePartition, database-HOST_RULES-0 -> OnlinePartition, database-LOGGING_EVENT-0 -> OnlinePartition, database-SERVICE_RULES-0 -> OnlinePartition, database-SERVICES-0 -> OnlinePartition, __consumer_offsets-13 -> OnlinePartition, __consumer_offsets-2 -> OnlinePartition, __consumer_offsets-35 -> OnlinePartition, __consumer_offsets-46 -> OnlinePartition, __consumer_offsets-24 -> OnlinePartition, database-COMPONENT_TYPES-0 -> OnlinePartition, database-OPERATORS-0 -> OnlinePartition, __consumer_offsets-5 -> OnlinePartition, database-CONDITIONS-0 -> OnlinePartition, __consumer_offsets-43 -> OnlinePartition, __consumer_offsets-32 -> OnlinePartition, __consumer_offsets-21 -> OnlinePartition, __consumer_offsets-10 -> OnlinePartition, __consumer_offsets-37 -> OnlinePartition, worker-manager-worker1-0 -> OnlinePartition, __consumer_offsets-48 -> OnlinePartition, __consumer_offsets-40 -> OnlinePartition, __consumer_offsets-29 -> OnlinePartition, __consumer_offsets-18 -> OnlinePartition, __consumer_offsets-7 -> OnlinePartition, database-FIELDS-0 -> OnlinePartition, __consumer_offsets-34 -> OnlinePartition, __consumer_offsets-45 -> OnlinePartition, __consumer_offsets-23 -> OnlinePartition, database-DECISIONS-0 -> OnlinePartition, database-SERVICE_DEPENDENCIES-0 -> OnlinePartition, database-EDGE_HOSTS-0 -> OnlinePartition, __consumer_offsets-26 -> OnlinePartition, __consumer_offsets-4 -> OnlinePartition, __consumer_offsets-15 -> OnlinePartition, database-HOST_RULE_CONDITIONS-0 -> OnlinePartition, __consumer_offsets-42 -> OnlinePartition, __consumer_offsets-20 -> OnlinePartition, __consumer_offsets-9 -> OnlinePartition, __consumer_offsets-31 -> OnlinePartition, __consumer_offsets-1 -> OnlinePartition, __consumer_offsets-12 -> OnlinePartition, database-REGIONS-0 -> OnlinePartition, __consumer_offsets-28 -> OnlinePartition, database-APP_SERVICES-0 -> OnlinePartition, database-APPS-0 -> OnlinePartition, __consumer_offsets-17 -> OnlinePartition, __consumer_offsets-6 -> OnlinePartition, __consumer_offsets-39 -> OnlinePartition, __consumer_offsets-44 -> OnlinePartition, database-VALUE_MODES-0 -> OnlinePartition, __consumer_offsets-47 -> OnlinePartition, __consumer_offsets-36 -> OnlinePartition, __consumer_offsets-14 -> OnlinePartition, __consumer_offsets-25 -> OnlinePartition, __consumer_offsets-3 -> OnlinePartition, __consumer_offsets-41 -> OnlinePartition, __consumer_offsets-30 -> OnlinePartition, __consumer_offsets-33 -> OnlinePartition, __consumer_offsets-22 -> OnlinePartition, __consumer_offsets-11 -> OnlinePartition, __consumer_offsets-0 -> OnlinePartition, database-USERS-0 -> OnlinePartition) (kafka.controller.ZkPartitionStateMachine)
[2020-07-28 19:17:19,374] INFO [Controller id=0] Ready to serve as the new controller with epoch 2 (kafka.controller.KafkaController)
[2020-07-28 19:17:19,378] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-07-28 19:17:19,378] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-07-28 19:17:19,378] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-07-28 19:17:19,379] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-07-28 19:17:19,380] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-07-28 19:17:19,391] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-07-28 19:17:24,392] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 19:17:24,392] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 19:17:24,396] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 19:17:24,397] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 19:19:06,523] INFO [Controller id=0] New topics: [Set(database.APPS)], deleted topics: [Set()], new partition replica assignment [Map(database.APPS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 19:19:06,524] INFO [Controller id=0] New partition creation callback for database.APPS-0 (kafka.controller.KafkaController)
[2020-07-28 19:22:24,398] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 19:22:24,398] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 19:22:24,405] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 19:22:24,405] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 19:27:24,406] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 19:27:24,406] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 19:27:24,409] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 19:27:24,409] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 19:32:24,410] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 19:32:24,410] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 19:32:24,413] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 19:32:24,413] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 19:37:24,413] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 19:37:24,413] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 19:37:24,417] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 19:37:24,417] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 19:42:24,418] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 19:42:24,418] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 19:42:24,421] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 19:42:24,421] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 19:43:23,620] INFO [Controller id=0] Shutting down broker 0 (kafka.controller.KafkaController)
[2020-07-28 19:43:23,620] DEBUG [Controller id=0] All shutting down brokers: 0 (kafka.controller.KafkaController)
[2020-07-28 19:43:23,629] DEBUG [Controller id=0] Live brokers:  (kafka.controller.KafkaController)
[2020-07-28 19:43:23,635] TRACE [Controller id=0] All leaders = __consumer_offsets-49 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-38 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database.APPS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:2),__consumer_offsets-16 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-27 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),worker-manager-worker1.DLT-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-SERVICE_RULE_CONDITIONS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-8 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-19 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-HOST_RULES-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-LOGGING_EVENT-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-SERVICE_RULES-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-SERVICES-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-13 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-2 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-35 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-46 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-24 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-COMPONENT_TYPES-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-OPERATORS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-5 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-CONDITIONS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-43 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-32 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-21 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-10 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-37 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),worker-manager-worker1-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-48 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-40 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-29 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-18 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-7 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-FIELDS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-34 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-45 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-23 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-DECISIONS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-SERVICE_DEPENDENCIES-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-EDGE_HOSTS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-26 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-4 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-15 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-HOST_RULE_CONDITIONS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-42 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-20 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-9 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-31 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-1 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-12 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-REGIONS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-28 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-APP_SERVICES-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-APPS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-17 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-6 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-39 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-44 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-VALUE_MODES-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-47 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-36 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-14 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-25 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-3 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-41 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-30 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-33 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-22 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-11 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),database-USERS-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1) (kafka.controller.KafkaController)
[2020-07-28 19:43:24,803] INFO [ControllerEventThread controllerId=0] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-07-28 19:43:24,804] INFO [ControllerEventThread controllerId=0] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-07-28 19:43:24,804] INFO [ControllerEventThread controllerId=0] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-07-28 19:43:24,804] DEBUG [Controller id=0] Resigning (kafka.controller.KafkaController)
[2020-07-28 19:43:24,805] DEBUG [Controller id=0] Unregister BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2020-07-28 19:43:24,806] INFO [PartitionStateMachine controllerId=0] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2020-07-28 19:43:24,807] INFO [ReplicaStateMachine controllerId=0] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2020-07-28 19:43:24,807] INFO [RequestSendThread controllerId=0] Shutting down (kafka.controller.RequestSendThread)
[2020-07-28 19:43:24,807] INFO [RequestSendThread controllerId=0] Stopped (kafka.controller.RequestSendThread)
[2020-07-28 19:43:24,807] INFO [RequestSendThread controllerId=0] Shutdown completed (kafka.controller.RequestSendThread)
[2020-07-28 19:43:24,809] INFO [Controller id=0] Resigned (kafka.controller.KafkaController)
[2020-07-28 19:43:43,319] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-07-28 19:43:43,339] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 3 and epoch zk version is now 3 (kafka.controller.KafkaController)
[2020-07-28 19:43:43,340] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2020-07-28 19:43:43,342] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-07-28 19:43:43,347] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-07-28 19:43:43,349] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2020-07-28 19:43:43,355] INFO [Controller id=0] Initialized broker epochs cache: Map(0 -> 293) (kafka.controller.KafkaController)
[2020-07-28 19:43:43,371] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2020-07-28 19:43:43,432] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-07-28 19:43:43,442] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-07-28 19:43:43,442] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2020-07-28 19:43:43,443] INFO [Controller id=0] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-07-28 19:43:43,443] INFO [Controller id=0] Current list of topics in the cluster: Set(database-DECISIONS, database-EDGE_HOSTS, database-APP_SERVICES, worker-manager-worker1.DLT, database-SERVICE_DEPENDENCIES, database-HOST_RULES, database-USERS, database-OPERATORS, database-SERVICES, database-LOGGING_EVENT, database-SERVICE_RULE_CONDITIONS, database-APPS, __consumer_offsets, worker-manager-worker1, database-HOST_RULE_CONDITIONS, database-REGIONS, database-CONDITIONS, database-FIELDS, database.APPS, database-COMPONENT_TYPES, database-SERVICE_RULES, database-VALUE_MODES) (kafka.controller.KafkaController)
[2020-07-28 19:43:43,443] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-07-28 19:43:43,450] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-07-28 19:43:43,451] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-07-28 19:43:43,451] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-07-28 19:43:43,451] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-07-28 19:43:43,453] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2020-07-28 19:43:43,465] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-07-28 19:43:43,471] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-07-28 19:43:43,471] INFO [RequestSendThread controllerId=0] Controller 0 connected to daniel:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-07-28 19:43:43,541] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-07-28 19:43:43,542] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> Map([Topic=__consumer_offsets,Partition=21,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=42,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=46,Replica=0] -> OnlineReplica, [Topic=worker-manager-worker1,Partition=0,Replica=0] -> OnlineReplica, [Topic=database-APP_SERVICES,Partition=0,Replica=0] -> OnlineReplica, [Topic=database-HOST_RULES,Partition=0,Replica=0] -> OnlineReplica, [Topic=database-VALUE_MODES,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=39,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=7,Replica=0] -> OnlineReplica, [Topic=database-SERVICES,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=13,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=49,Replica=0] -> OnlineReplica, [Topic=database-EDGE_HOSTS,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=48,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=15,Replica=0] -> OnlineReplica, [Topic=database-REGIONS,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=38,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=2,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=28,Replica=0] -> OnlineReplica, [Topic=database-FIELDS,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=23,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=32,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=10,Replica=0] -> OnlineReplica, [Topic=database-DECISIONS,Partition=0,Replica=0] -> OnlineReplica, [Topic=database-APPS,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=18,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=33,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=5,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=17,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=8,Replica=0] -> OnlineReplica, [Topic=database-SERVICE_DEPENDENCIES,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=19,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=37,Replica=0] -> OnlineReplica, [Topic=database.APPS,Partition=0,Replica=0] -> OnlineReplica, [Topic=database-OPERATORS,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=43,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=6,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=9,Replica=0] -> OnlineReplica, [Topic=database-COMPONENT_TYPES,Partition=0,Replica=0] -> OnlineReplica, [Topic=database-SERVICE_RULE_CONDITIONS,Partition=0,Replica=0] -> OnlineReplica, [Topic=database-CONDITIONS,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=30,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=3,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=25,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=47,Replica=0] -> OnlineReplica, [Topic=database-HOST_RULE_CONDITIONS,Partition=0,Replica=0] -> OnlineReplica, [Topic=worker-manager-worker1.DLT,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=36,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=11,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=34,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=12,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=27,Replica=0] -> OnlineReplica, [Topic=database-USERS,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=44,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=1,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=45,Replica=0] -> OnlineReplica, [Topic=database-SERVICE_RULES,Partition=0,Replica=0] -> OnlineReplica, [Topic=database-LOGGING_EVENT,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=24,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=22,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=31,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=14,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=40,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=20,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=4,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=41,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=26,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=29,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=16,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=35,Replica=0] -> OnlineReplica) (kafka.controller.ZkReplicaStateMachine)
[2020-07-28 19:43:43,542] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-07-28 19:43:43,546] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-07-28 19:43:43,549] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> Map(__consumer_offsets-49 -> OnlinePartition, __consumer_offsets-38 -> OnlinePartition, database.APPS-0 -> OnlinePartition, __consumer_offsets-16 -> OnlinePartition, __consumer_offsets-27 -> OnlinePartition, worker-manager-worker1.DLT-0 -> OnlinePartition, database-SERVICE_RULE_CONDITIONS-0 -> OnlinePartition, __consumer_offsets-8 -> OnlinePartition, __consumer_offsets-19 -> OnlinePartition, database-HOST_RULES-0 -> OnlinePartition, database-LOGGING_EVENT-0 -> OnlinePartition, database-SERVICE_RULES-0 -> OnlinePartition, database-SERVICES-0 -> OnlinePartition, __consumer_offsets-13 -> OnlinePartition, __consumer_offsets-2 -> OnlinePartition, __consumer_offsets-35 -> OnlinePartition, __consumer_offsets-46 -> OnlinePartition, __consumer_offsets-24 -> OnlinePartition, database-COMPONENT_TYPES-0 -> OnlinePartition, database-OPERATORS-0 -> OnlinePartition, __consumer_offsets-5 -> OnlinePartition, database-CONDITIONS-0 -> OnlinePartition, __consumer_offsets-43 -> OnlinePartition, __consumer_offsets-32 -> OnlinePartition, __consumer_offsets-21 -> OnlinePartition, __consumer_offsets-10 -> OnlinePartition, __consumer_offsets-37 -> OnlinePartition, worker-manager-worker1-0 -> OnlinePartition, __consumer_offsets-48 -> OnlinePartition, __consumer_offsets-40 -> OnlinePartition, __consumer_offsets-29 -> OnlinePartition, __consumer_offsets-18 -> OnlinePartition, __consumer_offsets-7 -> OnlinePartition, database-FIELDS-0 -> OnlinePartition, __consumer_offsets-34 -> OnlinePartition, __consumer_offsets-45 -> OnlinePartition, __consumer_offsets-23 -> OnlinePartition, database-DECISIONS-0 -> OnlinePartition, database-SERVICE_DEPENDENCIES-0 -> OnlinePartition, database-EDGE_HOSTS-0 -> OnlinePartition, __consumer_offsets-26 -> OnlinePartition, __consumer_offsets-4 -> OnlinePartition, __consumer_offsets-15 -> OnlinePartition, database-HOST_RULE_CONDITIONS-0 -> OnlinePartition, __consumer_offsets-42 -> OnlinePartition, __consumer_offsets-20 -> OnlinePartition, __consumer_offsets-9 -> OnlinePartition, __consumer_offsets-31 -> OnlinePartition, __consumer_offsets-1 -> OnlinePartition, __consumer_offsets-12 -> OnlinePartition, database-REGIONS-0 -> OnlinePartition, __consumer_offsets-28 -> OnlinePartition, database-APP_SERVICES-0 -> OnlinePartition, database-APPS-0 -> OnlinePartition, __consumer_offsets-17 -> OnlinePartition, __consumer_offsets-6 -> OnlinePartition, __consumer_offsets-39 -> OnlinePartition, __consumer_offsets-44 -> OnlinePartition, database-VALUE_MODES-0 -> OnlinePartition, __consumer_offsets-47 -> OnlinePartition, __consumer_offsets-36 -> OnlinePartition, __consumer_offsets-14 -> OnlinePartition, __consumer_offsets-25 -> OnlinePartition, __consumer_offsets-3 -> OnlinePartition, __consumer_offsets-41 -> OnlinePartition, __consumer_offsets-30 -> OnlinePartition, __consumer_offsets-33 -> OnlinePartition, __consumer_offsets-22 -> OnlinePartition, __consumer_offsets-11 -> OnlinePartition, __consumer_offsets-0 -> OnlinePartition, database-USERS-0 -> OnlinePartition) (kafka.controller.ZkPartitionStateMachine)
[2020-07-28 19:43:43,549] INFO [Controller id=0] Ready to serve as the new controller with epoch 3 (kafka.controller.KafkaController)
[2020-07-28 19:43:43,554] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-07-28 19:43:43,554] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-07-28 19:43:43,555] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-07-28 19:43:43,555] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-07-28 19:43:43,556] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-07-28 19:43:43,567] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-07-28 19:43:48,569] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 19:43:48,570] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 19:43:48,580] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 19:43:48,581] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 19:48:48,582] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 19:48:48,582] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 19:48:48,585] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 19:48:48,585] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 19:53:48,586] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 19:53:48,586] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 19:53:48,591] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 19:53:48,591] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 19:56:15,794] DEBUG [Controller id=0] Delete topics listener fired for topics database-APPS to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:15,795] INFO [Controller id=0] Starting topic deletion for topics database-APPS (kafka.controller.KafkaController)
[2020-07-28 19:56:15,796] INFO [Topic Deletion Manager 0] Handling deletion for topics database-APPS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:15,797] INFO [Topic Deletion Manager 0] Deletion of topic database-APPS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:15,803] INFO [RequestSendThread controllerId=0] Controller 0 connected to daniel:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-07-28 19:56:15,819] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-APPS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:15,822] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-APPS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:15,846] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-APPS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:15,847] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-APPS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:15,848] INFO [Topic Deletion Manager 0] Handling deletion for topics database-APPS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:15,868] INFO [Topic Deletion Manager 0] Deletion of topic database-APPS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:15,870] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:15,871] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:17,487] DEBUG [Controller id=0] Delete topics listener fired for topics database-APP_SERVICES to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:17,488] INFO [Controller id=0] Starting topic deletion for topics database-APP_SERVICES (kafka.controller.KafkaController)
[2020-07-28 19:56:17,488] INFO [Topic Deletion Manager 0] Handling deletion for topics database-APP_SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:17,488] INFO [Topic Deletion Manager 0] Deletion of topic database-APP_SERVICES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:17,494] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-APP_SERVICES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:17,495] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-APP_SERVICES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:17,512] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-APP_SERVICES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:17,512] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-APP_SERVICES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:17,512] INFO [Topic Deletion Manager 0] Handling deletion for topics database-APP_SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:17,528] INFO [Topic Deletion Manager 0] Deletion of topic database-APP_SERVICES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:17,529] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:17,530] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:19,168] DEBUG [Controller id=0] Delete topics listener fired for topics database-COMPONENT_TYPES to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:19,169] INFO [Controller id=0] Starting topic deletion for topics database-COMPONENT_TYPES (kafka.controller.KafkaController)
[2020-07-28 19:56:19,169] INFO [Topic Deletion Manager 0] Handling deletion for topics database-COMPONENT_TYPES (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:19,169] INFO [Topic Deletion Manager 0] Deletion of topic database-COMPONENT_TYPES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:19,183] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-COMPONENT_TYPES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:19,183] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-COMPONENT_TYPES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:19,265] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-COMPONENT_TYPES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:19,265] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-COMPONENT_TYPES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:19,265] INFO [Topic Deletion Manager 0] Handling deletion for topics database-COMPONENT_TYPES (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:19,342] INFO [Topic Deletion Manager 0] Deletion of topic database-COMPONENT_TYPES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:19,344] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:19,346] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:20,773] DEBUG [Controller id=0] Delete topics listener fired for topics database-CONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:20,774] INFO [Controller id=0] Starting topic deletion for topics database-CONDITIONS (kafka.controller.KafkaController)
[2020-07-28 19:56:20,774] INFO [Topic Deletion Manager 0] Handling deletion for topics database-CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:20,774] INFO [Topic Deletion Manager 0] Deletion of topic database-CONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:20,798] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-CONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:20,799] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-CONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:20,881] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-CONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:20,881] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-CONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:20,881] INFO [Topic Deletion Manager 0] Handling deletion for topics database-CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:20,956] INFO [Topic Deletion Manager 0] Deletion of topic database-CONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:20,958] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:20,959] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:22,514] DEBUG [Controller id=0] Delete topics listener fired for topics database-DECISIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:22,514] INFO [Controller id=0] Starting topic deletion for topics database-DECISIONS (kafka.controller.KafkaController)
[2020-07-28 19:56:22,514] INFO [Topic Deletion Manager 0] Handling deletion for topics database-DECISIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:22,514] INFO [Topic Deletion Manager 0] Deletion of topic database-DECISIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:22,531] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-DECISIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:22,532] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-DECISIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:22,612] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-DECISIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:22,612] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-DECISIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:22,613] INFO [Topic Deletion Manager 0] Handling deletion for topics database-DECISIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:22,687] INFO [Topic Deletion Manager 0] Deletion of topic database-DECISIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:22,690] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:22,691] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:24,182] DEBUG [Controller id=0] Delete topics listener fired for topics database-EDGE_HOSTS to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:24,182] INFO [Controller id=0] Starting topic deletion for topics database-EDGE_HOSTS (kafka.controller.KafkaController)
[2020-07-28 19:56:24,182] INFO [Topic Deletion Manager 0] Handling deletion for topics database-EDGE_HOSTS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:24,182] INFO [Topic Deletion Manager 0] Deletion of topic database-EDGE_HOSTS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:24,188] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-EDGE_HOSTS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:24,188] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-EDGE_HOSTS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:24,201] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-EDGE_HOSTS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:24,201] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-EDGE_HOSTS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:24,202] INFO [Topic Deletion Manager 0] Handling deletion for topics database-EDGE_HOSTS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:24,218] INFO [Topic Deletion Manager 0] Deletion of topic database-EDGE_HOSTS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:24,220] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:24,221] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:25,870] DEBUG [Controller id=0] Delete topics listener fired for topics database-FIELDS to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:25,870] INFO [Controller id=0] Starting topic deletion for topics database-FIELDS (kafka.controller.KafkaController)
[2020-07-28 19:56:25,870] INFO [Topic Deletion Manager 0] Handling deletion for topics database-FIELDS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:25,871] INFO [Topic Deletion Manager 0] Deletion of topic database-FIELDS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:25,875] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-FIELDS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:25,875] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-FIELDS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:25,886] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-FIELDS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:25,886] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-FIELDS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:25,886] INFO [Topic Deletion Manager 0] Handling deletion for topics database-FIELDS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:25,914] INFO [Topic Deletion Manager 0] Deletion of topic database-FIELDS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:25,915] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:25,916] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:27,539] DEBUG [Controller id=0] Delete topics listener fired for topics database-HOST_RULES to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:27,539] INFO [Controller id=0] Starting topic deletion for topics database-HOST_RULES (kafka.controller.KafkaController)
[2020-07-28 19:56:27,540] INFO [Topic Deletion Manager 0] Handling deletion for topics database-HOST_RULES (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:27,540] INFO [Topic Deletion Manager 0] Deletion of topic database-HOST_RULES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:27,546] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-HOST_RULES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:27,546] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-HOST_RULES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:27,559] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-HOST_RULES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:27,559] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-HOST_RULES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:27,560] INFO [Topic Deletion Manager 0] Handling deletion for topics database-HOST_RULES (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:27,575] INFO [Topic Deletion Manager 0] Deletion of topic database-HOST_RULES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:27,576] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:27,577] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:29,240] DEBUG [Controller id=0] Delete topics listener fired for topics database-HOST_RULE_CONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:29,240] INFO [Controller id=0] Starting topic deletion for topics database-HOST_RULE_CONDITIONS (kafka.controller.KafkaController)
[2020-07-28 19:56:29,240] INFO [Topic Deletion Manager 0] Handling deletion for topics database-HOST_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:29,240] INFO [Topic Deletion Manager 0] Deletion of topic database-HOST_RULE_CONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:29,246] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-HOST_RULE_CONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:29,247] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-HOST_RULE_CONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:29,267] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-HOST_RULE_CONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:29,267] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-HOST_RULE_CONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:29,268] INFO [Topic Deletion Manager 0] Handling deletion for topics database-HOST_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:29,284] INFO [Topic Deletion Manager 0] Deletion of topic database-HOST_RULE_CONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:29,285] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:29,286] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:30,945] DEBUG [Controller id=0] Delete topics listener fired for topics database-LOGGING_EVENT to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:30,945] INFO [Controller id=0] Starting topic deletion for topics database-LOGGING_EVENT (kafka.controller.KafkaController)
[2020-07-28 19:56:30,945] INFO [Topic Deletion Manager 0] Handling deletion for topics database-LOGGING_EVENT (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:30,945] INFO [Topic Deletion Manager 0] Deletion of topic database-LOGGING_EVENT (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:30,951] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-LOGGING_EVENT,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:30,951] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-LOGGING_EVENT,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:30,970] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-LOGGING_EVENT-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:30,971] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-LOGGING_EVENT,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:30,971] INFO [Topic Deletion Manager 0] Handling deletion for topics database-LOGGING_EVENT (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:30,989] INFO [Topic Deletion Manager 0] Deletion of topic database-LOGGING_EVENT successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:30,991] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:30,991] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:32,720] DEBUG [Controller id=0] Delete topics listener fired for topics database-OPERATORS to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:32,720] INFO [Controller id=0] Starting topic deletion for topics database-OPERATORS (kafka.controller.KafkaController)
[2020-07-28 19:56:32,720] INFO [Topic Deletion Manager 0] Handling deletion for topics database-OPERATORS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:32,720] INFO [Topic Deletion Manager 0] Deletion of topic database-OPERATORS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:32,725] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-OPERATORS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:32,725] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-OPERATORS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:32,749] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-OPERATORS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:32,749] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-OPERATORS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:32,749] INFO [Topic Deletion Manager 0] Handling deletion for topics database-OPERATORS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:32,771] INFO [Topic Deletion Manager 0] Deletion of topic database-OPERATORS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:32,772] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:32,773] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:34,548] DEBUG [Controller id=0] Delete topics listener fired for topics database-REGIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:34,548] INFO [Controller id=0] Starting topic deletion for topics database-REGIONS (kafka.controller.KafkaController)
[2020-07-28 19:56:34,549] INFO [Topic Deletion Manager 0] Handling deletion for topics database-REGIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:34,549] INFO [Topic Deletion Manager 0] Deletion of topic database-REGIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:34,554] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-REGIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:34,554] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-REGIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:34,572] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-REGIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:34,572] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-REGIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:34,572] INFO [Topic Deletion Manager 0] Handling deletion for topics database-REGIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:34,600] INFO [Topic Deletion Manager 0] Deletion of topic database-REGIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:34,601] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:34,602] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:36,488] DEBUG [Controller id=0] Delete topics listener fired for topics database-SERVICES to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:36,488] INFO [Controller id=0] Starting topic deletion for topics database-SERVICES (kafka.controller.KafkaController)
[2020-07-28 19:56:36,489] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:36,489] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:36,493] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:36,494] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:36,521] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-SERVICES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:36,521] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-SERVICES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:36,521] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:36,549] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:36,556] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:36,558] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:38,249] DEBUG [Controller id=0] Delete topics listener fired for topics database-SERVICE_DEPENDENCIES to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:38,249] INFO [Controller id=0] Starting topic deletion for topics database-SERVICE_DEPENDENCIES (kafka.controller.KafkaController)
[2020-07-28 19:56:38,250] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICE_DEPENDENCIES (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:38,250] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICE_DEPENDENCIES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:38,256] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICE_DEPENDENCIES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:38,256] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICE_DEPENDENCIES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:38,277] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-SERVICE_DEPENDENCIES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:38,277] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-SERVICE_DEPENDENCIES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:38,278] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICE_DEPENDENCIES (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:38,306] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICE_DEPENDENCIES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:38,307] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:38,308] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:39,916] DEBUG [Controller id=0] Delete topics listener fired for topics database-SERVICE_RULES to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:39,916] INFO [Controller id=0] Starting topic deletion for topics database-SERVICE_RULES (kafka.controller.KafkaController)
[2020-07-28 19:56:39,916] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICE_RULES (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:39,917] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICE_RULES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:39,922] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICE_RULES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:39,922] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICE_RULES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:39,939] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-SERVICE_RULES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:39,939] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-SERVICE_RULES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:39,940] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICE_RULES (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:39,955] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICE_RULES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:39,956] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:39,957] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:41,507] DEBUG [Controller id=0] Delete topics listener fired for topics database-SERVICE_RULE_CONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:41,507] INFO [Controller id=0] Starting topic deletion for topics database-SERVICE_RULE_CONDITIONS (kafka.controller.KafkaController)
[2020-07-28 19:56:41,507] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICE_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:41,507] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICE_RULE_CONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:41,511] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICE_RULE_CONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:41,512] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICE_RULE_CONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:41,534] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-SERVICE_RULE_CONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:41,534] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-SERVICE_RULE_CONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:41,534] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICE_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:41,554] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICE_RULE_CONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:41,555] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:41,555] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:43,162] DEBUG [Controller id=0] Delete topics listener fired for topics database-USERS to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:43,163] INFO [Controller id=0] Starting topic deletion for topics database-USERS (kafka.controller.KafkaController)
[2020-07-28 19:56:43,163] INFO [Topic Deletion Manager 0] Handling deletion for topics database-USERS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:43,163] INFO [Topic Deletion Manager 0] Deletion of topic database-USERS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:43,167] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-USERS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:43,167] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-USERS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:43,185] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-USERS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:43,186] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-USERS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:43,186] INFO [Topic Deletion Manager 0] Handling deletion for topics database-USERS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:43,212] INFO [Topic Deletion Manager 0] Deletion of topic database-USERS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:43,214] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:43,215] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:44,784] DEBUG [Controller id=0] Delete topics listener fired for topics database-VALUE_MODES to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:44,784] INFO [Controller id=0] Starting topic deletion for topics database-VALUE_MODES (kafka.controller.KafkaController)
[2020-07-28 19:56:44,784] INFO [Topic Deletion Manager 0] Handling deletion for topics database-VALUE_MODES (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:44,785] INFO [Topic Deletion Manager 0] Deletion of topic database-VALUE_MODES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:44,789] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-VALUE_MODES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:44,789] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-VALUE_MODES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:44,805] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-VALUE_MODES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:44,805] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-VALUE_MODES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:44,806] INFO [Topic Deletion Manager 0] Handling deletion for topics database-VALUE_MODES (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:44,832] INFO [Topic Deletion Manager 0] Deletion of topic database-VALUE_MODES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:44,833] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:44,834] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:46,462] DEBUG [Controller id=0] Delete topics listener fired for topics database.APPS to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:46,462] INFO [Controller id=0] Starting topic deletion for topics database.APPS (kafka.controller.KafkaController)
[2020-07-28 19:56:46,462] INFO [Topic Deletion Manager 0] Handling deletion for topics database.APPS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:46,462] INFO [Topic Deletion Manager 0] Deletion of topic database.APPS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:46,466] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database.APPS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:46,466] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database.APPS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:46,478] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database.APPS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:46,478] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database.APPS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:46,478] INFO [Topic Deletion Manager 0] Handling deletion for topics database.APPS (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:46,496] INFO [Topic Deletion Manager 0] Deletion of topic database.APPS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:46,497] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:46,497] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:48,142] DEBUG [Controller id=0] Delete topics listener fired for topics worker-manager-worker1 to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:48,142] INFO [Controller id=0] Starting topic deletion for topics worker-manager-worker1 (kafka.controller.KafkaController)
[2020-07-28 19:56:48,142] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager-worker1 (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:48,142] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager-worker1 (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:48,148] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-worker1,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:48,148] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-worker1,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:48,162] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(worker-manager-worker1-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:48,162] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=worker-manager-worker1,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:48,162] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager-worker1 (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:48,177] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager-worker1 successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:48,177] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:48,178] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:49,823] DEBUG [Controller id=0] Delete topics listener fired for topics worker-manager-worker1.DLT to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:56:49,823] INFO [Controller id=0] Starting topic deletion for topics worker-manager-worker1.DLT (kafka.controller.KafkaController)
[2020-07-28 19:56:49,823] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager-worker1.DLT (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:49,824] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager-worker1.DLT (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:49,828] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-worker1.DLT,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:49,828] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-worker1.DLT,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 19:56:49,838] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(worker-manager-worker1.DLT-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 19:56:49,838] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=worker-manager-worker1.DLT,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:49,839] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager-worker1.DLT (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:49,862] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager-worker1.DLT successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 19:56:49,863] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 19:56:49,864] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 19:58:48,591] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 19:58:48,592] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 19:58:48,594] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 19:58:48,594] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
