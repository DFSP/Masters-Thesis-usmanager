[2020-07-26 21:43:37,237] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-26 21:43:37,240] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-26 21:43:37,240] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-26 21:43:37,240] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-26 21:46:09,446] INFO [Controller id=0] Shutting down broker 0 (kafka.controller.KafkaController)
[2020-07-26 21:46:09,446] DEBUG [Controller id=0] All shutting down brokers: 0 (kafka.controller.KafkaController)
[2020-07-26 21:46:09,447] DEBUG [Controller id=0] Live brokers:  (kafka.controller.KafkaController)
[2020-07-26 21:46:09,451] TRACE [Controller id=0] All leaders = __consumer_offsets-49 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-38 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-16 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-27 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-8 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-19 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-13 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-2 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-35 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),customers.DLT-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-46 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-24 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-5 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-43 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-32 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-21 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-10 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-37 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-48 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-40 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-29 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-18 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-7 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),messages-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-34 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-23 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-45 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-26 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-4 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-15 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),customers.DLT.DLT-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-42 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-31 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-9 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-20 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-12 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-1 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),myTopic-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),customers-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-28 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-17 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-6 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-39 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-44 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-36 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-47 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),messages.DLT-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-25 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-3 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-14 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-41 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-30 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-33 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-22 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-11 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1),__consumer_offsets-0 -> (Leader:0,ISR:0,LeaderEpoch:0,ControllerEpoch:1) (kafka.controller.KafkaController)
[2020-07-26 21:46:11,064] INFO [ControllerEventThread controllerId=0] Shutting down (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-07-26 21:46:11,065] INFO [ControllerEventThread controllerId=0] Stopped (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-07-26 21:46:11,065] INFO [ControllerEventThread controllerId=0] Shutdown completed (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-07-26 21:46:11,066] DEBUG [Controller id=0] Resigning (kafka.controller.KafkaController)
[2020-07-26 21:46:11,067] DEBUG [Controller id=0] Unregister BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2020-07-26 21:46:11,068] INFO [PartitionStateMachine controllerId=0] Stopped partition state machine (kafka.controller.ZkPartitionStateMachine)
[2020-07-26 21:46:11,068] INFO [ReplicaStateMachine controllerId=0] Stopped replica state machine (kafka.controller.ZkReplicaStateMachine)
[2020-07-26 21:46:11,068] INFO [RequestSendThread controllerId=0] Shutting down (kafka.controller.RequestSendThread)
[2020-07-26 21:46:11,068] INFO [RequestSendThread controllerId=0] Shutdown completed (kafka.controller.RequestSendThread)
[2020-07-26 21:46:11,068] INFO [RequestSendThread controllerId=0] Stopped (kafka.controller.RequestSendThread)
[2020-07-26 21:46:11,070] INFO [Controller id=0] Resigned (kafka.controller.KafkaController)
[2020-07-26 21:46:18,213] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2020-07-26 21:46:18,230] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 2 and epoch zk version is now 2 (kafka.controller.KafkaController)
[2020-07-26 21:46:18,231] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2020-07-26 21:46:18,233] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2020-07-26 21:46:18,236] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2020-07-26 21:46:18,239] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2020-07-26 21:46:18,247] INFO [Controller id=0] Initialized broker epochs cache: Map(0 -> 200) (kafka.controller.KafkaController)
[2020-07-26 21:46:18,260] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2020-07-26 21:46:18,297] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2020-07-26 21:46:18,305] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2020-07-26 21:46:18,305] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2020-07-26 21:46:18,306] INFO [Controller id=0] Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2020-07-26 21:46:18,306] INFO [Controller id=0] Current list of topics in the cluster: Set(messages, customers.DLT.DLT, myTopic, messages.DLT, __consumer_offsets, customers.DLT, customers) (kafka.controller.KafkaController)
[2020-07-26 21:46:18,307] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2020-07-26 21:46:18,326] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2020-07-26 21:46:18,326] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2020-07-26 21:46:18,327] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2020-07-26 21:46:18,327] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: Set() (kafka.controller.TopicDeletionManager)
[2020-07-26 21:46:18,328] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2020-07-26 21:46:18,342] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2020-07-26 21:46:18,349] INFO [RequestSendThread controllerId=0] Controller 0 connected to daniel:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-07-26 21:46:18,349] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-07-26 21:46:18,439] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2020-07-26 21:46:18,439] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> Map([Topic=__consumer_offsets,Partition=21,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=42,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=46,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=39,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=7,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=13,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=49,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=48,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=15,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=38,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=2,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=28,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=23,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=32,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=10,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=18,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=33,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=5,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=17,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=8,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=19,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=37,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=43,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=6,Replica=0] -> OnlineReplica, [Topic=myTopic,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=9,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=3,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=30,Replica=0] -> OnlineReplica, [Topic=customers.DLT.DLT,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=25,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=47,Replica=0] -> OnlineReplica, [Topic=messages,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=36,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=11,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=34,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=27,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=12,Replica=0] -> OnlineReplica, [Topic=messages.DLT,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=44,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=1,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=45,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=24,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=22,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=31,Replica=0] -> OnlineReplica, [Topic=customers.DLT,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=14,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=40,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=4,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=20,Replica=0] -> OnlineReplica, [Topic=customers,Partition=0,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=41,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=26,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=29,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=16,Replica=0] -> OnlineReplica, [Topic=__consumer_offsets,Partition=35,Replica=0] -> OnlineReplica) (kafka.controller.ZkReplicaStateMachine)
[2020-07-26 21:46:18,440] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2020-07-26 21:46:18,444] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2020-07-26 21:46:18,447] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> Map(__consumer_offsets-49 -> OnlinePartition, __consumer_offsets-38 -> OnlinePartition, __consumer_offsets-16 -> OnlinePartition, __consumer_offsets-27 -> OnlinePartition, __consumer_offsets-8 -> OnlinePartition, __consumer_offsets-19 -> OnlinePartition, __consumer_offsets-13 -> OnlinePartition, __consumer_offsets-2 -> OnlinePartition, customers.DLT-0 -> OnlinePartition, __consumer_offsets-46 -> OnlinePartition, __consumer_offsets-35 -> OnlinePartition, __consumer_offsets-24 -> OnlinePartition, __consumer_offsets-5 -> OnlinePartition, __consumer_offsets-43 -> OnlinePartition, __consumer_offsets-32 -> OnlinePartition, __consumer_offsets-21 -> OnlinePartition, __consumer_offsets-10 -> OnlinePartition, __consumer_offsets-37 -> OnlinePartition, __consumer_offsets-48 -> OnlinePartition, __consumer_offsets-40 -> OnlinePartition, __consumer_offsets-29 -> OnlinePartition, __consumer_offsets-18 -> OnlinePartition, __consumer_offsets-7 -> OnlinePartition, messages-0 -> OnlinePartition, __consumer_offsets-34 -> OnlinePartition, __consumer_offsets-23 -> OnlinePartition, __consumer_offsets-45 -> OnlinePartition, __consumer_offsets-26 -> OnlinePartition, __consumer_offsets-4 -> OnlinePartition, __consumer_offsets-15 -> OnlinePartition, customers.DLT.DLT-0 -> OnlinePartition, __consumer_offsets-42 -> OnlinePartition, __consumer_offsets-31 -> OnlinePartition, __consumer_offsets-9 -> OnlinePartition, __consumer_offsets-20 -> OnlinePartition, __consumer_offsets-12 -> OnlinePartition, __consumer_offsets-1 -> OnlinePartition, myTopic-0 -> OnlinePartition, customers-0 -> OnlinePartition, __consumer_offsets-28 -> OnlinePartition, __consumer_offsets-17 -> OnlinePartition, __consumer_offsets-6 -> OnlinePartition, __consumer_offsets-39 -> OnlinePartition, __consumer_offsets-44 -> OnlinePartition, __consumer_offsets-36 -> OnlinePartition, __consumer_offsets-47 -> OnlinePartition, messages.DLT-0 -> OnlinePartition, __consumer_offsets-3 -> OnlinePartition, __consumer_offsets-25 -> OnlinePartition, __consumer_offsets-14 -> OnlinePartition, __consumer_offsets-41 -> OnlinePartition, __consumer_offsets-30 -> OnlinePartition, __consumer_offsets-33 -> OnlinePartition, __consumer_offsets-22 -> OnlinePartition, __consumer_offsets-11 -> OnlinePartition, __consumer_offsets-0 -> OnlinePartition) (kafka.controller.ZkPartitionStateMachine)
[2020-07-26 21:46:18,448] INFO [Controller id=0] Ready to serve as the new controller with epoch 2 (kafka.controller.KafkaController)
[2020-07-26 21:46:18,453] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2020-07-26 21:46:18,453] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2020-07-26 21:46:18,454] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2020-07-26 21:46:18,454] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2020-07-26 21:46:18,456] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2020-07-26 21:46:18,467] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2020-07-26 21:46:23,468] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-26 21:46:23,469] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-26 21:46:23,478] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-26 21:46:23,480] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-26 21:49:19,201] INFO [Controller id=0] New topics: [Set(test, test.DLT)], deleted topics: [Set()], new partition replica assignment [Map(test-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), test.DLT-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-26 21:49:19,202] INFO [Controller id=0] New partition creation callback for test-0,test.DLT-0 (kafka.controller.KafkaController)
[2020-07-26 21:49:19,510] INFO [Controller id=0] New topics: [Set(test.DLT.DLT)], deleted topics: [Set()], new partition replica assignment [Map(test.DLT.DLT-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-26 21:49:19,510] INFO [Controller id=0] New partition creation callback for test.DLT.DLT-0 (kafka.controller.KafkaController)
[2020-07-26 21:51:23,480] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-26 21:51:23,481] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-26 21:51:23,484] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-26 21:51:23,484] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-26 21:55:46,369] DEBUG [Controller id=0] Delete topics listener fired for topics test to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:55:46,369] INFO [Controller id=0] Starting topic deletion for topics test (kafka.controller.KafkaController)
[2020-07-26 21:55:46,370] INFO [Topic Deletion Manager 0] Handling deletion for topics test (kafka.controller.TopicDeletionManager)
[2020-07-26 21:55:46,371] INFO [Topic Deletion Manager 0] Deletion of topic test (re)started (kafka.controller.TopicDeletionManager)
[2020-07-26 21:55:46,393] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=test,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:55:46,395] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=test,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:55:46,426] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(test-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-26 21:55:46,429] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=test,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-26 21:55:46,430] INFO [Topic Deletion Manager 0] Handling deletion for topics test (kafka.controller.TopicDeletionManager)
[2020-07-26 21:55:46,452] INFO [Topic Deletion Manager 0] Deletion of topic test successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-26 21:55:46,453] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-26 21:55:46,454] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:55:54,501] DEBUG [Controller id=0] Delete topics listener fired for topics customers to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:55:54,501] INFO [Controller id=0] Starting topic deletion for topics customers (kafka.controller.KafkaController)
[2020-07-26 21:55:54,501] INFO [Topic Deletion Manager 0] Handling deletion for topics customers (kafka.controller.TopicDeletionManager)
[2020-07-26 21:55:54,501] INFO [Topic Deletion Manager 0] Deletion of topic customers (re)started (kafka.controller.TopicDeletionManager)
[2020-07-26 21:55:54,506] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=customers,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:55:54,507] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=customers,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:55:54,522] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(customers-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-26 21:55:54,522] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=customers,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-26 21:55:54,523] INFO [Topic Deletion Manager 0] Handling deletion for topics customers (kafka.controller.TopicDeletionManager)
[2020-07-26 21:55:54,553] INFO [Topic Deletion Manager 0] Deletion of topic customers successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-26 21:55:54,554] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-26 21:55:54,555] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:56:23,485] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-26 21:56:23,485] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-26 21:56:23,489] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-26 21:56:23,489] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-26 21:56:42,842] INFO [Controller id=0] New topics: [Set(test)], deleted topics: [Set()], new partition replica assignment [Map(test-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-26 21:56:42,842] INFO [Controller id=0] New partition creation callback for test-0 (kafka.controller.KafkaController)
[2020-07-26 21:58:10,880] DEBUG [Controller id=0] Delete topics listener fired for topics myTopic to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:58:10,880] INFO [Controller id=0] Starting topic deletion for topics myTopic (kafka.controller.KafkaController)
[2020-07-26 21:58:10,881] INFO [Topic Deletion Manager 0] Handling deletion for topics myTopic (kafka.controller.TopicDeletionManager)
[2020-07-26 21:58:10,881] INFO [Topic Deletion Manager 0] Deletion of topic myTopic (re)started (kafka.controller.TopicDeletionManager)
[2020-07-26 21:58:10,891] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=myTopic,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:58:10,892] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=myTopic,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:58:10,913] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(myTopic-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-26 21:58:10,913] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=myTopic,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-26 21:58:10,913] INFO [Topic Deletion Manager 0] Handling deletion for topics myTopic (kafka.controller.TopicDeletionManager)
[2020-07-26 21:58:10,929] INFO [Topic Deletion Manager 0] Deletion of topic myTopic successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-26 21:58:10,931] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-26 21:58:10,932] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:58:34,172] DEBUG [Controller id=0] Delete topics listener fired for topics customers.DLT to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:58:34,172] INFO [Controller id=0] Starting topic deletion for topics customers.DLT (kafka.controller.KafkaController)
[2020-07-26 21:58:34,172] INFO [Topic Deletion Manager 0] Handling deletion for topics customers.DLT (kafka.controller.TopicDeletionManager)
[2020-07-26 21:58:34,173] INFO [Topic Deletion Manager 0] Deletion of topic customers.DLT (re)started (kafka.controller.TopicDeletionManager)
[2020-07-26 21:58:34,179] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=customers.DLT,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:58:34,179] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=customers.DLT,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:58:34,193] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(customers.DLT-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-26 21:58:34,193] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=customers.DLT,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-26 21:58:34,194] INFO [Topic Deletion Manager 0] Handling deletion for topics customers.DLT (kafka.controller.TopicDeletionManager)
[2020-07-26 21:58:34,210] INFO [Topic Deletion Manager 0] Deletion of topic customers.DLT successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-26 21:58:34,211] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-26 21:58:34,212] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:58:41,299] DEBUG [Controller id=0] Delete topics listener fired for topics messages.DLT to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:58:41,299] INFO [Controller id=0] Starting topic deletion for topics messages.DLT (kafka.controller.KafkaController)
[2020-07-26 21:58:41,299] INFO [Topic Deletion Manager 0] Handling deletion for topics messages.DLT (kafka.controller.TopicDeletionManager)
[2020-07-26 21:58:41,299] INFO [Topic Deletion Manager 0] Deletion of topic messages.DLT (re)started (kafka.controller.TopicDeletionManager)
[2020-07-26 21:58:41,304] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=messages.DLT,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:58:41,304] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=messages.DLT,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:58:41,316] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(messages.DLT-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-26 21:58:41,316] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=messages.DLT,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-26 21:58:41,316] INFO [Topic Deletion Manager 0] Handling deletion for topics messages.DLT (kafka.controller.TopicDeletionManager)
[2020-07-26 21:58:41,335] INFO [Topic Deletion Manager 0] Deletion of topic messages.DLT successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-26 21:58:41,336] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-26 21:58:41,337] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:59:02,373] DEBUG [Controller id=0] Delete topics listener fired for topics messages to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:59:02,373] INFO [Controller id=0] Starting topic deletion for topics messages (kafka.controller.KafkaController)
[2020-07-26 21:59:02,373] INFO [Topic Deletion Manager 0] Handling deletion for topics messages (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:02,373] INFO [Topic Deletion Manager 0] Deletion of topic messages (re)started (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:02,378] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=messages,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:59:02,378] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=messages,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:59:02,392] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(messages-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-26 21:59:02,392] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=messages,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:02,392] INFO [Topic Deletion Manager 0] Handling deletion for topics messages (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:02,423] INFO [Topic Deletion Manager 0] Deletion of topic messages successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:02,424] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-26 21:59:02,426] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:59:09,581] DEBUG [Controller id=0] Delete topics listener fired for topics customers.DLT.DLT to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:59:09,582] INFO [Controller id=0] Starting topic deletion for topics customers.DLT.DLT (kafka.controller.KafkaController)
[2020-07-26 21:59:09,582] INFO [Topic Deletion Manager 0] Handling deletion for topics customers.DLT.DLT (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:09,582] INFO [Topic Deletion Manager 0] Deletion of topic customers.DLT.DLT (re)started (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:09,587] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=customers.DLT.DLT,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:59:09,588] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=customers.DLT.DLT,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:59:09,599] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(customers.DLT.DLT-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-26 21:59:09,599] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=customers.DLT.DLT,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:09,600] INFO [Topic Deletion Manager 0] Handling deletion for topics customers.DLT.DLT (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:09,616] INFO [Topic Deletion Manager 0] Deletion of topic customers.DLT.DLT successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:09,618] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-26 21:59:09,618] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:59:14,084] DEBUG [Controller id=0] Delete topics listener fired for topics test to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:59:14,085] INFO [Controller id=0] Starting topic deletion for topics test (kafka.controller.KafkaController)
[2020-07-26 21:59:14,085] INFO [Topic Deletion Manager 0] Handling deletion for topics test (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:14,085] INFO [Topic Deletion Manager 0] Deletion of topic test (re)started (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:14,091] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=test,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:59:14,091] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=test,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:59:14,106] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(test-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-26 21:59:14,106] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=test,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:14,106] INFO [Topic Deletion Manager 0] Handling deletion for topics test (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:14,120] INFO [Topic Deletion Manager 0] Deletion of topic test successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:14,121] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-26 21:59:14,122] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:59:17,225] DEBUG [Controller id=0] Delete topics listener fired for topics test.DLT to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:59:17,225] INFO [Controller id=0] Starting topic deletion for topics test.DLT (kafka.controller.KafkaController)
[2020-07-26 21:59:17,225] INFO [Topic Deletion Manager 0] Handling deletion for topics test.DLT (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:17,225] INFO [Topic Deletion Manager 0] Deletion of topic test.DLT (re)started (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:17,231] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=test.DLT,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:59:17,232] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=test.DLT,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:59:17,255] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(test.DLT-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-26 21:59:17,255] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=test.DLT,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:17,256] INFO [Topic Deletion Manager 0] Handling deletion for topics test.DLT (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:17,272] INFO [Topic Deletion Manager 0] Deletion of topic test.DLT successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:17,273] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-26 21:59:17,274] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:59:20,304] DEBUG [Controller id=0] Delete topics listener fired for topics test.DLT.DLT to be deleted (kafka.controller.KafkaController)
[2020-07-26 21:59:20,304] INFO [Controller id=0] Starting topic deletion for topics test.DLT.DLT (kafka.controller.KafkaController)
[2020-07-26 21:59:20,304] INFO [Topic Deletion Manager 0] Handling deletion for topics test.DLT.DLT (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:20,304] INFO [Topic Deletion Manager 0] Deletion of topic test.DLT.DLT (re)started (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:20,310] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=test.DLT.DLT,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:59:20,311] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=test.DLT.DLT,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-26 21:59:20,324] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(test.DLT.DLT-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-26 21:59:20,325] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=test.DLT.DLT,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:20,325] INFO [Topic Deletion Manager 0] Handling deletion for topics test.DLT.DLT (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:20,340] INFO [Topic Deletion Manager 0] Deletion of topic test.DLT.DLT successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-26 21:59:20,341] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-26 21:59:20,342] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
