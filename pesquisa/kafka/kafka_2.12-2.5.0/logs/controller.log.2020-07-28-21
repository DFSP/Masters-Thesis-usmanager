[2020-07-28 21:03:48,644] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 21:03:48,645] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 21:03:48,645] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 21:03:48,645] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 21:08:48,646] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 21:08:48,646] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 21:08:48,647] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 21:08:48,647] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 21:09:17,620] DEBUG [Controller id=0] Delete topics listener fired for topics database-APPS to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:17,620] INFO [Controller id=0] Starting topic deletion for topics database-APPS (kafka.controller.KafkaController)
[2020-07-28 21:09:17,620] INFO [Topic Deletion Manager 0] Handling deletion for topics database-APPS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:17,620] INFO [Topic Deletion Manager 0] Deletion of topic database-APPS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:17,622] INFO [RequestSendThread controllerId=0] Controller 0 connected to daniel:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-07-28 21:09:17,626] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-APPS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:17,626] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-APPS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:17,648] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-APPS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:17,648] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-APPS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:17,648] INFO [Topic Deletion Manager 0] Handling deletion for topics database-APPS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:17,664] INFO [Topic Deletion Manager 0] Deletion of topic database-APPS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:17,665] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:17,665] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:19,346] DEBUG [Controller id=0] Delete topics listener fired for topics database-APP_SERVICES to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:19,346] INFO [Controller id=0] Starting topic deletion for topics database-APP_SERVICES (kafka.controller.KafkaController)
[2020-07-28 21:09:19,346] INFO [Topic Deletion Manager 0] Handling deletion for topics database-APP_SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:19,346] INFO [Topic Deletion Manager 0] Deletion of topic database-APP_SERVICES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:19,351] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-APP_SERVICES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:19,351] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-APP_SERVICES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:19,373] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-APP_SERVICES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:19,373] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-APP_SERVICES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:19,373] INFO [Topic Deletion Manager 0] Handling deletion for topics database-APP_SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:19,390] INFO [Topic Deletion Manager 0] Deletion of topic database-APP_SERVICES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:19,391] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:19,392] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:21,020] DEBUG [Controller id=0] Delete topics listener fired for topics database-COMPONENT_TYPES to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:21,020] INFO [Controller id=0] Starting topic deletion for topics database-COMPONENT_TYPES (kafka.controller.KafkaController)
[2020-07-28 21:09:21,020] INFO [Topic Deletion Manager 0] Handling deletion for topics database-COMPONENT_TYPES (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:21,020] INFO [Topic Deletion Manager 0] Deletion of topic database-COMPONENT_TYPES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:21,024] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-COMPONENT_TYPES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:21,024] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-COMPONENT_TYPES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:21,043] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-COMPONENT_TYPES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:21,043] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-COMPONENT_TYPES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:21,043] INFO [Topic Deletion Manager 0] Handling deletion for topics database-COMPONENT_TYPES (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:21,067] INFO [Topic Deletion Manager 0] Deletion of topic database-COMPONENT_TYPES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:21,069] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:21,070] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:22,675] DEBUG [Controller id=0] Delete topics listener fired for topics database-CONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:22,675] INFO [Controller id=0] Starting topic deletion for topics database-CONDITIONS (kafka.controller.KafkaController)
[2020-07-28 21:09:22,675] INFO [Topic Deletion Manager 0] Handling deletion for topics database-CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:22,675] INFO [Topic Deletion Manager 0] Deletion of topic database-CONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:22,680] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-CONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:22,681] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-CONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:22,691] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-CONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:22,691] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-CONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:22,691] INFO [Topic Deletion Manager 0] Handling deletion for topics database-CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:22,710] INFO [Topic Deletion Manager 0] Deletion of topic database-CONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:22,711] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:22,712] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:24,375] DEBUG [Controller id=0] Delete topics listener fired for topics database-DECISIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:24,375] INFO [Controller id=0] Starting topic deletion for topics database-DECISIONS (kafka.controller.KafkaController)
[2020-07-28 21:09:24,375] INFO [Topic Deletion Manager 0] Handling deletion for topics database-DECISIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:24,375] INFO [Topic Deletion Manager 0] Deletion of topic database-DECISIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:24,380] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-DECISIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:24,381] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-DECISIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:24,394] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-DECISIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:24,394] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-DECISIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:24,394] INFO [Topic Deletion Manager 0] Handling deletion for topics database-DECISIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:24,409] INFO [Topic Deletion Manager 0] Deletion of topic database-DECISIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:24,410] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:24,411] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:26,080] DEBUG [Controller id=0] Delete topics listener fired for topics database-EDGE_HOSTS to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:26,080] INFO [Controller id=0] Starting topic deletion for topics database-EDGE_HOSTS (kafka.controller.KafkaController)
[2020-07-28 21:09:26,080] INFO [Topic Deletion Manager 0] Handling deletion for topics database-EDGE_HOSTS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:26,080] INFO [Topic Deletion Manager 0] Deletion of topic database-EDGE_HOSTS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:26,085] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-EDGE_HOSTS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:26,085] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-EDGE_HOSTS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:26,107] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-EDGE_HOSTS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:26,107] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-EDGE_HOSTS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:26,107] INFO [Topic Deletion Manager 0] Handling deletion for topics database-EDGE_HOSTS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:26,128] INFO [Topic Deletion Manager 0] Deletion of topic database-EDGE_HOSTS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:26,128] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:26,129] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:27,742] DEBUG [Controller id=0] Delete topics listener fired for topics database-FIELDS to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:27,742] INFO [Controller id=0] Starting topic deletion for topics database-FIELDS (kafka.controller.KafkaController)
[2020-07-28 21:09:27,742] INFO [Topic Deletion Manager 0] Handling deletion for topics database-FIELDS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:27,742] INFO [Topic Deletion Manager 0] Deletion of topic database-FIELDS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:27,745] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-FIELDS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:27,745] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-FIELDS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:27,757] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-FIELDS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:27,757] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-FIELDS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:27,757] INFO [Topic Deletion Manager 0] Handling deletion for topics database-FIELDS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:27,784] INFO [Topic Deletion Manager 0] Deletion of topic database-FIELDS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:27,785] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:27,786] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:29,417] DEBUG [Controller id=0] Delete topics listener fired for topics database-HOST_RULES to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:29,418] INFO [Controller id=0] Starting topic deletion for topics database-HOST_RULES (kafka.controller.KafkaController)
[2020-07-28 21:09:29,418] INFO [Topic Deletion Manager 0] Handling deletion for topics database-HOST_RULES (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:29,418] INFO [Topic Deletion Manager 0] Deletion of topic database-HOST_RULES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:29,421] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-HOST_RULES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:29,421] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-HOST_RULES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:29,431] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-HOST_RULES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:29,432] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-HOST_RULES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:29,432] INFO [Topic Deletion Manager 0] Handling deletion for topics database-HOST_RULES (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:29,446] INFO [Topic Deletion Manager 0] Deletion of topic database-HOST_RULES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:29,446] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:29,447] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:31,116] DEBUG [Controller id=0] Delete topics listener fired for topics database-HOST_RULE_CONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:31,116] INFO [Controller id=0] Starting topic deletion for topics database-HOST_RULE_CONDITIONS (kafka.controller.KafkaController)
[2020-07-28 21:09:31,116] INFO [Topic Deletion Manager 0] Handling deletion for topics database-HOST_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:31,116] INFO [Topic Deletion Manager 0] Deletion of topic database-HOST_RULE_CONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:31,121] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-HOST_RULE_CONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:31,121] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-HOST_RULE_CONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:31,141] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-HOST_RULE_CONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:31,141] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-HOST_RULE_CONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:31,141] INFO [Topic Deletion Manager 0] Handling deletion for topics database-HOST_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:31,155] INFO [Topic Deletion Manager 0] Deletion of topic database-HOST_RULE_CONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:31,156] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:31,157] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:32,848] DEBUG [Controller id=0] Delete topics listener fired for topics database-LOGGING_EVENT to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:32,848] INFO [Controller id=0] Starting topic deletion for topics database-LOGGING_EVENT (kafka.controller.KafkaController)
[2020-07-28 21:09:32,848] INFO [Topic Deletion Manager 0] Handling deletion for topics database-LOGGING_EVENT (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:32,848] INFO [Topic Deletion Manager 0] Deletion of topic database-LOGGING_EVENT (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:32,851] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-LOGGING_EVENT,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:32,851] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-LOGGING_EVENT,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:32,871] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-LOGGING_EVENT-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:32,871] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-LOGGING_EVENT,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:32,871] INFO [Topic Deletion Manager 0] Handling deletion for topics database-LOGGING_EVENT (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:32,898] INFO [Topic Deletion Manager 0] Deletion of topic database-LOGGING_EVENT successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:32,898] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:32,899] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:34,514] DEBUG [Controller id=0] Delete topics listener fired for topics database-OPERATORS to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:34,514] INFO [Controller id=0] Starting topic deletion for topics database-OPERATORS (kafka.controller.KafkaController)
[2020-07-28 21:09:34,514] INFO [Topic Deletion Manager 0] Handling deletion for topics database-OPERATORS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:34,514] INFO [Topic Deletion Manager 0] Deletion of topic database-OPERATORS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:34,518] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-OPERATORS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:34,518] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-OPERATORS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:34,532] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-OPERATORS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:34,532] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-OPERATORS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:34,532] INFO [Topic Deletion Manager 0] Handling deletion for topics database-OPERATORS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:34,557] INFO [Topic Deletion Manager 0] Deletion of topic database-OPERATORS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:34,559] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:34,560] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:36,219] DEBUG [Controller id=0] Delete topics listener fired for topics database-REGIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:36,219] INFO [Controller id=0] Starting topic deletion for topics database-REGIONS (kafka.controller.KafkaController)
[2020-07-28 21:09:36,219] INFO [Topic Deletion Manager 0] Handling deletion for topics database-REGIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:36,219] INFO [Topic Deletion Manager 0] Deletion of topic database-REGIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:36,224] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-REGIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:36,224] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-REGIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:36,237] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-REGIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:36,237] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-REGIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:36,237] INFO [Topic Deletion Manager 0] Handling deletion for topics database-REGIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:36,249] INFO [Topic Deletion Manager 0] Deletion of topic database-REGIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:36,250] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:36,251] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:37,962] DEBUG [Controller id=0] Delete topics listener fired for topics database-SERVICES to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:37,962] INFO [Controller id=0] Starting topic deletion for topics database-SERVICES (kafka.controller.KafkaController)
[2020-07-28 21:09:37,962] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:37,962] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:37,968] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:37,968] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:37,989] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-SERVICES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:37,989] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-SERVICES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:37,989] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICES (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:38,010] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:38,011] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:38,012] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:39,642] DEBUG [Controller id=0] Delete topics listener fired for topics database-SERVICE_DEPENDENCIES to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:39,642] INFO [Controller id=0] Starting topic deletion for topics database-SERVICE_DEPENDENCIES (kafka.controller.KafkaController)
[2020-07-28 21:09:39,642] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICE_DEPENDENCIES (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:39,642] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICE_DEPENDENCIES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:39,646] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICE_DEPENDENCIES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:39,646] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICE_DEPENDENCIES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:39,666] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-SERVICE_DEPENDENCIES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:39,666] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-SERVICE_DEPENDENCIES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:39,667] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICE_DEPENDENCIES (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:39,690] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICE_DEPENDENCIES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:39,692] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:39,693] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:41,344] DEBUG [Controller id=0] Delete topics listener fired for topics database-SERVICE_RULES to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:41,344] INFO [Controller id=0] Starting topic deletion for topics database-SERVICE_RULES (kafka.controller.KafkaController)
[2020-07-28 21:09:41,344] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICE_RULES (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:41,344] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICE_RULES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:41,348] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICE_RULES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:41,348] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICE_RULES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:41,359] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-SERVICE_RULES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:41,359] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-SERVICE_RULES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:41,359] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICE_RULES (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:41,378] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICE_RULES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:41,379] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:41,380] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:43,033] DEBUG [Controller id=0] Delete topics listener fired for topics database-SERVICE_RULE_CONDITIONS to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:43,033] INFO [Controller id=0] Starting topic deletion for topics database-SERVICE_RULE_CONDITIONS (kafka.controller.KafkaController)
[2020-07-28 21:09:43,033] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICE_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:43,033] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICE_RULE_CONDITIONS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:43,036] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICE_RULE_CONDITIONS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:43,036] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-SERVICE_RULE_CONDITIONS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:43,048] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-SERVICE_RULE_CONDITIONS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:43,048] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-SERVICE_RULE_CONDITIONS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:43,048] INFO [Topic Deletion Manager 0] Handling deletion for topics database-SERVICE_RULE_CONDITIONS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:43,065] INFO [Topic Deletion Manager 0] Deletion of topic database-SERVICE_RULE_CONDITIONS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:43,065] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:43,066] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:44,726] DEBUG [Controller id=0] Delete topics listener fired for topics database-USERS to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:44,726] INFO [Controller id=0] Starting topic deletion for topics database-USERS (kafka.controller.KafkaController)
[2020-07-28 21:09:44,726] INFO [Topic Deletion Manager 0] Handling deletion for topics database-USERS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:44,726] INFO [Topic Deletion Manager 0] Deletion of topic database-USERS (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:44,731] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-USERS,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:44,731] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-USERS,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:44,744] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-USERS-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:44,744] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-USERS,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:44,744] INFO [Topic Deletion Manager 0] Handling deletion for topics database-USERS (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:44,758] INFO [Topic Deletion Manager 0] Deletion of topic database-USERS successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:44,760] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:44,761] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:46,380] DEBUG [Controller id=0] Delete topics listener fired for topics database-VALUE_MODES to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:46,380] INFO [Controller id=0] Starting topic deletion for topics database-VALUE_MODES (kafka.controller.KafkaController)
[2020-07-28 21:09:46,380] INFO [Topic Deletion Manager 0] Handling deletion for topics database-VALUE_MODES (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:46,381] INFO [Topic Deletion Manager 0] Deletion of topic database-VALUE_MODES (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:46,386] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=database-VALUE_MODES,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:46,386] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=database-VALUE_MODES,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:46,408] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(database-VALUE_MODES-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:46,408] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=database-VALUE_MODES,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:46,408] INFO [Topic Deletion Manager 0] Handling deletion for topics database-VALUE_MODES (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:46,429] INFO [Topic Deletion Manager 0] Deletion of topic database-VALUE_MODES successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:46,431] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:46,432] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:48,080] DEBUG [Controller id=0] Delete topics listener fired for topics worker-manager- to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:48,080] INFO [Controller id=0] Starting topic deletion for topics worker-manager- (kafka.controller.KafkaController)
[2020-07-28 21:09:48,080] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager- (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:48,080] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager- (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:48,084] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:48,084] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:48,106] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(worker-manager--0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:48,106] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=worker-manager-,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:48,106] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager- (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:48,128] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager- successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:48,129] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:48,129] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:49,777] DEBUG [Controller id=0] Delete topics listener fired for topics worker-manager-.DLT to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:49,778] INFO [Controller id=0] Starting topic deletion for topics worker-manager-.DLT (kafka.controller.KafkaController)
[2020-07-28 21:09:49,778] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager-.DLT (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:49,778] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager-.DLT (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:49,781] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-.DLT,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:49,782] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-.DLT,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:49,795] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(worker-manager-.DLT-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:49,795] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=worker-manager-.DLT,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:49,795] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager-.DLT (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:49,823] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager-.DLT successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:49,824] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:49,825] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:51,479] DEBUG [Controller id=0] Delete topics listener fired for topics worker-manager-worker1 to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:51,479] INFO [Controller id=0] Starting topic deletion for topics worker-manager-worker1 (kafka.controller.KafkaController)
[2020-07-28 21:09:51,479] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager-worker1 (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:51,479] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager-worker1 (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:51,484] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-worker1,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:51,484] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-worker1,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:51,495] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(worker-manager-worker1-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:51,495] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=worker-manager-worker1,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:51,496] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager-worker1 (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:51,511] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager-worker1 successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:51,512] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:51,513] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:53,127] DEBUG [Controller id=0] Delete topics listener fired for topics worker-manager-worker1.DLT to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:09:53,127] INFO [Controller id=0] Starting topic deletion for topics worker-manager-worker1.DLT (kafka.controller.KafkaController)
[2020-07-28 21:09:53,127] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager-worker1.DLT (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:53,128] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager-worker1.DLT (re)started (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:53,131] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-worker1.DLT,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:53,131] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=worker-manager-worker1.DLT,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-07-28 21:09:53,146] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(worker-manager-worker1.DLT-0 -> NONE) (kafka.controller.KafkaController)
[2020-07-28 21:09:53,146] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=worker-manager-worker1.DLT,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:53,146] INFO [Topic Deletion Manager 0] Handling deletion for topics worker-manager-worker1.DLT (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:53,172] INFO [Topic Deletion Manager 0] Deletion of topic worker-manager-worker1.DLT successfully completed (kafka.controller.TopicDeletionManager)
[2020-07-28 21:09:53,173] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-07-28 21:09:53,174] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-07-28 21:12:43,970] INFO [Controller id=0] New topics: [Set(database-APPS)], deleted topics: [Set()], new partition replica assignment [Map(database-APPS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 21:12:43,970] INFO [Controller id=0] New partition creation callback for database-APPS-0 (kafka.controller.KafkaController)
[2020-07-28 21:12:44,110] INFO [Controller id=0] New topics: [Set(database-APP_SERVICES)], deleted topics: [Set()], new partition replica assignment [Map(database-APP_SERVICES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 21:12:44,110] INFO [Controller id=0] New partition creation callback for database-APP_SERVICES-0 (kafka.controller.KafkaController)
[2020-07-28 21:12:44,237] INFO [Controller id=0] New topics: [Set(database-COMPONENT_TYPES)], deleted topics: [Set()], new partition replica assignment [Map(database-COMPONENT_TYPES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 21:12:44,237] INFO [Controller id=0] New partition creation callback for database-COMPONENT_TYPES-0 (kafka.controller.KafkaController)
[2020-07-28 21:12:44,357] INFO [Controller id=0] New topics: [Set(database-CONDITIONS)], deleted topics: [Set()], new partition replica assignment [Map(database-CONDITIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 21:12:44,357] INFO [Controller id=0] New partition creation callback for database-CONDITIONS-0 (kafka.controller.KafkaController)
[2020-07-28 21:12:44,484] INFO [Controller id=0] New topics: [Set(database-DECISIONS)], deleted topics: [Set()], new partition replica assignment [Map(database-DECISIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 21:12:44,484] INFO [Controller id=0] New partition creation callback for database-DECISIONS-0 (kafka.controller.KafkaController)
[2020-07-28 21:12:44,609] INFO [Controller id=0] New topics: [Set(database-EDGE_HOSTS)], deleted topics: [Set()], new partition replica assignment [Map(database-EDGE_HOSTS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 21:12:44,609] INFO [Controller id=0] New partition creation callback for database-EDGE_HOSTS-0 (kafka.controller.KafkaController)
[2020-07-28 21:12:44,727] INFO [Controller id=0] New topics: [Set(database-FIELDS)], deleted topics: [Set()], new partition replica assignment [Map(database-FIELDS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 21:12:44,727] INFO [Controller id=0] New partition creation callback for database-FIELDS-0 (kafka.controller.KafkaController)
[2020-07-28 21:12:44,850] INFO [Controller id=0] New topics: [Set(database-HOST_RULES)], deleted topics: [Set()], new partition replica assignment [Map(database-HOST_RULES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 21:12:44,850] INFO [Controller id=0] New partition creation callback for database-HOST_RULES-0 (kafka.controller.KafkaController)
[2020-07-28 21:12:44,975] INFO [Controller id=0] New topics: [Set(database-HOST_RULE_CONDITIONS)], deleted topics: [Set()], new partition replica assignment [Map(database-HOST_RULE_CONDITIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 21:12:44,975] INFO [Controller id=0] New partition creation callback for database-HOST_RULE_CONDITIONS-0 (kafka.controller.KafkaController)
[2020-07-28 21:12:45,096] INFO [Controller id=0] New topics: [Set(database-LOGGING_EVENT)], deleted topics: [Set()], new partition replica assignment [Map(database-LOGGING_EVENT-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 21:12:45,097] INFO [Controller id=0] New partition creation callback for database-LOGGING_EVENT-0 (kafka.controller.KafkaController)
[2020-07-28 21:12:45,223] INFO [Controller id=0] New topics: [Set(database-OPERATORS)], deleted topics: [Set()], new partition replica assignment [Map(database-OPERATORS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 21:12:45,223] INFO [Controller id=0] New partition creation callback for database-OPERATORS-0 (kafka.controller.KafkaController)
[2020-07-28 21:12:45,350] INFO [Controller id=0] New topics: [Set(database-REGIONS)], deleted topics: [Set()], new partition replica assignment [Map(database-REGIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 21:12:45,350] INFO [Controller id=0] New partition creation callback for database-REGIONS-0 (kafka.controller.KafkaController)
[2020-07-28 21:12:45,474] INFO [Controller id=0] New topics: [Set(database-SERVICES)], deleted topics: [Set()], new partition replica assignment [Map(database-SERVICES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 21:12:45,474] INFO [Controller id=0] New partition creation callback for database-SERVICES-0 (kafka.controller.KafkaController)
[2020-07-28 21:12:45,601] INFO [Controller id=0] New topics: [Set(database-SERVICE_DEPENDENCIES)], deleted topics: [Set()], new partition replica assignment [Map(database-SERVICE_DEPENDENCIES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 21:12:45,601] INFO [Controller id=0] New partition creation callback for database-SERVICE_DEPENDENCIES-0 (kafka.controller.KafkaController)
[2020-07-28 21:12:45,734] INFO [Controller id=0] New topics: [Set(database-SERVICE_RULES)], deleted topics: [Set()], new partition replica assignment [Map(database-SERVICE_RULES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 21:12:45,734] INFO [Controller id=0] New partition creation callback for database-SERVICE_RULES-0 (kafka.controller.KafkaController)
[2020-07-28 21:12:45,853] INFO [Controller id=0] New topics: [Set(database-SERVICE_RULE_CONDITIONS)], deleted topics: [Set()], new partition replica assignment [Map(database-SERVICE_RULE_CONDITIONS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 21:12:45,853] INFO [Controller id=0] New partition creation callback for database-SERVICE_RULE_CONDITIONS-0 (kafka.controller.KafkaController)
[2020-07-28 21:12:45,980] INFO [Controller id=0] New topics: [Set(database-USERS)], deleted topics: [Set()], new partition replica assignment [Map(database-USERS-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 21:12:45,980] INFO [Controller id=0] New partition creation callback for database-USERS-0 (kafka.controller.KafkaController)
[2020-07-28 21:12:46,099] INFO [Controller id=0] New topics: [Set(database-VALUE_MODES)], deleted topics: [Set()], new partition replica assignment [Map(database-VALUE_MODES-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))] (kafka.controller.KafkaController)
[2020-07-28 21:12:46,099] INFO [Controller id=0] New partition creation callback for database-VALUE_MODES-0 (kafka.controller.KafkaController)
[2020-07-28 21:13:48,647] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 21:13:48,648] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 21:13:48,649] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 21:13:48,649] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 21:18:48,649] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 21:18:48,649] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 21:18:48,650] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 21:18:48,650] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 21:23:48,650] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 21:23:48,650] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 21:23:48,651] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 21:23:48,651] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 21:28:48,651] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 21:28:48,651] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 21:28:48,652] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 21:28:48,652] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-07-28 21:58:08,643] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-07-28 21:58:08,643] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-07-28 21:58:08,643] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-07-28 21:58:08,643] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
