arquitetura:

cada local manager controla 1 swarm

comunica com o master manager atrvés de kafka

usar o docker swarm service, usando constraints para controlar o local de deployment
https://success.docker.com/article/using-contraints-and-labels-to-control-the-placement-of-containers
resolve o problema do service discovery, usando o dns incorporado do docker swarm


web-manager:
loadbalancer 502 bad gateway
new container erroring
launch load balancer at aws not working

master-manager
rename all manager exceptions to MasterManagerException, when applied
add assertEntityDoesntExist on every add method and compare every query 'name' with lower function
NodesController return new SimpleNodes
choose node based on geocoding https://developers.google.com/maps/documentation/geocoding/start?csw=1

docker:
fix master-manager dockerfile

test: 
reload every single page with empty state
try to delete/update/insert entities after saving


documento:
1. docker swarm 
https://docs.docker.com/engine/swarm/
https://docs.docker.com/engine/swarm/admin_guide/
https://docs.docker.com/engine/swarm/key-concepts/
1. ver porque docker e kubernets scheduling não resolve o nosso problema
https://blog.scottlogic.com/2016/06/17/docker-swarm.html (não usar esta referencia, procurar uma oficial mas semelhante)
2. o docker swarm contem um service discovery, mas apenas se for usado o 'docker service' para iniciar e gerir containers, (funciona através da configuração de uma overlay network). o que implica o uso do docker swarm scheduling, que não é util para o nosso caso