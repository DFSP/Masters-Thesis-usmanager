Gestão de recursos

Placement de serviços baseado em restrições

Federação

Monitorização

Service mesh

Service discovery

Message exchanges (rabbitmq, kafka)

Trabalho relacionado

Trabalho futuro: workload sharing entre nós






Funcionalidades do Local Manager:
	- Escalabilidade horizontal de nós
	- Replicação de containers

Funcionalidades do Master Manager:
 	- Escalabilidade horizontal de nós
 	- Replicação e migração de containers
 	- Atribuição de serviços ao local manager
 	- Gestão de local managers
 	- Gestão de nós na cloud
 	- Gestão de máquinas cloud e edge 

Comunicação entre o Local Manager e o Master Manager:
1. métricas de nós e containers? ou capacidade de ram/cpu/disco/bandwidth disponivel?

Comunicação entre o Master Manager e o Local Manager:
1. iniciar um serviço, indicando o nº de réplicas
2. parar um serviço, forçando todos os containers também a pararem
3. migrar um container 

Bases de dados do Master manager:
 - uma privada:
  	1. cloud hosts
  	2. edge hosts
  	3. containers
  	4. ...
 - uma pública replicada em cada local-manager
  	1. rules
  	2. fields
  	3. simulated metrics
  	4. component types

Base de dados do Local manager:
  	1. rules
  	2. fields
  	3. simulated metrics
  	4. component types

Load-balancer:
  - Presente ao lado de cada local-manager
  - Apenas redireciona serviços frontend
  - Usar um algoritmo baseado em geolocalização/latência e workload?
  https://dropbox.tech/infrastructure/intelligent-dns-based-load-balancing-at-dropbox
  https://www.nginx.com/resources/glossary/global-server-load-balancing/

Comunicação entre serviços:
  1º usa o dns do docker swarm para tentar encontrar um container local, gerido pelo mesmo local-manager, dentro do mesmo docker swarm
  2º se não encontra, usa o eureka server para encontrar o serviço pretendido (quer dizer que todas as replicas devem de estar registadas no eureka server?)