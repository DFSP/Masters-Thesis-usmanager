maquina onde executa o master manager, nao pertence ao docker swarm cluster. em vez, recebe os endereços dos master nodes. ou melhor, define a localização dos master nodes dinamicamente, no inicio da execução

- mudar o algoritmo de escolha de hosts para ser baseado em coordenadas, em vez do atual, que é baseado em regiões/paises/cidades, e.g.:

	1. armazenar a proveniencia dos pedidos
	2. calcular a coordenada no local intermedio
		2.1. muitos pedidos em lisboa, a coordenada calculada seria em lisboa
		2.2. 1/2 dos pedidos em lisboa e 1/2 dos pedidos no porto, a coordenada seria perto de leiria/coimbra
		2.3. 1/2 dos pedidos no algarve e 1/2 dos pedidos no porto, a coordenada seria em lisboa
		2.4. 1/2 dos pedidos em lisboa e 1/2 dos pedidos em madrid, o algoritmo tentaria escolher 2 coordenadas, uma em cada capital
		2.5. definir um threshold (tipo 500km entre a localização dos pedidos) para ser escolhido mais do que um host
		2.6. 2/3 dos pedidos em lisboa, 1/3 dos pedidos no algarve, a coordenada calculada seria mais perto de lisboa, algo como setubal, portanto, o calculo da coordenada deve ter em conta não só a proveniencia, como também o nº de pedidos, e.g. 15% atualmente (pag 63)
	3. procurar os hosts o mais proximo possivel das coordenadas calculadas


- como é que o componente "Register and discover services" sabe o endereço do(s) service registry? (pag 56)
- como é que o loadbalancer sabe os endpoints todos? (pag 57)
- o nº de replicas/nós apenas é aumentado/diminuido em 1 unidade em cada ciclo (pag 60). alterar isto para tentar ser mais do que 1 unidade, e assim chegar ao estado pretendido mais rapido
- as regras não têm nada para definir a localização do host escolhido (edge/cloud), em vez, primeiro é sempre procurado um host na edge e, se não encontrado, procura na cloud
- ao adicionar um novo nó, alguns ou todos os containers são migrados do nó que precisa de mais nós, para o nó criado
- "Caso o nó tenha
containers em execução, estes são migrados para um outro nó disponível num local
idêntico, e só depois o nó é removido". e se não houver mais nenhum nó por perto (na mesma região)?
- quantidade da dependencia não é considerada. e,g, frontend pode estar mais dependente do serviço catalogue do que do serviço carts
- alta latencia e largura de banda tambem pode ser devido a um nº alto de acessos, portanto replicar o microserviço pode tambem ser necessario, não só migrar (pag 69). tentar ter uma metrica para tempo de processamento do pedido (que tambem influencia a latencia)
- adicionar regras para uma aplicação
- migração de serviços não está implementada (pag 82). necessário migrar todos os containers de um certo serviço
- adicionar suporte para várias regioes da aws (atualmente apenas us-east-1)
- o eureka server só deteta que um container falhou passado 90 segundos. por exemplo o docker deteta que um nó falhou em 5-10 segundos. diminuir o tempo de heartbeat/nº de vezes que precisa de não responder para ser considerado down? (pag 87)
- componente de comunicação faz caching durante 10 segundos
- tentar usar o docker swarm service para controlar os containers, em vez de usar standalone containers
- ver pag 127 para ver as funcionalidades em falta