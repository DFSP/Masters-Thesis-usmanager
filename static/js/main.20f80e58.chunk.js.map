{"version":3,"sources":["actions/index.tsx","middleware/api.ts","components/BaseComponent.ts","components/list/ListItem.module.css","utils/image.tsx","components/form/TextBox.tsx","components/form/MultilineTextBox.tsx","components/form/Datepicker.tsx","components/form/Timepicker.tsx","components/form/NumberBox.tsx","components/form/CheckboxList.tsx","components/form/Checkbox.tsx","components/form/Field.tsx","components/form/Form.tsx","utils/router.ts","views/sidenav/Sidenav.tsx","components/breadcrumbs/Breadcrumbs.tsx","views/mainLayout/MainLayout.tsx","components/list/CardItem.tsx","components/list/UseLongPress.tsx","components/list/ListItem.tsx","components/contextmenu/LinkedContextMenuItem.tsx","utils/api.ts","components/dialogs/InputDialog.tsx","components/list/ControlledList.tsx","components/errors/Error.tsx","components/form/AddButton.tsx","components/list/LoadingSpinner.tsx","components/tabs/Tabs.tsx","components/list/CardList.tsx","components/list/CardTitle.tsx","components/cards/Card.tsx","utils/text.ts","components/form/UnsavedChanges.tsx","components/form/Form.module.css","components/list/SimpleList.tsx","components/list/PageNumber.tsx","components/list/Pagination.tsx","components/list/PagedList.tsx","components/list/FilteredList.tsx","components/list/AnimatedList.tsx","components/list/List.tsx","components/collapsible/Collapsible.tsx","routes/management/ssh/Ssh.module.css","routes/management/rules/Rules.module.css","routes/management/hosts/cloud/CloudHostRuleList.tsx","routes/management/hosts/cloud/CloudHostSimulatedMetricList.tsx","routes/management/hosts/cloud/CloudHostSshCommand.tsx","routes/management/hosts/cloud/CloudHostSshFileTransfer.tsx","routes/management/hosts/cloud/CloudHost.tsx","routes/management/metrics/SimulatedMetrics.module.css","routes/management/logs/LogsList.module.css","utils/auth.ts","components/contextmenu/DividerContextMenuItem.tsx","routes/management/ssh/SshPanel.tsx","routes/management/workerManagers/AssignedHostsList.tsx","routes/management/workerManagers/WorkerManager.tsx","routes/management/workerManagers/WorkerManagerCard.tsx","routes/management/workerManagers/WorkerManagersList.tsx","routes/management/workerManagers/WorkerManagers.tsx","routes/management/rules/apps/RuleAppConditionsList.tsx","routes/management/rules/apps/RuleAppAppsList.tsx","routes/management/rules/apps/RuleApp.tsx","routes/management/rules/apps/RulesApp.tsx","routes/management/metrics/apps/SimulatedAppMetrics.tsx","routes/management/metrics/apps/SimulatedAppMetricAppsList.tsx","routes/management/metrics/apps/SimulatedAppMetric.tsx","containers/Root.dev.tsx","components/list/ControlledList.module.css","components/form/Dropdown.tsx","routes/management/rules/Rule.tsx","components/PageNotFound.tsx","routes/management/hosts/Hosts.module.css","components/dialogs/Dialog.tsx","components/list/Empty.tsx","routes/management/services/GenericServiceRuleList.tsx","routes/management/services/GenericSimulatedServiceMetricList.tsx","components/list/ActionButton.tsx","components/map/Marker.tsx","components/map/LocationMap.tsx","components/form/CheckboxList.module.css","views/login/Login.tsx","routes/management/services/ServiceAppList.tsx","routes/management/services/ServiceDependencyList.tsx","routes/management/services/ServiceDependentList.tsx","routes/management/services/ServicePredictionList.tsx","routes/management/services/ServiceRuleList.tsx","routes/management/services/ServiceSimulatedMetricList.tsx","routes/management/services/Service.tsx","components/tabs/Tabs.module.css","components/dialogs/ConfirmDialog.tsx","routes/management/services/Services.module.css","views/login/Login.module.css","routes/management/landing/Landing.tsx","routes/monitoring/landing/Landing.tsx","routes/dataManagement/landing/Landing.tsx","components/actionloading/ActionProgressBar.tsx","components/AuthenticatedRoute.tsx","routes/management/regions/Region.tsx","routes/management/hosts/GenericHostRuleList.tsx","routes/management/hosts/GenericSimulatedHostMetricList.tsx","routes/management/hosts/Hosts.tsx","routes/management/hosts/cloud/CloudHosts.tsx","routes/management/hosts/edge/EdgeHosts.module.css","routes/management/hosts/edge/EdgeHosts.tsx","routes/management/rules/hosts/RulesHost.tsx","routes/management/rules/services/RulesService.tsx","routes/management/rules/Rules.tsx","routes/management/rules/conditions/RuleConditions.tsx","routes/management/rules/conditions/RuleCondition.tsx","routes/management/loadBalancers/LoadBalancer.tsx","routes/management/registrationServers/RegistrationServer.tsx","routes/management/metrics/SimulatedMetrics.tsx","routes/management/metrics/hosts/SimulatedHostMetrics.tsx","routes/management/metrics/services/SimulatedServiceMetrics.tsx","views/footer/Footer.tsx","routes/management/rules/containers/RulesContainer.tsx","routes/management/metrics/containers/SimulatedContainerMetrics.tsx","routes/management/settings/Settings.tsx","routes/monitoring/settings/Settings.tsx","routes/dataManagement/settings/Settings.tsx","store/localStorage.ts","routes/management/containers/ContainerPortsList.tsx","routes/management/containers/ContainerLabelsList.tsx","routes/management/containers/ContainerLogsList.tsx","routes/management/containers/ContainerRuleList.tsx","routes/management/containers/ContainerSimulatedMetricList.tsx","routes/management/containers/Container.tsx","routes/management/hosts/edge/EdgeHostRuleList.tsx","routes/management/hosts/edge/EdgeHostSimulatedMetricList.tsx","routes/management/hosts/edge/EdgeHostSshCommand.tsx","routes/management/hosts/edge/EdgeHostSshFileTransfer.tsx","routes/management/hosts/edge/EdgeHost.tsx","routes/management/apps/AppServicesList.tsx","routes/management/apps/LaunchAppDialog.tsx","routes/management/apps/AppRuleList.tsx","routes/management/apps/AppSimulatedMetricList.tsx","routes/management/apps/App.tsx","routes/management/rules/hosts/RuleHostConditionList.tsx","routes/management/rules/hosts/RuleHostCloudHostsList.tsx","routes/management/rules/hosts/RuleHostEdgeHostsList.tsx","routes/management/rules/hosts/RuleHost.tsx","components/contextmenu/ActionContextMenuItem.tsx","routes/management/hosts/cloud/CloudHostCard.tsx","routes/management/hosts/cloud/CloudHostsList.tsx","routes/management/ssh/SshCommand.tsx","routes/management/ssh/SshFile.tsx","routes/management/ssh/Ssh.tsx","routes/management/rules/containers/RuleContainerConditionList.tsx","routes/management/rules/containers/RuleContainerContainersList.tsx","routes/management/rules/containers/RuleContainer.tsx","routes/management/rules/services/RuleServiceConditionList.tsx","routes/management/rules/services/RuleServiceServicesList.tsx","routes/management/rules/services/RuleService.tsx","routes/management/metrics/hosts/SimulatedHostMetricCloudHostList.tsx","routes/management/metrics/hosts/SimulatedHostMetricEdgeHostList.tsx","routes/management/metrics/hosts/SimulatedHostMetric.tsx","routes/management/loadBalancers/LoadBalancerCard.tsx","routes/management/loadBalancers/LoadBalancersList.tsx","routes/management/loadBalancers/LoadBalancers.tsx","routes/management/registrationServers/RegistrationServerCard.tsx","routes/management/registrationServers/RegistrationServersList.tsx","routes/management/registrationServers/RegistrationServers.tsx","components/contextmenu/ContextSubMenuItem.tsx","routes/management/containers/ContainerCard.tsx","routes/management/containers/Containers.tsx","routes/management/rules/apps/RuleAppCard.tsx","routes/management/rules/apps/RulesAppList.tsx","routes/management/rules/containers/RuleContainerCard.tsx","routes/management/rules/containers/RulesContainerList.tsx","routes/management/regions/RegionCard.tsx","routes/management/regions/Regions.tsx","routes/management/hosts/edge/EdgeHostCard.tsx","routes/management/hosts/edge/EdgeHostsList.tsx","views/navbar/SearchBar.tsx","views/navbar/Navbar.tsx","routes/management/metrics/services/SimulatedServiceMetricCard.tsx","routes/management/metrics/services/SimulatedServiceMetricsList.tsx","routes/management/rules/services/RuleServiceCard.tsx","routes/management/rules/services/RulesServiceList.tsx","routes/management/metrics/hosts/SimulatedHostMetricCard.tsx","routes/management/metrics/hosts/SimulatedHostMetricsList.tsx","routes/management/rules/hosts/RuleHostCard.tsx","routes/management/rules/hosts/RulesHostList.tsx","routes/management/nodes/NodeCard.tsx","routes/management/nodes/Nodes.tsx","routes/management/metrics/apps/SimulatedAppMetricCard.tsx","routes/management/metrics/apps/SimulatedAppMetricsList.tsx","routes/management/metrics/containers/SimulatedContainerMetricCard.tsx","routes/management/metrics/containers/SimulatedContainerMetricsList.tsx","routes/management/apps/AppCard.tsx","routes/management/apps/Apps.tsx","routes/management/nodes/NodeLabelList.tsx","routes/management/nodes/Node.tsx","routes/management/metrics/services/SimulatedServiceMetricServiceList.tsx","routes/management/metrics/services/SimulatedServiceMetric.tsx","routes/management/metrics/containers/SimulatedContainerMetricContainerList.tsx","routes/management/metrics/containers/SimulatedContainerMetric.tsx","routes/management/services/ServiceCard.tsx","routes/management/services/Services.tsx","routes/management/logs/LogsList.tsx","routes/management/logs/ManagementLogs.tsx","routes/management/rules/conditions/RuleConditionCard.tsx","routes/management/rules/conditions/RuleConditionsList.tsx","components/breadcrumbs/Breadcrumbs.module.css","routes/management/landing/Landing.module.css","components/errors/Error.module.css","components/list/CardItem.module.css","components/form/AddButton.module.css","components/list/Empty.module.css","components/dialogs/ConfirmDialog.module.css","components/list/SimpleList.module.css","components/list/Pagination.module.css","components/form/Checkbox.module.css","components/form/UnsavedChanges.module.css","routes/management/containers/ContainerLogsList.module.css","views/navbar/SearchBar.module.css","components/map/MapChart.tsx","components/list/CardTitle.module.css","components/actionloading/ActionLoadingSpinner.module.css","components/list/LoadingSpinner.module.css","routes/management/services/ServiceAppList.module.css","routes/management/regions/Regions.module.css","routes/management/nodes/Nodes.module.css","routes/management/containers/Containers.module.css","routes/management/apps/Apps.module.css","routes/management/rules/hosts/RulesHost.module.css","routes/management/rules/services/RulesService.module.css","routes/management/rules/conditions/RuleConditions.module.css","routes/management/loadBalancers/LoadBalancers.module.css","routes/management/registrationServers/RegistrationServers.module.css","routes/management/metrics/hosts/SimulatedHostMetrics.module.css","routes/management/metrics/services/SimulatedServiceMetrics.module.css","routes/management/rules/containers/RulesContainer.module.css","routes/management/metrics/containers/SimulatedContainerMetrics.module.css","routes/management/workerManagers/WorkerManagers.module.css","routes/management/rules/apps/RulesApp.module.css","routes/management/metrics/apps/SimulatedAppMetrics.module.css","containers/Root.prod.tsx","resources/images/logo.png","reducers/entities.ts","reducers/ui.ts","reducers/index.ts","store/configureStore.prod.ts","serviceWorker.ts","containers/Root.ts","store/configureStore.ts","index.tsx"],"names":["APPS_REQUEST","APPS_SUCCESS","APPS_FAILURE","APP_REQUEST","APP_SUCCESS","APP_FAILURE","loadApps","name","dispatch","fetchApps","CALL_API","types","endpoint","schema","Schemas","APP","entity","APP_ARRAY","ADD_APP","addApp","app","type","data","apps","Array","UPDATE_APP","updateApp","previousApp","currentApp","DELETE_APP","deleteApp","APP_SERVICES_REQUEST","APP_SERVICES_SUCCESS","APP_SERVICES_FAILURE","loadAppServices","appName","fetchAppServices","APP_SERVICE_ARRAY","ADD_APP_SERVICES","addAppServices","REMOVE_APP_SERVICES","removeAppServices","serviceNames","APP_RULES_REQUEST","APP_RULES_SUCCESS","APP_RULES_FAILURE","loadAppRules","fetchAppRules","APP_RULE_ARRAY","ADD_APP_RULES","addAppRules","rules","rulesNames","REMOVE_APP_RULES","removeAppRules","APP_SIMULATED_METRICS_REQUEST","APP_SIMULATED_METRICS_SUCCESS","APP_SIMULATED_METRICS_FAILURE","loadAppSimulatedMetrics","fetchAppSimulatedMetrics","APP_SIMULATED_METRIC_ARRAY","ADD_APP_SIMULATED_METRICS","addAppSimulatedMetrics","simulatedMetrics","simulatedMetricNames","REMOVE_APP_SIMULATED_METRICS","removeAppSimulatedMetrics","SERVICES_REQUEST","SERVICES_SUCCESS","SERVICES_FAILURE","SERVICE_REQUEST","SERVICE_SUCCESS","SERVICE_FAILURE","loadServices","fetchServices","SERVICE","SERVICE_ARRAY","ADD_SERVICE","addService","service","services","UPDATE_SERVICE","updateService","previousService","currentService","DELETE_SERVICE","deleteService","SERVICE_APPS_REQUEST","SERVICE_APPS_SUCCESS","SERVICE_APPS_FAILURE","loadServiceApps","serviceName","fetchServiceApps","SERVICE_APP_ARRAY","ADD_SERVICE_APPS","addServiceApps","appsNames","REMOVE_SERVICE_APPS","removeServiceApps","SERVICE_DEPENDENCIES_REQUEST","SERVICE_DEPENDENCIES_SUCCESS","SERVICE_DEPENDENCIES_FAILURE","loadServiceDependencies","fetchServiceDependencies","SERVICE_DEPENDENCY_ARRAY","ADD_SERVICE_DEPENDENCIES","addServiceDependencies","dependencies","dependenciesNames","REMOVE_SERVICE_DEPENDENCIES","removeServiceDependencies","SERVICE_DEPENDENTS_REQUEST","SERVICE_DEPENDENTS_SUCCESS","SERVICE_DEPENDENTS_FAILURE","loadServiceDependents","fetchServiceDependents","SERVICE_DEPENDENT_ARRAY","SERVICE_PREDICTIONS_REQUEST","SERVICE_PREDICTIONS_SUCCESS","SERVICE_PREDICTIONS_FAILURE","loadServicePredictions","fetchServicePredictions","SERVICE_PREDICTION_ARRAY","ADD_SERVICE_PREDICTIONS","addServicePredictions","predictions","REMOVE_SERVICE_PREDICTIONS","removeServicePredictions","predictionsNames","SERVICE_RULES_REQUEST","SERVICE_RULES_SUCCESS","SERVICE_RULES_FAILURE","loadServiceRules","fetchServiceRules","SERVICE_RULE_ARRAY","ADD_SERVICE_RULES","addServiceRules","REMOVE_SERVICE_RULES","removeServiceRules","SERVICE_SIMULATED_METRICS_REQUEST","SERVICE_SIMULATED_METRICS_SUCCESS","SERVICE_SIMULATED_METRICS_FAILURE","loadServiceSimulatedMetrics","fetchServiceSimulatedMetrics","SERVICE_SIMULATED_METRIC_ARRAY","ADD_SERVICE_SIMULATED_METRICS","addServiceSimulatedMetrics","REMOVE_SERVICE_SIMULATED_METRICS","removeServiceSimulatedMetrics","CONTAINERS_REQUEST","CONTAINERS_SUCCESS","CONTAINERS_FAILURE","CONTAINER_REQUEST","CONTAINER_SUCCESS","CONTAINER_FAILURE","loadContainers","id","fetchContainers","CONTAINER","CONTAINER_ARRAY","ADD_CONTAINERS","addContainers","containers","DELETE_CONTAINER","deleteContainer","container","reloadContainers","method","CONTAINER_LOGS_REQUEST","CONTAINER_LOGS_SUCCESS","CONTAINER_LOGS_FAILURE","loadContainerLogs","containerId","CONTAINER_RULES_REQUEST","CONTAINER_RULES_SUCCESS","CONTAINER_RULES_FAILURE","loadContainerRules","fetchContainerRules","CONTAINER_RULE_ARRAY","ADD_CONTAINER_RULES","addContainerRules","REMOVE_CONTAINER_RULES","removeContainerRules","CONTAINER_SIMULATED_METRICS_REQUEST","CONTAINER_SIMULATED_METRICS_SUCCESS","CONTAINER_SIMULATED_METRICS_FAILURE","loadContainerSimulatedMetrics","fetchContainerSimulatedMetrics","CONTAINER_SIMULATED_METRIC_ARRAY","ADD_CONTAINER_SIMULATED_METRICS","addContainerSimulatedMetrics","REMOVE_CONTAINER_SIMULATED_METRICS","removeContainerSimulatedMetrics","CLOUD_HOSTS_REQUEST","CLOUD_HOSTS_SUCCESS","CLOUD_HOSTS_FAILURE","CLOUD_HOST_REQUEST","CLOUD_HOST_SUCCESS","CLOUD_HOST_FAILURE","loadCloudHosts","instanceId","fetchCloudHosts","CLOUD_HOST","CLOUD_HOST_ARRAY","syncCloudHosts","ADD_CLOUD_HOST","addCloudHost","cloudHost","cloudHosts","UPDATE_CLOUD_HOST","updateCloudHost","previousCloudHost","currentCloudHost","DELETE_CLOUD_HOST","deleteCloudHost","CLOUD_HOST_RULES_REQUEST","CLOUD_HOST_RULES_SUCCESS","CLOUD_HOST_RULES_FAILURE","loadCloudHostRules","fetchCloudHostRules","CLOUD_HOST_RULE_ARRAY","ADD_CLOUD_HOST_RULE","addCloudHostRule","rule","REMOVE_CLOUD_HOST_RULES","removeCloudHostRules","CLOUD_HOST_SIMULATED_METRICS_REQUEST","CLOUD_HOST_SIMULATED_METRICS_SUCCESS","CLOUD_HOST_SIMULATED_METRICS_FAILURE","loadCloudHostSimulatedMetrics","fetchCloudHostSimulatedMetrics","CLOUD_HOST_SIMULATED_METRIC_ARRAY","ADD_CLOUD_HOST_SIMULATED_METRICS","addCloudHostSimulatedMetrics","REMOVE_CLOUD_HOST_SIMULATED_METRICS","removeCloudHostSimulatedMetrics","CLOUD_REGIONS_REQUEST","CLOUD_REGIONS_SUCCESS","CLOUD_REGIONS_FAILURE","loadCloudRegions","fetchCloudRegions","EDGE_HOSTS_REQUEST","EDGE_HOSTS_SUCCESS","EDGE_HOSTS_FAILURE","EDGE_HOST_REQUEST","EDGE_HOST_SUCCESS","EDGE_HOST_FAILURE","loadEdgeHosts","hostname","fetchEdgeHosts","EDGE_HOST","EDGE_HOST_ARRAY","ADD_EDGE_HOST","addEdgeHost","edgeHost","edgeHosts","UPDATE_EDGE_HOST","updateEdgeHost","previousEdgeHost","currentEdgeHost","DELETE_EDGE_HOST","deleteEdgeHost","EDGE_HOST_RULES_REQUEST","EDGE_HOST_RULES_SUCCESS","EDGE_HOST_RULES_FAILURE","loadEdgeHostRules","fetchEdgeHostRules","EDGE_HOST_RULE_ARRAY","ADD_EDGE_HOST_RULES","addEdgeHostRules","REMOVE_EDGE_HOST_RULES","removeEdgeHostRules","EDGE_HOST_SIMULATED_METRICS_REQUEST","EDGE_HOST_SIMULATED_METRICS_SUCCESS","EDGE_HOST_SIMULATED_METRICS_FAILURE","loadEdgeHostSimulatedMetrics","fetchEdgeHostSimulatedMetrics","EDGE_HOST_SIMULATED_METRIC_ARRAY","ADD_EDGE_HOST_SIMULATED_METRICS","addEdgeHostSimulatedMetrics","REMOVE_EDGE_HOST_SIMULATED_METRICS","removeEdgeHostSimulatedMetrics","NODES_REQUEST","NODES_SUCCESS","NODES_FAILURE","NODE_REQUEST","NODE_SUCCESS","NODE_FAILURE","loadNodes","fetchNodes","NODE","NODE_ARRAY","ADD_NODES","addNodes","nodes","UPDATE_NODE","updateNode","previousNode","currentNode","DELETE_NODE","deleteNode","node","RULES_HOST_REQUEST","RULES_HOST_SUCCESS","RULES_HOST_FAILURE","RULE_HOST_REQUEST","RULE_HOST_SUCCESS","RULE_HOST_FAILURE","loadRulesHost","fetchRulesHost","RULE_HOST","RULE_HOST_ARRAY","ADD_RULE_HOST","addRuleHost","ruleHost","hostRules","UPDATE_RULE_HOST","updateRuleHost","previousRuleHost","currentRuleHost","DELETE_RULE_HOST","deleteHostRule","hostRule","RULE_HOST_CONDITIONS_REQUEST","RULE_HOST_CONDITIONS_SUCCESS","RULE_HOST_CONDITIONS_FAILURE","loadRuleHostConditions","ruleName","fetchRuleHostConditions","RULE_CONDITION_ARRAY","ADD_RULE_HOST_CONDITIONS","addRuleHostConditions","conditions","conditionsNames","REMOVE_RULE_HOST_CONDITIONS","removeRuleHostConditions","condition","RULE_HOST_CLOUD_HOSTS_REQUEST","RULE_HOST_CLOUD_HOSTS_SUCCESS","RULE_HOST_CLOUD_HOSTS_FAILURE","loadRuleHostCloudHosts","fetchRuleHostCloudHosts","ADD_RULE_HOST_CLOUD_HOSTS","addRuleCloudHosts","cloudHostsId","REMOVE_RULE_HOST_CLOUD_HOSTS","removeRuleHostCloudHosts","RULE_HOST_EDGE_HOSTS_REQUEST","RULE_HOST_EDGE_HOSTS_SUCCESS","RULE_HOST_EDGE_HOSTS_FAILURE","loadRuleHostEdgeHosts","fetchRuleHostEdgeHosts","ADD_RULE_HOST_EDGE_HOSTS","addRuleEdgeHosts","edgeHostsHostname","REMOVE_RULE_HOST_EDGE_HOSTS","removeRuleHostEdgeHosts","RULES_APP_REQUEST","RULES_APP_SUCCESS","RULES_APP_FAILURE","RULE_APP_REQUEST","RULE_APP_SUCCESS","RULE_APP_FAILURE","loadRulesApp","fetchRulesApp","RULE_APP","RULE_APP_ARRAY","ADD_RULE_APP","addRuleApp","ruleApp","appRules","UPDATE_RULE_APP","updateRuleApp","previousRuleApp","currentRuleApp","DELETE_RULE_APP","deleteAppRule","appRule","RULE_APP_CONDITIONS_REQUEST","RULE_APP_CONDITIONS_SUCCESS","RULE_APP_CONDITIONS_FAILURE","loadRuleAppConditions","fetchRuleAppConditions","ADD_RULE_APP_CONDITIONS","addRuleAppConditions","REMOVE_RULE_APP_CONDITIONS","removeRuleAppConditions","RULE_APP_APPS_REQUEST","RULE_APP_APPS_SUCCESS","RULE_APP_APPS_FAILURE","loadRuleApps","fetchRuleAppApps","ADD_RULE_APP_APPS","addRuleApps","REMOVE_RULE_APP_APPS","removeRuleApps","RULES_SERVICE_REQUEST","RULES_SERVICE_SUCCESS","RULES_SERVICE_FAILURE","RULE_SERVICE_REQUEST","RULE_SERVICE_SUCCESS","RULE_SERVICE_FAILURE","loadRulesService","fetchRulesService","RULE_SERVICE","RULE_SERVICE_ARRAY","ADD_RULE_SERVICE","addRuleService","ruleService","serviceRules","UPDATE_RULE_SERVICE","updateRuleService","previousRuleService","currentRuleService","DELETE_RULE_SERVICE","deleteServiceRule","serviceRule","RULE_SERVICE_CONDITIONS_REQUEST","RULE_SERVICE_CONDITIONS_SUCCESS","RULE_SERVICE_CONDITIONS_FAILURE","loadRuleServiceConditions","fetchRuleServiceConditions","ADD_RULE_SERVICE_CONDITIONS","addRuleServiceConditions","REMOVE_RULE_SERVICE_CONDITIONS","removeRuleServiceConditions","RULE_SERVICE_SERVICES_REQUEST","RULE_SERVICE_SERVICES_SUCCESS","RULE_SERVICE_SERVICES_FAILURE","loadRuleServices","fetchRuleServices","ADD_RULE_SERVICE_SERVICES","addRuleServices","REMOVE_RULE_SERVICE_SERVICES","removeRuleServices","RULES_CONTAINER_REQUEST","RULES_CONTAINER_SUCCESS","RULES_CONTAINER_FAILURE","RULE_CONTAINER_REQUEST","RULE_CONTAINER_SUCCESS","RULE_CONTAINER_FAILURE","loadRulesContainer","fetchRulesContainer","RULE_CONTAINER","RULE_CONTAINER_ARRAY","ADD_RULE_CONTAINER","addRuleContainer","ruleContainer","containerRules","UPDATE_RULE_CONTAINER","updateRuleContainer","previousRuleContainer","currentRuleContainer","DELETE_RULE_CONTAINER","deleteContainerRule","containerRule","RULE_CONTAINER_CONDITIONS_REQUEST","RULE_CONTAINER_CONDITIONS_SUCCESS","RULE_CONTAINER_CONDITIONS_FAILURE","loadRuleContainerConditions","fetchRuleContainerConditions","ADD_RULE_CONTAINER_CONDITIONS","addRuleContainerConditions","REMOVE_RULE_CONTAINER_CONDITIONS","removeRuleContainerConditions","RULE_CONTAINER_CONTAINERS_REQUEST","RULE_CONTAINER_CONTAINERS_SUCCESS","RULE_CONTAINER_CONTAINERS_FAILURE","loadRuleContainers","fetchRuleContainerContainers","ADD_RULE_CONTAINER_CONTAINERS","addRuleContainers","containerIds","REMOVE_RULE_CONTAINER_CONTAINERS","removeRuleContainers","CONDITIONS_REQUEST","CONDITIONS_SUCCESS","CONDITIONS_FAILURE","CONDITION_REQUEST","CONDITION_SUCCESS","CONDITION_FAILURE","loadConditions","fetchConditions","RULE_CONDITION","ADD_CONDITION","addCondition","UPDATE_CONDITION","updateCondition","previousCondition","currentCondition","DELETE_CONDITION","deleteCondition","VALUE_MODES_REQUEST","VALUE_MODES_SUCCESS","VALUE_MODES_FAILURE","loadValueModes","fetchValueModes","VALUE_MODE_ARRAY","FIELDS_REQUEST","FIELDS_SUCCESS","FIELDS_FAILURE","loadFields","fetchFields","FIELD_ARRAY","OPERATORS_REQUEST","OPERATORS_SUCCESS","OPERATORS_FAILURE","loadOperators","fetchOperators","OPERATOR_ARRAY","DECISIONS_REQUEST","DECISIONS_SUCCESS","DECISIONS_FAILURE","DECISION_REQUEST","DECISION_SUCCESS","DECISION_FAILURE","loadDecisions","fetchDecisions","DECISION","DECISION_ARRAY","SIMULATED_HOST_METRICS_REQUEST","SIMULATED_HOST_METRIC_REQUEST","SIMULATED_HOST_METRICS_SUCCESS","SIMULATED_HOST_METRIC_SUCCESS","SIMULATED_HOST_METRICS_FAILURE","SIMULATED_HOST_METRIC_FAILURE","loadSimulatedHostMetrics","fetchSimulatedHostMetrics","SIMULATED_HOST_METRIC","SIMULATED_HOST_METRIC_ARRAY","ADD_SIMULATED_HOST_METRIC","addSimulatedHostMetric","simulatedHostMetric","simulatedHostMetrics","UPDATE_SIMULATED_HOST_METRIC","updateSimulatedHostMetric","previousSimulatedHostMetric","currentSimulatedHostMetric","DELETE_SIMULATED_HOST_METRIC","deleteSimulatedHostMetric","SIMULATED_HOST_METRIC_CLOUD_HOSTS_REQUEST","SIMULATED_HOST_METRIC_CLOUD_HOSTS_SUCCESS","SIMULATED_HOST_METRIC_CLOUD_HOSTS_FAILURE","loadSimulatedHostMetricCloudHosts","simulatedHostMetricName","fetchSimulatedHostMetricCloudHosts","ADD_SIMULATED_HOST_METRIC_CLOUD_HOSTS","addSimulatedHostMetricCloudHosts","REMOVE_SIMULATED_HOST_METRIC_CLOUD_HOSTS","removeSimulatedHostMetricCloudHosts","SIMULATED_HOST_METRIC_EDGE_HOSTS_REQUEST","SIMULATED_HOST_METRIC_EDGE_HOSTS_SUCCESS","SIMULATED_HOST_METRIC_EDGE_HOSTS_FAILURE","loadSimulatedHostMetricEdgeHosts","fetchSimulatedHostMetricEdgeHosts","ADD_SIMULATED_HOST_METRIC_EDGE_HOSTS","addSimulatedHostMetricEdgeHosts","REMOVE_SIMULATED_HOST_METRIC_EDGE_HOSTS","removeSimulatedHostMetricEdgeHosts","SIMULATED_APP_METRICS_REQUEST","SIMULATED_APP_METRIC_REQUEST","SIMULATED_APP_METRICS_SUCCESS","SIMULATED_APP_METRIC_SUCCESS","SIMULATED_APP_METRICS_FAILURE","SIMULATED_APP_METRIC_FAILURE","loadSimulatedAppMetrics","fetchSimulatedAppMetrics","SIMULATED_APP_METRIC","SIMULATED_APP_METRIC_ARRAY","ADD_SIMULATED_APP_METRIC","addSimulatedAppMetric","simulatedAppMetric","simulatedAppMetrics","UPDATE_SIMULATED_APP_METRIC","updateSimulatedAppMetric","previousSimulatedAppMetric","currentSimulatedAppMetric","DELETE_SIMULATED_APP_METRIC","deleteSimulatedAppMetric","SIMULATED_APP_METRIC_APPS_REQUEST","SIMULATED_APP_METRIC_APPS_SUCCESS","SIMULATED_APP_METRIC_APPS_FAILURE","loadSimulatedAppMetricApps","simulatedAppMetricName","fetchSimulatedAppMetricApps","ADD_SIMULATED_APP_METRIC_APPS","addSimulatedAppMetricApps","REMOVE_SIMULATED_APP_METRIC_APPS","removeSimulatedAppMetricApps","SIMULATED_SERVICE_METRICS_REQUEST","SIMULATED_SERVICE_METRIC_REQUEST","SIMULATED_SERVICE_METRICS_SUCCESS","SIMULATED_SERVICE_METRIC_SUCCESS","SIMULATED_SERVICE_METRICS_FAILURE","SIMULATED_SERVICE_METRIC_FAILURE","loadSimulatedServiceMetrics","fetchSimulatedServiceMetrics","SIMULATED_SERVICE_METRIC","SIMULATED_SERVICE_METRIC_ARRAY","ADD_SIMULATED_SERVICE_METRIC","addSimulatedServiceMetric","simulatedServiceMetric","simulatedServiceMetrics","UPDATE_SIMULATED_SERVICE_METRIC","updateSimulatedServiceMetric","previousSimulatedServiceMetric","currentSimulatedServiceMetric","DELETE_SIMULATED_SERVICE_METRIC","deleteSimulatedServiceMetric","SIMULATED_SERVICE_METRIC_SERVICES_REQUEST","SIMULATED_SERVICE_METRIC_SERVICES_SUCCESS","SIMULATED_SERVICE_METRIC_SERVICES_FAILURE","loadSimulatedServiceMetricServices","simulatedServiceMetricName","fetchSimulatedServiceMetricServices","ADD_SIMULATED_SERVICE_METRIC_SERVICES","addSimulatedServiceMetricServices","REMOVE_SIMULATED_SERVICE_METRIC_SERVICES","removeSimulatedServiceMetricServices","SIMULATED_CONTAINER_METRICS_REQUEST","SIMULATED_CONTAINER_METRIC_REQUEST","SIMULATED_CONTAINER_METRICS_SUCCESS","SIMULATED_CONTAINER_METRIC_SUCCESS","SIMULATED_CONTAINER_METRICS_FAILURE","SIMULATED_CONTAINER_METRIC_FAILURE","loadSimulatedContainerMetrics","fetchSimulatedContainerMetrics","SIMULATED_CONTAINER_METRIC","SIMULATED_CONTAINER_METRIC_ARRAY","ADD_SIMULATED_CONTAINER_METRIC","addSimulatedContainerMetric","simulatedContainerMetric","simulatedContainerMetrics","UPDATE_SIMULATED_CONTAINER_METRIC","updateSimulatedContainerMetric","previousSimulatedContainerMetric","currentSimulatedContainerMetric","DELETE_SIMULATED_CONTAINER_METRIC","deleteSimulatedContainerMetric","SIMULATED_CONTAINER_METRIC_CONTAINERS_REQUEST","SIMULATED_CONTAINER_METRIC_CONTAINERS_SUCCESS","SIMULATED_CONTAINER_METRIC_CONTAINERS_FAILURE","loadSimulatedContainerMetricContainers","simulatedContainerMetricName","fetchSimulatedContainerMetricContainers","ADD_SIMULATED_CONTAINER_METRIC_CONTAINERS","addSimulatedContainerMetricContainers","REMOVE_SIMULATED_CONTAINER_METRIC_CONTAINERS","removeSimulatedContainerMetricContainers","REGIONS_REQUEST","REGIONS_SUCCESS","REGIONS_FAILURE","REGION_REQUEST","REGION_SUCCESS","REGION_FAILURE","loadRegions","fetchRegions","REGION","REGION_ARRAY","LOAD_BALANCERS_REQUEST","LOAD_BALANCER_REQUEST","LOAD_BALANCERS_SUCCESS","LOAD_BALANCER_SUCCESS","LOAD_BALANCERS_FAILURE","LOAD_BALANCER_FAILURE","loadLoadBalancers","fetchLoadBalancers","LOAD_BALANCER","LOAD_BALANCER_ARRAY","ADD_LOAD_BALANCERS","addLoadBalancers","loadBalancers","DELETE_LOAD_BALANCER","deleteLoadBalancer","loadBalancer","REGISTRATION_SERVERS_REQUEST","REGISTRATION_SERVER_REQUEST","REGISTRATION_SERVERS_SUCCESS","REGISTRATION_SERVER_SUCCESS","REGISTRATION_SERVERS_FAILURE","REGISTRATION_SERVER_FAILURE","loadRegistrationServers","fetchRegistrationServers","REGISTRATION_SERVER","REGISTRATION_SERVER_ARRAY","ADD_REGISTRATION_SERVERS","addRegistrationServers","registrationServers","DELETE_REGISTRATION_SERVER","deleteRegistrationServer","registrationServer","WORKER_MANAGERS_REQUEST","WORKER_MANAGER_REQUEST","WORKER_MANAGERS_SUCCESS","WORKER_MANAGER_SUCCESS","WORKER_MANAGERS_FAILURE","WORKER_MANAGER_FAILURE","loadWorkerManagers","fetchWorkerManagers","WORKER_MANAGER","WORKER_MANAGER_ARRAY","ADD_WORKER_MANAGERS","addWorkerManagers","workerManagers","DELETE_WORKER_MANAGER","deleteWorkerManager","workerManager","WORKER_MANAGER_HOSTS_REQUEST","WORKER_MANAGER_HOSTS_SUCCESS","WORKER_MANAGER_HOSTS_FAILURE","loadWorkerManagerHosts","fetchWorkerManagerHosts","ASSIGN_WORKER_MANAGER_MACHINES","assignWorkerManagerHosts","hosts","assignedHosts","UNASSIGN_WORKER_MANAGER_MACHINES","unassignWorkerManagerHosts","LOGS_REQUEST","LOGS_SUCCESS","LOGS_FAILURE","loadLogs","fetchLogs","LOGS_ARRAY","SCRIPTS_REQUEST","SCRIPTS_SUCCESS","SCRIPTS_FAILURE","loadScripts","fetchScripts","ADD_COMMANDS","addCommand","command","commands","CLEAR_COMMANDS","clearCommands","SIDENAV_SHOW_USER","showSidenavByUser","value","SIDENAV_SHOW_WIDTH","showSidenavByWidth","SEARCH_UPDATE","updateSearch","search","CHANGE_COMPONENT","changeComponent","component","HIDE_CONFIRMATION_DIALOG","hideConfirmationDialog","hidden","Entity","undefined","idAttribute","appService","appServices","dependency","dependent","dependents","prediction","host","publicIpAddress","toString","region","valueMode","valueModes","field","fields","operator","operators","decision","ruleDecision","componentType","toUpperCase","hostSimulatedMetrics","appSimulatedMetrics","serviceSimulatedMetrics","containerSimulatedMetrics","logs","eventId","define","APP_SERVICE","APP_RULE","APP_SIMULATED_METRIC","SERVICE_APP","SERVICE_DEPENDENCY","SERVICE_DEPENDENT","SERVICE_PREDICTION","SERVICE_RULE","SERVICE_SIMULATED_METRIC","CONTAINER_RULE","CONTAINER_SIMULATED_METRIC","CLOUD_HOST_RULE","CLOUD_HOST_SIMULATED_METRIC","EDGE_HOST_RULE","EDGE_HOST_SIMULATED_METRIC","store","next","action","callAPI","actionWith","finalAction","Object","assign","requestType","successType","failureType","url","includes","API_URL","axios","headers","timeout","REQUEST_TIMEOUT","then","response","status","camelizedJson","camelizeKeys","normalize","entities","Promise","reject","catch","e","callApi","error","message","BaseComponent","toasts","removeToast","forEach","toast","index","getToastId","i","this","timeRemaining","displayLength","instance","unique","html","some","options","M","completeCallback","classes","push","React","Component","module","exports","mapLabelToIcon","label","toLowerCase","replace","regionName","TextBox","state","show","props","handleToggleVisibility","setState","prevProps","prevState","snapshot","updateTextFields","className","disabled","valueToString","onChange","onBlur","autoComplete","formNoValidate","onClick","MultilineTextBox","textArea","createRef","updateTextArea","textareaAutoResize","current","ref","Datepicker","selectedDate","datepicker","initDatepicker","init","format","minDate","Date","defaultDate","showClearBtn","onSelect","onClose","toLocaleDateString","Timepicker","selectedTime","timepicker","initTimepicker","twelveHour","defaultTime","onCloseEnd","hour","minute","String","zeroPad","NumberBox","min","max","CheckboxList","globalCheckbox","values","handleGlobalCheckbox","event","checked","target","onCheckList","map","v","getCheckboxValues","handleCheckbox","stateValue","find","item","option","ListItem","key","listItemStyles","nonListContent","every","required","styles","title","length","camelCaseToSentenceCase","requiredLabel","Empty","Checkbox","onCheck","checkbox","formCheckbox","capitalize","getTypeFromValue","trim","isNaN","Field","linkedIcon","iconName","linkedTo","icon","link","to","getMapFieldMarkers","markers","valueToMarkers","isArray","concat","updateField","formContext","validate","selected","RegExp","test","JSON","parse","_","dropdown","selectCallback","setValue","listId","itemId","addValue","removeValue","checkCallback","onSelectCoordinates","marker","singleMarker","onDeselectCoordinates","onClearCoordinates","removeValuesExcept","getDateStringFromTimestamp","date","toLocaleTimeString","number","getError","errors","getEditorClassname","hasErrors","Form","Consumer","checkboxListStyles","listWrapper","style","include","marginLeft","labelIcon","htmlFor","isRequired","isEditing","Dropdown","loading","LoadingSpinner","LocationMap","editable","onDeselect","onClear","locations","size","labeled","hover","clickHighlight","zoomable","resizable","FormContext","createContext","requireGreaterOrEqualSize","notValid","regularExpression","trimmed","startsWith","endsWith","args","maxSizeAndTrimmed","maxSize","requiredAndTrimmed","requiredAndTrimmedAndNotValidIpAddress","notValidIpAddress","requiredAndNumberAndMin","requiredAndNumberAndMinAndMax","mounted","dropdownScrollbar","initDropdown","onOpenEnd","onOpenDropdown","updateScroll","saveRequired","isEqualWith","savedValues","first","second","validation","newError","console","log","isValid","onClickEdit","onClickDelete","delete","deleteData","successCallback","reply","failureCallback","handleSubmit","preventDefault","validateForm","isNew","post","put","saveEntities","requestBody","postData","putData","reason","cancelRequest","getCancelRequest","cancel","deleteCancelRequest","newValues","filter","isEqual","onModalConfirm","modal","onConfirm","clearValues","onAdd","decodeHTML","innerHTML","isChecked","switchForm","selectedForm","switchDropdown","onSwitch","showSaveButton","keys","reduce","context","controlsMode","deletable","customButtons","children","confirmationDialog","confirmMessage","textButton","confirmCallback","onSubmit","noValidate","data-position","data-tooltip","data-target","controlButton","button","customButton","confirm","onClickConfirm","dropdownEmpty","empty","scrollbar","scrollMaxHeight","maxHeight","Math","floor","useBothWheelAxes","suppressScrollX","Children","count","emptyContent","content","Provider","entries","fieldName","validateMessage","withRouter","connect","ui","URLSearchParams","get","sidenavManagementLinks","sub","sidenavMonitoringLinks","sidenavDataManagementLinks","Sidenav","sidenav","blockBodyScroll","addEventListener","shouldShowSidenav","window","innerWidth","handleResize","width","getInstance","isOpen","close","handleSidenav","closeSlideSidenav","user","removeEventListener","links","transition","whiteSpace","sublink","bindActionCreators","Breadcrumbs","breadcrumbs","routes","managementAuthenticatedRoutes","monitoringAuthenticatedRoutes","dataManagementAuthenticatedRoutes","path","location","pathname","substr","substring","lastIndexOf","reverse","match","indexOf","formattedTitle","snakeCaseToCamelCase","breadcrumb","MainLayout","AutoInit","paddingLeft","sidenavVisible","CardItem","cardItem","cardValue","UseLongPress","callback","ms","useState","startLongPress","setStartLongPress","useEffect","timerId","setTimeout","clearTimeout","start","useCallback","stop","onMouseDown","onMouseUp","onMouseLeave","onTouchStart","onTouchEnd","getSeparatorColor","separate","color","longPressCallback","separatorColor","borderBottom","LinkedContextMenuItem","CancelToken","cancelRequests","sendData","URL","stringify","href","cancelToken","setCancelRequest","token","isCancel","buildErrorMessage","responseMessage","apierror","responseStatusCode","responseStatusMessage","buildCancelRequest","source","setupAxiosInterceptors","interceptors","request","use","config","isAuthenticated","InputDialog","initModal","position","fullScreen","onOpenModal","onCloseStart","onCloseModal","startingTop","endingTop","Modal","calcDialogScrollMaxHeight","fullscreen","document","body","clientHeight","inDuration","outDuration","toggleFullScreen","ControlledList","newState","dataState","getDataStateKey","dataKey","stateKey","currentKey","getDataState","onAddDropdownModalInput","input","selectedProperty","onAddInput","onAddFormModalInput","onRemove","onDelete","checkedData","unpersistedData","invalidateStateData","persistedData","onDeleteSuccess","onDeleteFailure","invalidate","inputDialog","formModal","preSelected","setSelected","previousData","entitySaved","isLoading","emptyMessage","sort","removeButtonText","DataList","List","noLabelCheckbox","formButton","list","defaultProps","Error","AddButton","offset","tooltip","text","right","Tabs","previousScrollLeft","previousScrollRight","showScrollLeft","showScrollRight","tabsRef","rightScrollTimer","leftScrollTimer","shouldShowScrollLeft","shouldShowScrollRight","tabs","scrollWidth","clientWidth","scrollLeft","setRightScrollTimer","stopLeftScrollTimer","setInterval","executeRightScroll","stopRightScrollTimer","scrollTo","clearInterval","executeLeftScroll","setLeftScrollTimer","updateTabIndicator","scrollButton","leftScrollButton","rightScrollButton","tab","active","tabContent","CardList","pagesize","calcPagesize","GenericList","card","paginate","initial","CardTitle","cardTitle","GenericCard","CARD_ITEM_HEIGHT","cardContent","deleteCard","getChildrenCount","getHeight","height","scrollHeight","cardElement","hoverable","childrenCount","margin","topContextMenuItems","bottomContextMenuItems","ActionProgressBar","backgroundColor","progressBarColor","menuItem","DividerContextMenuItem","ConfirmDialog","mapStateToProps","Card","group","sentenceCase","charAt","slice","txt","createElement","num","maxLength","padStart","UnsavedChanges","SimpleList","header","itemListWrapper","c","PageNumber","changePage","setPage","page","Pagination","noEllipsis","from","x","beforeEllipsis","afterEllipsis","betweenEllipsis","pagination","prevPage","nextPage","pageNumber","threeDotsIcon","left","PagedList","pageIndex","ceil","setPageSize","selectedPageSize","currentTarget","Number","MAX_VALUE","parseInt","pageSizeOption","initialMax","last","l","defaultValue","optionToString","GenericFilteredList","predicate","otherProps","filteredList","s","AnimatedList","keyedList","rows","setList","animate","ListFiltered","collapsible","resizeObserver","initCollapsible","Collapsible","ResizeObserver","observe","disconnect","headerClassname","bodyClassname","CloudHostRuleList","loadEntities","unsaved","unsavedRules","linkedItemContent","unsavedItem","linkIcon","onAddHostRule","onRemoveHostRules","getSelectableRules","rulesName","generic","isLoadingCloudHost","loadCloudHostError","ownProps","cloud","isLoadingRules","loadRulesError","CloudHostSimulatedMetricList","simulatedMetric","unsavedSimulatedMetrics","onAddSimulatedHostMetric","onRemoveSimulatedHostMetrics","getSelectableSimulatedMetrics","simulatedMetricsName","isLoadingSimulatedMetrics","loadSimulatedMetricsError","CloudHostSshCommand","sshPanel","commandFilter","hostAddress","onPostSuccess","timestampedCommand","timestamp","now","scrollToTop","onPostFailure","getFields","background","SshPanel","mapDispatchToProps","CloudHostSshFileTransfer","transfer","filename","scripts","awsInstanceStates","PENDING","code","RUNNING","SHUTTING_DOWN","TERMINATED","STOPPING","STOPPED","CloudHost","loadCloudHost","params","getCloudHost","getFormCloudHost","formCloudHost","history","shouldShowSaveButton","saveCloudHostRules","saveCloudHostSimulatedMetrics","onSaveRulesSuccess","onSaveRulesFailure","removeHostSimulatedMetrics","metric","addHostSimulatedMetric","onSaveSimulatedMetricsSuccess","onSaveSimulatedMetricsFailure","startStopTerminateButtons","buttons","formStyles","startCloudHost","stopCloudHost","terminateCloudHost","onStartSuccess","onStartFailure","onStopSuccess","onStopFailure","onTerminateSuccess","onTerminateFailure","removeFields","cloudHostState","cloudHostPlacement","placement","availabilityZone","managedByWorker","worker","newCloudHost","isNewCloudHost","cloudHostKey","cloudRegions","available","zone","latitude","coordinates","longitude","regions","genericRules","GenericHostRuleList","genericSimulatedMetrics","GenericSimulatedHostMetricList","ssh","sftp","publicDnsName","privateIpAddress","isLoadingHosts","isLoadingRegions","loadHostsError","loadRegionsError","basicAuthenticate","username","password","authorization","createBasicAuthToken","btoa","getLoggedInUser","registerSuccessfulLogin","expires","setTime","getTime","Cookies","set","logout","remove","commandsContainer","commandsScrollbar","leftControlsScrollbar","rightControlsScrollbar","COMMANDS_MIN_HEIGHT","COMMANDS_DEFAULT_HEIGHT","scrollTop","MAX_SAFE_INTEGER","filteredCommands","onResize","updateScrollbars","toggleCommands","commandsHeight","timestampToString","dateFormat","day","getDate","monthName","getMonth","year","getFullYear","millis","pad","getMilliseconds","n","padWith","repeat","documentElement","offsetHeight","shrink","expand","enable","top","onResizeStop","direction","d","controlsMenuLeft","flexGrow","containerRef","commandsHeader","commandsTitle","time","exitStatus","output","dangerouslySetInnerHTML","__html","join","controlsMenuRight","AssignedHostsList","assignedHost","unSavedHosts","onAssignHost","onUnassignHosts","getSelectableHosts","isLoadingWorkerManager","loadWorkerManagerError","isLoadingWorkerManagers","loadWorkerManagersError","WorkerManager","unsavedHosts","currentForm","loadWorkerManager","workerManagerId","getWorkerManager","getFormWorkerManager","formWorkerManager","updateWorkerManager","saveHosts","assignHost","Host","unassignHosts","onSaveHostsSuccess","onSaveHostsFailure","labels","hostAddressesDropdown","containerIdField","containerPublicIpAddressField","formFields","formId","newWorkerManagerRegion","newWorkerManagerHost","isNewWorkerManager","workerManagerKey","assignHosts","newWorkerManager","WorkerManagerCard","contextMenu","CardWorkerManager","WorkerManagersList","WorkerManagers","RuleAppConditionsList","unsavedConditions","onAddRuleCondition","onRemoveRuleConditions","getSelectableConditionNames","ruleConditions","isLoadingRuleApp","loadRuleAppError","isLoadingConditions","loadConditionsError","RuleAppAppsList","unsavedApps","onAddRuleApp","onRemoveRuleApps","getSelectableAppNames","ruleApps","isLoadingApps","loadAppsError","RuleApp","loadRuleApp","getRuleApp","getFormRuleApp","formRuleApp","onPutSuccess","onPutFailure","saveRuleConditions","saveRuleApps","addRuleCondition","removeRuleConditions","onSaveConditionsSuccess","onSaveConditionsFailure","onSaveAppsSuccess","onSaveAppsFailure","decisionDropdownOption","getSelectableDecisions","decisions","componentTypes","ruleKey","isNewRuleApp","priority","RulesApp","RulesAppList","SimulatedAppMetrics","SimulatedAppMetricsList","SimulatedAppMetricAppList","onAddApp","onRemoveApps","getSelectableApps","simulatedMetricApps","isLoadingSimulatedAppMetric","loadSimulatedAppMetricError","SimulatedAppMetric","loadSimulatedAppMetric","getSimulatedAppMetric","getFormSimulatedAppMetric","formSimulatedAppMetric","saveSimulatedAppMetricApps","addSimulatedAppMetricApp","fieldOption","simulatedAppMetricKey","isNewSimulatedAppMetric","SimulatedAppMetricAppsList","isLoadingSimulatedAppMetrics","loadSimulatedAppMetricsError","minimumValue","maximumValue","override","ManagementLanding","Apps","App","Services","Service","Containers","Container","Hosts","CloudHosts","EdgeHosts","EdgeHost","Nodes","Node","Rules","RulesHost","RuleHost","RulesService","RuleService","RulesContainer","RuleContainer","RuleConditions","Condition","SimulatedMetrics","SimulatedHostMetrics","SimulatedHostMetric","SimulatedServiceMetrics","SimulatedServiceMetric","SimulatedContainerMetrics","SimulatedContainerMetric","Regions","Region","LoadBalancers","LoadBalancer","RegistrationServers","RegistrationServer","Ssh","Settings","ManagementLogs","PageNotFound","MonitoringLanding","MonitoringSettings","DataManagementLanding","DataManagementSettings","components","Root","showFastActions","Navbar","exact","Login","AuthenticatedRoute","Footer","FormSelect","valueString","HOST","Dialog","preventScrolling","locked","footer","titleButtons","GenericServiceRuleList","genericServiceRules","RulesList","GenericSimulatedServiceMetricList","genericSimulatedServiceMetrics","SimulatedMetricsList","isLoadingSimulatedServiceMetrics","loadSimulatedServiceMetricsError","simulatedMetricName","ActionButton","isActive","automatic","handleOnClick","clickCallback","activatedText","deactivatedText","Marker","setTooltipContent","titleCoordinates","toFixed","r","fill","onMouseEnter","stroke","strokeWidth","textAnchor","y","fontFamily","fontSize","pointerEvents","DEFAULT_MARKER_SIZE","setTooltip","resizeMarkers","markerSize","zoom","handleCenter","center","tooltipPosition","MapChart","onZoom","multiline","showPassword","handleChange","handleShowPassword","handleLogin","tabIndex","ServiceAppList","launchOrder","onAddServiceApp","selectedApp","onRemoveServiceApps","getSelectableAppsNames","serviceApps","unsavedAppsNames","appServicesLaunchOrder","appServiceStyles","appServiceItem","appServicesList","a","b","serviceAppModal","OtherServicesList","updateModalScrollbar","getModalFields","getModalValues","onSelectApp","isLoadingService","loadServiceError","isLoadingAppServices","isLoadingServices","ServiceDependencyList","unsavedDependencies","onAddServiceDependency","onRemoveServiceDependencies","getSelectableServicesNames","isLoadingDependencies","loadDependenciesError","ServiceDependentList","dependentNames","DependentsList","serviceDependents","isLoadingDependents","loadDependentsError","ServicePredictionList","unsavedPredictions","listItemContent","minimumReplicas","smallText","startDate","endDate","startTime","arrow","endTime","onAddServicePrediction","onRemoveServicePredictions","description","predictionModal","isLoadingPredictions","loadPredictionsError","ServiceRuleList","onAddServiceRule","onRemoveServiceRules","ServiceSimulatedMetricList","onAddSimulatedServiceMetric","onRemoveSimulatedServiceMetrics","loadService","getService","getFormService","formService","saveServiceApps","saveServiceDependencies","saveServicePredictions","saveServiceRules","saveServiceSimulatedMetrics","addServiceApp","addServiceDependency","onSaveDependenciesSuccess","onSaveDependenciesFailure","addServicePrediction","onSavePredictionsSuccess","onSavePredictionsFailure","addServiceRule","addServiceSimulatedMetric","serviceKey","isNewService","loadServicesError","dockerRepository","defaultExternalPort","defaultInternalPort","defaultDb","launchCommand","maximumReplicas","outputLabel","serviceType","expectedMemoryConsumption","handleCancel","cancelCallback","handleConfirm","hideSection","hideMessage","Landing","reloadData","getContainersMarkers","Map","centerButton","isLoadingContainers","loadContainersError","render","loadRegion","getRegion","regionKey","genericHostRules","genericSimulatedHostMetrics","isLoadingSimulatedHostMetrics","loadSimulatedHostMetricsError","collapsibleSubtitle","collapsibleCardList","syncCloudInstances","collapsibleContainer","RuleCondition","loadCondition","conditionName","getCondition","getFormCondition","formCondition","operatorOption","symbol","valueModeOption","conditionKey","isNewRuleCondition","loadLoadBalancer","loadBalancerId","getLoadBalancer","getFormLoadBalancer","formLoadBalancer","updateLoadBalancer","regionOption","newLoadBalancerRegion","newLoadBalancerHost","isNewLoadBalancer","loadBalancerKey","isLoadingLoadBalancers","loadLoadBalancersError","newLoadBalancer","loadRegistrationServer","registrationServerId","getRegistrationServer","getFormRegistrationServer","formRegistrationServer","updateRegistrationServer","newRegistrationServerRegion","newRegistrationServerHost","isNewRegistrationServer","registrationServerKey","isLoadingRegistrationServers","loadRegistrationServersError","newRegistrationServer","loadState","serializedState","localStorage","getItem","saveState","setItem","ContainerPortsList","ports","port","publicPort","privatePort","ip","PortsList","isLoadingContainer","loadContainerError","ContainerLabelsList","LabelsList","ContainerLogsList","reloadLogs","split","pop","LogsList","logsListContainer","isLoadingLogs","loadLogsError","ContainerRuleList","onAddContainerRule","onRemoveContainerRules","ContainerSimulatedMetricList","onAddSimulatedContainerMetric","onRemoveSimulatedContainerMetrics","loadContainer","getContainer","getFormContainer","formContainer","updateContainer","replicateButton","chooseHostAddressDropdown","replicate","migrateButton","migrate","onReplicateSuccess","onReplicateFailure","image","splice","onMigrateSuccess","onMigrateFailure","parentContainer","addContainerRule","saveContainerRules","addContainerSimulatedMetric","saveContainerSimulatedMetrics","commonFields","getSelectableServices","setDefaultPorts","hostLink","newContainerHost","newContainerLocation","isNewContainer","internalPort","externalPort","containerKey","edge","EdgeHostRuleList","previousHostname","currentHostname","isLoadingEdgeHost","loadEdgeHostError","EdgeHostSimulatedMetricList","EdgeHostSshCommand","EdgeHostSshFileTransfer","loadEdgeHost","getEdgeHost","getFormEdgeHost","formEdgeHost","saveEdgeHostRules","saveEdgeHostSimulatedMetrics","addEdgeHostRule","edgeHostKey","isNewEdgeHost","AppServiceList","unsavedServices","onAddAppService","selectedService","onRemoveAppServices","nonSystemServices","unsavedServicesNames","addModal","onDropdownSelect","isLoadingApp","loadAppError","LaunchAppDialog","selectedPosition","launchAppConfirm","launchAppCallback","AppRuleList","onAddAppRule","onRemoveAppRules","AppSimulatedMetricList","onAddSimulatedAppMetric","onRemoveSimulatedAppMetrics","loadApp","getApp","getFormApp","formApp","saveAppServices","saveAppRules","saveAppSimulatedMetrics","addAppService","onSaveServicesSuccess","onSaveServicesFailure","addAppRule","addAppSimulatedMetric","launchButton","launchApp","onLaunchSuccess","onLaunchFailure","appKey","isNewApp","AppServicesList","RuleHostConditionList","isLoadingHostRule","loadHostRuleError","HostRuleCloudHostList","unsavedCloudHosts","onAddRuleCloudHost","onRemoveRuleCloudHosts","getSelectableCloudHostNames","ruleCloudHosts","isLoadingCloudHosts","loadCloudHostsError","HostRuleEdgeHostList","unsavedEdgeHosts","onAddRuleEdgeHost","onRemoveRuleEdgeHosts","getSelectableEdgeHostNames","ruleEdgeHosts","isLoadingEdgeHosts","loadEdgeHostsError","isGeneric","loadRuleHost","getRuleHost","getFormRuleHost","formRuleHost","saveRuleCloudHosts","saveRuleEdgeHosts","addRuleCloudHost","removeRuleCloudHosts","onSaveCloudHostsSuccess","onSaveCloudHostsFailure","addRuleEdgeHost","removeRuleEdgeHosts","onSaveEdgeHostsSuccess","onSaveEdgeHostsFailure","isGenericSelected","toLocaleLowerCase","isNewRuleHost","ActionContextMenuItem","CloudHostCard","topContextMenu","menus","bottomContextMenu","CardCloudHost","imageId","instanceType","awsRegion","CloudHostsList","SshCommand","onExecuteCommand","SshFile","onTransferFile","addFileTransfer","sshCommand","fileTransfer","tabsContainer","RuleContainerConditionList","isLoadingRuleContainer","loadRuleContainerError","RuleContainerContainersList","unsavedContainersIds","onAddRuleContainer","onRemoveRuleContainers","getSelectableContainers","ruleContainers","names","unsavedContainers","loadRuleContainer","getRuleContainer","getFormRuleContainer","formRuleContainer","saveRuleContainers","containersIds","onSaveContainersSuccess","onSaveContainersFailure","isNewRuleContainer","RuleServiceConditionList","isLoadingRuleService","loadRuleServiceError","RuleServiceServicesList","onAddRuleService","onRemoveRuleServices","getSelectableServiceNames","ruleServices","loadRuleService","getRuleService","getFormRuleService","formRuleService","saveRuleServices","isNewRuleService","SimulatedHostMetricCloudHostList","onAddCloudHost","onRemoveCloudHosts","getSelectableCloudHosts","simulatedMetricCloudHosts","isLoadingSimulatedHostMetric","loadSimulatedHostMetricError","SimulatedHostMetricEdgeHostList","onAddEdgeHost","onRemoveEdgeHosts","getSelectableEdgeHosts","simulatedMetricEdgeHosts","loadSimulatedHostMetric","getSimulatedHostMetric","getFormSimulatedHostMetric","formSimulatedHostMetric","saveSimulatedHostMetricCloudHosts","saveSimulatedHostMetricEdgeHosts","addSimulatedHostMetricCloudHost","addSimulatedHostMetricEdgeHost","simulatedHostMetricKey","isNewSimulatedHostMetric","LoadBalancerCard","CardLoadBalancer","p","LoadBalancersList","RegistrationServerCard","CardRegistrationServer","RegistrationServersList","ContextSubMenuItem","menu","submenus","menuToString","hoverDelay","preventCloseOnClick","submenu","ContainerCard","CardContainer","isLoadingNodes","loadNodesError","RuleAppCard","CardRuleApp","RuleContainerCard","CardRuleContainer","RulesContainerList","RegionCard","CardRegion","EdgeHostCard","CardEdgeHost","EdgeHostsList","SearchBar","searchBar","placeholder","logo","require","handleLogout","loggingIn","componentOption","selectedComponent","prevSidenavVisibility","currentSidenavVisibility","prevLoggingIn","logoStyle","sidenavUser","sidenavWidth","showSidenav","showSearchbar","loggedInUser","marginRight","role","src","alt","rel","SimulatedServiceMetricCard","CardSimulatedServiceMetric","SimulatedServiceMetricsList","RuleServiceCard","menuItems","CardRuleService","RulesServiceList","SimulatedHostMetricCard","CardSimulatedHostMetric","SimulatedHostMetricsList","RuleHostCard","CardRuleHost","RulesHostList","NodeCard","CardNode","availability","SimulatedAppMetricCard","CardSimulatedAppMetric","SimulatedContainerMetricCard","CardSimulatedContainerMetric","SimulatedContainerMetricsList","isLoadingSimulatedContainerMetrics","loadSimulatedContainerMetricsError","AppCard","CardApp","NodeLabelsList","isLoadingNode","loadNodeError","loadNode","nodeId","getNode","getFormNode","formNode","previousAvailability","previousRole","rejoinSwarmButton","rejoinSwarm","onRejoinSwarmSuccess","onRejoinSwarmFailure","nodesHostname","getNodesMarkers","markerId","showRejoinSwarmButton","newNodeHost","newNodeLocation","isNewNode","nodeKey","SimulatedServiceMetricServiceList","onAddService","onRemoveServices","simulatedMetricServices","isLoadingSimulatedServiceMetric","loadSimulatedServiceMetricError","loadSimulatedServiceMetric","getSimulatedServiceMetric","getFormSimulatedServiceMetric","formSimulatedServiceMetric","saveSimulatedServiceMetricServices","addSimulatedServiceMetricService","simulatedServiceMetricKey","isNewSimulatedServiceMetric","SimulatedContainerMetricContainerList","onAddContainer","onRemoveContainers","simulatedMetricContainers","isLoadingSimulatedContainerMetric","loadSimulatedContainerMetricError","loadSimulatedContainerMetric","getSimulatedContainerMetric","getFormSimulatedContainerMetric","formSimulatedContainerMetric","saveSimulatedContainerMetricContainers","addSimulatedContainerMetricContainer","simulatedContainerMetricKey","isNewSimulatedContainerMetric","ServiceCard","getReplicasMessage","CardService","replicasMessage","loadedServices","onChangeServicesFilter","filteredServices","clearFilter","filterDropdown","clearButton","clearButtonIcon","formattedMessage","levelString","getLevelColor","headerItem","timestampColumn","levelColumn","infoColumn","lastItem","column","timestmp","toLocaleString","onReloadClick","RuleConditionCard","CardRuleCondition","RuleConditionsList","geoPath","d3Geo","MAP_MAX_WIDTH","MAP_MAX_HEIGHT","innerHeight","calculateScale","newScale","getBoundingClientRect","scale","onGeographyClick","geography","projection","evt","gp","dim","cx","clientX","cy","clientY","bounds","orgX","orgY","invert","properties","NAME","handleMoveEnd","global","maxWidth","data-tip","projectionConfig","rotate","maxZoom","onMoveEnd","geographies","geo","rsmKey","default","outline","pressed","memo","dataAuthenticatedRoutes","isLoadingValueModes","loadValueModesError","isLoadingFields","loadFieldsError","isLoadingOperators","loadOperatorsError","isLoadingDecisions","loadDecisionsError","isLoadingAssignedHosts","loadAssignedHostsError","isLoadingScripts","loadScriptsError","merge","pick","filteredApps","appToDelete","appWithServices","normalizedApp","normalizedServices","appWithRules","unshift","filteredRules","normalizeApp","appWithSimulatedMetrics","filteredSimulatedMetrics","servicesToDelete","serviceWithApps","normalizedService","normalizeService","serviceWithDependencies","filteredDependencies","serviceWithDependents","serviceWithPredictions","newPredictions","filteredPredictions","normalizedPredictions","serviceWithRules","serviceWithSimulatedMetrics","containersToDelete","filteredContainers","containerWithLogs","normalizedContainer","containerWithRules","normalizeContainer","containerWithSimulatedMetrics","filteredCloudHosts","cloudHostsToDelete","hostWithRules","normalizedCloudHost","cloudHostWithRules","cloudHostWithSimulatedMetrics","filteredEdgeHosts","edgeHostsToDelete","normalizedHost","normalizedEdgeHost","edgeHostWithRules","edgeHostWithSimulatedMetrics","filteredNodes","nodesToDelete","previousHostRule","filteredHostRules","currentHostRule","hostRulesToDelete","ruleWithConditions","normalizedRule","filteredConditions","normalizeRule","ruleWithCloudHosts","ruleWithEdgeHosts","previousAppRule","filteredAppRules","currentAppRule","appRulesToDelete","ruleWithApps","previousServiceRule","filteredServiceRules","currentServiceRule","serviceRulesToDelete","ruleWithServices","previousContainerRule","filteredContainerRules","currentContainerRule","containerRulesToDelete","ruleWithContainers","conditionsToDelete","filteredSimulatedHostMetrics","simulatedMetricToDelete","simulatedHostMetricWithCloudHosts","normalizedSimulatedHostMetric","normalizeSimulatedHostMetric","simulatedHostMetricWithEdgeHosts","filteredSimulatedAppMetrics","simulatedAppMetricWithApps","normalizedSimulatedAppMetric","normalizeSimulatedAppMetric","filteredSimulatedServiceMetrics","simulatedServiceMetricWithServices","normalizedSimulatedServiceMetric","normalizeSimulatedServiceMetric","filteredSimulatedContainerMetrics","simulatedContainerMetricWithContainers","normalizedSimulatedContainerMetric","normalizeSimulatedContainerMetric","loadBalancersToDelete","filteredLoadBalancers","registrationServersToDelete","filteredRegistrationServers","workerManagerToDelete","workerManagerWithAssignedHosts","normalizedWorkerManager","filteredHosts","loadingBar","loadingBarReducer","combineReducers","rootReducer","configureStore","persistedState","createStore","applyMiddleware","thunk","api","promise","loadingBarMiddleware","promiseTypeSuffixes","Boolean","subscribe","getState","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.20f80e58.chunk.js","sourcesContent":["/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {CALL_API, Schemas} from \"../middleware/api\";\nimport {EntitiesAction} from \"../reducers/entities\";\nimport {IApp} from \"../routes/management/apps/App\";\nimport {IAddAppService} from \"../routes/management/apps/AppServicesList\";\nimport {IService} from \"../routes/management/services/Service\";\nimport {IPrediction} from \"../routes/management/services/ServicePredictionList\";\nimport {IContainer} from \"../routes/management/containers/Container\";\nimport {ICloudHost} from \"../routes/management/hosts/cloud/CloudHost\";\nimport {IEdgeHost} from \"../routes/management/hosts/edge/EdgeHost\";\nimport {INode} from \"../routes/management/nodes/Node\";\nimport {IRuleHost} from \"../routes/management/rules/hosts/RuleHost\";\nimport {IRuleService} from \"../routes/management/rules/services/RuleService\";\nimport {IRuleCondition} from \"../routes/management/rules/conditions/RuleCondition\";\nimport {ISimulatedHostMetric} from \"../routes/management/metrics/hosts/SimulatedHostMetric\";\nimport {ISimulatedServiceMetric} from \"../routes/management/metrics/services/SimulatedServiceMetric\";\nimport {ILoadBalancer} from \"../routes/management/loadBalancers/LoadBalancer\";\nimport {IRegistrationServer} from \"../routes/management/registrationServers/RegistrationServer\";\nimport {IRuleContainer} from \"../routes/management/rules/containers/RuleContainer\";\nimport {ISimulatedContainerMetric} from \"../routes/management/metrics/containers/SimulatedContainerMetric\";\nimport {IComponent} from \"../containers/Root.dev\";\nimport {IWorkerManager} from \"../routes/management/workerManagers/WorkerManager\";\nimport {IRuleApp} from \"../routes/management/rules/apps/RuleApp\";\nimport {ISimulatedAppMetric} from \"../routes/management/metrics/apps/SimulatedAppMetric\";\nimport {ICommand, IFileTransfer} from \"../routes/management/ssh/SshPanel\";\n\nexport const APPS_REQUEST = 'APPS_REQUEST';\nexport const APPS_SUCCESS = 'APPS_SUCCESS';\nexport const APPS_FAILURE = 'APPS_FAILURE';\nexport const APP_REQUEST = 'APP_REQUEST';\nexport const APP_SUCCESS = 'APP_SUCCESS';\nexport const APP_FAILURE = 'APP_FAILURE';\nexport const loadApps = (name?: string) => (dispatch: any) => {\n    return dispatch(fetchApps(name));\n};\nconst fetchApps = (name?: string) => ({\n    [CALL_API]:\n        !name\n            ? {\n                types: [APPS_REQUEST, APPS_SUCCESS, APPS_FAILURE],\n                endpoint: `apps`,\n                schema: Schemas.APP_ARRAY,\n                entity: 'apps'\n            }\n            : {\n                types: [APP_REQUEST, APP_SUCCESS, APP_FAILURE],\n                endpoint: `apps/${name}`,\n                schema: Schemas.APP,\n                entity: 'apps'\n            }\n});\nexport const ADD_APP = 'ADD_APP';\n\nexport function addApp(app: IApp): EntitiesAction {\n    return {\n        type: ADD_APP,\n        data: {apps: new Array(app)}\n    }\n}\n\nexport const UPDATE_APP = 'UPDATE_APP';\n\nexport function updateApp(previousApp: IApp, currentApp: IApp): EntitiesAction {\n    return {\n        type: UPDATE_APP,\n        data: {apps: [previousApp, currentApp]}\n    }\n}\n\nexport const DELETE_APP = 'DELETE_APP';\n\nexport function deleteApp(app: IApp): EntitiesAction {\n    return {\n        type: DELETE_APP,\n        data: {apps: [app]}\n    }\n}\n\nexport const APP_SERVICES_REQUEST = 'APP_SERVICES_REQUEST';\nexport const APP_SERVICES_SUCCESS = 'APP_SERVICES_SUCCESS';\nexport const APP_SERVICES_FAILURE = 'APP_SERVICES_FAILURE';\nexport const loadAppServices = (appName: string) => (dispatch: any) => {\n    return dispatch(fetchAppServices(appName));\n};\nconst fetchAppServices = (appName: string) => ({\n    [CALL_API]: {\n        types: [APP_SERVICES_REQUEST, APP_SERVICES_SUCCESS, APP_SERVICES_FAILURE],\n        endpoint: `apps/${appName}/services`,\n        schema: Schemas.APP_SERVICE_ARRAY,\n        entity: appName\n    }\n});\nexport const ADD_APP_SERVICES = 'ADD_APP_SERVICES';\n\nexport function addAppServices(appName: string, addAppServices: IAddAppService[]): EntitiesAction {\n    return {\n        type: ADD_APP_SERVICES,\n        entity: appName,\n        data: {addAppServices: addAppServices}\n    }\n}\n\nexport const REMOVE_APP_SERVICES = 'REMOVE_APP_SERVICES';\n\nexport function removeAppServices(appName: string, serviceNames: string[]): EntitiesAction {\n    return {\n        type: REMOVE_APP_SERVICES,\n        entity: appName,\n        data: {serviceNames: serviceNames}\n    }\n}\n\nexport const APP_RULES_REQUEST = 'APP_RULES_REQUEST';\nexport const APP_RULES_SUCCESS = 'APP_RULES_SUCCESS';\nexport const APP_RULES_FAILURE = 'APP_RULES_FAILURE';\nexport const loadAppRules = (name: string) => (dispatch: any) => {\n    return dispatch(fetchAppRules(name));\n};\nconst fetchAppRules = (name: string) => ({\n    [CALL_API]: {\n        types: [APP_RULES_REQUEST, APP_RULES_SUCCESS, APP_RULES_FAILURE],\n        endpoint: `apps/${name}/rules`,\n        schema: Schemas.APP_RULE_ARRAY,\n        entity: name\n    }\n});\nexport const ADD_APP_RULES = 'ADD_APP_RULES';\n\nexport function addAppRules(name: string, rules: string[]): EntitiesAction {\n    return {\n        type: ADD_APP_RULES,\n        entity: name,\n        data: {rulesNames: rules}\n    }\n}\n\nexport const REMOVE_APP_RULES = 'REMOVE_APP_RULES';\n\nexport function removeAppRules(name: string, rules: string[]): EntitiesAction {\n    return {\n        type: REMOVE_APP_RULES,\n        entity: name,\n        data: {rulesNames: rules}\n    }\n}\n\nexport const APP_SIMULATED_METRICS_REQUEST = 'APP_SIMULATED_METRICS_REQUEST';\nexport const APP_SIMULATED_METRICS_SUCCESS = 'APP_SIMULATED_METRICS_SUCCESS';\nexport const APP_SIMULATED_METRICS_FAILURE = 'APP_SIMULATED_METRICS_FAILURE';\nexport const loadAppSimulatedMetrics = (name: string) => (dispatch: any) => {\n    return dispatch(fetchAppSimulatedMetrics(name));\n};\nconst fetchAppSimulatedMetrics = (name: string) => ({\n    [CALL_API]: {\n        types: [APP_SIMULATED_METRICS_REQUEST, APP_SIMULATED_METRICS_SUCCESS, APP_SIMULATED_METRICS_FAILURE],\n        endpoint: `apps/${name}/simulated-metrics`,\n        schema: Schemas.APP_SIMULATED_METRIC_ARRAY,\n        entity: name\n    }\n});\nexport const ADD_APP_SIMULATED_METRICS = 'ADD_APP_SIMULATED_METRICS';\n\nexport function addAppSimulatedMetrics(name: string, simulatedMetrics: string[]): EntitiesAction {\n    return {\n        type: ADD_APP_SIMULATED_METRICS,\n        entity: name,\n        data: {simulatedMetricNames: simulatedMetrics}\n    }\n}\n\nexport const REMOVE_APP_SIMULATED_METRICS = 'REMOVE_APP_SIMULATED_METRICS';\n\nexport function removeAppSimulatedMetrics(name: string, simulatedMetrics: string[]): EntitiesAction {\n    return {\n        type: REMOVE_APP_SIMULATED_METRICS,\n        entity: name,\n        data: {simulatedMetricNames: simulatedMetrics}\n    }\n}\n\nexport const SERVICES_REQUEST = 'SERVICES_REQUEST';\nexport const SERVICES_SUCCESS = 'SERVICES_SUCCESS';\nexport const SERVICES_FAILURE = 'SERVICES_FAILURE';\nexport const SERVICE_REQUEST = 'SERVICE_REQUEST';\nexport const SERVICE_SUCCESS = 'SERVICE_SUCCESS';\nexport const SERVICE_FAILURE = 'SERVICE_FAILURE';\nexport const loadServices = (name?: string) => (dispatch: any) => {\n    return dispatch(fetchServices(name));\n};\nconst fetchServices = (name?: string) => ({\n    [CALL_API]:\n        !name\n            ? {\n                types: [SERVICES_REQUEST, SERVICES_SUCCESS, SERVICES_FAILURE],\n                endpoint: `services`,\n                schema: Schemas.SERVICE_ARRAY,\n                entity: 'services'\n            }\n            : {\n                types: [SERVICE_REQUEST, SERVICE_SUCCESS, SERVICE_FAILURE],\n                endpoint: `services/${name}`,\n                schema: Schemas.SERVICE,\n                entity: 'services'\n            }\n});\nexport const ADD_SERVICE = 'ADD_SERVICE';\n\nexport function addService(service: IService): EntitiesAction {\n    return {\n        type: ADD_SERVICE,\n        data: {services: new Array(service)}\n    }\n}\n\nexport const UPDATE_SERVICE = 'UPDATE_SERVICE';\n\nexport function updateService(previousService: IService, currentService: IService): EntitiesAction {\n    return {\n        type: UPDATE_SERVICE,\n        data: {services: [previousService, currentService]}\n    }\n}\n\nexport const DELETE_SERVICE = 'DELETE_SERVICE';\n\nexport function deleteService(service: IService): EntitiesAction {\n    return {\n        type: DELETE_SERVICE,\n        data: {services: [service]}\n    }\n}\n\nexport const SERVICE_APPS_REQUEST = 'SERVICE_APPS_REQUEST';\nexport const SERVICE_APPS_SUCCESS = 'SERVICE_APPS_SUCCESS';\nexport const SERVICE_APPS_FAILURE = 'SERVICE_APPS_FAILURE';\nexport const loadServiceApps = (serviceName: string) => (dispatch: any) => {\n    return dispatch(fetchServiceApps(serviceName));\n};\nconst fetchServiceApps = (serviceName: string) => ({\n    [CALL_API]: {\n        types: [SERVICE_APPS_REQUEST, SERVICE_APPS_SUCCESS, SERVICE_APPS_FAILURE],\n        endpoint: `services/${serviceName}/apps`,\n        schema: Schemas.SERVICE_APP_ARRAY,\n        entity: serviceName\n    }\n});\nexport const ADD_SERVICE_APPS = 'ADD_SERVICE_APPS';\n\nexport function addServiceApps(serviceName: string, apps: string[]): EntitiesAction {\n    return {\n        type: ADD_SERVICE_APPS,\n        entity: serviceName,\n        data: {appsNames: apps}\n    }\n}\n\nexport const REMOVE_SERVICE_APPS = 'REMOVE_SERVICE_APPS';\n\nexport function removeServiceApps(serviceName: string, apps: string[]): EntitiesAction {\n    return {\n        type: REMOVE_SERVICE_APPS,\n        entity: serviceName,\n        data: {appsNames: apps}\n    }\n}\n\nexport const SERVICE_DEPENDENCIES_REQUEST = 'SERVICE_DEPENDENCIES_REQUEST';\nexport const SERVICE_DEPENDENCIES_SUCCESS = 'SERVICE_DEPENDENCIES_SUCCESS';\nexport const SERVICE_DEPENDENCIES_FAILURE = 'SERVICE_DEPENDENCIES_FAILURE';\nexport const loadServiceDependencies = (serviceName: string) => (dispatch: any) => {\n    return dispatch(fetchServiceDependencies(serviceName));\n};\nconst fetchServiceDependencies = (serviceName: string) => ({\n    [CALL_API]: {\n        types: [SERVICE_DEPENDENCIES_REQUEST, SERVICE_DEPENDENCIES_SUCCESS, SERVICE_DEPENDENCIES_FAILURE],\n        endpoint: `services/${serviceName}/dependencies`,\n        schema: Schemas.SERVICE_DEPENDENCY_ARRAY,\n        entity: serviceName\n    }\n});\nexport const ADD_SERVICE_DEPENDENCIES = 'ADD_SERVICE_DEPENDENCIES';\n\nexport function addServiceDependencies(serviceName: string, dependencies: string[]): EntitiesAction {\n    return {\n        type: ADD_SERVICE_DEPENDENCIES,\n        entity: serviceName,\n        data: {dependenciesNames: dependencies}\n    }\n}\n\nexport const REMOVE_SERVICE_DEPENDENCIES = 'REMOVE_SERVICE_DEPENDENCY';\n\nexport function removeServiceDependencies(serviceName: string, dependencies: string[]): EntitiesAction {\n    return {\n        type: REMOVE_SERVICE_DEPENDENCIES,\n        entity: serviceName,\n        data: {dependenciesNames: dependencies}\n    }\n}\n\nexport const SERVICE_DEPENDENTS_REQUEST = 'SERVICE_DEPENDENTS_REQUEST';\nexport const SERVICE_DEPENDENTS_SUCCESS = 'SERVICE_DEPENDENTS_SUCCESS';\nexport const SERVICE_DEPENDENTS_FAILURE = 'SERVICE_DEPENDENTS_FAILURE';\nexport const loadServiceDependents = (serviceName: string) => (dispatch: any) => {\n    return dispatch(fetchServiceDependents(serviceName));\n};\nconst fetchServiceDependents = (serviceName: string) => ({\n    [CALL_API]: {\n        types: [SERVICE_DEPENDENTS_REQUEST, SERVICE_DEPENDENTS_SUCCESS, SERVICE_DEPENDENTS_FAILURE],\n        endpoint: `services/${serviceName}/dependents`,\n        schema: Schemas.SERVICE_DEPENDENT_ARRAY,\n        entity: serviceName\n    }\n});\n\nexport const SERVICE_PREDICTIONS_REQUEST = 'SERVICE_PREDICTIONS_REQUEST';\nexport const SERVICE_PREDICTIONS_SUCCESS = 'SERVICE_PREDICTIONS_SUCCESS';\nexport const SERVICE_PREDICTIONS_FAILURE = 'SERVICE_PREDICTIONS_FAILURE';\nexport const loadServicePredictions = (serviceName: string) => (dispatch: any) => {\n    return dispatch(fetchServicePredictions(serviceName));\n};\nconst fetchServicePredictions = (serviceName: string) => ({\n    [CALL_API]: {\n        types: [SERVICE_PREDICTIONS_REQUEST, SERVICE_PREDICTIONS_SUCCESS, SERVICE_PREDICTIONS_FAILURE],\n        endpoint: `services/${serviceName}/predictions`,\n        schema: Schemas.SERVICE_PREDICTION_ARRAY,\n        entity: serviceName\n    }\n});\nexport const ADD_SERVICE_PREDICTIONS = 'ADD_SERVICE_PREDICTIONS';\n\nexport function addServicePredictions(serviceName: string, predictions: IPrediction[]): EntitiesAction {\n    return {\n        type: ADD_SERVICE_PREDICTIONS,\n        entity: serviceName,\n        data: {predictions: predictions}\n    }\n}\n\nexport const REMOVE_SERVICE_PREDICTIONS = 'REMOVE_SERVICE_PREDICTIONS';\n\nexport function removeServicePredictions(serviceName: string, predictions: string[]): EntitiesAction {\n    return {\n        type: REMOVE_SERVICE_PREDICTIONS,\n        entity: serviceName,\n        data: {predictionsNames: predictions}\n    }\n}\n\nexport const SERVICE_RULES_REQUEST = 'SERVICE_RULES_REQUEST';\nexport const SERVICE_RULES_SUCCESS = 'SERVICE_RULES_SUCCESS';\nexport const SERVICE_RULES_FAILURE = 'SERVICE_RULES_FAILURE';\nexport const loadServiceRules = (serviceName: string) => (dispatch: any) => {\n    return dispatch(fetchServiceRules(serviceName));\n};\nconst fetchServiceRules = (serviceName: string) => ({\n    [CALL_API]: {\n        types: [SERVICE_RULES_REQUEST, SERVICE_RULES_SUCCESS, SERVICE_RULES_FAILURE],\n        endpoint: `services/${serviceName}/rules`,\n        schema: Schemas.SERVICE_RULE_ARRAY,\n        entity: serviceName\n    }\n});\nexport const ADD_SERVICE_RULES = 'ADD_SERVICE_RULES';\n\nexport function addServiceRules(serviceName: string, rules: string[]): EntitiesAction {\n    return {\n        type: ADD_SERVICE_RULES,\n        entity: serviceName,\n        data: {rulesNames: rules}\n    }\n}\n\nexport const REMOVE_SERVICE_RULES = 'REMOVE_SERVICE_RULES';\n\nexport function removeServiceRules(serviceName: string, rules: string[]): EntitiesAction {\n    return {\n        type: REMOVE_SERVICE_RULES,\n        entity: serviceName,\n        data: {rulesNames: rules}\n    }\n}\n\nexport const SERVICE_SIMULATED_METRICS_REQUEST = 'SERVICE_SIMULATED_METRICS_REQUEST';\nexport const SERVICE_SIMULATED_METRICS_SUCCESS = 'SERVICE_SIMULATED_METRICS_SUCCESS';\nexport const SERVICE_SIMULATED_METRICS_FAILURE = 'SERVICE_SIMULATED_METRICS_FAILURE';\nexport const loadServiceSimulatedMetrics = (serviceName: string) => (dispatch: any) => {\n    return dispatch(fetchServiceSimulatedMetrics(serviceName));\n};\nconst fetchServiceSimulatedMetrics = (serviceName: string) => ({\n    [CALL_API]: {\n        types: [SERVICE_SIMULATED_METRICS_REQUEST, SERVICE_SIMULATED_METRICS_SUCCESS, SERVICE_SIMULATED_METRICS_FAILURE],\n        endpoint: `services/${serviceName}/simulated-metrics`,\n        schema: Schemas.SERVICE_SIMULATED_METRIC_ARRAY,\n        entity: serviceName\n    }\n});\nexport const ADD_SERVICE_SIMULATED_METRICS = 'ADD_SERVICE_SIMULATED_METRICS';\n\nexport function addServiceSimulatedMetrics(serviceName: string, simulatedMetrics: string[]): EntitiesAction {\n    return {\n        type: ADD_SERVICE_SIMULATED_METRICS,\n        entity: serviceName,\n        data: {simulatedMetricNames: simulatedMetrics}\n    }\n}\n\nexport const REMOVE_SERVICE_SIMULATED_METRICS = 'REMOVE_SERVICE_SIMULATED_METRICS';\n\nexport function removeServiceSimulatedMetrics(serviceName: string, simulatedMetrics: string[]): EntitiesAction {\n    return {\n        type: REMOVE_SERVICE_SIMULATED_METRICS,\n        entity: serviceName,\n        data: {simulatedMetricNames: simulatedMetrics}\n    }\n}\n\nexport const CONTAINERS_REQUEST = 'CONTAINERS_REQUEST';\nexport const CONTAINERS_SUCCESS = 'CONTAINERS_SUCCESS';\nexport const CONTAINERS_FAILURE = 'CONTAINERS_FAILURE';\nexport const CONTAINER_REQUEST = 'CONTAINER_REQUEST';\nexport const CONTAINER_SUCCESS = 'CONTAINER_SUCCESS';\nexport const CONTAINER_FAILURE = 'CONTAINER_FAILURE';\nexport const loadContainers = (id?: string) => (dispatch: any) => {\n    return dispatch(fetchContainers(id));\n};\nconst fetchContainers = (id?: string) => ({\n    [CALL_API]:\n        !id\n            ? {\n                types: [CONTAINERS_REQUEST, CONTAINERS_SUCCESS, CONTAINERS_FAILURE],\n                endpoint: `containers`,\n                schema: Schemas.CONTAINER_ARRAY,\n                entity: 'containers'\n            }\n            : {\n                types: [CONTAINER_REQUEST, CONTAINER_SUCCESS, CONTAINER_FAILURE],\n                endpoint: `containers/${id}`,\n                schema: Schemas.CONTAINER,\n                entity: 'containers'\n            }\n});\nexport const ADD_CONTAINERS = 'ADD_CONTAINERS';\n\nexport function addContainers(containers: IContainer[]): EntitiesAction {\n    return {\n        type: ADD_CONTAINERS,\n        data: {containers}\n    }\n}\n\nexport const DELETE_CONTAINER = 'DELETE_CONTAINER';\n\nexport function deleteContainer(container: IContainer): EntitiesAction {\n    return {\n        type: DELETE_CONTAINER,\n        data: {containers: [container]}\n    }\n}\n\nexport const reloadContainers = () => ({\n    [CALL_API]: {\n        types: [CONTAINERS_REQUEST, CONTAINERS_SUCCESS, CONTAINERS_FAILURE],\n        endpoint: `containers/reload`,\n        schema: Schemas.CONTAINER_ARRAY,\n        entity: 'containers',\n        method: 'post'\n    }\n});\n\nexport const CONTAINER_LOGS_REQUEST = 'CONTAINER_LOGS_REQUEST';\nexport const CONTAINER_LOGS_SUCCESS = 'CONTAINER_LOGS_SUCCESS';\nexport const CONTAINER_LOGS_FAILURE = 'CONTAINER_LOGS_FAILURE';\nexport const loadContainerLogs = (containerId: string) => ({\n    [CALL_API]: {\n        types: [CONTAINER_LOGS_REQUEST, CONTAINER_LOGS_SUCCESS, CONTAINER_LOGS_FAILURE],\n        endpoint: `containers/${containerId}/logs`,\n        entity: containerId,\n    }\n});\n\nexport const CONTAINER_RULES_REQUEST = 'CONTAINER_RULES_REQUEST';\nexport const CONTAINER_RULES_SUCCESS = 'CONTAINER_RULES_SUCCESS';\nexport const CONTAINER_RULES_FAILURE = 'CONTAINER_RULES_FAILURE';\nexport const loadContainerRules = (containerId: string) => (dispatch: any) => {\n    return dispatch(fetchContainerRules(containerId));\n};\nconst fetchContainerRules = (containerId: string) => ({\n    [CALL_API]: {\n        types: [CONTAINER_RULES_REQUEST, CONTAINER_RULES_SUCCESS, CONTAINER_RULES_FAILURE],\n        endpoint: `containers/${containerId}/rules`,\n        schema: Schemas.CONTAINER_RULE_ARRAY,\n        entity: containerId\n    }\n});\nexport const ADD_CONTAINER_RULES = 'ADD_CONTAINER_RULES';\n\nexport function addContainerRules(containerId: string, rules: string[]): EntitiesAction {\n    return {\n        type: ADD_CONTAINER_RULES,\n        entity: containerId,\n        data: {rulesNames: rules}\n    }\n}\n\nexport const REMOVE_CONTAINER_RULES = 'REMOVE_CONTAINER_RULES';\n\nexport function removeContainerRules(containerId: string, rules: string[]): EntitiesAction {\n    return {\n        type: REMOVE_CONTAINER_RULES,\n        entity: containerId,\n        data: {rulesNames: rules}\n    }\n}\n\nexport const CONTAINER_SIMULATED_METRICS_REQUEST = 'CONTAINER_SIMULATED_METRICS_REQUEST';\nexport const CONTAINER_SIMULATED_METRICS_SUCCESS = 'CONTAINER_SIMULATED_METRICS_SUCCESS';\nexport const CONTAINER_SIMULATED_METRICS_FAILURE = 'CONTAINER_SIMULATED_METRICS_FAILURE';\nexport const loadContainerSimulatedMetrics = (containerId: string) => (dispatch: any) => {\n    return dispatch(fetchContainerSimulatedMetrics(containerId));\n};\nconst fetchContainerSimulatedMetrics = (containerId: string) => ({\n    [CALL_API]: {\n        types: [CONTAINER_SIMULATED_METRICS_REQUEST, CONTAINER_SIMULATED_METRICS_SUCCESS, CONTAINER_SIMULATED_METRICS_FAILURE],\n        endpoint: `containers/${containerId}/simulated-metrics`,\n        schema: Schemas.CONTAINER_SIMULATED_METRIC_ARRAY,\n        entity: containerId\n    }\n});\nexport const ADD_CONTAINER_SIMULATED_METRICS = 'ADD_CONTAINER_SIMULATED_METRICS';\n\nexport function addContainerSimulatedMetrics(containerId: string, simulatedMetrics: string[]): EntitiesAction {\n    return {\n        type: ADD_CONTAINER_SIMULATED_METRICS,\n        entity: containerId,\n        data: {simulatedMetricNames: simulatedMetrics}\n    }\n}\n\nexport const REMOVE_CONTAINER_SIMULATED_METRICS = 'REMOVE_CONTAINER_SIMULATED_METRICS';\n\nexport function removeContainerSimulatedMetrics(containerId: string, simulatedMetrics: string[]): EntitiesAction {\n    return {\n        type: REMOVE_CONTAINER_SIMULATED_METRICS,\n        entity: containerId,\n        data: {simulatedMetricNames: simulatedMetrics}\n    }\n}\n\nexport const CLOUD_HOSTS_REQUEST = 'CLOUD_HOSTS_REQUEST';\nexport const CLOUD_HOSTS_SUCCESS = 'CLOUD_HOSTS_SUCCESS';\nexport const CLOUD_HOSTS_FAILURE = 'CLOUD_HOSTS_FAILURE';\nexport const CLOUD_HOST_REQUEST = 'CLOUD_HOST_REQUEST';\nexport const CLOUD_HOST_SUCCESS = 'CLOUD_HOST_SUCCESS';\nexport const CLOUD_HOST_FAILURE = 'CLOUD_HOST_FAILURE';\nexport const loadCloudHosts = (instanceId?: string) => (dispatch: any) => {\n    return dispatch(fetchCloudHosts(instanceId));\n};\nconst fetchCloudHosts = (instanceId?: string) => ({\n    [CALL_API]:\n        !instanceId\n            ? {\n                types: [CLOUD_HOSTS_REQUEST, CLOUD_HOSTS_SUCCESS, CLOUD_HOSTS_FAILURE],\n                endpoint: `hosts/cloud`,\n                schema: Schemas.CLOUD_HOST_ARRAY,\n                entity: 'cloudHosts'\n            }\n            : {\n                types: [CLOUD_HOST_REQUEST, CLOUD_HOST_SUCCESS, CLOUD_HOST_FAILURE],\n                endpoint: `hosts/cloud/${instanceId}`,\n                schema: Schemas.CLOUD_HOST,\n                entity: 'cloudHosts'\n            }\n});\n\nexport const syncCloudHosts = () => ({\n    [CALL_API]: {\n        types: [CLOUD_HOSTS_REQUEST, CLOUD_HOSTS_SUCCESS, CLOUD_HOSTS_FAILURE],\n        endpoint: `hosts/cloud/sync`,\n        schema: Schemas.CLOUD_HOST_ARRAY,\n        entity: 'cloudHosts',\n        method: 'post'\n    }\n});\n\nexport const ADD_CLOUD_HOST = 'ADD_CLOUD_HOST';\n\nexport function addCloudHost(cloudHost: ICloudHost): EntitiesAction {\n    return {\n        type: ADD_CLOUD_HOST,\n        data: {cloudHosts: new Array(cloudHost)}\n    }\n}\n\nexport const UPDATE_CLOUD_HOST = 'UPDATE_CLOUD_HOST';\n\nexport function updateCloudHost(previousCloudHost: ICloudHost, currentCloudHost: ICloudHost): EntitiesAction {\n    return {\n        type: UPDATE_CLOUD_HOST,\n        data: {cloudHosts: [previousCloudHost, currentCloudHost]}\n    }\n}\n\nexport const DELETE_CLOUD_HOST = 'DELETE_CLOUD_HOST';\n\nexport function deleteCloudHost(cloudHost: ICloudHost): EntitiesAction {\n    return {\n        type: DELETE_CLOUD_HOST,\n        data: {cloudHosts: [cloudHost]}\n    }\n}\n\nexport const CLOUD_HOST_RULES_REQUEST = 'CLOUD_HOST_RULES_REQUEST';\nexport const CLOUD_HOST_RULES_SUCCESS = 'CLOUD_HOST_RULES_SUCCESS';\nexport const CLOUD_HOST_RULES_FAILURE = 'CLOUD_HOST_RULES_FAILURE';\nexport const loadCloudHostRules = (instanceId: string) => (dispatch: any) => {\n    return dispatch(fetchCloudHostRules(instanceId));\n};\nconst fetchCloudHostRules = (cloudHost: string) => ({\n    [CALL_API]: {\n        types: [CLOUD_HOST_RULES_REQUEST, CLOUD_HOST_RULES_SUCCESS, CLOUD_HOST_RULES_FAILURE],\n        endpoint: `hosts/cloud/${cloudHost}/rules`,\n        schema: Schemas.CLOUD_HOST_RULE_ARRAY,\n        entity: cloudHost\n    }\n});\nexport const ADD_CLOUD_HOST_RULE = 'ADD_CLOUD_HOST_RULE';\n\nexport function addCloudHostRule(cloudHost: string, rule: string): EntitiesAction {\n    return {\n        type: ADD_CLOUD_HOST_RULE,\n        entity: cloudHost,\n        data: {rulesNames: new Array(rule)}\n    }\n}\n\nexport const REMOVE_CLOUD_HOST_RULES = 'REMOVE_CLOUD_HOST_RULES';\n\nexport function removeCloudHostRules(cloudHost: string, rules: string[]): EntitiesAction {\n    return {\n        type: REMOVE_CLOUD_HOST_RULES,\n        entity: cloudHost,\n        data: {rulesNames: rules}\n    }\n}\n\nexport const CLOUD_HOST_SIMULATED_METRICS_REQUEST = 'CLOUD_HOST_SIMULATED_METRICS_REQUEST';\nexport const CLOUD_HOST_SIMULATED_METRICS_SUCCESS = 'CLOUD_HOST_SIMULATED_METRICS_SUCCESS';\nexport const CLOUD_HOST_SIMULATED_METRICS_FAILURE = 'CLOUD_HOST_SIMULATED_METRICS_FAILURE';\nexport const loadCloudHostSimulatedMetrics = (cloudHost: string) => (dispatch: any) => {\n    return dispatch(fetchCloudHostSimulatedMetrics(cloudHost));\n};\nconst fetchCloudHostSimulatedMetrics = (cloudHost: string) => ({\n    [CALL_API]: {\n        types: [CLOUD_HOST_SIMULATED_METRICS_REQUEST, CLOUD_HOST_SIMULATED_METRICS_SUCCESS, CLOUD_HOST_SIMULATED_METRICS_FAILURE],\n        endpoint: `hosts/cloud/${cloudHost}/simulated-metrics`,\n        schema: Schemas.CLOUD_HOST_SIMULATED_METRIC_ARRAY,\n        entity: cloudHost\n    }\n});\nexport const ADD_CLOUD_HOST_SIMULATED_METRICS = 'ADD_CLOUD_HOST_SIMULATED_METRICS';\n\nexport function addCloudHostSimulatedMetrics(cloudHost: string, simulatedMetrics: string[]): EntitiesAction {\n    return {\n        type: ADD_CLOUD_HOST_SIMULATED_METRICS,\n        entity: cloudHost,\n        data: {simulatedMetricNames: simulatedMetrics}\n    }\n}\n\nexport const REMOVE_CLOUD_HOST_SIMULATED_METRICS = 'REMOVE_CLOUD_HOST_SIMULATED_METRICS';\n\nexport function removeCloudHostSimulatedMetrics(cloudHost: string, simulatedMetrics: string[]): EntitiesAction {\n    return {\n        type: REMOVE_CLOUD_HOST_SIMULATED_METRICS,\n        entity: cloudHost,\n        data: {simulatedMetricNames: simulatedMetrics}\n    }\n}\n\nexport const CLOUD_REGIONS_REQUEST = 'CLOUD_REGIONS_REQUEST';\nexport const CLOUD_REGIONS_SUCCESS = 'CLOUD_REGIONS_SUCCESS';\nexport const CLOUD_REGIONS_FAILURE = 'CLOUD_REGIONS_FAILURE';\nexport const loadCloudRegions = () => (dispatch: any) => {\n    return dispatch(fetchCloudRegions());\n};\nconst fetchCloudRegions = () => ({\n    [CALL_API]: {\n        types: [CLOUD_REGIONS_REQUEST, CLOUD_REGIONS_SUCCESS, CLOUD_REGIONS_FAILURE],\n        endpoint: `hosts/cloud/regions`,\n    }\n});\n\nexport const EDGE_HOSTS_REQUEST = 'EDGE_HOSTS_REQUEST';\nexport const EDGE_HOSTS_SUCCESS = 'EDGE_HOSTS_SUCCESS';\nexport const EDGE_HOSTS_FAILURE = 'EDGE_HOSTS_FAILURE';\nexport const EDGE_HOST_REQUEST = 'EDGE_HOST_REQUEST';\nexport const EDGE_HOST_SUCCESS = 'EDGE_HOST_SUCCESS';\nexport const EDGE_HOST_FAILURE = 'EDGE_HOST_FAILURE';\nexport const loadEdgeHosts = (hostname?: string) => (dispatch: any) => {\n    return dispatch(fetchEdgeHosts(hostname));\n};\nconst fetchEdgeHosts = (hostname?: string) => ({\n    [CALL_API]:\n        !hostname\n            ? {\n                types: [EDGE_HOSTS_REQUEST, EDGE_HOSTS_SUCCESS, EDGE_HOSTS_FAILURE],\n                endpoint: `hosts/edge`,\n                schema: Schemas.EDGE_HOST_ARRAY,\n                entity: 'edgeHosts'\n            }\n            : {\n                types: [EDGE_HOST_REQUEST, EDGE_HOST_SUCCESS, EDGE_HOST_FAILURE],\n                endpoint: `hosts/edge/${hostname}`,\n                schema: Schemas.EDGE_HOST,\n                entity: 'edgeHosts'\n            }\n});\nexport const ADD_EDGE_HOST = 'ADD_EDGE_HOST';\n\nexport function addEdgeHost(edgeHost: IEdgeHost): EntitiesAction {\n    return {\n        type: ADD_EDGE_HOST,\n        data: {edgeHosts: new Array(edgeHost)}\n    }\n}\n\nexport const UPDATE_EDGE_HOST = 'UPDATE_EDGE_HOST';\n\nexport function updateEdgeHost(previousEdgeHost: IEdgeHost, currentEdgeHost: IEdgeHost): EntitiesAction {\n    return {\n        type: UPDATE_EDGE_HOST,\n        data: {edgeHosts: [previousEdgeHost, currentEdgeHost]}\n    }\n}\n\nexport const DELETE_EDGE_HOST = 'DELETE_EDGE_HOST';\n\nexport function deleteEdgeHost(edgeHost: IEdgeHost): EntitiesAction {\n    return {\n        type: DELETE_EDGE_HOST,\n        data: {edgeHosts: [edgeHost]}\n    }\n}\n\nexport const EDGE_HOST_RULES_REQUEST = 'EDGE_HOST_RULES_REQUEST';\nexport const EDGE_HOST_RULES_SUCCESS = 'EDGE_HOST_RULES_SUCCESS';\nexport const EDGE_HOST_RULES_FAILURE = 'EDGE_HOST_RULES_FAILURE';\nexport const loadEdgeHostRules = (hostname: string) => (dispatch: any) => {\n    return dispatch(fetchEdgeHostRules(hostname));\n};\nconst fetchEdgeHostRules = (hostname: string) => ({\n    [CALL_API]: {\n        types: [EDGE_HOST_RULES_REQUEST, EDGE_HOST_RULES_SUCCESS, EDGE_HOST_RULES_FAILURE],\n        endpoint: `hosts/edge/${hostname}/rules`,\n        schema: Schemas.EDGE_HOST_RULE_ARRAY,\n        entity: hostname\n    }\n});\nexport const ADD_EDGE_HOST_RULES = 'ADD_EDGE_HOST_RULES';\n\nexport function addEdgeHostRules(hostname: string, rules: string[]): EntitiesAction {\n    return {\n        type: ADD_EDGE_HOST_RULES,\n        entity: hostname,\n        data: {rulesNames: rules}\n    }\n}\n\nexport const REMOVE_EDGE_HOST_RULES = 'REMOVE_EDGE_HOST_RULES';\n\nexport function removeEdgeHostRules(hostname: string, rules: string[]): EntitiesAction {\n    return {\n        type: REMOVE_EDGE_HOST_RULES,\n        entity: hostname,\n        data: {rulesNames: rules}\n    }\n}\n\nexport const EDGE_HOST_SIMULATED_METRICS_REQUEST = 'EDGE_HOST_SIMULATED_METRICS_REQUEST';\nexport const EDGE_HOST_SIMULATED_METRICS_SUCCESS = 'EDGE_HOST_SIMULATED_METRICS_SUCCESS';\nexport const EDGE_HOST_SIMULATED_METRICS_FAILURE = 'EDGE_HOST_SIMULATED_METRICS_FAILURE';\nexport const loadEdgeHostSimulatedMetrics = (hostname: string) => (dispatch: any) => {\n    return dispatch(fetchEdgeHostSimulatedMetrics(hostname));\n};\nconst fetchEdgeHostSimulatedMetrics = (hostname: string) => ({\n    [CALL_API]: {\n        types: [EDGE_HOST_SIMULATED_METRICS_REQUEST, EDGE_HOST_SIMULATED_METRICS_SUCCESS, EDGE_HOST_SIMULATED_METRICS_FAILURE],\n        endpoint: `hosts/edge/${hostname}/simulated-metrics`,\n        schema: Schemas.EDGE_HOST_SIMULATED_METRIC_ARRAY,\n        entity: hostname\n    }\n});\nexport const ADD_EDGE_HOST_SIMULATED_METRICS = 'ADD_EDGE_HOST_SIMULATED_METRICS';\n\nexport function addEdgeHostSimulatedMetrics(hostname: string, simulatedMetrics: string[]): EntitiesAction {\n    return {\n        type: ADD_EDGE_HOST_SIMULATED_METRICS,\n        entity: hostname,\n        data: {simulatedMetricNames: simulatedMetrics}\n    }\n}\n\nexport const REMOVE_EDGE_HOST_SIMULATED_METRICS = 'REMOVE_EDGE_HOST_SIMULATED_METRICS';\n\nexport function removeEdgeHostSimulatedMetrics(hostname: string, simulatedMetrics: string[]): EntitiesAction {\n    return {\n        type: REMOVE_EDGE_HOST_SIMULATED_METRICS,\n        entity: hostname,\n        data: {simulatedMetricNames: simulatedMetrics}\n    }\n}\n\nexport const NODES_REQUEST = 'NODES_REQUEST';\nexport const NODES_SUCCESS = 'NODES_SUCCESS';\nexport const NODES_FAILURE = 'NODES_FAILURE';\nexport const NODE_REQUEST = 'NODE_REQUEST';\nexport const NODE_SUCCESS = 'NODE_SUCCESS';\nexport const NODE_FAILURE = 'NODE_FAILURE';\nexport const loadNodes = (id?: string) => (dispatch: any) => {\n    return dispatch(fetchNodes(id));\n};\nconst fetchNodes = (id?: string) => ({\n    [CALL_API]:\n        !id\n            ? {\n                types: [NODES_REQUEST, NODES_SUCCESS, NODES_FAILURE],\n                endpoint: `nodes`,\n                schema: Schemas.NODE_ARRAY,\n                entity: 'nodes'\n            }\n            : {\n                types: [NODE_REQUEST, NODE_SUCCESS, NODE_FAILURE],\n                endpoint: `nodes/${id}`,\n                schema: Schemas.NODE,\n                entity: 'nodes'\n            }\n});\nexport const ADD_NODES = 'ADD_NODES';\n\nexport function addNodes(nodes: INode[]): EntitiesAction {\n    return {\n        type: ADD_NODES,\n        data: {nodes}\n    }\n}\n\nexport const UPDATE_NODE = 'UPDATE_NODE';\n\nexport function updateNode(previousNode: INode, currentNode: INode): EntitiesAction {\n    return {\n        type: UPDATE_NODE,\n        data: {nodes: [previousNode, currentNode]}\n    }\n}\n\nexport const DELETE_NODE = 'DELETE_NODE';\n\nexport function deleteNode(node: INode): EntitiesAction {\n    return {\n        type: DELETE_NODE,\n        data: {nodes: [node]}\n    }\n}\n\nexport const RULES_HOST_REQUEST = 'RULES_HOST_REQUEST';\nexport const RULES_HOST_SUCCESS = 'RULES_HOST_SUCCESS';\nexport const RULES_HOST_FAILURE = 'RULES_HOST_FAILURE';\nexport const RULE_HOST_REQUEST = 'RULE_HOST_REQUEST';\nexport const RULE_HOST_SUCCESS = 'RULE_HOST_SUCCESS';\nexport const RULE_HOST_FAILURE = 'RULE_HOST_FAILURE';\nexport const loadRulesHost = (name?: string) => (dispatch: any) => {\n    return dispatch(fetchRulesHost(name));\n};\nconst fetchRulesHost = (name?: string) => ({\n    [CALL_API]:\n        !name\n            ? {\n                types: [RULES_HOST_REQUEST, RULES_HOST_SUCCESS, RULES_HOST_FAILURE],\n                endpoint: `rules/hosts`,\n                schema: Schemas.RULE_HOST_ARRAY,\n                entity: 'hostRules'\n            }\n            : {\n                types: [RULE_HOST_REQUEST, RULE_HOST_SUCCESS, RULE_HOST_FAILURE],\n                endpoint: `rules/hosts/${name}`,\n                schema: Schemas.RULE_HOST,\n                entity: 'hostRules'\n            }\n});\nexport const ADD_RULE_HOST = 'ADD_RULE_HOST';\n\nexport function addRuleHost(ruleHost: IRuleHost): EntitiesAction {\n    return {\n        type: ADD_RULE_HOST,\n        data: {hostRules: new Array(ruleHost)}\n    }\n}\n\nexport const UPDATE_RULE_HOST = 'UPDATE_RULE_HOST';\n\nexport function updateRuleHost(previousRuleHost: IRuleHost, currentRuleHost: IRuleHost): EntitiesAction {\n    return {\n        type: UPDATE_RULE_HOST,\n        data: {hostRules: [previousRuleHost, currentRuleHost]}\n    }\n}\n\nexport const DELETE_RULE_HOST = 'DELETE_RULE_HOST';\n\nexport function deleteHostRule(hostRule: IRuleHost): EntitiesAction {\n    return {\n        type: DELETE_RULE_HOST,\n        data: {hostRules: [hostRule]}\n    }\n}\n\nexport const RULE_HOST_CONDITIONS_REQUEST = 'RULE_HOST_CONDITIONS_REQUEST';\nexport const RULE_HOST_CONDITIONS_SUCCESS = 'RULE_HOST_CONDITIONS_SUCCESS';\nexport const RULE_HOST_CONDITIONS_FAILURE = 'RULE_HOST_CONDITIONS_FAILURE';\nexport const loadRuleHostConditions = (ruleName: string) => (dispatch: any) => {\n    return dispatch(fetchRuleHostConditions(ruleName));\n};\nconst fetchRuleHostConditions = (ruleName: string) => ({\n    [CALL_API]: {\n        types: [RULE_HOST_CONDITIONS_REQUEST, RULE_HOST_CONDITIONS_SUCCESS, RULE_HOST_CONDITIONS_FAILURE],\n        endpoint: `rules/hosts/${ruleName}/conditions`,\n        schema: Schemas.RULE_CONDITION_ARRAY,\n        entity: ruleName\n    }\n});\nexport const ADD_RULE_HOST_CONDITIONS = 'ADD_RULE_HOST_CONDITIONS';\n\nexport function addRuleHostConditions(ruleName: string, conditions: string[]): EntitiesAction {\n    return {\n        type: ADD_RULE_HOST_CONDITIONS,\n        entity: ruleName,\n        data: {conditionsNames: conditions}\n    }\n}\n\nexport const REMOVE_RULE_HOST_CONDITIONS = 'REMOVE_RULE_HOST_CONDITIONS';\n\nexport function removeRuleHostConditions(ruleName: string, condition: string[]): EntitiesAction {\n    return {\n        type: REMOVE_RULE_HOST_CONDITIONS,\n        entity: ruleName,\n        data: {conditionsNames: condition}\n    }\n}\n\nexport const RULE_HOST_CLOUD_HOSTS_REQUEST = 'RULE_HOST_CLOUD_HOSTS_REQUEST';\nexport const RULE_HOST_CLOUD_HOSTS_SUCCESS = 'RULE_HOST_CLOUD_HOSTS_SUCCESS';\nexport const RULE_HOST_CLOUD_HOSTS_FAILURE = 'RULE_HOST_CLOUD_HOSTS_FAILURE';\nexport const loadRuleHostCloudHosts = (ruleName: string) => (dispatch: any) => {\n    return dispatch(fetchRuleHostCloudHosts(ruleName));\n};\nconst fetchRuleHostCloudHosts = (ruleName: string) => ({\n    [CALL_API]: {\n        types: [RULE_HOST_CLOUD_HOSTS_REQUEST, RULE_HOST_CLOUD_HOSTS_SUCCESS, RULE_HOST_CLOUD_HOSTS_FAILURE],\n        endpoint: `rules/hosts/${ruleName}/cloud-hosts`,\n        schema: Schemas.CLOUD_HOST_ARRAY,\n        entity: ruleName\n    }\n});\nexport const ADD_RULE_HOST_CLOUD_HOSTS = 'ADD_RULE_HOST_CLOUD_HOSTS';\n\nexport function addRuleCloudHosts(ruleName: string, cloudHosts: string[]): EntitiesAction {\n    return {\n        type: ADD_RULE_HOST_CLOUD_HOSTS,\n        entity: ruleName,\n        data: {cloudHostsId: cloudHosts}\n    }\n}\n\nexport const REMOVE_RULE_HOST_CLOUD_HOSTS = 'REMOVE_RULE_HOST_CLOUD_HOSTS';\n\nexport function removeRuleHostCloudHosts(ruleName: string, cloudHost: string[]): EntitiesAction {\n    return {\n        type: REMOVE_RULE_HOST_CLOUD_HOSTS,\n        entity: ruleName,\n        data: {cloudHostsId: cloudHost}\n    }\n}\n\nexport const RULE_HOST_EDGE_HOSTS_REQUEST = 'RULE_HOST_EDGE_HOSTS_REQUEST';\nexport const RULE_HOST_EDGE_HOSTS_SUCCESS = 'RULE_HOST_EDGE_HOSTS_SUCCESS';\nexport const RULE_HOST_EDGE_HOSTS_FAILURE = 'RULE_HOST_EDGE_HOSTS_FAILURE';\nexport const loadRuleHostEdgeHosts = (ruleName: string) => (dispatch: any) => {\n    return dispatch(fetchRuleHostEdgeHosts(ruleName));\n};\nconst fetchRuleHostEdgeHosts = (ruleName: string) => ({\n    [CALL_API]: {\n        types: [RULE_HOST_EDGE_HOSTS_REQUEST, RULE_HOST_EDGE_HOSTS_SUCCESS, RULE_HOST_EDGE_HOSTS_FAILURE],\n        endpoint: `rules/hosts/${ruleName}/edge-hosts`,\n        schema: Schemas.EDGE_HOST_ARRAY,\n        entity: ruleName\n    }\n});\nexport const ADD_RULE_HOST_EDGE_HOSTS = 'ADD_RULE_HOST_EDGE_HOSTS';\n\nexport function addRuleEdgeHosts(ruleName: string, edgeHosts: string[]): EntitiesAction {\n    return {\n        type: ADD_RULE_HOST_EDGE_HOSTS,\n        entity: ruleName,\n        data: {edgeHostsHostname: edgeHosts}\n    }\n}\n\nexport const REMOVE_RULE_HOST_EDGE_HOSTS = 'REMOVE_RULE_HOST_EDGE_HOSTS';\n\nexport function removeRuleHostEdgeHosts(ruleName: string, edgeHosts: string[]): EntitiesAction {\n    return {\n        type: REMOVE_RULE_HOST_EDGE_HOSTS,\n        entity: ruleName,\n        data: {edgeHostsHostname: edgeHosts}\n    }\n}\n\nexport const RULES_APP_REQUEST = 'RULES_APP_REQUEST';\nexport const RULES_APP_SUCCESS = 'RULES_APP_SUCCESS';\nexport const RULES_APP_FAILURE = 'RULES_APP_FAILURE';\nexport const RULE_APP_REQUEST = 'RULE_APP_REQUEST';\nexport const RULE_APP_SUCCESS = 'RULE_APP_SUCCESS';\nexport const RULE_APP_FAILURE = 'RULE_APP_FAILURE';\nexport const loadRulesApp = (name?: string) => (dispatch: any) => {\n    return dispatch(fetchRulesApp(name));\n};\nconst fetchRulesApp = (name?: string) => ({\n    [CALL_API]:\n        !name\n            ? {\n                types: [RULES_APP_REQUEST, RULES_APP_SUCCESS, RULES_APP_FAILURE],\n                endpoint: `rules/apps`,\n                schema: Schemas.RULE_APP_ARRAY,\n                entity: 'rules'\n            }\n            : {\n                types: [RULE_APP_REQUEST, RULE_APP_SUCCESS, RULE_APP_FAILURE],\n                endpoint: `rules/apps/${name}`,\n                schema: Schemas.RULE_APP,\n                entity: 'rules'\n            }\n});\nexport const ADD_RULE_APP = 'ADD_RULE_APP';\n\nexport function addRuleApp(ruleApp: IRuleApp): EntitiesAction {\n    return {\n        type: ADD_RULE_APP,\n        data: {appRules: new Array(ruleApp)}\n    }\n}\n\nexport const UPDATE_RULE_APP = 'UPDATE_RULE_APP';\n\nexport function updateRuleApp(previousRuleApp: IRuleApp, currentRuleApp: IRuleApp): EntitiesAction {\n    return {\n        type: UPDATE_RULE_APP,\n        data: {appRules: [previousRuleApp, currentRuleApp]}\n    }\n}\n\nexport const DELETE_RULE_APP = 'DELETE_RULE_APP';\n\nexport function deleteAppRule(appRule: IRuleApp): EntitiesAction {\n    return {\n        type: DELETE_RULE_APP,\n        data: {appRules: [appRule]}\n    }\n}\n\nexport const RULE_APP_CONDITIONS_REQUEST = 'RULE_APP_CONDITIONS_REQUEST';\nexport const RULE_APP_CONDITIONS_SUCCESS = 'RULE_APP_CONDITIONS_SUCCESS';\nexport const RULE_APP_CONDITIONS_FAILURE = 'RULE_APP_CONDITIONS_FAILURE';\nexport const loadRuleAppConditions = (ruleName: string) => (dispatch: any) => {\n    return dispatch(fetchRuleAppConditions(ruleName));\n};\nconst fetchRuleAppConditions = (ruleName: string) => ({\n    [CALL_API]: {\n        types: [RULE_APP_CONDITIONS_REQUEST, RULE_APP_CONDITIONS_SUCCESS, RULE_APP_CONDITIONS_FAILURE],\n        endpoint: `rules/apps/${ruleName}/conditions`,\n        schema: Schemas.RULE_CONDITION_ARRAY,\n        entity: ruleName\n    }\n});\nexport const ADD_RULE_APP_CONDITIONS = 'ADD_RULE_APP_CONDITIONS';\n\nexport function addRuleAppConditions(ruleName: string, conditions: string[]): EntitiesAction {\n    return {\n        type: ADD_RULE_APP_CONDITIONS,\n        entity: ruleName,\n        data: {conditionsNames: conditions}\n    }\n}\n\nexport const REMOVE_RULE_APP_CONDITIONS = 'REMOVE_RULE_APP_CONDITIONS';\n\nexport function removeRuleAppConditions(ruleName: string, conditions: string[]): EntitiesAction {\n    return {\n        type: REMOVE_RULE_APP_CONDITIONS,\n        entity: ruleName,\n        data: {conditionsNames: conditions}\n    }\n}\n\nexport const RULE_APP_APPS_REQUEST = 'RULE_APP_APPS_REQUEST';\nexport const RULE_APP_APPS_SUCCESS = 'RULE_APP_APPS_SUCCESS';\nexport const RULE_APP_APPS_FAILURE = 'RULE_APP_APPS_FAILURE';\nexport const loadRuleApps = (ruleName: string) => (dispatch: any) => {\n    return dispatch(fetchRuleAppApps(ruleName));\n};\nconst fetchRuleAppApps = (ruleName: string) => ({\n    [CALL_API]: {\n        types: [RULE_APP_APPS_REQUEST, RULE_APP_APPS_SUCCESS, RULE_APP_APPS_FAILURE],\n        endpoint: `rules/apps/${ruleName}/apps`,\n        schema: Schemas.APP_ARRAY,\n        entity: ruleName\n    }\n});\nexport const ADD_RULE_APP_APPS = 'ADD_RULE_APP_APPS';\n\nexport function addRuleApps(ruleName: string, apps: string[]): EntitiesAction {\n    return {\n        type: ADD_RULE_APP_APPS,\n        entity: ruleName,\n        data: {appsNames: apps}\n    }\n}\n\nexport const REMOVE_RULE_APP_APPS = 'REMOVE_RULE_APP_APPS';\n\nexport function removeRuleApps(ruleName: string, apps: string[]): EntitiesAction {\n    return {\n        type: REMOVE_RULE_APP_APPS,\n        entity: ruleName,\n        data: {appsNames: apps}\n    }\n}\n\nexport const RULES_SERVICE_REQUEST = 'RULES_SERVICE_REQUEST';\nexport const RULES_SERVICE_SUCCESS = 'RULES_SERVICE_SUCCESS';\nexport const RULES_SERVICE_FAILURE = 'RULES_SERVICE_FAILURE';\nexport const RULE_SERVICE_REQUEST = 'RULE_SERVICE_REQUEST';\nexport const RULE_SERVICE_SUCCESS = 'RULE_SERVICE_SUCCESS';\nexport const RULE_SERVICE_FAILURE = 'RULE_SERVICE_FAILURE';\nexport const loadRulesService = (name?: string) => (dispatch: any) => {\n    return dispatch(fetchRulesService(name));\n};\nconst fetchRulesService = (name?: string) => ({\n    [CALL_API]:\n        !name\n            ? {\n                types: [RULES_SERVICE_REQUEST, RULES_SERVICE_SUCCESS, RULES_SERVICE_FAILURE],\n                endpoint: `rules/services`,\n                schema: Schemas.RULE_SERVICE_ARRAY,\n                entity: 'rules'\n            }\n            : {\n                types: [RULE_SERVICE_REQUEST, RULE_SERVICE_SUCCESS, RULE_SERVICE_FAILURE],\n                endpoint: `rules/services/${name}`,\n                schema: Schemas.RULE_SERVICE,\n                entity: 'rules'\n            }\n});\nexport const ADD_RULE_SERVICE = 'ADD_RULE_SERVICE';\n\nexport function addRuleService(ruleService: IRuleService): EntitiesAction {\n    return {\n        type: ADD_RULE_SERVICE,\n        data: {serviceRules: new Array(ruleService)}\n    }\n}\n\nexport const UPDATE_RULE_SERVICE = 'UPDATE_RULE_SERVICE';\n\nexport function updateRuleService(previousRuleService: IRuleService, currentRuleService: IRuleService): EntitiesAction {\n    return {\n        type: UPDATE_RULE_SERVICE,\n        data: {serviceRules: [previousRuleService, currentRuleService]}\n    }\n}\n\nexport const DELETE_RULE_SERVICE = 'DELETE_RULE_SERVICE';\n\nexport function deleteServiceRule(serviceRule: IRuleService): EntitiesAction {\n    return {\n        type: DELETE_RULE_SERVICE,\n        data: {serviceRules: [serviceRule]}\n    }\n}\n\nexport const RULE_SERVICE_CONDITIONS_REQUEST = 'RULE_SERVICE_CONDITIONS_REQUEST';\nexport const RULE_SERVICE_CONDITIONS_SUCCESS = 'RULE_SERVICE_CONDITIONS_SUCCESS';\nexport const RULE_SERVICE_CONDITIONS_FAILURE = 'RULE_SERVICE_CONDITIONS_FAILURE';\nexport const loadRuleServiceConditions = (ruleName: string) => (dispatch: any) => {\n    return dispatch(fetchRuleServiceConditions(ruleName));\n};\nconst fetchRuleServiceConditions = (ruleName: string) => ({\n    [CALL_API]: {\n        types: [RULE_SERVICE_CONDITIONS_REQUEST, RULE_SERVICE_CONDITIONS_SUCCESS, RULE_SERVICE_CONDITIONS_FAILURE],\n        endpoint: `rules/services/${ruleName}/conditions`,\n        schema: Schemas.RULE_CONDITION_ARRAY,\n        entity: ruleName\n    }\n});\nexport const ADD_RULE_SERVICE_CONDITIONS = 'ADD_RULE_SERVICE_CONDITIONS';\n\nexport function addRuleServiceConditions(ruleName: string, conditions: string[]): EntitiesAction {\n    return {\n        type: ADD_RULE_SERVICE_CONDITIONS,\n        entity: ruleName,\n        data: {conditionsNames: conditions}\n    }\n}\n\nexport const REMOVE_RULE_SERVICE_CONDITIONS = 'REMOVE_RULE_SERVICE_CONDITIONS';\n\nexport function removeRuleServiceConditions(ruleName: string, conditions: string[]): EntitiesAction {\n    return {\n        type: REMOVE_RULE_SERVICE_CONDITIONS,\n        entity: ruleName,\n        data: {conditionsNames: conditions}\n    }\n}\n\nexport const RULE_SERVICE_SERVICES_REQUEST = 'RULE_SERVICE_SERVICES_REQUEST';\nexport const RULE_SERVICE_SERVICES_SUCCESS = 'RULE_SERVICE_SERVICES_SUCCESS';\nexport const RULE_SERVICE_SERVICES_FAILURE = 'RULE_SERVICE_SERVICES_FAILURE';\nexport const loadRuleServices = (ruleName: string) => (dispatch: any) => {\n    return dispatch(fetchRuleServices(ruleName));\n};\nconst fetchRuleServices = (ruleName: string) => ({\n    [CALL_API]: {\n        types: [RULE_SERVICE_SERVICES_REQUEST, RULE_SERVICE_SERVICES_SUCCESS, RULE_SERVICE_SERVICES_FAILURE],\n        endpoint: `rules/services/${ruleName}/services`,\n        schema: Schemas.SERVICE_ARRAY,\n        entity: ruleName\n    }\n});\nexport const ADD_RULE_SERVICE_SERVICES = 'ADD_RULE_SERVICE_SERVICES';\n\nexport function addRuleServices(ruleName: string, services: string[]): EntitiesAction {\n    return {\n        type: ADD_RULE_SERVICE_SERVICES,\n        entity: ruleName,\n        data: {serviceNames: services}\n    }\n}\n\nexport const REMOVE_RULE_SERVICE_SERVICES = 'REMOVE_RULE_SERVICE_SERVICES';\n\nexport function removeRuleServices(ruleName: string, services: string[]): EntitiesAction {\n    return {\n        type: REMOVE_RULE_SERVICE_SERVICES,\n        entity: ruleName,\n        data: {serviceNames: services}\n    }\n}\n\nexport const RULES_CONTAINER_REQUEST = 'RULES_CONTAINER_REQUEST';\nexport const RULES_CONTAINER_SUCCESS = 'RULES_CONTAINER_SUCCESS';\nexport const RULES_CONTAINER_FAILURE = 'RULES_CONTAINER_FAILURE';\nexport const RULE_CONTAINER_REQUEST = 'RULE_CONTAINER_REQUEST';\nexport const RULE_CONTAINER_SUCCESS = 'RULE_CONTAINER_SUCCESS';\nexport const RULE_CONTAINER_FAILURE = 'RULE_CONTAINER_FAILURE';\nexport const loadRulesContainer = (name?: string) => (dispatch: any) => {\n    return dispatch(fetchRulesContainer(name));\n};\nconst fetchRulesContainer = (name?: string) => ({\n    [CALL_API]:\n        !name\n            ? {\n                types: [RULES_CONTAINER_REQUEST, RULES_CONTAINER_SUCCESS, RULES_CONTAINER_FAILURE],\n                endpoint: `rules/containers`,\n                schema: Schemas.RULE_CONTAINER_ARRAY,\n                entity: 'rules'\n            }\n            : {\n                types: [RULE_CONTAINER_REQUEST, RULE_CONTAINER_SUCCESS, RULE_CONTAINER_FAILURE],\n                endpoint: `rules/containers/${name}`,\n                schema: Schemas.RULE_CONTAINER,\n                entity: 'rules'\n            }\n});\nexport const ADD_RULE_CONTAINER = 'ADD_RULE_CONTAINER';\n\nexport function addRuleContainer(ruleContainer: IRuleContainer): EntitiesAction {\n    return {\n        type: ADD_RULE_CONTAINER,\n        data: {containerRules: new Array(ruleContainer)}\n    }\n}\n\nexport const UPDATE_RULE_CONTAINER = 'UPDATE_RULE_CONTAINER';\n\nexport function updateRuleContainer(previousRuleContainer: IRuleContainer, currentRuleContainer: IRuleContainer): EntitiesAction {\n    return {\n        type: UPDATE_RULE_CONTAINER,\n        data: {containerRules: [previousRuleContainer, currentRuleContainer]}\n    }\n}\n\nexport const DELETE_RULE_CONTAINER = 'DELETE_RULE_CONTAINER';\n\nexport function deleteContainerRule(containerRule: IRuleContainer): EntitiesAction {\n    return {\n        type: DELETE_RULE_CONTAINER,\n        data: {containerRules: [containerRule]}\n    }\n}\n\nexport const RULE_CONTAINER_CONDITIONS_REQUEST = 'RULE_CONTAINER_CONDITIONS_REQUEST';\nexport const RULE_CONTAINER_CONDITIONS_SUCCESS = 'RULE_CONTAINER_CONDITIONS_SUCCESS';\nexport const RULE_CONTAINER_CONDITIONS_FAILURE = 'RULE_CONTAINER_CONDITIONS_FAILURE';\nexport const loadRuleContainerConditions = (ruleName: string) => (dispatch: any) => {\n    return dispatch(fetchRuleContainerConditions(ruleName));\n};\nconst fetchRuleContainerConditions = (ruleName: string) => ({\n    [CALL_API]: {\n        types: [RULE_CONTAINER_CONDITIONS_REQUEST, RULE_CONTAINER_CONDITIONS_SUCCESS, RULE_CONTAINER_CONDITIONS_FAILURE],\n        endpoint: `rules/containers/${ruleName}/conditions`,\n        schema: Schemas.RULE_CONDITION_ARRAY,\n        entity: ruleName\n    }\n});\nexport const ADD_RULE_CONTAINER_CONDITIONS = 'ADD_RULE_CONTAINER_CONDITIONS';\n\nexport function addRuleContainerConditions(ruleName: string, conditions: string[]): EntitiesAction {\n    return {\n        type: ADD_RULE_CONTAINER_CONDITIONS,\n        entity: ruleName,\n        data: {conditionsNames: conditions}\n    }\n}\n\nexport const REMOVE_RULE_CONTAINER_CONDITIONS = 'REMOVE_RULE_CONTAINER_CONDITIONS';\n\nexport function removeRuleContainerConditions(ruleName: string, conditions: string[]): EntitiesAction {\n    return {\n        type: REMOVE_RULE_CONTAINER_CONDITIONS,\n        entity: ruleName,\n        data: {conditionsNames: conditions}\n    }\n}\n\nexport const RULE_CONTAINER_CONTAINERS_REQUEST = 'RULE_CONTAINER_CONTAINERS_REQUEST';\nexport const RULE_CONTAINER_CONTAINERS_SUCCESS = 'RULE_CONTAINER_CONTAINERS_SUCCESS';\nexport const RULE_CONTAINER_CONTAINERS_FAILURE = 'RULE_CONTAINER_CONTAINERS_FAILURE';\nexport const loadRuleContainers = (ruleName: string) => (dispatch: any) => {\n    return dispatch(fetchRuleContainerContainers(ruleName));\n};\nconst fetchRuleContainerContainers = (ruleName: string) => ({\n    [CALL_API]: {\n        types: [RULE_CONTAINER_CONTAINERS_REQUEST, RULE_CONTAINER_CONTAINERS_SUCCESS, RULE_CONTAINER_CONTAINERS_FAILURE],\n        endpoint: `rules/containers/${ruleName}/containers`,\n        schema: Schemas.CONTAINER_ARRAY,\n        entity: ruleName\n    }\n});\nexport const ADD_RULE_CONTAINER_CONTAINERS = 'ADD_RULE_CONTAINER_CONTAINERS';\n\nexport function addRuleContainers(ruleName: string, containers: string[]): EntitiesAction {\n    return {\n        type: ADD_RULE_CONTAINER_CONTAINERS,\n        entity: ruleName,\n        data: {containerIds: containers}\n    }\n}\n\nexport const REMOVE_RULE_CONTAINER_CONTAINERS = 'REMOVE_RULE_CONTAINER_CONTAINERS';\n\nexport function removeRuleContainers(ruleName: string, containers: string[]): EntitiesAction {\n    return {\n        type: REMOVE_RULE_CONTAINER_CONTAINERS,\n        entity: ruleName,\n        data: {containerIds: containers}\n    }\n}\n\nexport const CONDITIONS_REQUEST = 'CONDITIONS_REQUEST';\nexport const CONDITIONS_SUCCESS = 'CONDITIONS_SUCCESS';\nexport const CONDITIONS_FAILURE = 'CONDITIONS_FAILURE';\nexport const CONDITION_REQUEST = 'CONDITION_REQUEST';\nexport const CONDITION_SUCCESS = 'CONDITION_SUCCESS';\nexport const CONDITION_FAILURE = 'CONDITION_FAILURE';\nexport const loadConditions = (name?: string) => (dispatch: any) => {\n    return dispatch(fetchConditions(name));\n};\nconst fetchConditions = (name?: string) => ({\n    [CALL_API]:\n        !name\n            ? {\n                types: [CONDITIONS_REQUEST, CONDITIONS_SUCCESS, CONDITIONS_FAILURE],\n                endpoint: `rules/conditions`,\n                schema: Schemas.RULE_CONDITION_ARRAY,\n                entity: 'conditions'\n            }\n            : {\n                types: [CONDITION_REQUEST, CONDITION_SUCCESS, CONDITION_FAILURE],\n                endpoint: `rules/conditions/${name}`,\n                schema: Schemas.RULE_CONDITION,\n                entity: 'conditions'\n            }\n});\nexport const ADD_CONDITION = 'ADD_CONDITION';\n\nexport function addCondition(condition: IRuleCondition): EntitiesAction {\n    return {\n        type: ADD_CONDITION,\n        data: {conditions: new Array(condition)}\n    }\n}\n\nexport const UPDATE_CONDITION = 'UPDATE_CONDITION';\n\nexport function updateCondition(previousCondition: IRuleCondition, currentCondition: IRuleCondition): EntitiesAction {\n    return {\n        type: UPDATE_CONDITION,\n        data: {conditions: [previousCondition, currentCondition]}\n    }\n}\n\nexport const DELETE_CONDITION = 'DELETE_CONDITION';\n\nexport function deleteCondition(condition: IRuleCondition): EntitiesAction {\n    return {\n        type: DELETE_CONDITION,\n        data: {conditions: [condition]}\n    }\n}\n\nexport const VALUE_MODES_REQUEST = 'VALUE_MODES_REQUEST';\nexport const VALUE_MODES_SUCCESS = 'VALUE_MODES_SUCCESS';\nexport const VALUE_MODES_FAILURE = 'VALUE_MODES_FAILURE';\nexport const loadValueModes = () => (dispatch: any) => {\n    return dispatch(fetchValueModes());\n};\nconst fetchValueModes = () => ({\n    [CALL_API]: {\n        types: [VALUE_MODES_REQUEST, VALUE_MODES_SUCCESS, VALUE_MODES_FAILURE],\n        endpoint: `value-modes`,\n        schema: Schemas.VALUE_MODE_ARRAY,\n        entity: 'value-modes'\n    }\n});\n\nexport const FIELDS_REQUEST = 'FIELDS_REQUEST';\nexport const FIELDS_SUCCESS = 'FIELDS_SUCCESS';\nexport const FIELDS_FAILURE = 'FIELDS_FAILURE';\nexport const loadFields = () => (dispatch: any) => {\n    return dispatch(fetchFields());\n};\nconst fetchFields = () => ({\n    [CALL_API]: {\n        types: [FIELDS_REQUEST, FIELDS_SUCCESS, FIELDS_FAILURE],\n        endpoint: `fields`,\n        schema: Schemas.FIELD_ARRAY,\n        entity: 'fields'\n    }\n});\n\nexport const OPERATORS_REQUEST = 'OPERATORS_REQUEST';\nexport const OPERATORS_SUCCESS = 'OPERATORS_SUCCESS';\nexport const OPERATORS_FAILURE = 'OPERATORS_FAILURE';\nexport const loadOperators = () => (dispatch: any) => {\n    return dispatch(fetchOperators());\n};\nconst fetchOperators = () => ({\n    [CALL_API]: {\n        types: [OPERATORS_REQUEST, OPERATORS_SUCCESS, OPERATORS_FAILURE],\n        endpoint: `operators`,\n        schema: Schemas.OPERATOR_ARRAY,\n        entity: 'operators'\n    }\n});\n\nexport const DECISIONS_REQUEST = 'DECISIONS_REQUEST';\nexport const DECISIONS_SUCCESS = 'DECISIONS_SUCCESS';\nexport const DECISIONS_FAILURE = 'DECISIONS_FAILURE';\nexport const DECISION_REQUEST = 'DECISION_REQUEST';\nexport const DECISION_SUCCESS = 'DECISION_SUCCESS';\nexport const DECISION_FAILURE = 'DECISION_FAILURE';\nexport const loadDecisions = (name?: string) => (dispatch: any) => {\n    return dispatch(fetchDecisions(name));\n};\nconst fetchDecisions = (name?: string) => ({\n    [CALL_API]:\n        !name\n            ? {\n                types: [DECISIONS_REQUEST, DECISIONS_SUCCESS, DECISIONS_FAILURE],\n                endpoint: `decisions`,\n                schema: Schemas.DECISION_ARRAY,\n                entity: 'decisions'\n            }\n            : {\n                types: [DECISION_REQUEST, DECISION_SUCCESS, DECISION_FAILURE],\n                endpoint: `decisions`,\n                schema: Schemas.DECISION,\n                entity: 'decisions'\n            }\n});\n\nexport const SIMULATED_HOST_METRICS_REQUEST = 'SIMULATED_HOST_METRICS_REQUEST';\nexport const SIMULATED_HOST_METRIC_REQUEST = 'SIMULATED_HOST_METRIC_REQUEST';\nexport const SIMULATED_HOST_METRICS_SUCCESS = 'SIMULATED_HOST_METRICS_SUCCESS';\nexport const SIMULATED_HOST_METRIC_SUCCESS = 'SIMULATED_HOST_METRIC_SUCCESS';\nexport const SIMULATED_HOST_METRICS_FAILURE = 'SIMULATED_HOST_METRICS_FAILURE';\nexport const SIMULATED_HOST_METRIC_FAILURE = 'SIMULATED_HOST_METRIC_FAILURE';\nexport const loadSimulatedHostMetrics = (name?: string) => (dispatch: any) => {\n    return dispatch(fetchSimulatedHostMetrics(name));\n};\nconst fetchSimulatedHostMetrics = (name?: string) => ({\n    [CALL_API]:\n        !name\n            ? {\n                types: [SIMULATED_HOST_METRICS_REQUEST, SIMULATED_HOST_METRICS_SUCCESS, SIMULATED_HOST_METRICS_FAILURE],\n                endpoint: `simulated-metrics/hosts`,\n                schema: Schemas.SIMULATED_HOST_METRIC_ARRAY,\n                entity: 'simulatedHostMetrics'\n            }\n            : {\n                types: [SIMULATED_HOST_METRIC_REQUEST, SIMULATED_HOST_METRIC_SUCCESS, SIMULATED_HOST_METRIC_FAILURE],\n                endpoint: `simulated-metrics/hosts/${name}`,\n                schema: Schemas.SIMULATED_HOST_METRIC,\n                entity: 'simulatedHostMetrics'\n            }\n});\nexport const ADD_SIMULATED_HOST_METRIC = 'ADD_SIMULATED_HOST_METRIC';\n\nexport function addSimulatedHostMetric(simulatedHostMetric: ISimulatedHostMetric): EntitiesAction {\n    return {\n        type: ADD_SIMULATED_HOST_METRIC,\n        data: {simulatedHostMetrics: new Array(simulatedHostMetric)}\n    }\n}\n\nexport const UPDATE_SIMULATED_HOST_METRIC = 'UPDATE_SIMULATED_HOST_METRIC';\n\nexport function updateSimulatedHostMetric(previousSimulatedHostMetric: ISimulatedHostMetric,\n                                          currentSimulatedHostMetric: ISimulatedHostMetric): EntitiesAction {\n    return {\n        type: UPDATE_SIMULATED_HOST_METRIC,\n        data: {simulatedHostMetrics: [previousSimulatedHostMetric, currentSimulatedHostMetric]}\n    }\n}\n\nexport const DELETE_SIMULATED_HOST_METRIC = 'DELETE_SIMULATED_HOST_METRIC';\n\nexport function deleteSimulatedHostMetric(simulatedHostMetric: ISimulatedHostMetric): EntitiesAction {\n    return {\n        type: DELETE_SIMULATED_HOST_METRIC,\n        data: {simulatedHostMetrics: [simulatedHostMetric]}\n    }\n}\n\nexport const SIMULATED_HOST_METRIC_CLOUD_HOSTS_REQUEST = 'SIMULATED_HOST_METRIC_CLOUD_HOSTS_REQUEST';\nexport const SIMULATED_HOST_METRIC_CLOUD_HOSTS_SUCCESS = 'SIMULATED_HOST_METRIC_CLOUD_HOSTS_SUCCESS';\nexport const SIMULATED_HOST_METRIC_CLOUD_HOSTS_FAILURE = 'SIMULATED_HOST_METRIC_CLOUD_HOSTS_FAILURE';\nexport const loadSimulatedHostMetricCloudHosts = (simulatedHostMetricName: string) => (dispatch: any) => {\n    return dispatch(fetchSimulatedHostMetricCloudHosts(simulatedHostMetricName));\n};\nconst fetchSimulatedHostMetricCloudHosts = (simulatedHostMetricName: string) => ({\n    [CALL_API]: {\n        types: [SIMULATED_HOST_METRIC_CLOUD_HOSTS_REQUEST, SIMULATED_HOST_METRIC_CLOUD_HOSTS_SUCCESS, SIMULATED_HOST_METRIC_CLOUD_HOSTS_FAILURE],\n        endpoint: `simulated-metrics/hosts/${simulatedHostMetricName}/cloud-hosts`,\n        schema: Schemas.CLOUD_HOST_ARRAY,\n        entity: simulatedHostMetricName\n    }\n});\nexport const ADD_SIMULATED_HOST_METRIC_CLOUD_HOSTS = 'ADD_SIMULATED_HOST_METRIC_CLOUD_HOSTS';\n\nexport function addSimulatedHostMetricCloudHosts(simulatedHostMetricName: string, cloudHosts: string[]): EntitiesAction {\n    return {\n        type: ADD_SIMULATED_HOST_METRIC_CLOUD_HOSTS,\n        entity: simulatedHostMetricName,\n        data: {cloudHostsId: cloudHosts}\n    }\n}\n\nexport const REMOVE_SIMULATED_HOST_METRIC_CLOUD_HOSTS = 'REMOVE_SIMULATED_HOST_METRIC_CLOUD_HOSTS';\n\nexport function removeSimulatedHostMetricCloudHosts(simulatedHostMetricName: string, cloudHosts: string[]): EntitiesAction {\n    return {\n        type: REMOVE_SIMULATED_HOST_METRIC_CLOUD_HOSTS,\n        entity: simulatedHostMetricName,\n        data: {cloudHostsId: cloudHosts}\n    }\n}\n\nexport const SIMULATED_HOST_METRIC_EDGE_HOSTS_REQUEST = 'SIMULATED_HOST_METRIC_EDGE_HOSTS_REQUEST';\nexport const SIMULATED_HOST_METRIC_EDGE_HOSTS_SUCCESS = 'SIMULATED_HOST_METRIC_EDGE_HOSTS_SUCCESS';\nexport const SIMULATED_HOST_METRIC_EDGE_HOSTS_FAILURE = 'SIMULATED_HOST_METRIC_EDGE_HOSTS_FAILURE';\nexport const loadSimulatedHostMetricEdgeHosts = (simulatedHostMetricName: string) => (dispatch: any) => {\n    return dispatch(fetchSimulatedHostMetricEdgeHosts(simulatedHostMetricName));\n};\nconst fetchSimulatedHostMetricEdgeHosts = (simulatedHostMetricName: string) => ({\n    [CALL_API]: {\n        types: [SIMULATED_HOST_METRIC_EDGE_HOSTS_REQUEST, SIMULATED_HOST_METRIC_EDGE_HOSTS_SUCCESS, SIMULATED_HOST_METRIC_EDGE_HOSTS_FAILURE],\n        endpoint: `simulated-metrics/hosts/${simulatedHostMetricName}/edge-hosts`,\n        schema: Schemas.EDGE_HOST_ARRAY,\n        entity: simulatedHostMetricName\n    }\n});\nexport const ADD_SIMULATED_HOST_METRIC_EDGE_HOSTS = 'ADD_SIMULATED_HOST_METRIC_EDGE_HOSTS';\n\nexport function addSimulatedHostMetricEdgeHosts(simulatedHostMetricName: string, edgeHosts: string[]): EntitiesAction {\n    return {\n        type: ADD_SIMULATED_HOST_METRIC_EDGE_HOSTS,\n        entity: simulatedHostMetricName,\n        data: {edgeHostsHostname: edgeHosts}\n    }\n}\n\nexport const REMOVE_SIMULATED_HOST_METRIC_EDGE_HOSTS = 'REMOVE_SIMULATED_HOST_METRIC_EDGE_HOSTS';\n\nexport function removeSimulatedHostMetricEdgeHosts(simulatedHostMetricName: string, edgeHosts: string[]): EntitiesAction {\n    return {\n        type: REMOVE_SIMULATED_HOST_METRIC_EDGE_HOSTS,\n        entity: simulatedHostMetricName,\n        data: {edgeHostsHostname: edgeHosts}\n    }\n}\n\nexport const SIMULATED_APP_METRICS_REQUEST = 'SIMULATED_APP_METRICS_REQUEST';\nexport const SIMULATED_APP_METRIC_REQUEST = 'SIMULATED_APP_METRIC_REQUEST';\nexport const SIMULATED_APP_METRICS_SUCCESS = 'SIMULATED_APP_METRICS_SUCCESS';\nexport const SIMULATED_APP_METRIC_SUCCESS = 'SIMULATED_APP_METRIC_SUCCESS';\nexport const SIMULATED_APP_METRICS_FAILURE = 'SIMULATED_APP_METRICS_FAILURE';\nexport const SIMULATED_APP_METRIC_FAILURE = 'SIMULATED_APP_METRIC_FAILURE';\nexport const loadSimulatedAppMetrics = (name?: string) => (dispatch: any) => {\n    return dispatch(fetchSimulatedAppMetrics(name));\n};\nconst fetchSimulatedAppMetrics = (name?: string) => ({\n    [CALL_API]:\n        !name\n            ? {\n                types: [SIMULATED_APP_METRICS_REQUEST, SIMULATED_APP_METRICS_SUCCESS, SIMULATED_APP_METRICS_FAILURE],\n                endpoint: `simulated-metrics/apps`,\n                schema: Schemas.SIMULATED_APP_METRIC_ARRAY,\n                entity: 'simulatedAppMetrics'\n            }\n            : {\n                types: [SIMULATED_APP_METRIC_REQUEST, SIMULATED_APP_METRIC_SUCCESS, SIMULATED_APP_METRIC_FAILURE],\n                endpoint: `simulated-metrics/apps/${name}`,\n                schema: Schemas.SIMULATED_APP_METRIC,\n                entity: 'simulatedAppMetrics'\n            }\n});\nexport const ADD_SIMULATED_APP_METRIC = 'ADD_SIMULATED_APP_METRIC';\n\nexport function addSimulatedAppMetric(simulatedAppMetric: ISimulatedAppMetric): EntitiesAction {\n    return {\n        type: ADD_SIMULATED_APP_METRIC,\n        data: {simulatedAppMetrics: new Array(simulatedAppMetric)}\n    }\n}\n\nexport const UPDATE_SIMULATED_APP_METRIC = 'UPDATE_SIMULATED_APP_METRIC';\n\nexport function updateSimulatedAppMetric(previousSimulatedAppMetric: ISimulatedAppMetric,\n                                         currentSimulatedAppMetric: ISimulatedAppMetric): EntitiesAction {\n    return {\n        type: UPDATE_SIMULATED_APP_METRIC,\n        data: {simulatedAppMetrics: [previousSimulatedAppMetric, currentSimulatedAppMetric]}\n    }\n}\n\nexport const DELETE_SIMULATED_APP_METRIC = 'DELETE_SIMULATED_APP_METRIC';\n\nexport function deleteSimulatedAppMetric(simulatedAppMetric: ISimulatedAppMetric): EntitiesAction {\n    return {\n        type: DELETE_SIMULATED_APP_METRIC,\n        data: {simulatedAppMetrics: [simulatedAppMetric]}\n    }\n}\n\nexport const SIMULATED_APP_METRIC_APPS_REQUEST = 'SIMULATED_APP_METRIC_APPS_REQUEST';\nexport const SIMULATED_APP_METRIC_APPS_SUCCESS = 'SIMULATED_APP_METRIC_APPS_SUCCESS';\nexport const SIMULATED_APP_METRIC_APPS_FAILURE = 'SIMULATED_APP_METRIC_APPS_FAILURE';\nexport const loadSimulatedAppMetricApps = (simulatedAppMetricName: string) => (dispatch: any) => {\n    return dispatch(fetchSimulatedAppMetricApps(simulatedAppMetricName));\n};\nconst fetchSimulatedAppMetricApps = (simulatedAppMetricName: string) => ({\n    [CALL_API]: {\n        types: [SIMULATED_APP_METRIC_APPS_REQUEST, SIMULATED_APP_METRIC_APPS_SUCCESS, SIMULATED_APP_METRIC_APPS_FAILURE],\n        endpoint: `simulated-metrics/apps/${simulatedAppMetricName}/apps`,\n        schema: Schemas.APP_ARRAY,\n        entity: simulatedAppMetricName\n    }\n});\nexport const ADD_SIMULATED_APP_METRIC_APPS = 'ADD_SIMULATED_APP_METRIC_APPS';\n\nexport function addSimulatedAppMetricApps(simulatedAppMetricName: string, apps: string[]): EntitiesAction {\n    return {\n        type: ADD_SIMULATED_APP_METRIC_APPS,\n        entity: simulatedAppMetricName,\n        data: {appsNames: apps}\n    }\n}\n\nexport const REMOVE_SIMULATED_APP_METRIC_APPS = 'REMOVE_SIMULATED_APP_METRIC_APPS';\n\nexport function removeSimulatedAppMetricApps(simulatedAppMetricName: string, apps: string[]): EntitiesAction {\n    return {\n        type: REMOVE_SIMULATED_APP_METRIC_APPS,\n        entity: simulatedAppMetricName,\n        data: {appsNames: apps}\n    }\n}\n\nexport const SIMULATED_SERVICE_METRICS_REQUEST = 'SIMULATED_SERVICE_METRICS_REQUEST';\nexport const SIMULATED_SERVICE_METRIC_REQUEST = 'SIMULATED_SERVICE_METRIC_REQUEST';\nexport const SIMULATED_SERVICE_METRICS_SUCCESS = 'SIMULATED_SERVICE_METRICS_SUCCESS';\nexport const SIMULATED_SERVICE_METRIC_SUCCESS = 'SIMULATED_SERVICE_METRIC_SUCCESS';\nexport const SIMULATED_SERVICE_METRICS_FAILURE = 'SIMULATED_SERVICE_METRICS_FAILURE';\nexport const SIMULATED_SERVICE_METRIC_FAILURE = 'SIMULATED_SERVICE_METRIC_FAILURE';\nexport const loadSimulatedServiceMetrics = (name?: string) => (dispatch: any) => {\n    return dispatch(fetchSimulatedServiceMetrics(name));\n};\nconst fetchSimulatedServiceMetrics = (name?: string) => ({\n    [CALL_API]:\n        !name\n            ? {\n                types: [SIMULATED_SERVICE_METRICS_REQUEST, SIMULATED_SERVICE_METRICS_SUCCESS, SIMULATED_SERVICE_METRICS_FAILURE],\n                endpoint: `simulated-metrics/services`,\n                schema: Schemas.SIMULATED_SERVICE_METRIC_ARRAY,\n                entity: 'simulatedServiceMetrics'\n            }\n            : {\n                types: [SIMULATED_SERVICE_METRIC_REQUEST, SIMULATED_SERVICE_METRIC_SUCCESS, SIMULATED_SERVICE_METRIC_FAILURE],\n                endpoint: `simulated-metrics/services/${name}`,\n                schema: Schemas.SIMULATED_SERVICE_METRIC,\n                entity: 'simulatedServiceMetrics'\n            }\n});\nexport const ADD_SIMULATED_SERVICE_METRIC = 'ADD_SIMULATED_SERVICE_METRIC';\n\nexport function addSimulatedServiceMetric(simulatedServiceMetric: ISimulatedServiceMetric): EntitiesAction {\n    return {\n        type: ADD_SIMULATED_SERVICE_METRIC,\n        data: {simulatedServiceMetrics: new Array(simulatedServiceMetric)}\n    }\n}\n\nexport const UPDATE_SIMULATED_SERVICE_METRIC = 'UPDATE_SIMULATED_SERVICE_METRIC';\n\nexport function updateSimulatedServiceMetric(previousSimulatedServiceMetric: ISimulatedServiceMetric,\n                                             currentSimulatedServiceMetric: ISimulatedServiceMetric): EntitiesAction {\n    return {\n        type: UPDATE_SIMULATED_SERVICE_METRIC,\n        data: {simulatedServiceMetrics: [previousSimulatedServiceMetric, currentSimulatedServiceMetric]}\n    }\n}\n\nexport const DELETE_SIMULATED_SERVICE_METRIC = 'DELETE_SIMULATED_SERVICE_METRIC';\n\nexport function deleteSimulatedServiceMetric(simulatedServiceMetric: ISimulatedServiceMetric): EntitiesAction {\n    return {\n        type: DELETE_SIMULATED_SERVICE_METRIC,\n        data: {simulatedServiceMetrics: [simulatedServiceMetric]}\n    }\n}\n\nexport const SIMULATED_SERVICE_METRIC_SERVICES_REQUEST = 'SIMULATED_SERVICE_METRIC_SERVICES_REQUEST';\nexport const SIMULATED_SERVICE_METRIC_SERVICES_SUCCESS = 'SIMULATED_SERVICE_METRIC_SERVICES_SUCCESS';\nexport const SIMULATED_SERVICE_METRIC_SERVICES_FAILURE = 'SIMULATED_SERVICE_METRIC_SERVICES_FAILURE';\nexport const loadSimulatedServiceMetricServices = (simulatedServiceMetricName: string) => (dispatch: any) => {\n    return dispatch(fetchSimulatedServiceMetricServices(simulatedServiceMetricName));\n};\nconst fetchSimulatedServiceMetricServices = (simulatedServiceMetricName: string) => ({\n    [CALL_API]: {\n        types: [SIMULATED_SERVICE_METRIC_SERVICES_REQUEST, SIMULATED_SERVICE_METRIC_SERVICES_SUCCESS, SIMULATED_SERVICE_METRIC_SERVICES_FAILURE],\n        endpoint: `simulated-metrics/services/${simulatedServiceMetricName}/services`,\n        schema: Schemas.SERVICE_ARRAY,\n        entity: simulatedServiceMetricName\n    }\n});\nexport const ADD_SIMULATED_SERVICE_METRIC_SERVICES = 'ADD_SIMULATED_SERVICE_METRIC_SERVICES';\n\nexport function addSimulatedServiceMetricServices(simulatedServiceMetricName: string, services: string[]): EntitiesAction {\n    return {\n        type: ADD_SIMULATED_SERVICE_METRIC_SERVICES,\n        entity: simulatedServiceMetricName,\n        data: {serviceNames: services}\n    }\n}\n\nexport const REMOVE_SIMULATED_SERVICE_METRIC_SERVICES = 'REMOVE_SIMULATED_SERVICE_METRIC_SERVICES';\n\nexport function removeSimulatedServiceMetricServices(simulatedServiceMetricName: string, services: string[]): EntitiesAction {\n    return {\n        type: REMOVE_SIMULATED_SERVICE_METRIC_SERVICES,\n        entity: simulatedServiceMetricName,\n        data: {serviceNames: services}\n    }\n}\n\nexport const SIMULATED_CONTAINER_METRICS_REQUEST = 'SIMULATED_CONTAINER_METRICS_REQUEST';\nexport const SIMULATED_CONTAINER_METRIC_REQUEST = 'SIMULATED_CONTAINER_METRIC_REQUEST';\nexport const SIMULATED_CONTAINER_METRICS_SUCCESS = 'SIMULATED_CONTAINER_METRICS_SUCCESS';\nexport const SIMULATED_CONTAINER_METRIC_SUCCESS = 'SIMULATED_CONTAINER_METRIC_SUCCESS';\nexport const SIMULATED_CONTAINER_METRICS_FAILURE = 'SIMULATED_CONTAINER_METRICS_FAILURE';\nexport const SIMULATED_CONTAINER_METRIC_FAILURE = 'SIMULATED_CONTAINER_METRIC_FAILURE';\nexport const loadSimulatedContainerMetrics = (name?: string) => (dispatch: any) => {\n    return dispatch(fetchSimulatedContainerMetrics(name));\n};\nconst fetchSimulatedContainerMetrics = (name?: string) => ({\n    [CALL_API]:\n        !name\n            ? {\n                types: [SIMULATED_CONTAINER_METRICS_REQUEST, SIMULATED_CONTAINER_METRICS_SUCCESS, SIMULATED_CONTAINER_METRICS_FAILURE],\n                endpoint: `simulated-metrics/containers`,\n                schema: Schemas.SIMULATED_CONTAINER_METRIC_ARRAY,\n                entity: 'simulatedContainerMetrics'\n            }\n            : {\n                types: [SIMULATED_CONTAINER_METRIC_REQUEST, SIMULATED_CONTAINER_METRIC_SUCCESS, SIMULATED_CONTAINER_METRIC_FAILURE],\n                endpoint: `simulated-metrics/containers/${name}`,\n                schema: Schemas.SIMULATED_CONTAINER_METRIC,\n                entity: 'simulatedContainerMetrics'\n            }\n});\nexport const ADD_SIMULATED_CONTAINER_METRIC = 'ADD_SIMULATED_CONTAINER_METRIC';\n\nexport function addSimulatedContainerMetric(simulatedContainerMetric: ISimulatedContainerMetric): EntitiesAction {\n    return {\n        type: ADD_SIMULATED_CONTAINER_METRIC,\n        data: {simulatedContainerMetrics: new Array(simulatedContainerMetric)}\n    }\n}\n\nexport const UPDATE_SIMULATED_CONTAINER_METRIC = 'UPDATE_SIMULATED_CONTAINER_METRIC';\n\nexport function updateSimulatedContainerMetric(previousSimulatedContainerMetric: ISimulatedContainerMetric,\n                                               currentSimulatedContainerMetric: ISimulatedContainerMetric): EntitiesAction {\n    return {\n        type: UPDATE_SIMULATED_CONTAINER_METRIC,\n        data: {simulatedContainerMetrics: [previousSimulatedContainerMetric, currentSimulatedContainerMetric]}\n    }\n}\n\nexport const DELETE_SIMULATED_CONTAINER_METRIC = 'DELETE_SIMULATED_CONTAINER_METRIC';\n\nexport function deleteSimulatedContainerMetric(simulatedContainerMetric: ISimulatedContainerMetric): EntitiesAction {\n    return {\n        type: DELETE_SIMULATED_CONTAINER_METRIC,\n        data: {simulatedContainerMetrics: [simulatedContainerMetric]}\n    }\n}\n\nexport const SIMULATED_CONTAINER_METRIC_CONTAINERS_REQUEST = 'SIMULATED_CONTAINER_METRIC_CONTAINERS_REQUEST';\nexport const SIMULATED_CONTAINER_METRIC_CONTAINERS_SUCCESS = 'SIMULATED_CONTAINER_METRIC_CONTAINERS_SUCCESS';\nexport const SIMULATED_CONTAINER_METRIC_CONTAINERS_FAILURE = 'SIMULATED_CONTAINER_METRIC_CONTAINERS_FAILURE';\nexport const loadSimulatedContainerMetricContainers = (simulatedContainerMetricName: string) => (dispatch: any) => {\n    return dispatch(fetchSimulatedContainerMetricContainers(simulatedContainerMetricName));\n};\nconst fetchSimulatedContainerMetricContainers = (simulatedContainerMetricName: string) => ({\n    [CALL_API]: {\n        types: [SIMULATED_CONTAINER_METRIC_CONTAINERS_REQUEST, SIMULATED_CONTAINER_METRIC_CONTAINERS_SUCCESS, SIMULATED_CONTAINER_METRIC_CONTAINERS_FAILURE],\n        endpoint: `simulated-metrics/containers/${simulatedContainerMetricName}/containers`,\n        schema: Schemas.CONTAINER_ARRAY,\n        entity: simulatedContainerMetricName\n    }\n});\nexport const ADD_SIMULATED_CONTAINER_METRIC_CONTAINERS = 'ADD_SIMULATED_CONTAINER_METRIC_CONTAINERS';\n\nexport function addSimulatedContainerMetricContainers(simulatedContainerMetricName: string, containers: string[]): EntitiesAction {\n    return {\n        type: ADD_SIMULATED_CONTAINER_METRIC_CONTAINERS,\n        entity: simulatedContainerMetricName,\n        data: {containerIds: containers}\n    }\n}\n\nexport const REMOVE_SIMULATED_CONTAINER_METRIC_CONTAINERS = 'REMOVE_SIMULATED_CONTAINER_METRIC_CONTAINERS';\n\nexport function removeSimulatedContainerMetricContainers(simulatedContainerMetricName: string, containers: string[]): EntitiesAction {\n    return {\n        type: REMOVE_SIMULATED_CONTAINER_METRIC_CONTAINERS,\n        entity: simulatedContainerMetricName,\n        data: {containerIds: containers}\n    }\n}\n\nexport const REGIONS_REQUEST = 'REGIONS_REQUEST';\nexport const REGIONS_SUCCESS = 'REGIONS_SUCCESS';\nexport const REGIONS_FAILURE = 'REGIONS_FAILURE';\nexport const REGION_REQUEST = 'REGION_REQUEST';\nexport const REGION_SUCCESS = 'REGION_SUCCESS';\nexport const REGION_FAILURE = 'REGION_FAILURE';\nexport const loadRegions = (name?: string) => (dispatch: any) => {\n    return dispatch(fetchRegions(name));\n};\nconst fetchRegions = (name?: string) => ({\n    [CALL_API]:\n        !name\n            ? {\n                types: [REGIONS_REQUEST, REGIONS_SUCCESS, REGIONS_FAILURE],\n                endpoint: `regions`,\n                schema: Schemas.REGION_ARRAY,\n                entity: 'regions'\n            }\n            : {\n                types: [REGION_REQUEST, REGION_SUCCESS, REGION_FAILURE],\n                endpoint: `regions/${name}`,\n                schema: Schemas.REGION,\n                entity: 'regions'\n            }\n});\n\n/*export const ADD_REGION = 'ADD_REGION';\nexport function addRegion(region: IRegion): EntitiesAction {\n    return {\n        type: ADD_REGION,\n        data: {regions: new Array(region)}\n    }\n}*/\n\n/*export const UPDATE_REGION = 'UPDATE_REGION';\nexport function updateRegion(previousRegion: IRegion, currentRegion: IRegion): EntitiesAction {\n    return {\n        type: UPDATE_REGION,\n        data: {regions: [previousRegion, currentRegion]}\n    }\n}*/\n\n/*export const DELETE_REGION = 'DELETE_REGION';\nexport function deleteRegion(region: IRegion): EntitiesAction {\n    return {\n        type: DELETE_REGION,\n        data: {regions: [region]}\n    }\n}*/\n\nexport const LOAD_BALANCERS_REQUEST = 'LOAD_BALANCERS_REQUEST';\nexport const LOAD_BALANCER_REQUEST = 'LOAD_BALANCER_REQUEST';\nexport const LOAD_BALANCERS_SUCCESS = 'LOAD_BALANCERS_SUCCESS';\nexport const LOAD_BALANCER_SUCCESS = 'LOAD_BALANCER_SUCCESS';\nexport const LOAD_BALANCERS_FAILURE = 'LOAD_BALANCERS_FAILURE';\nexport const LOAD_BALANCER_FAILURE = 'LOAD_BALANCER_FAILURE';\nexport const loadLoadBalancers = (id?: string) => (dispatch: any) => {\n    return dispatch(fetchLoadBalancers(id));\n};\nconst fetchLoadBalancers = (id?: string) => ({\n    [CALL_API]:\n        !id\n            ? {\n                types: [LOAD_BALANCERS_REQUEST, LOAD_BALANCERS_SUCCESS, LOAD_BALANCERS_FAILURE],\n                endpoint: `containers?serviceName=load-balancer`,\n                schema: Schemas.LOAD_BALANCER_ARRAY,\n                entity: 'loadBalancers'\n            }\n            : {\n                types: [LOAD_BALANCER_REQUEST, LOAD_BALANCER_SUCCESS, LOAD_BALANCER_FAILURE],\n                endpoint: `containers/${id}`,\n                schema: Schemas.LOAD_BALANCER,\n                entity: 'loadBalancers'\n            }\n});\nexport const ADD_LOAD_BALANCERS = 'ADD_LOAD_BALANCERS';\n\nexport function addLoadBalancers(loadBalancers: ILoadBalancer[]): EntitiesAction {\n    return {\n        type: ADD_LOAD_BALANCERS,\n        data: {loadBalancers}\n    }\n}\n\nexport const DELETE_LOAD_BALANCER = 'DELETE_LOAD_BALANCER';\n\nexport function deleteLoadBalancer(loadBalancer: ILoadBalancer): EntitiesAction {\n    return {\n        type: DELETE_LOAD_BALANCER,\n        data: {loadBalancers: [loadBalancer]}\n    }\n}\n\nexport const REGISTRATION_SERVERS_REQUEST = 'REGISTRATION_SERVERS_REQUEST';\nexport const REGISTRATION_SERVER_REQUEST = 'REGISTRATION_SERVER_REQUEST';\nexport const REGISTRATION_SERVERS_SUCCESS = 'REGISTRATION_SERVERS_SUCCESS';\nexport const REGISTRATION_SERVER_SUCCESS = 'REGISTRATION_SERVER_SUCCESS';\nexport const REGISTRATION_SERVERS_FAILURE = 'REGISTRATION_SERVERS_FAILURE';\nexport const REGISTRATION_SERVER_FAILURE = 'REGISTRATION_SERVER_FAILURE';\nexport const loadRegistrationServers = () => (dispatch: any) => {\n    return dispatch(fetchRegistrationServers());\n};\nconst fetchRegistrationServers = (id?: string) => ({\n    [CALL_API]:\n        !id\n            ? {\n                types: [REGISTRATION_SERVERS_REQUEST, REGISTRATION_SERVERS_SUCCESS, REGISTRATION_SERVERS_FAILURE],\n                endpoint: `containers?serviceName=registration-server`,\n                schema: Schemas.REGISTRATION_SERVER_ARRAY,\n                entity: 'registrationServers'\n            }\n            : {\n                types: [REGISTRATION_SERVER_REQUEST, REGISTRATION_SERVER_SUCCESS, REGISTRATION_SERVER_FAILURE],\n                endpoint: `containers/${id}`,\n                schema: Schemas.REGISTRATION_SERVER,\n                entity: 'registrationServers'\n            }\n});\nexport const ADD_REGISTRATION_SERVERS = 'ADD_REGISTRATION_SERVERS';\n\nexport function addRegistrationServers(registrationServers: IRegistrationServer[]): EntitiesAction {\n    return {\n        type: ADD_REGISTRATION_SERVERS,\n        data: {registrationServers}\n    }\n}\n\nexport const DELETE_REGISTRATION_SERVER = 'DELETE_REGISTRATION_SERVER';\n\nexport function deleteRegistrationServer(registrationServer: IRegistrationServer): EntitiesAction {\n    return {\n        type: DELETE_REGISTRATION_SERVER,\n        data: {registrationServers: [registrationServer]}\n    }\n}\n\nexport const WORKER_MANAGERS_REQUEST = 'WORKER_MANAGERS_REQUEST';\nexport const WORKER_MANAGER_REQUEST = 'WORKER_MANAGER_REQUEST';\nexport const WORKER_MANAGERS_SUCCESS = 'WORKER_MANAGERS_SUCCESS';\nexport const WORKER_MANAGER_SUCCESS = 'WORKER_MANAGER_SUCCESS';\nexport const WORKER_MANAGERS_FAILURE = 'WORKER_MANAGERS_FAILURE';\nexport const WORKER_MANAGER_FAILURE = 'WORKER_MANAGER_FAILURE';\nexport const loadWorkerManagers = () => (dispatch: any) => {\n    return dispatch(fetchWorkerManagers());\n};\nconst fetchWorkerManagers = (id?: string) => ({\n    [CALL_API]:\n        !id\n            ? {\n                types: [WORKER_MANAGERS_REQUEST, WORKER_MANAGERS_SUCCESS, WORKER_MANAGERS_FAILURE],\n                endpoint: `worker-managers`,\n                schema: Schemas.WORKER_MANAGER_ARRAY,\n                entity: 'workerManagers'\n            }\n            : {\n                types: [WORKER_MANAGER_REQUEST, WORKER_MANAGER_SUCCESS, WORKER_MANAGER_FAILURE],\n                endpoint: `worker-managers/${id}`,\n                schema: Schemas.WORKER_MANAGER,\n                entity: 'workerManagers'\n            }\n});\nexport const ADD_WORKER_MANAGERS = 'ADD_WORKER_MANAGERS';\n\nexport function addWorkerManagers(workerManagers: IWorkerManager[]): EntitiesAction {\n    return {\n        type: ADD_WORKER_MANAGERS,\n        data: {workerManagers}\n    }\n}\n\nexport const DELETE_WORKER_MANAGER = 'DELETE_WORKER_MANAGER';\n\nexport function deleteWorkerManager(workerManager: IWorkerManager): EntitiesAction {\n    return {\n        type: DELETE_WORKER_MANAGER,\n        data: {workerManagers: [workerManager]}\n    }\n}\n\nexport const WORKER_MANAGER_HOSTS_REQUEST = 'WORKER_MANAGER_HOSTS_REQUEST';\nexport const WORKER_MANAGER_HOSTS_SUCCESS = 'WORKER_MANAGER_HOSTS_SUCCESS';\nexport const WORKER_MANAGER_HOSTS_FAILURE = 'WORKER_MANAGER_HOSTS_FAILURE';\nexport const loadWorkerManagerHosts = (id: string) => (dispatch: any) => {\n    return dispatch(fetchWorkerManagerHosts(id));\n};\nconst fetchWorkerManagerHosts = (id: string) => ({\n    [CALL_API]: {\n        types: [WORKER_MANAGER_HOSTS_REQUEST, WORKER_MANAGER_HOSTS_SUCCESS, WORKER_MANAGER_HOSTS_FAILURE],\n        endpoint: `worker-managers/${id}/assigned-hosts`,\n        entity: id\n    }\n});\n\nexport const ASSIGN_WORKER_MANAGER_MACHINES = 'ASSIGN_WORKER_MANAGER_MACHINES';\n\nexport function assignWorkerManagerHosts(id: string, hosts: string[]): EntitiesAction {\n    return {\n        type: ASSIGN_WORKER_MANAGER_MACHINES,\n        entity: id,\n        data: {assignedHosts: hosts}\n    }\n}\n\nexport const UNASSIGN_WORKER_MANAGER_MACHINES = 'UNASSIGN_WORKER_MANAGER_MACHINES';\n\nexport function unassignWorkerManagerHosts(id: string, hosts: string[]): EntitiesAction {\n    return {\n        type: UNASSIGN_WORKER_MANAGER_MACHINES,\n        entity: id,\n        data: {assignedHosts: hosts}\n    }\n}\n\nexport const LOGS_REQUEST = 'LOGS_REQUEST';\nexport const LOGS_SUCCESS = 'LOGS_SUCCESS';\nexport const LOGS_FAILURE = 'LOGS_FAILURE';\nexport const loadLogs = () => (dispatch: any) => {\n    return dispatch(fetchLogs());\n};\nconst fetchLogs = () => ({\n    [CALL_API]: {\n        types: [LOGS_REQUEST, LOGS_SUCCESS, LOGS_FAILURE],\n        endpoint: `logs`,\n        schema: Schemas.LOGS_ARRAY,\n    }\n});\n\nexport const SCRIPTS_REQUEST = 'SCRIPTS_REQUEST';\nexport const SCRIPTS_SUCCESS = 'SCRIPTS_SUCCESS';\nexport const SCRIPTS_FAILURE = 'SCRIPTS_FAILURE';\nexport const loadScripts = () => (dispatch: any) => {\n    return dispatch(fetchScripts());\n};\nconst fetchScripts = () => ({\n    [CALL_API]: {\n        types: [SCRIPTS_REQUEST, SCRIPTS_SUCCESS, SCRIPTS_FAILURE],\n        endpoint: `ssh/scripts`\n    }\n});\n\nexport const ADD_COMMANDS = 'ADD_COMMANDS';\nexport const addCommand = (command: ICommand | IFileTransfer) => (\n    {\n        type: ADD_COMMANDS,\n        data: {commands: [command]}\n    }\n);\n\nexport const CLEAR_COMMANDS = 'CLEAR_COMMANDS';\nexport const clearCommands = () => (\n    {\n        type: CLEAR_COMMANDS\n    }\n);\n\nexport const SIDENAV_SHOW_USER = 'SIDENAV_SHOW_USER';\nexport const showSidenavByUser = (value: boolean) => (\n    {\n        type: SIDENAV_SHOW_USER,\n        value\n    }\n);\n\nexport const SIDENAV_SHOW_WIDTH = 'SIDENAV_SHOW_WIDTH';\nexport const showSidenavByWidth = (value: boolean) => (\n    {\n        type: SIDENAV_SHOW_WIDTH,\n        value\n    }\n);\n\nexport const SEARCH_UPDATE = 'SEARCH_UPDATE';\nexport const updateSearch = (search: string) => (\n    {\n        type: SEARCH_UPDATE,\n        search\n    }\n);\n\nexport const CHANGE_COMPONENT = 'CHANGE_COMPONENT';\nexport const changeComponent = (component: IComponent) => (\n    {\n        type: CHANGE_COMPONENT,\n        component\n    }\n);\n\nexport const HIDE_CONFIRMATION_DIALOG = 'HIDE_CONFIRMATION_DIALOG';\nexport const hideConfirmationDialog = (hidden: boolean) => (\n    {\n        type: HIDE_CONFIRMATION_DIALOG,\n        hidden\n    }\n);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {normalize, schema} from 'normalizr';\nimport {camelizeKeys} from 'humps';\nimport {IService} from \"../routes/management/services/Service\";\nimport {IServiceDependency} from \"../routes/management/services/ServiceDependencyList\";\nimport axios, {Method} from \"axios\";\nimport {API_URL, REQUEST_TIMEOUT} from \"../utils/api\";\nimport {ILogs} from \"../routes/management/logs/ManagementLogs\";\nimport {IRegion} from \"../routes/management/regions/Region\";\nimport {IDependent} from \"../routes/management/services/ServiceDependentList\";\nimport {IPrediction} from \"../routes/management/services/ServicePredictionList\";\nimport {INode} from \"../routes/management/nodes/Node\";\nimport {ICloudHost} from \"../routes/management/hosts/cloud/CloudHost\";\nimport {IEdgeHost} from \"../routes/management/hosts/edge/EdgeHost\";\nimport {IContainer} from \"../routes/management/containers/Container\";\nimport {IApp} from \"../routes/management/apps/App\";\nimport {IDecision, IField, IOperator, IValueMode} from \"../routes/management/rules/Rule\";\nimport {IRuleService} from \"../routes/management/rules/services/RuleService\";\nimport {IRuleHost} from \"../routes/management/rules/hosts/RuleHost\";\nimport {IRuleCondition} from \"../routes/management/rules/conditions/RuleCondition\";\nimport {IAppService} from \"../routes/management/apps/AppServicesList\";\nimport {ILoadBalancer} from \"../routes/management/loadBalancers/LoadBalancer\";\nimport {IRegistrationServer} from \"../routes/management/registrationServers/RegistrationServer\";\nimport {ISimulatedHostMetric} from \"../routes/management/metrics/hosts/SimulatedHostMetric\";\nimport {ISimulatedServiceMetric} from \"../routes/management/metrics/services/SimulatedServiceMetric\";\nimport {IRuleContainer} from \"../routes/management/rules/containers/RuleContainer\";\nimport {ISimulatedContainerMetric} from \"../routes/management/metrics/containers/SimulatedContainerMetric\";\nimport {IWorkerManager} from \"../routes/management/workerManagers/WorkerManager\";\nimport {IRuleApp} from \"../routes/management/rules/apps/RuleApp\";\nimport {ISimulatedAppMetric} from \"../routes/management/metrics/apps/SimulatedAppMetric\";\n\nconst callApi = (endpoint: string, schema?: any, method?: Method) => {\n    const url = endpoint.includes(API_URL) ? endpoint : `${API_URL}/${endpoint}`;\n    return axios(url, {\n        method: method || 'get',\n        //TODO remove options\n        headers: {\n            'Authorization': 'Basic YWRtaW46YWRtaW4=',\n            'Content-type': 'application/json;charset=UTF-8',\n            'Accept': 'application/json;charset=UTF-8',\n        },\n        timeout: REQUEST_TIMEOUT\n    }).then(response => {\n        if (response.status === 200) {\n            const camelizedJson = camelizeKeys(response.data);\n            return schema ? normalize(camelizedJson, schema).entities : camelizedJson;\n        } else {\n            return Promise.reject(response);\n        }\n    }).catch(e => Promise.reject(e))\n};\n\ninterface ISchemas {\n    APP: schema.Entity<IApp>;\n    APP_ARRAY: schema.Entity<IApp>[];\n    APP_SERVICE: schema.Entity<IAppService>;\n    APP_SERVICE_ARRAY: schema.Entity<IAppService>[];\n    APP_RULE: schema.Entity<IRuleApp>;\n    APP_RULE_ARRAY: schema.Entity<IRuleApp>[];\n    APP_SIMULATED_METRIC: schema.Entity<ISimulatedAppMetric>;\n    APP_SIMULATED_METRIC_ARRAY: schema.Entity<ISimulatedAppMetric>[];\n    SERVICE: schema.Entity<IService>;\n    SERVICE_ARRAY: schema.Entity<IService>[];\n    SERVICE_APP: schema.Entity<IApp>;\n    SERVICE_APP_ARRAY: schema.Entity<IApp>[];\n    SERVICE_DEPENDENCY: schema.Entity<IServiceDependency>;\n    SERVICE_DEPENDENCY_ARRAY: schema.Entity<IServiceDependency>[];\n    SERVICE_DEPENDENT: schema.Entity<IDependent>;\n    SERVICE_DEPENDENT_ARRAY: schema.Entity<IDependent>[];\n    SERVICE_PREDICTION: schema.Entity<IPrediction>;\n    SERVICE_PREDICTION_ARRAY: schema.Entity<IPrediction>[];\n    SERVICE_RULE: schema.Entity<IRuleService>;\n    SERVICE_RULE_ARRAY: schema.Entity<IRuleService>[];\n    SERVICE_SIMULATED_METRIC: schema.Entity<ISimulatedServiceMetric>;\n    SERVICE_SIMULATED_METRIC_ARRAY: schema.Entity<ISimulatedServiceMetric>[];\n    CONTAINER: schema.Entity<IContainer>;\n    CONTAINER_ARRAY: schema.Entity<IContainer>[];\n    CONTAINER_RULE: schema.Entity<IRuleContainer>;\n    CONTAINER_RULE_ARRAY: schema.Entity<IRuleService>[];\n    CONTAINER_SIMULATED_METRIC: schema.Entity<ISimulatedContainerMetric>;\n    CONTAINER_SIMULATED_METRIC_ARRAY: schema.Entity<ISimulatedContainerMetric>[];\n    CLOUD_HOST: schema.Entity<ICloudHost>;\n    CLOUD_HOST_ARRAY: schema.Entity<ICloudHost>[];\n    CLOUD_HOST_RULE: schema.Entity<IRuleHost>;\n    CLOUD_HOST_RULE_ARRAY: schema.Entity<IRuleHost>[];\n    CLOUD_HOST_SIMULATED_METRIC: schema.Entity<ISimulatedHostMetric>;\n    CLOUD_HOST_SIMULATED_METRIC_ARRAY: schema.Entity<ISimulatedHostMetric>[];\n    EDGE_HOST: schema.Entity<IEdgeHost>;\n    EDGE_HOST_ARRAY: schema.Entity<IEdgeHost>[];\n    EDGE_HOST_RULE: schema.Entity<IRuleHost>;\n    EDGE_HOST_RULE_ARRAY: schema.Entity<IRuleHost>[];\n    EDGE_HOST_SIMULATED_METRIC: schema.Entity<ISimulatedHostMetric>;\n    EDGE_HOST_SIMULATED_METRIC_ARRAY: schema.Entity<ISimulatedHostMetric>[];\n    NODE: schema.Entity<INode>;\n    NODE_ARRAY: schema.Entity<INode>[];\n    REGION: schema.Entity<IRegion>;\n    REGION_ARRAY: schema.Entity<IRegion>[];\n    RULE_HOST: schema.Entity<IRuleHost>;\n    RULE_HOST_ARRAY: schema.Entity<IRuleHost>[];\n    RULE_APP: schema.Entity<IRuleApp>;\n    RULE_APP_ARRAY: schema.Entity<IRuleApp>[];\n    RULE_SERVICE: schema.Entity<IRuleService>;\n    RULE_SERVICE_ARRAY: schema.Entity<IRuleService>[];\n    RULE_CONTAINER: schema.Entity<IRuleContainer>;\n    RULE_CONTAINER_ARRAY: schema.Entity<IRuleContainer>[];\n    RULE_CONDITION: schema.Entity<IRuleCondition>;\n    RULE_CONDITION_ARRAY: schema.Entity<IRuleCondition>[];\n    VALUE_MODE_ARRAY: schema.Entity<IValueMode>[];\n    FIELD_ARRAY: schema.Entity<IField>[];\n    OPERATOR_ARRAY: schema.Entity<IOperator>[];\n    DECISION: schema.Entity<IDecision>;\n    DECISION_ARRAY: schema.Entity<IDecision>[];\n    SIMULATED_HOST_METRIC: schema.Entity<ISimulatedHostMetric>;\n    SIMULATED_HOST_METRIC_ARRAY: schema.Entity<ISimulatedHostMetric>[];\n    SIMULATED_APP_METRIC: schema.Entity<ISimulatedAppMetric>;\n    SIMULATED_APP_METRIC_ARRAY: schema.Entity<ISimulatedAppMetric>[];\n    SIMULATED_SERVICE_METRIC: schema.Entity<ISimulatedServiceMetric>;\n    SIMULATED_SERVICE_METRIC_ARRAY: schema.Entity<ISimulatedServiceMetric>[];\n    SIMULATED_CONTAINER_METRIC: schema.Entity<ISimulatedContainerMetric>;\n    SIMULATED_CONTAINER_METRIC_ARRAY: schema.Entity<ISimulatedContainerMetric>[];\n    LOAD_BALANCER: schema.Entity<ILoadBalancer>;\n    LOAD_BALANCER_ARRAY: schema.Entity<ILoadBalancer>[];\n    REGISTRATION_SERVER: schema.Entity<IRegistrationServer>;\n    REGISTRATION_SERVER_ARRAY: schema.Entity<IRegistrationServer>[];\n    WORKER_MANAGER: schema.Entity<IWorkerManager>;\n    WORKER_MANAGER_ARRAY: schema.Entity<IWorkerManager>[];\n    LOGS_ARRAY: schema.Entity<ILogs>[];\n}\n\nconst app: schema.Entity<IApp> = new schema.Entity('apps', undefined, {\n    idAttribute: (app: IApp) => app.name\n});\nconst apps = new schema.Array(app);\n\nconst appService: schema.Entity<IAppService> = new schema.Entity('services', undefined, {\n    idAttribute: (service: IAppService) => service.service.serviceName\n});\nconst appServices = new schema.Array(appService);\n\nconst service: schema.Entity<IService> = new schema.Entity('services', undefined, {\n    idAttribute: (service: IService) => service.serviceName\n});\nconst services = new schema.Array(service);\n\nconst dependency: schema.Entity<IServiceDependency> = new schema.Entity('dependencies', undefined, {\n    idAttribute: (dependency: IServiceDependency) => dependency.serviceName\n});\nconst dependencies = new schema.Array(dependency);\n\nconst dependent: schema.Entity<IDependent> = new schema.Entity('dependents', undefined, {\n    idAttribute: (dependent: IDependent) => dependent.serviceName\n});\nconst dependents = new schema.Array(dependent);\n\nconst prediction: schema.Entity<IPrediction> = new schema.Entity('predictions', undefined, {\n    idAttribute: (prediction: IPrediction) => prediction.name\n});\n\nconst container: schema.Entity<IContainer> = new schema.Entity('containers', undefined, {\n    idAttribute: (container: IContainer) => container.containerId\n});\nconst containers = new schema.Array(container);\n\nconst cloudHost: schema.Entity<ICloudHost> = new schema.Entity('cloudHosts', undefined, {\n    idAttribute: (host: ICloudHost) => host.instanceId\n});\nconst cloudHosts = new schema.Array(cloudHost);\n\nconst edgeHost: schema.Entity<IEdgeHost> = new schema.Entity('edgeHosts', undefined, {\n    idAttribute: (host: IEdgeHost) => host.publicIpAddress\n});\nconst edgeHosts = new schema.Array(edgeHost);\n\nconst node: schema.Entity<INode> = new schema.Entity('nodes', undefined, {\n    idAttribute: (node: INode) => node.id.toString()\n});\n\nconst region: schema.Entity<IRegion> = new schema.Entity('regions', undefined, {\n    idAttribute: (region: IRegion) => region.region\n});\n\nconst ruleHost: schema.Entity<IRuleHost> = new schema.Entity('hostRules', undefined, {\n    idAttribute: (hostRule: IRuleHost) => hostRule.name\n});\nconst hostRules = new schema.Array(ruleHost);\n\nconst ruleApp: schema.Entity<IRuleApp> = new schema.Entity('appRules', undefined, {\n    idAttribute: (appRule: IRuleApp) => appRule.name\n});\nconst appRules = new schema.Array(ruleApp);\n\nconst ruleService: schema.Entity<IRuleService> = new schema.Entity('serviceRules', undefined, {\n    idAttribute: (serviceRule: IRuleService) => serviceRule.name\n});\nconst serviceRules = new schema.Array(ruleService);\n\nconst ruleContainer: schema.Entity<IRuleContainer> = new schema.Entity('containerRules', undefined, {\n    idAttribute: (containerRule: IRuleContainer) => containerRule.name\n});\nconst containerRules = new schema.Array(ruleContainer);\n\nconst valueMode: schema.Entity<IValueMode> = new schema.Entity('valueModes', undefined, {\n    idAttribute: (valueMode: IValueMode) => valueMode.name\n});\nconst valueModes = new schema.Array(valueMode);\n\nconst field: schema.Entity<IField> = new schema.Entity('fields', undefined, {\n    idAttribute: (field: IField) => field.name\n});\nconst fields = new schema.Array(field);\n\nconst operator: schema.Entity<IOperator> = new schema.Entity('operators', undefined, {\n    idAttribute: (operator: IOperator) => operator.operator\n});\nconst operators = new schema.Array(operator);\n\nconst condition: schema.Entity<IRuleCondition> = new schema.Entity('conditions', undefined, {\n    idAttribute: (condition: IRuleCondition) => condition.name\n});\nconst conditions = new schema.Array(condition);\n\nconst decision: schema.Entity<IDecision> = new schema.Entity('decisions', undefined, {\n    idAttribute: (decision: IDecision) => decision.ruleDecision + \"_\" + decision.componentType.type.toUpperCase()\n});\n\nconst simulatedHostMetric: schema.Entity<ISimulatedHostMetric> = new schema.Entity('simulatedHostMetrics', undefined, {\n    idAttribute: (simulatedHostMetric: ISimulatedHostMetric) => simulatedHostMetric.name\n});\nconst hostSimulatedMetrics = new schema.Array(simulatedHostMetric);\n\nconst simulatedAppMetric: schema.Entity<ISimulatedAppMetric> = new schema.Entity('simulatedAppMetrics', undefined, {\n    idAttribute: (simulatedAppMetric: ISimulatedAppMetric) => simulatedAppMetric.name\n});\nconst appSimulatedMetrics = new schema.Array(simulatedAppMetric);\n\nconst simulatedServiceMetric: schema.Entity<ISimulatedServiceMetric> = new schema.Entity('simulatedServiceMetrics', undefined, {\n    idAttribute: (simulatedServiceMetric: ISimulatedServiceMetric) => simulatedServiceMetric.name\n});\nconst serviceSimulatedMetrics = new schema.Array(simulatedServiceMetric);\n\nconst simulatedContainerMetric: schema.Entity<ISimulatedContainerMetric> = new schema.Entity('simulatedContainerMetrics', undefined, {\n    idAttribute: (simulatedContainerMetric: ISimulatedContainerMetric) => simulatedContainerMetric.name\n});\nconst containerSimulatedMetrics = new schema.Array(simulatedContainerMetric);\n\nconst loadBalancer: schema.Entity<ILoadBalancer> = new schema.Entity('loadBalancers', undefined, {\n    idAttribute: (loadBalancer: ILoadBalancer) => loadBalancer.containerId\n});\n\nconst registrationServer: schema.Entity<IRegistrationServer> = new schema.Entity('registrationServers', undefined, {\n    idAttribute: (registrationServer: IRegistrationServer) => registrationServer.containerId\n});\n\nconst workerManager: schema.Entity<IWorkerManager> = new schema.Entity('workerManagers', undefined, {\n    idAttribute: (workerManager: IWorkerManager) => workerManager.id.toString()\n});\n\nconst logs: schema.Entity<ILogs> = new schema.Entity('logs', undefined, {\n    idAttribute: (logs: ILogs) => logs.eventId.toString()\n});\n\napp.define({appServices, appRules, appSimulatedMetrics});\nservice.define({apps, dependencies, dependents, serviceRules, serviceSimulatedMetrics});\ncontainer.define({containerRules, containerSimulatedMetrics});\ncloudHost.define({hostRules, hostSimulatedMetrics});\nedgeHost.define({hostRules, hostSimulatedMetrics});\nruleHost.define({conditions, edgeHosts, cloudHosts});\nruleApp.define({conditions, apps});\nruleService.define({conditions, services});\nruleContainer.define({conditions, containers});\ncondition.define({valueModes, fields, operators});\nsimulatedHostMetric.define({edgeHosts, cloudHosts});\nsimulatedAppMetric.define({apps});\nsimulatedServiceMetric.define({services});\nsimulatedContainerMetric.define({containers});\n\nexport const Schemas: ISchemas = {\n    APP: app,\n    APP_ARRAY: [app],\n    APP_SERVICE: appService,\n    APP_SERVICE_ARRAY: [appService],\n    APP_RULE: ruleApp,\n    APP_RULE_ARRAY: [ruleApp],\n    APP_SIMULATED_METRIC: simulatedAppMetric,\n    APP_SIMULATED_METRIC_ARRAY: [simulatedAppMetric],\n    SERVICE: service,\n    SERVICE_ARRAY: [service],\n    SERVICE_APP: app,\n    SERVICE_APP_ARRAY: [app],\n    SERVICE_DEPENDENCY: dependency,\n    SERVICE_DEPENDENCY_ARRAY: [dependency],\n    SERVICE_DEPENDENT: dependent,\n    SERVICE_DEPENDENT_ARRAY: [dependent],\n    SERVICE_PREDICTION: prediction,\n    SERVICE_PREDICTION_ARRAY: [prediction],\n    SERVICE_RULE: ruleService,\n    SERVICE_RULE_ARRAY: [ruleService],\n    SERVICE_SIMULATED_METRIC: simulatedServiceMetric,\n    SERVICE_SIMULATED_METRIC_ARRAY: [simulatedServiceMetric],\n    CONTAINER: container,\n    CONTAINER_ARRAY: [container],\n    CONTAINER_RULE: ruleContainer,\n    CONTAINER_RULE_ARRAY: [ruleContainer],\n    CONTAINER_SIMULATED_METRIC: simulatedContainerMetric,\n    CONTAINER_SIMULATED_METRIC_ARRAY: [simulatedContainerMetric],\n    CLOUD_HOST: cloudHost,\n    CLOUD_HOST_ARRAY: [cloudHost],\n    CLOUD_HOST_RULE: ruleHost,\n    CLOUD_HOST_RULE_ARRAY: [ruleHost],\n    CLOUD_HOST_SIMULATED_METRIC: simulatedHostMetric,\n    CLOUD_HOST_SIMULATED_METRIC_ARRAY: [simulatedHostMetric],\n    EDGE_HOST: edgeHost,\n    EDGE_HOST_ARRAY: [edgeHost],\n    EDGE_HOST_RULE: ruleHost,\n    EDGE_HOST_RULE_ARRAY: [ruleHost],\n    EDGE_HOST_SIMULATED_METRIC: simulatedHostMetric,\n    EDGE_HOST_SIMULATED_METRIC_ARRAY: [simulatedHostMetric],\n    NODE: node,\n    NODE_ARRAY: [node],\n    REGION: region,\n    REGION_ARRAY: [region],\n    RULE_HOST: ruleHost,\n    RULE_HOST_ARRAY: [ruleHost],\n    RULE_APP: ruleApp,\n    RULE_APP_ARRAY: [ruleApp],\n    RULE_SERVICE: ruleService,\n    RULE_SERVICE_ARRAY: [ruleService],\n    RULE_CONTAINER: ruleContainer,\n    RULE_CONTAINER_ARRAY: [ruleContainer],\n    RULE_CONDITION: condition,\n    RULE_CONDITION_ARRAY: [condition],\n    VALUE_MODE_ARRAY: [valueMode],\n    FIELD_ARRAY: [field],\n    OPERATOR_ARRAY: [operator],\n    DECISION: decision,\n    DECISION_ARRAY: [decision],\n    SIMULATED_HOST_METRIC: simulatedHostMetric,\n    SIMULATED_HOST_METRIC_ARRAY: [simulatedHostMetric],\n    SIMULATED_APP_METRIC: simulatedAppMetric,\n    SIMULATED_APP_METRIC_ARRAY: [simulatedAppMetric],\n    SIMULATED_SERVICE_METRIC: simulatedServiceMetric,\n    SIMULATED_SERVICE_METRIC_ARRAY: [simulatedServiceMetric],\n    SIMULATED_CONTAINER_METRIC: simulatedContainerMetric,\n    SIMULATED_CONTAINER_METRIC_ARRAY: [simulatedContainerMetric],\n    LOAD_BALANCER: loadBalancer,\n    LOAD_BALANCER_ARRAY: [loadBalancer],\n    REGISTRATION_SERVER: registrationServer,\n    REGISTRATION_SERVER_ARRAY: [registrationServer],\n    WORKER_MANAGER: workerManager,\n    WORKER_MANAGER_ARRAY: [workerManager],\n    LOGS_ARRAY: [logs],\n};\n\nexport const CALL_API = 'Call API';\n\nexport default (store: any) => (next: (action: any) => void) => (action: any) => {\n    const callAPI = action[CALL_API];\n    if (typeof callAPI === 'undefined') {\n        return next(action)\n    }\n    const {endpoint, schema, types, entity, method} = callAPI;\n    const actionWith = (data: any) => {\n        const finalAction = Object.assign({}, action, data);\n        delete finalAction[CALL_API];\n        return finalAction;\n    };\n    const [requestType, successType, failureType] = types;\n    next(actionWith({type: requestType}));\n    return callApi(endpoint, schema, method).then(\n        response => {\n            next(actionWith({type: successType, entity, data: response}));\n        },\n        error => {\n            next(actionWith({type: failureType, error: error.message || 'Error fetching data'}));\n        })\n\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport M from \"materialize-css\";\n\nexport default class BaseComponent<P, S> extends React.Component<P, S> {\n\n    private toasts: { id: number, toast: M.Toast }[] = [];\n\n    public componentWillUnmount(): void {\n        this.toasts.forEach(toast => toast.toast.timeRemaining = 1000);\n    }\n\n    private removeToast = (id: number) => () =>\n        this.toasts.forEach((toast, index) => {\n                if (toast.id === id) {\n                    return delete this.toasts[index];\n                }\n            }\n        );\n\n    private getToastId = (): number => {\n        for (let i = 0; ; i++) {\n            if (!this.toasts[i]) {\n                return i;\n            }\n        }\n    }\n\n    public toast(message: string, displayLength: number = 6000, error?: string,\n                 instance?: boolean, unique?: boolean): void {\n        const id = this.getToastId();\n        const html = `<div>${message}${error ? `: <b class=\"red-text\">${error}</b>` : ''}</div>`;\n        if (!unique || !this.toasts.some(toast => toast.toast.options.html === html)) {\n            const toast = M.toast({html, displayLength, completeCallback: this.removeToast(id), classes: 'test'});\n            if (instance || unique) {\n                this.toasts.push({id: id, toast: toast});\n            }\n        }\n    };\n\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ListItem_item__m8qAu\",\"listItemContent\":\"ListItem_listItemContent__31zoT\",\"nonListContent\":\"ListItem_nonListContent__yKXtu\",\"linkedItemContent\":\"ListItem_linkedItemContent__3bWAT\",\"link\":\"ListItem_link__1VZnC\",\"linkIcon\":\"ListItem_linkIcon__IaKTR\",\"unsavedItem\":\"ListItem_unsavedItem__18yCC\",\"smallText\":\"ListItem_smallText__3vlKt\",\"arrow\":\"ListItem_arrow__3rK6b\"};","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {\n    FaAddressCard,\n    FaBan,\n    FaClock,\n    FaCodeBranch,\n    FaDatabase,\n    FaDocker,\n    FaDoorClosed,\n    FaDoorOpen,\n    FaGlobe,\n    FaGlobeAfrica,\n    FaGlobeAmericas,\n    FaGlobeAsia,\n    FaGlobeEurope,\n    FaGreaterThanEqual,\n    FaHdd,\n    FaHourglassHalf,\n    FaIdBadge,\n    FaLessThanEqual,\n    FaList,\n    FaListUl,\n    FaMapMarkedAlt,\n    FaMapPin,\n    FaMinus,\n    FaNetworkWired, FaPaperPlane,\n    FaPowerOff,\n    FaSdCard,\n    FaSortAmountDown,\n    FaSuperpowers,\n    FaTasks,\n    FaTerminal,\n    FaThList,\n    FaThumbsDown,\n    FaThumbsUp,\n    FaToolbox, FaVolumeDown, FaVolumeOff\n} from \"react-icons/all\";\nimport React from \"react\";\nimport {IRegion} from \"../routes/management/regions/Region\";\nimport {IState} from \"../routes/management/hosts/cloud/CloudHost\";\n\n// https://fontawesome.com/icons?d=gallery&m=free\n// https://materializecss.com/icons.html\nexport const mapLabelToIcon = (label: string, value: any): string | JSX.Element => {\n    label = label.toLowerCase().replace(' *', '');\n    if (label === 'type') {\n       if (value === 'BY_REQUEST') {\n           return <FaVolumeOff/>;\n       }\n       if (value === 'SINGLETON') {\n           return 'filter_1';\n       }\n    }\n    if (label === 'network') {\n        return <FaNetworkWired/>;\n    }\n    if (label === 'background') {\n        if (value === undefined) {\n            return \"sync_problem\"\n        } else if (!value) {\n            return \"sync\";\n        } else {\n            return \"sync_disabled\";\n        }\n    }\n    if (label === 'defaultdb') {\n        return <FaDatabase/>;\n    }\n    if (label === 'id' || label === 'containerid' || label === 'instanceid') {\n        return \"fingerprint\";\n    }\n    if (label === 'state') {\n        switch (value) {\n            case 'ready':\n                return <FaThumbsUp/>;\n            case 'down':\n                return <FaThumbsDown/>;\n            case 'drain':\n                return <FaMinus/>;\n        }\n    }\n    if (label === 'username') {\n        return \"account_circle\";\n    }\n    if (label === 'region') {\n        if (value === undefined) {\n            return <FaMapMarkedAlt/>;\n        }\n        const region = value as IRegion;\n        const regionName = region.region.toLowerCase();\n        if (regionName.includes('america')) {\n            return <FaGlobeAmericas/>;\n        }\n        if (regionName.includes('europe')) {\n            return <FaGlobeEurope/>;\n        }\n        if (regionName.includes('asia')) {\n            return <FaGlobeAsia/>;\n        }\n        if (regionName.includes('africa') || regionName.includes('middle east')) {\n            return <FaGlobeAfrica/>;\n        }\n    }\n    if (label === 'country' || label === 'placement') {\n        return <FaMapMarkedAlt/>;\n    }\n    if (label === 'city') {\n        return <FaMapPin/>;\n    }\n    if (label.includes('privateip')) {\n        return <FaIdBadge/>;\n    }\n    if (label.includes('publicip')) {\n        return <FaAddressCard/>;\n    }\n    if (label.includes('time') || label === 'startedat') {\n        return \"access_time\";\n    }\n    if (label.includes('date')) {\n        return \"date_range\";\n    }\n    if (label.includes('command')) {\n        return <FaTerminal/>;\n    }\n    if (label.includes('host')) {\n        return 'devices';\n    }\n    if (label.includes('file')) {\n        return 'file_upload';\n    }\n    if (label.includes('name')) {\n        return \"text_fields\";\n    }\n    if (label.includes('external')) {\n        return <FaDoorOpen/>;\n    }\n    if (label.includes('internal')) {\n        return <FaDoorClosed/>;\n    }\n    if (label.includes('memory')) {\n        return 'memory';\n    }\n    if (label.includes('label')) {\n        return 'label';\n    }\n    if (label.includes('service')) {\n        return 'layers';\n    }\n    if (label.includes('docker')) {\n        return <FaDocker/>;\n    }\n\n    if (label.includes('password')) {\n        return 'vpn_key';\n    }\n    if (label.includes('version')) {\n        return <FaCodeBranch/>;\n    }\n    if (label === 'created') {\n        return <FaClock/>;\n    }\n    if (label === 'image') {\n        return <FaDocker/>;\n    }\n    if (label === 'instancetype') {\n        return <FaHdd/>;\n    }\n    if (label === 'imageid') {\n        return <FaSdCard/>;\n    }\n    if (label === 'role') {\n        if (value === 'MANAGER') {\n            return <FaTasks/>;\n        }\n        if (value === 'WORKER') {\n            return <FaToolbox/>;\n        }\n        return 'details';\n    }\n    if (label === 'availability') {\n        return <FaPowerOff/>;\n    }\n    if (label === 'priority') {\n        return <FaSortAmountDown/>;\n    }\n    if (label === 'decision') {\n        return 'linear_scale';\n    }\n    if (label === 'generic') {\n        return <FaGlobe/>;\n    }\n    if (label === 'field') {\n        return <FaListUl/>;\n    }\n    if (label === 'operator') {\n        return <FaThList/>;\n    }\n    if (label === 'valuemode') {\n        return <FaList/>;\n    }\n    if (label === 'value' || label === 'quantity' || label === 'description') {\n        return 'short_text';\n    }\n    if (label === 'override') {\n        return <FaSuperpowers/>;\n    }\n    if (label === 'minimumvalue' || label === 'minimumreplicas') {\n        return <FaGreaterThanEqual/>;\n    }\n    if (label === 'maximumvalue' || label === 'maximumreplicas') {\n        return <FaLessThanEqual/>;\n    }\n    if (label.includes('container')) {\n        return <FaDocker/>;\n    }\n    if (label === 'state') {\n        const state = value as IState;\n        if (state) {\n            switch (state.name) {\n                case 'running':\n                    return 'check';\n                case 'pending':\n                case 'stopping':\n                    return <FaHourglassHalf/>;\n                case 'stopped':\n                    return <FaBan/>;\n                case 'shutting-down':\n                case 'terminated':\n                    return 'clear';\n            }\n        }\n    }\n    if (value === true) {\n        return \"check\";\n    }\n    if (value === false) {\n        return \"clear\";\n    }\n    return \"\";\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport M from \"materialize-css\";\n\ninterface TextBoxProps<T> {\n    className: string;\n    id: string;\n    name: string;\n    value?: any;\n    disabled?: boolean;\n    valueToString?: (v: T) => string\n    onChange: (e: React.FormEvent<HTMLInputElement>) => void;\n    onBlur: (e: React.FormEvent<HTMLInputElement>) => void;\n    hidden?: boolean;\n}\n\ninterface State {\n    show: boolean;\n}\n\nexport class TextBox<T> extends React.Component<TextBoxProps<T>, State> {\n\n    state = {\n        show: this.props.hidden === undefined || !this.props.hidden,\n    };\n\n    public componentDidUpdate(prevProps: Readonly<TextBoxProps<T>>, prevState: Readonly<any>, snapshot?: any): void {\n        M.updateTextFields();\n    }\n\n    render(): any {\n        const {className, id, name, value, disabled, hidden, valueToString, onChange, onBlur} = this.props;\n        const {show} = this.state;\n        return (\n            <>\n                <input\n                    className={className}\n                    id={id}\n                    name={name}\n                    type={show ? \"text\" : \"password\"}\n                    value={typeof value === 'object' && valueToString ? valueToString(value) : (value || '')}\n                    disabled={disabled}\n                    autoComplete=\"off\"\n                    onChange={onChange}\n                    onBlur={onBlur}\n                    formNoValidate={true}/>\n                {hidden !== undefined && <i className=\"material-icons suffix\" onClick={this.handleToggleVisibility}>\n                    {show ? \"visibility\" : \"visibility_off\"}\n                </i>}\n            </>\n        )\n    }\n\n    private handleToggleVisibility = () =>\n        this.setState({show: !this.state.show});\n\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React, {createRef} from \"react\";\n\ninterface Props {\n    className: string;\n    id: string;\n    name: string;\n    value: string;\n    disabled?: boolean;\n    onChange: (e: React.FormEvent<HTMLTextAreaElement>) => void;\n    onBlur: (e: React.FormEvent<HTMLTextAreaElement>) => void;\n}\n\nexport class MultilineTextBox extends React.Component<Props, {}> {\n\n    private textArea = createRef<HTMLTextAreaElement>();\n\n    public componentDidMount() {\n        this.updateTextArea();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<{}>, snapshot?: any): void {\n        this.updateTextArea();\n    }\n\n    private updateTextArea = () => {\n        M.updateTextFields();\n        M.textareaAutoResize(this.textArea.current as Element);\n    }\n\n    render(): any {\n        const {className, id, name, value, disabled, onChange, onBlur} = this.props;\n        return (\n            <textarea\n                ref={this.textArea}\n                className={`materialize-textarea ${className}`}\n                id={id}\n                name={name}\n                value={value || ''}\n                disabled={disabled}\n                onChange={onChange}\n                onBlur={onBlur}/>\n        )\n    }\n\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React, {createRef} from \"react\";\nimport M, {DatepickerOptions} from \"materialize-css\";\n\ninterface Props {\n    className?: string;\n    id: string;\n    name: string;\n    value: string;\n    disabled?: boolean;\n    onSelect: (date: string) => void;\n    onChange: (e: React.FormEvent<HTMLInputElement>) => void;\n    options?: Partial<DatepickerOptions>;\n}\n\ninterface State {\n    selectedDate: string;\n}\n\nexport class Datepicker extends React.Component<Props, State> {\n\n    state: State = {\n        selectedDate: '',\n    };\n    private datepicker = createRef<HTMLInputElement>();\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (prevState.selectedDate === this.state.selectedDate) {\n            this.initDatepicker();\n        }\n        M.updateTextFields();\n    }\n\n    public render() {\n        const {className, id, name, value, disabled, onChange} = this.props;\n        return (\n            <input\n                className={`datepicker ${className}`}\n                type=\"text\"\n                id={id}\n                name={name}\n                value={value || ''}\n                disabled={disabled}\n                autoComplete=\"off\"\n                onChange={onChange}\n                ref={this.datepicker}/>\n        );\n    }\n\n    private initDatepicker = (): void => {\n        M.Datepicker.init(this.datepicker.current as Element, {\n            format: 'dd/mm/yyyy',\n            minDate: new Date(),\n            defaultDate: new Date(this.props.value),\n            showClearBtn: true,\n            onSelect: this.onSelect,\n            onClose: this.onClose,\n            ...this.props.options\n        });\n    };\n\n    private onClose = () =>\n        this.props.onSelect(this.state.selectedDate);\n\n    private onSelect = (selectedDate: Date): void =>\n        this.setState({selectedDate: selectedDate.toLocaleDateString('pt')});\n\n}","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React, {createRef} from \"react\";\nimport M, {TimepickerOptions} from \"materialize-css\";\nimport {zeroPad} from \"../../utils/text\";\n\ninterface Props {\n    className?: string;\n    id: string;\n    name: string;\n    value: string;\n    disabled?: boolean;\n    onSelect: (time: string) => void;\n    onChange: (e: React.FormEvent<HTMLInputElement>) => void;\n    options?: Partial<TimepickerOptions>;\n}\n\ninterface State {\n    selectedTime: string;\n}\n\nexport class Timepicker extends React.Component<Props, State> {\n\n    state: State = {\n        selectedTime: '',\n    };\n    private timepicker = createRef<HTMLInputElement>();\n\n    public componentDidMount(): void {\n        this.initTimepicker();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (prevState.selectedTime === this.state.selectedTime) {\n            this.initTimepicker();\n        }\n        M.updateTextFields();\n    }\n\n    public render() {\n        const {className, id, name, value, disabled, onChange} = this.props;\n        return (\n            <input className={`timepicker ${className}`}\n                   type=\"text\"\n                   id={id}\n                   name={name}\n                   value={value || ''}\n                   disabled={disabled}\n                   autoComplete=\"off\"\n                   onChange={onChange}\n                   ref={this.timepicker}/>\n        )\n    }\n\n    private initTimepicker = (): void => {\n        M.Timepicker.init(this.timepicker.current as Element, {\n            twelveHour: false,\n            defaultTime: this.props.value,\n            showClearBtn: true,\n            onSelect: this.onSelect,\n            onCloseEnd: this.onClose,\n            ...this.props.options\n        });\n    };\n\n    private onClose = () =>\n        this.props.onSelect(this.state.selectedTime);\n\n    private onSelect = (hour: number, minute: number): void =>\n        this.setState({selectedTime: String(`${zeroPad(hour, 2)}:${zeroPad(minute, 2)}`)});\n\n}","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\n\ninterface NumberBoxProps {\n    className: string;\n    id: string;\n    name: string;\n    value?: string;\n    disabled?: boolean;\n    min?: number;\n    max?: number;\n    onChange: (e: React.FormEvent<HTMLInputElement>) => void;\n    onBlur: (e: React.FormEvent<HTMLInputElement>) => void;\n}\n\nexport class NumberBox extends React.Component<NumberBoxProps, any> {\n\n    public componentDidUpdate(prevProps: Readonly<NumberBoxProps>, prevState: Readonly<any>, snapshot?: any): void {\n        M.updateTextFields();\n    }\n\n    render(): any {\n        const {className, id, name, min, max, value, disabled, onChange, onBlur} = this.props;\n        return (\n            <input\n                className={className}\n                id={id}\n                name={name}\n                type=\"number\"\n                value={value === undefined ? '' : value}\n                min={min}\n                max={max}\n                disabled={disabled}\n                autoComplete=\"off\"\n                onChange={onChange}\n                onBlur={onBlur}\n                formNoValidate={true}/>\n        )\n    }\n\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React, {createRef} from \"react\";\nimport ListItem from \"../list/ListItem\";\nimport listItemStyles from \"../../components/list/ListItem.module.css\";\nimport styles from \"./CheckboxList.module.css\";\nimport {camelCaseToSentenceCase} from \"../../utils/text\";\nimport Empty from \"../list/Empty\";\n\ninterface Props {\n    id: string;\n    name: string;\n    values: any[];\n    disabled?: boolean;\n    required: boolean;\n    onCheckList: (listId: string, itemId: string, checked: boolean) => void;\n}\n\ninterface State {\n    values: { value: string, checked: boolean }[],\n}\n\nexport class CheckboxList extends React.Component<Props, State> {\n\n    private globalCheckbox = createRef<HTMLInputElement>();\n\n    state: State = {\n        values: [],\n    };\n\n    public componentDidMount(): void {\n        this.setState({values: this.getCheckboxValues()});\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (prevProps.values !== this.props.values) {\n            this.setState({values: this.getCheckboxValues()});\n        }\n        if (this.globalCheckbox.current) {\n            this.globalCheckbox.current.checked = Object.values(this.state.values).every(data => data.checked);\n        }\n    }\n\n    private handleGlobalCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const {checked} = event.target;\n        this.state.values.forEach(value => {\n            if (checked !== value.checked) {\n                this.props.onCheckList(this.props.id, value.value, checked);\n            }\n        });\n        this.setState({values: Object.values(this.state.values).map(v => ({value: v.value, checked: checked}))});\n    }\n\n    public render() {\n        const {id, name, disabled, required} = this.props;\n        const {values} = this.state;\n        return (\n            <div id={id} className='noMargin'>\n                <h6 className={`white-text ${styles.title} ${values.length ? 'left' : ''}`}>\n                    {camelCaseToSentenceCase(name)}\n                    {required && <span className={styles.requiredLabel}>*</span>}\n                </h6>\n                {values.length\n                    ? <p className={`${styles.globalCheckbox}`}>\n                        <label>\n                            <input type=\"checkbox\"\n                                   disabled={disabled}\n                                   onChange={this.handleGlobalCheckbox}\n                                   ref={this.globalCheckbox}/>\n                            <span/>\n                        </label>\n                    </p>\n                    : <Empty message={`No ${camelCaseToSentenceCase(name)} to select`}/>}\n                {values.map((value, index) =>\n                    this.item(index, value.value, value.checked)\n                )}\n            </div>\n        )\n    }\n\n    private getCheckboxValues = () =>\n        this.props.values.map(v => ({value: v, checked: false}));\n\n    private handleCheckbox = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        const {id, checked} = event.target;\n        const stateValue = this.state.values.find(value => value.value === id);\n        if (stateValue) {\n            stateValue.checked = checked;\n            this.props.onCheckList(this.props.id, id, checked);\n        }\n        this.setState({values: this.state.values});\n    };\n\n    private item = (index: number, option: string, checked: boolean): JSX.Element => {\n        return (\n            <ListItem key={index}>\n                <div className={`${listItemStyles.nonListContent}`}>\n                    <label>\n                        <input id={option}\n                               type=\"checkbox\"\n                               onChange={this.handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n                            {option}\n                        </span>\n                    </label>\n                </div>\n            </ListItem>\n        );\n    };\n\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport styles from \"./Checkbox.module.css\";\nimport {capitalize} from \"../../utils/text\";\n\ninterface Props {\n    id: string;\n    label?: string;\n    checked: boolean;\n    disabled?: boolean;\n    onCheck: (id: string, checked: boolean) => void;\n}\n\ninterface State {\n    checked: boolean,\n}\n\nexport class Checkbox extends React.Component<Props, State> {\n\n    state: State = {\n        checked: this.props.checked,\n    };\n\n    private handleCheckbox = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        const {checked} = event.target;\n        this.props.onCheck(this.props.id, checked);\n        this.setState({checked: checked});\n    };\n\n    public render() {\n        const {id, label, disabled} = this.props;\n        const {checked} = this.state;\n        return (\n            <div className={styles.checkbox}>\n                <label >\n                    <input id={id}\n                           type=\"checkbox\"\n                           disabled={disabled}\n                           onChange={this.handleCheckbox}\n                           checked={checked}/>\n                    <span id={'checkbox'} className={styles.formCheckbox}>\n                        {capitalize(label || id)}\n                    </span>\n                </label>\n            </div>\n\n        )\n    }\n\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport {mapLabelToIcon} from \"../../utils/image\";\nimport {camelCaseToSentenceCase} from \"../../utils/text\";\nimport M from \"materialize-css\";\nimport {FormContext, IErrors, IFormContext, IValues} from \"./Form\";\nimport {TextBox} from \"./TextBox\";\nimport {MultilineTextBox} from \"./MultilineTextBox\";\nimport {Datepicker} from \"./Datepicker\";\nimport {Timepicker} from \"./Timepicker\";\nimport {NumberBox} from \"./NumberBox\";\nimport {Dropdown} from \"./Dropdown\";\nimport {CheckboxList} from \"./CheckboxList\";\nimport checkboxListStyles from \"./CheckboxList.module.css\";\nimport {Link} from \"react-router-dom\";\nimport LocationMap from \"../map/LocationMap\";\nimport {IMarker} from \"../map/Marker\";\nimport LoadingSpinner from \"../list/LoadingSpinner\";\nimport {Checkbox} from \"./Checkbox\";\nimport styles from './Form.module.css';\n\nexport interface IValidation {\n    rule: (values: IValues, id: keyof IValues, args: any) => string;\n    args?: any;\n}\n\nexport interface FieldProps<T = string> {\n    id: string;\n    type?: \"text\" | \"number\" | \"date\" | \"datepicker\" | \"timepicker\" | \"multilinetext\" | \"dropdown\" | \"list\" | \"map\" | \"checkbox\";\n    label?: string;\n    value?: any;\n    valueToString?: (v: T) => string;\n    dropdown?: { defaultValue: string, values: T[], optionToString?: (v: T) => string, selectCallback?: (value: any) => void, emptyMessage?: string };\n    number?: { min: number, max: number };\n    validation?: IValidation;\n    icon?: { include?: boolean, name?: string, linkedTo?: ((v: T) => string | null) | string };\n    disabled?: boolean;\n    hidden?: boolean;\n    map?: {\n        loading: boolean, editable?: boolean, singleMarker?: boolean, zoomable?: boolean, labeled?: boolean, markers?: IMarker[],\n        valueToMarkers?: (v: T[]) => IMarker[]\n    }\n    checkbox?: { label?: string, checkCallback?: (value: any) => void }\n}\n\nexport const getTypeFromValue = (value: any): 'text' | 'number' =>\n    value === undefined\n    || value === ''\n    || typeof value === 'boolean'\n    || (typeof value === 'string' && !value.trim().length)\n    || isNaN(value)\n        ? 'text'\n        : 'number';\n\nexport default class Field<T> extends React.Component<FieldProps<T>, {}> {\n\n    public componentDidMount(): void {\n        this.updateField();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<FieldProps<T>>, prevState: Readonly<{}>, snapshot?: any): void {\n        this.updateField();\n    }\n\n    private linkedIcon = (label: string, iconName: string | undefined, linkedTo: ((v: T) => string | null) | string, value: any): JSX.Element => {\n        const icon = <>{iconName ? iconName : mapLabelToIcon(label, value)}</>;\n        const link = typeof linkedTo === 'string' ? linkedTo : linkedTo(value)\n        return link ? <Link to={link}>{icon}</Link> : icon;\n    }\n\n    public render() {\n        const {id, type, label, dropdown, number, icon, disabled, hidden, valueToString, map, checkbox} = this.props;\n        const getError = (errors: IErrors): string => (errors ? errors[id] : '');\n        const getEditorClassname = (errors: IErrors, disabled: boolean, value: string): string => {\n            const hasErrors = getError(errors);\n            if (hasErrors) {\n                return \"invalidate-field\";\n            } else if (!hasErrors && !disabled && (getTypeFromValue(value) !== 'text' || value)) {\n                return \"validate-field\";\n            } else {\n                return \"no-validation-field\";\n            }\n        };\n        return (\n            <FormContext.Consumer>\n                {(formContext: IFormContext | null) => (\n                    formContext && (\n                        <div key={id}\n                             className={type !== 'list' ? `input-field col s12` : `input-field col s12 ${checkboxListStyles.listWrapper}`}\n                             style={icon?.include !== undefined && !icon?.include ? {marginLeft: '10px'} : undefined}>\n                            {label && type !== \"list\" && (\n                                <>\n                                    {(icon?.include === undefined || icon?.include) &&\n                                    <i className={`material-icons prefix ${styles.labelIcon}`}>\n                                        {icon?.linkedTo\n                                            ? this.linkedIcon(label, icon.name, icon.linkedTo, formContext.values[id])\n                                            : icon?.name\n                                                ? icon.name\n                                                : type?.toLowerCase() !== 'checkbox' && mapLabelToIcon(label, formContext.values[id])}\n                                    </i>}\n                                    <label className=\"active\" htmlFor={id}>\n                                        {camelCaseToSentenceCase(label)}\n                                        {type?.toLowerCase() !== 'checkbox' && formContext.isRequired(id) && <label className={styles.requiredLabel}>*</label>}\n                                    </label>\n                                </>\n                            )}\n                            {(!type || type.toLowerCase() === \"text\") && (\n                                <TextBox<T>\n                                    className={getEditorClassname(formContext.errors, !formContext.isEditing, formContext.values[id])}\n                                    id={id}\n                                    name={id}\n                                    value={formContext.values[id]}\n                                    disabled={disabled || !formContext.isEditing}\n                                    onChange={this.onChange(id, formContext, !!formContext.errors[id])}\n                                    valueToString={valueToString}\n                                    onBlur={this.onBlur(id, formContext)}\n                                    hidden={hidden}/>\n                            )}\n                            {type && type.toLowerCase() === \"number\" && (\n                                <NumberBox\n                                    className={getEditorClassname(formContext.errors, !formContext.isEditing, formContext.values[id])}\n                                    id={id}\n                                    name={id}\n                                    value={formContext.values[id]}\n                                    min={number && number.min}\n                                    max={number && number.max}\n                                    disabled={disabled || !formContext.isEditing}\n                                    onChange={this.onChange(id, formContext, !!formContext.errors[id])}\n                                    onBlur={this.onBlur(id, formContext)}/>\n                            )}\n                            {type && type.toLowerCase() === \"date\" && (\n                                <TextBox\n                                    className={getEditorClassname(formContext.errors, !formContext.isEditing, formContext.values[id])}\n                                    id={id}\n                                    name={id}\n                                    value={this.getDateStringFromTimestamp(formContext.values[id])}\n                                    disabled={disabled || !formContext.isEditing}\n                                    onChange={this.onChange(id, formContext, !!formContext.errors[id])}\n                                    onBlur={this.onBlur(id, formContext)}/>\n                            )}\n                            {(type && type.toLowerCase() === \"datepicker\") && (\n                                <Datepicker\n                                    className={getEditorClassname(formContext.errors, !formContext.isEditing, formContext.values[id])}\n                                    id={id}\n                                    name={id}\n                                    value={formContext.values[id]}\n                                    disabled={disabled || !formContext.isEditing}\n                                    onSelect={this.onSelect(id, formContext)}\n                                    onChange={this.onChange(id, formContext, !!formContext.errors[id])}/>\n                            )}\n                            {(type && type.toLowerCase() === \"timepicker\") && (\n                                <Timepicker\n                                    className={getEditorClassname(formContext.errors, !formContext.isEditing, formContext.values[id])}\n                                    id={id}\n                                    name={id}\n                                    value={formContext.values[id]}\n                                    disabled={disabled || !formContext?.isEditing}\n                                    onSelect={this.onSelect(id, formContext)}\n                                    onChange={this.onChange(id, formContext, !!formContext.errors[id])}/>\n                            )}\n                            {type && type.toLowerCase() === \"multilinetext\" && (\n                                <MultilineTextBox\n                                    className={getEditorClassname(formContext.errors, !formContext.isEditing, formContext.values[id])}\n                                    id={id}\n                                    name={id}\n                                    value={formContext.values[id]}\n                                    disabled={disabled || !formContext.isEditing}\n                                    onChange={this.onChange(id, formContext, !!formContext.errors[id])}\n                                    onBlur={this.onBlur(id, formContext)}/>\n                            )}\n                            {type && type.toLowerCase() === \"dropdown\" && dropdown && (\n                                <Dropdown\n                                    className={getEditorClassname(formContext.errors, !formContext.isEditing, formContext.values[id])}\n                                    id={id}\n                                    name={id}\n                                    value={formContext.values[id]}\n                                    disabled={disabled || !formContext.isEditing}\n                                    onChange={this.onChange(id, formContext, !!formContext.errors[id], true)}\n                                    onBlur={this.onBlur(id, formContext)}\n                                    dropdown={dropdown}/>\n                            )}\n                            {(type && type.toLowerCase() === \"list\") && (\n                                <CheckboxList id={id}\n                                              name={id}\n                                              required={formContext.isRequired(id)}\n                                              values={this.props.value}\n                                              disabled={disabled || !formContext?.isEditing}\n                                              onCheckList={this.onCheckList(formContext)}/>\n                            )}\n                            {(type && type.toLowerCase() === \"map\") && (\n                                map?.loading\n                                    ? <LoadingSpinner/>\n                                    : <LocationMap\n                                        onSelect={(map?.editable && formContext.isEditing) ? this.onSelectCoordinates(id, formContext) : undefined}\n                                        onDeselect={(map?.editable && formContext.isEditing) ? this.onDeselectCoordinates(id, formContext) : undefined}\n                                        onClear={(map?.editable && formContext.isEditing) ? this.onClearCoordinates(id, formContext) : undefined}\n                                        locations={this.getMapFieldMarkers(formContext.values[id], map?.markers, map?.valueToMarkers)}\n                                        marker={{size: 5, labeled: map?.labeled}} hover clickHighlight\n                                        zoomable={!map?.editable || (map?.zoomable && !formContext.isEditing)}\n                                        resizable/>\n                            )}\n                            {(type && type.toLowerCase() === \"checkbox\") && (\n                                <Checkbox id={id}\n                                          label={checkbox?.label}\n                                          checked={formContext.values[id]}\n                                          disabled={disabled || !formContext?.isEditing}\n                                          onCheck={this.onCheck(formContext, checkbox?.checkCallback)}/>\n                            )}\n                            {getError(formContext.errors) && (\n                                <span className=\"helper-text red-text darken-3\">\n                    {getError(formContext.errors)}\n                  </span>\n                            )}\n                        </div>\n                    )\n                )}\n            </FormContext.Consumer>\n        )\n    }\n\n    private getMapFieldMarkers = (values: any, markers?: IMarker[], valueToMarkers?: (v: T[]) => IMarker[]) => {\n        markers = markers || [];\n        if (!values) {\n            return markers;\n        }\n        if (!Array.isArray(values)) {\n            values = [values];\n        }\n        if (valueToMarkers) {\n            values = valueToMarkers(values);\n        }\n        return values.concat(markers);\n    }\n\n    private updateField = () =>\n        M.updateTextFields();\n\n    private onChange = (id: string, formContext: IFormContext, validate: boolean, selected?: boolean) => (e: React.FormEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>): void => {\n        const target = e.target as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\n        let value = target.value;\n        // regex to test if value has only \\n chars\n        if (!new RegExp(\"^[\\n\\s]+$\").test(value) && !isNaN(+value)) {\n            value = `\"${value}\"`;\n        }\n        try {\n            value = JSON.parse(value);\n        } catch (_) {\n        }\n        if (selected) {\n            this.props.dropdown?.selectCallback?.(value);\n        }\n        formContext.setValue(id, value, validate);\n    };\n\n    private onSelect = (id: string, formContext: IFormContext) => (value: string) => {\n        formContext.setValue(id, value);\n    };\n\n    private onBlur = (id: string, formContext: IFormContext) => (): void =>\n        formContext.validate(id);\n\n    private onCheckList = (formContext: IFormContext) => (listId: keyof IValues, itemId: string, checked: boolean) => {\n        if (checked) {\n            formContext.addValue(listId, itemId);\n        } else {\n            formContext.removeValue(listId, itemId);\n        }\n    };\n\n    private onCheck = (formContext: IFormContext, checkCallback?: (checked: boolean) => void) => (id: keyof IValues, checked: boolean) => {\n        formContext.setValue(id, checked);\n        checkCallback?.(checked);\n    }\n\n    private onSelectCoordinates = (id: string, formContext: any) => (marker: IMarker): void => {\n        if (this.props.map?.singleMarker) {\n            formContext.setValue(id, marker, false);\n        } else {\n            formContext.addValue(id, marker);\n        }\n    }\n\n    private onDeselectCoordinates = (id: string, formContext: any) => (marker: IMarker): void =>\n        formContext.removeValue(id, marker);\n\n    private onClearCoordinates = (id: string, formContext: any) => (): void =>\n        formContext.removeValuesExcept(id, this.props.map?.markers);\n\n    private getDateStringFromTimestamp = (value: number) => {\n        const date = new Date(value * 1000);\n        return `${date.toLocaleDateString(\"pt\")} ${date.toLocaleTimeString(\"pt\")}`\n    };\n\n}","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React, {createRef, RefObject} from \"react\";\nimport {deleteCancelRequest, deleteData, getCancelRequest, postData, putData} from \"../../utils/api\";\nimport styles from './Form.module.css';\nimport {RouteComponentProps, withRouter} from \"react-router\";\nimport {FieldProps, getTypeFromValue, IValidation} from \"./Field\";\nimport {camelCaseToSentenceCase, decodeHTML} from \"../../utils/text\";\nimport ConfirmDialog from \"../dialogs/ConfirmDialog\";\nimport {isEqual, isEqualWith} from \"lodash\";\nimport ActionProgressBar from \"../actionloading/ActionProgressBar\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport ScrollBar from \"react-perfect-scrollbar\";\nimport M from \"materialize-css\";\nimport {Method} from \"axios\";\nimport {ReduxState} from \"../../reducers\";\nimport {connect} from \"react-redux\";\nimport BaseComponent from \"../BaseComponent\";\n\nexport interface IFormModal {\n    id: string,\n    title?: string,\n    fields: IFields,\n    values: IValues,\n    position?: string,\n    content: () => JSX.Element,\n    fullScreen?: boolean,\n    scrollbar?: React.RefObject<ScrollBar>\n}\n\nexport type RestOperation = {\n    textButton?: string,\n    confirmMessage?: string,\n    url: string,\n    successCallback: (reply?: any, args?: any) => void,\n    failureCallback: (reason: string, args?: any) => void,\n}\n\nexport type IFields = {\n    [key: string]: FieldProps;\n}\n\nexport type IValues = {\n    [key: string]: any;\n}\n\nexport type IErrors = {\n    [key: string]: string;\n}\n\nexport type IFormDropdown = { id: string, title: string, empty: string, data: string[] };\n\nexport type ICustomButton = { button: JSX.Element, confirm?: { id: string, message: string, onClickConfirm: () => void } };\n\nexport type ISwitchDropdown = { title?: string, options: string[], onSwitch: (selected: any) => void };\n\nexport type IFormLoading = { method: Method, url: string } | undefined;\n\ninterface FormProps {\n    id: string;\n    fields: IFields;\n    values: IValues;\n    isNew?: boolean;\n    showSaveButton?: boolean;\n    post?: RestOperation;\n    put?: RestOperation;\n    delete?: RestOperation;\n    controlsMode?: 'top' | 'modal' | 'modal-fullscreen';\n    modal?: {\n        onConfirm?: (values: IValues) => void;\n        scrollbar?: RefObject<ScrollBar>;\n        scrollMaxHeight: number;\n    }\n    dropdown?: IFormDropdown;\n    saveEntities?: (args: any) => void;\n    customButtons?: ICustomButton[];\n    switchDropdown?: ISwitchDropdown;\n    loading?: IFormLoading;\n}\n\ninterface StateToProps {\n    confirmationDialog: boolean,\n}\n\ntype Props = FormProps & RouteComponentProps & StateToProps;\n\ninterface State {\n    values: IValues;\n    savedValues: IValues;\n    errors: IErrors;\n    isEditing: boolean;\n    saveRequired: boolean;\n    loading?: { method: Method, url: string };\n}\n\nexport interface IFormContext {\n    values: IValues;\n    errors: IErrors;\n    isEditing: boolean;\n    setValue: (id: keyof IValues, value: any, validate?: boolean) => void;\n    addValue: (id: keyof IValues, value: any) => void;\n    removeValue: (id: keyof IValues, value: any) => void;\n    removeValuesExcept: (id: keyof IValues, value: any[]) => void;\n    validate: (id: keyof IValues) => void;\n    isRequired: (id: keyof IValues) => boolean;\n}\n\nexport const FormContext =\n    React.createContext<IFormContext | null>(null);\n\n//TODO validation for correct dates and times\n\nexport const requireGreaterOrEqualSize = (values: IValues, id: keyof IValues, size: number): string => {\n    return values[id] === undefined || values[id] === null || values[id].length < size\n        ? `Number of ${camelCaseToSentenceCase(id as string)} must be at least ${size}`\n        : \"\";\n}\n\nexport const requiredSize = (values: IValues, id: keyof IValues, size: number): string => {\n    return values[id] === undefined || values[id] === null || values[id].length != size\n        ? `Number of ${camelCaseToSentenceCase(id as string)} must be ${size}`\n        : \"\";\n}\n\nexport const required = (values: IValues, id: keyof IValues): string => {\n    return values[id] === undefined || values[id] === null || values[id] === \"\"\n        ? `${camelCaseToSentenceCase(id as string)} is required`\n        : \"\";\n}\n\nexport const notAllowed = (values: IValues, id: keyof IValues, args: any[]): string =>\n    args.indexOf(values[id].toLowerCase()) !== -1\n        ? `${values[id]} is not allowed`\n        : \"\";\n\nexport const notValid = (values: IValues, id: keyof IValues, regularExpression: RegExp, name: string): string =>\n    !regularExpression.test(String(values[id]).toLowerCase())\n        ? `${values[id]} is not a valid ${name}`\n        : \"\";\n\nexport const notValidIpAddress = (values: IValues, id: keyof IValues): string =>\n    notValid(values, id,\n        /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n        'ip address');\n\nexport const notValidEmail = (values: IValues, id: keyof IValues): string =>\n    notValid(values, id,\n        /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n        'email');\n\nexport const lengthLimit = (values: IValues, id: keyof IValues, size: number): string =>\n    values[id].length > size\n        ? `Limited to ${size} characters`\n        : \"\";\n\nexport const trimmed = (values: IValues, id: keyof IValues): string =>\n    typeof values[id] === 'string' && (values[id].startsWith(\" \") || values[id].endsWith(\" \"))\n        ? `${camelCaseToSentenceCase(id as string)} can't start or end with spaces`\n        : \"\";\n\nexport const min = (values: IValues, id: keyof IValues, args: number): string =>\n    values[id] < args\n        ? `Required minimum value of ${args}`\n        : \"\";\n\nexport const max = (values: IValues, id: keyof IValues, args: number): string =>\n    values[id] > args\n        ? `Required maximum value of ${args}`\n        : \"\";\n\nexport const number = (values: IValues, id: keyof IValues): string =>\n    getTypeFromValue(values[id]) !== 'number'\n        ? `${camelCaseToSentenceCase(id as string)} is a number`\n        : \"\";\n\nexport const maxSize = (values: IValues, id: keyof IValues, args: any) =>\n    values[id] && values[id].length >= args\n        ? `Limit of ${args} characters`\n        : \"\";\n\nexport const maxSizeAndTrimmed = (values: IValues, id: keyof IValues, args: any) =>\n    trimmed(values, id) || maxSize(values, id, args);\n\nexport const requiredAndTrimmed = (values: IValues, id: keyof IValues) =>\n    required(values, id) || trimmed(values, id);\n\nexport const requiredAndTrimmedAndNotValid = (values: IValues, id: keyof IValues, args: any[]) =>\n    required(values, id) || trimmed(values, id) || notValid(values, id, args[0], args[1]);\n\nexport const requiredAndTrimmedAndNotValidIpAddress = (values: IValues, id: keyof IValues) =>\n    required(values, id) || trimmed(values, id) || notValidIpAddress(values, id);\n\nexport const requiredAndTrimmedAndNotValidEmail = (values: IValues, id: keyof IValues) =>\n    required(values, id) || trimmed(values, id) || notValidEmail(values, id);\n\nexport const requiredAndTrimmedAndNotAllowed = (values: IValues, id: keyof IValues, args: any[]) =>\n    required(values, id) || trimmed(values, id) || notAllowed(values, id, args);\n\nexport const requiredAndTrimmedAndSizeRestriction = (values: IValues, id: keyof IValues, size: number) =>\n    required(values, id) || trimmed(values, id) || lengthLimit(values, id, size);\n\nexport const requiredAndNumberAndMin = (values: IValues, id: keyof IValues, args: any) =>\n    required(values, id) || number(values, id) || min(values, id, args);\n\nexport const requiredAndNumberAndMax = (values: IValues, id: keyof IValues, args: any) =>\n    required(values, id) || number(values, id) || max(values, id, args);\n\nexport const requiredAndNumberAndMinAndMax = (values: IValues, id: keyof IValues, args: any) =>\n    required(values, id) || number(values, id) || min(values, id, args[0]) || max(values, id, args[1]);\n\nclass Form extends BaseComponent<Props, State> {\n\n    private mounted = false;\n    private dropdown = createRef<HTMLButtonElement>();\n    private dropdownScrollbar: (ScrollBar | null) = null;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            values: props.values,\n            savedValues: props.values,\n            errors: {},\n            isEditing: props.isNew || false,\n            saveRequired: false,\n            loading: props.loading,\n        }\n    }\n\n    public componentDidMount(): void {\n        this.initDropdown();\n        this.mounted = true;\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (prevProps.showSaveButton !== this.props.showSaveButton\n            || prevState.values !== this.state.values\n            || prevState.savedValues !== this.state.savedValues) {\n            this.setState({\n                saveRequired: this.props.showSaveButton || this.props.isNew || this.saveRequired()\n            })\n        }\n        if (prevProps.values !== this.props.values) {\n            this.setState(Object.keys(this.props.values).reduce((state: State, data: string) => {\n                if (!!this.props.values[data]) {\n                    state.values[data] = this.props.values[data];\n                }\n                return state;\n            }, this.state));\n        }\n        if (prevProps.loading !== this.props.loading) {\n            this.setState({loading: this.props.loading});\n        }\n        if (prevProps.isNew !== this.props.isNew) {\n            this.setState({isEditing: this.props.isNew === undefined || this.props.isNew});\n        }\n        this.initDropdown();\n    }\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    public render() {\n        const context: IFormContext = {\n            values: this.state.values,\n            errors: this.state.errors,\n            isEditing: this.state.isEditing,\n            setValue: this.setValue,\n            addValue: this.addValue,\n            removeValue: this.removeValue,\n            removeValuesExcept: this.removeValuesExcept,\n            validate: this.validate,\n            isRequired: this.isRequired,\n        };\n        const {saveRequired, loading} = this.state;\n        const {\n            id, isNew, values, controlsMode, put: editable, delete: deletable, customButtons, dropdown, switchDropdown,\n            children, confirmationDialog\n        } = this.props;\n        return (\n            <>\n                {this.props.delete && confirmationDialog && (\n                    <ConfirmDialog id={'confirm-delete'}\n                                   message={`${this.props.delete.confirmMessage || `to ${this.props.delete.textButton?.toLowerCase() || 'delete'} ${values[id]}`}`}\n                                   confirmCallback={this.onClickDelete}/>)}\n                <form onSubmit={this.handleSubmit} noValidate>\n                    {(controlsMode === undefined || controlsMode === 'top') && (\n                        <div>\n                            <div className='controlsContainer noBorder'>\n                                {switchDropdown && (\n                                    <>\n                                        <button\n                                            className={`dropdown-trigger btn-floating btn-flat btn-small waves-effect waves-light right tooltipped`}\n                                            data-position=\"bottom\" data-tooltip={switchDropdown.title || 'Switch form'}\n                                            data-target={`switch-dropdown`}\n                                            type={'button'}\n                                            ref={this.dropdown}>\n                                            <i className=\"material-icons\">keyboard_arrow_down</i>\n                                        </button>\n                                        <ul id='switch-dropdown'\n                                            className={`dropdown-content ${styles.dropdown}`}>\n                                            <li className={`${styles.disabled}`}>\n                                                <a>\n                                                    {switchDropdown.title || 'Switch form'}\n                                                </a>\n                                            </li>\n                                            <PerfectScrollbar ref={(ref) => {\n                                                this.dropdownScrollbar = ref;\n                                            }}>\n                                                {switchDropdown.options.map((option, index) =>\n                                                    <li key={index} onClick={this.switchForm}>\n                                                        <a>\n                                                            {option}\n                                                        </a>\n                                                    </li>\n                                                )}\n                                            </PerfectScrollbar>\n                                        </ul>\n                                    </>\n                                )}\n                                {isNew && !loading\n                                    ?\n                                    <button\n                                        className={`${styles.controlButton} btn-flat btn-small waves-effect waves-light green-text left slide`}>\n                                        {this.props.post?.textButton || 'Save'}\n                                    </button>\n                                    :\n                                    <>\n                                        <div className={`${styles.controlButton}`}>\n                                            {!loading && customButtons?.map((button, index) => (\n                                                <div key={index} className={styles.customButton}>\n                                                    {button.confirm && (\n                                                        <ConfirmDialog key={button.confirm.id}\n                                                                       id={button.confirm.id}\n                                                                       message={button.confirm?.message}\n                                                                       confirmCallback={button.confirm?.onClickConfirm}/>)}\n                                                    {button.button}\n                                                </div>\n                                            ))}\n                                            {deletable !== undefined && !loading && (\n                                                <button\n                                                    className={`${confirmationDialog ? 'modal-trigger' : ''} btn-flat btn-small waves-effect waves-light red-text inline-button`}\n                                                    type=\"button\"\n                                                    data-target='confirm-delete'\n                                                    onClick={confirmationDialog ? undefined : this.onClickDelete}>\n                                                    {this.props.delete?.textButton || 'Delete'}\n                                                </button>)}\n                                            {!loading && (\n                                                <button\n                                                    className={`btn-flat btn-small waves-effect waves-light green-text slide inline-button`}\n                                                    /*style={saveRequired ? {transform: \"scale(1)\"} : {transform: \"scale(0)\"}}*/\n                                                    /*style={editable === undefined && !saveRequired ? {visibility: 'hidden'} : undefined}*/\n                                                    disabled={!saveRequired}>\n                                                    {(editable !== undefined && this.props.post?.textButton) || 'Save'}\n                                                </button>)}\n                                        </div>\n                                        {editable !== undefined && !loading && (\n                                            <button\n                                                className={`btn-floating btn-flat btn-small waves-effect waves-light right tooltipped inline-button`}\n                                                data-position=\"bottom\"\n                                                data-tooltip=\"Edit\"\n                                                type=\"button\"\n                                                onClick={this.onClickEdit}>\n                                                <i className=\"large material-icons\">edit</i>\n                                            </button>\n                                        )}\n                                    </>\n                                }\n                                {loading && (\n                                    <button\n                                        className={`${styles.controlButton} btn-flat btn-small waves-effect waves-light red-text right slide inline-button`}\n                                        type=\"button\"\n                                        onClick={this.cancelRequest}>\n                                        Cancel\n                                    </button>\n                                )}\n                                {dropdown && (\n                                    <>\n                                        <button\n                                            className={`dropdown-trigger btn-floating btn-flat btn-small waves-effect waves-light right tooltipped inline-button`}\n                                            data-position=\"bottom\" data-tooltip={dropdown.title}\n                                            data-target={`dropdown-${dropdown.id}`}\n                                            type=\"button\"\n                                            ref={this.dropdown}>\n                                            <i className=\"material-icons\">add</i>\n                                        </button>\n                                        <ul id={`dropdown-${dropdown.id}`}\n                                            className={`dropdown-content ${styles.dropdown}`}>\n                                            <li className={`${styles.disabled}`}>\n                                                <a className={`${!dropdown?.data.length ? styles.dropdownEmpty : ''}`}>\n                                                    {dropdown.data.length ? dropdown.title : dropdown.empty}\n                                                </a>\n                                            </li>\n                                            <PerfectScrollbar ref={(ref) => {\n                                                this.dropdownScrollbar = ref;\n                                            }}>\n                                                {dropdown.data.map((data, index) =>\n                                                    <li key={index} onClick={this.onAdd}>\n                                                        <a>\n                                                            {data}\n                                                        </a>\n                                                    </li>\n                                                )}\n                                            </PerfectScrollbar>\n                                        </ul>\n                                    </>\n                                )}\n                            </div>\n                            <ActionProgressBar loading={!!loading}/>\n                        </div>\n                    )}\n                    {controlsMode?.includes('modal') ?\n                        <ScrollBar ref={this.props.modal?.scrollbar}\n                                   component={'div'}\n                                   style={this.props.modal?.scrollMaxHeight\n                                       ? {maxHeight: Math.floor(this.props.modal?.scrollMaxHeight)}\n                                       : undefined}\n                                   options={{\n                                       useBothWheelAxes: false,\n                                       suppressScrollX: true\n                                   }}>\n                            <div\n                                className={`${React.Children.count(children) === 0 ? styles.emptyContent : styles.content}`}>\n                                <FormContext.Provider value={context}>\n                                    {children}\n                                </FormContext.Provider>\n                            </div>\n                        </ScrollBar>\n                        : <div\n                            className={`${React.Children.count(children) === 0 ? styles.emptyContent : styles.content}`}>\n                            <FormContext.Provider value={context}>\n                                {children}\n                            </FormContext.Provider>\n                        </div>\n                    }\n                    {(controlsMode === 'modal' || controlsMode === 'modal-fullscreen') && (\n                        <div\n                            className={`modal-footer dialog-footer ${controlsMode === 'modal-fullscreen' ? 'modal-footer-fullscreen' : ''}`}>\n                            <div>\n                                <button className={`waves-effect waves-light btn-flat red-text inline-button`}\n                                        type=\"button\"\n                                        onClick={this.clearValues}>\n                                    Clear\n                                </button>\n                                <button\n                                    className={`modal-close waves-effect waves-light btn-flat red-text inline-button`}\n                                    type=\"button\">\n                                    Cancel\n                                </button>\n                                <button className={`waves-effect waves-light btn-flat green-text inline-button`}\n                                        type=\"button\"\n                                        onClick={this.onModalConfirm}>\n                                    Confirm\n                                </button>\n                            </div>\n                        </div>\n                    )}\n                </form>\n            </>\n        )\n    }\n\n    private initDropdown = () =>\n        M.Dropdown.init(this.dropdown.current as Element,\n            {\n                onOpenEnd: this.onOpenDropdown\n            });\n\n    private onOpenDropdown = () =>\n        this.dropdownScrollbar?.updateScroll();\n\n    private saveRequired = () => {\n        return !isEqualWith(this.state.savedValues, this.state.values, (first, second) =>\n            ((typeof first === 'boolean' && typeof second === 'string' && first.toString() === second)\n                || (typeof first === 'string' && typeof second === 'boolean' && first === second.toString())\n                || (typeof first === 'number' && typeof second === 'string' && first.toString() === second)\n                || (typeof first === 'string' && typeof second === 'number' && first === second.toString())) || undefined);\n    };\n\n    private isRequired = (id: keyof IValues): boolean => {\n        const {fields} = this.props;\n        const field: FieldProps | undefined = fields[id];\n        const validation: IValidation | undefined = field!.validation;\n        return validation?.rule.name.includes('required') || false\n    }\n\n    private validate = (id: keyof IValues): string => {\n        const {fields} = this.props;\n        const field: FieldProps | undefined = fields[id];\n        const validation: IValidation | undefined = field!.validation;\n        const newError: string = validation ? validation.rule(this.state.values, id, validation.args) : \"\";\n        if (newError !== \"\") {\n            console.log(\"Validation of field \" + field.id + \": \" + newError);\n        }\n        this.setState({errors: {...this.state.errors, [id]: newError}});\n        return newError;\n    };\n\n    private validateForm(): boolean {\n        const errors: IErrors = {};\n        Object.entries(this.props.fields).forEach(([fieldName, field]) => {\n            const validateMessage = this.validate(fieldName);\n            if (field.hidden && validateMessage.length) {\n                super.toast(`<div class=\"red-text\">Validation failed:</div> ${validateMessage}`);\n            }\n            errors[fieldName] = validateMessage;\n        });\n        this.setState({errors});\n        return this.isValid(errors);\n    }\n\n    private isValid = (errors: IErrors) =>\n        Object.values(errors).every(error => !error);\n\n    private onClickEdit = (): void => {\n        this.setState(prevState => ({isEditing: !prevState.isEditing}));\n    };\n\n    private onClickDelete = (): void => {\n        if (this.props.delete) {\n            const args = this.state.values;\n            deleteData(this.props.delete.url,\n                () => {\n                    this.props.delete?.successCallback(args);\n                    if (this.mounted) {\n                        this.setState({loading: undefined});\n                    }\n                },\n                (reply) => {\n                    this.props.delete?.failureCallback(reply, args);\n                    if (this.mounted) {\n                        this.setState({loading: undefined});\n                    }\n                });\n            this.setState({loading: {method: 'delete', url: this.props.delete.url}, isEditing: false});\n        }\n    };\n\n    private handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n        const validate = this.validateForm();\n        const {isNew, post, put, saveEntities} = this.props;\n        const args = this.state.values;\n        let requestBody = {};\n        // replace trailing \\n\n        for (const key in args) {\n            requestBody = {\n                ...requestBody,\n                [key]: !args || typeof args[key] !== 'string' ? args[key] : args[key].replace(/\\n+$/, \"\")\n            }\n        }\n        if (isNew) {\n            if (post?.url) {\n                if (validate) {\n                    postData(post.url, requestBody,\n                        (reply) => {\n                            post.successCallback(reply, requestBody);\n                            if (this.mounted) {\n                                this.setState({savedValues: requestBody, loading: undefined});\n                            }\n                        },\n                        (reply) => {\n                            post.failureCallback(reply, requestBody);\n                            if (this.mounted) {\n                                this.setState({loading: undefined});\n                            }\n                        });\n                    this.setState({loading: {method: 'post', url: post.url}});\n                }\n            }\n        } else {\n            const saveRequired = this.saveRequired();\n            if (saveRequired) {\n                if (put?.url && validate) {\n                    putData(put.url, requestBody,\n                        (reply) => {\n                            put.successCallback(reply, requestBody);\n                            if (this.mounted) {\n                                this.setState({savedValues: requestBody, loading: undefined});\n                            }\n                        },\n                        (reason) => {\n                            put.failureCallback(reason, requestBody);\n                            if (this.mounted) {\n                                this.setState({loading: undefined});\n                            }\n                        });\n                    this.setState({loading: {method: 'put', url: put.url}});\n                }\n            } else {\n                saveEntities?.(requestBody);\n            }\n        }\n    };\n\n    private cancelRequest = () => {\n        const {loading} = this.state;\n        if (loading?.method && loading.url) {\n            getCancelRequest(loading.method, loading.url)?.cancel('Operation canceled by the user');\n            deleteCancelRequest(loading.method, loading.url);\n            this.setState({loading: undefined});\n        }\n    };\n\n    private setValue = (id: keyof IValues, value: IValues, validate?: boolean) => {\n        if (validate === undefined || validate) {\n            this.setState(state => ({values: {...state.values, [id]: value}}), () => this.validate(id as string));\n        } else {\n            this.setState(state => ({values: {...state.values, [id]: value}}));\n        }\n    };\n\n    private addValue = (id: keyof IValues, value: any) => {\n        this.setState(state => {\n            let values = state.values[id] ? [...state.values[id], value] : [value];\n            return {values: {...state.values, [id]: values}}\n        });\n    }\n\n    private removeValuesExcept = (id: keyof IValues, values?: any[]) => {\n        this.setState(state => {\n            let newValues: undefined | any[] = undefined;\n            if (values && Array.isArray(state.values[id])) {\n                newValues = state.values[id]?.filter((v: any) => values.includes(v))\n                if (!newValues?.length) {\n                    newValues = undefined;\n                }\n            }\n            return {values: {...state.values, [id]: newValues}};\n        });\n    }\n\n    private removeValue = (id: keyof IValues, value?: any) => {\n        this.setState(state => {\n            let values = undefined;\n            if (value && Array.isArray(state.values[id])) {\n                values = state.values[id]?.filter((v: any) => !isEqual(v, value));\n                if (!values.length) {\n                    values = undefined;\n                }\n            }\n            return {values: {...state.values, [id]: values}};\n        });\n    };\n\n    private onModalConfirm = (event: React.FormEvent<HTMLButtonElement>) => {\n        event.preventDefault();\n        if (!this.validateForm()) {\n            return;\n        }\n        this.props.modal?.onConfirm?.(this.state.values);\n        this.clearValues();\n    };\n\n    private clearValues = () =>\n        this.setState({values: this.props.values, errors: {}});\n\n    private onAdd = (event: React.MouseEvent<HTMLLIElement>): void => {\n        const data = decodeHTML((event.target as HTMLLIElement).innerHTML);\n        // @ts-ignore\n        this.setState({[data]: {value: data, isChecked: false, isNew: true}});\n    };\n\n    private switchForm = (e: React.FormEvent<HTMLLIElement>) => {\n        const selectedForm = decodeHTML((e.target as HTMLLIElement).innerHTML);\n        this.props.switchDropdown?.onSwitch(selectedForm);\n        this.clearValues();\n    };\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        confirmationDialog: state.ui.confirmationDialog,\n    }\n);\n\n\nexport default withRouter(connect(mapStateToProps, undefined)(Form));\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {Search} from \"history\";\n\nexport const isNew = (search: Search) => new URLSearchParams(search).get('new') !== null","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {Link} from \"react-router-dom\";\nimport React, {createRef} from \"react\";\nimport M from \"materialize-css\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {showSidenavByUser, showSidenavByWidth} from \"../../actions\";\nimport {ReduxState} from \"../../reducers\";\nimport ScrollBar from \"react-perfect-scrollbar\";\nimport {IComponent} from \"../../containers/Root.dev\";\n\ntype ILink = { link: string, name: string, sub?: ILink[] }\n\nconst sidenavManagementLinks: ILink[] = [\n    {link: '/apps', name: 'Apps'},\n    {link: '/services', name: 'Services'},\n    {link: '/containers', name: 'Containers'},\n    {\n        link: '/hosts', name: 'Hosts', sub: [\n            {link: '/cloud', name: 'Cloud instances'},\n            {link: '/edge', name: 'Edge hosts'}\n        ]\n    },\n    {link: '/nodes', name: 'Nodes'},\n    {link: '/regions', name: 'Regions'},\n    {\n        link: '/rules', name: 'Rules', sub: [\n            {link: '/conditions', name: 'Conditions'},\n            {link: '/hosts', name: 'Host rules'},\n            {link: '/apps', name: 'App rules'},\n            {link: '/services', name: 'Service rules'},\n            {link: '/containers', name: 'Container rules'},\n        ]\n    },\n    {\n        link: '/simulated-metrics', name: 'Simulated metrics', sub: [\n            {link: '/hosts', name: 'Host metrics'},\n            {link: '/apps', name: 'App metrics'},\n            {link: '/services', name: 'Service metrics'},\n            {link: '/containers', name: 'Container metrics'}\n        ]\n    },\n    {link: '/load-balancers', name: 'Load balancers'},\n    {link: '/registration-servers', name: 'Registration servers'},\n    {link: '/worker-managers', name: 'Worker managers'},\n    {link: '/ssh', name: 'Ssh'},\n    {link: '/settings', name: 'Settings'},\n    {link: '/logs', name: 'Logs'},\n];\n\nconst sidenavMonitoringLinks: ILink[] = [\n    {link: '/settings', name: 'Settings'},\n];\n\nconst sidenavDataManagementLinks: ILink[] = [\n    {link: '/settings', name: 'Settings'},\n];\n\ninterface StateToProps {\n    sidenav: { user: boolean, width: boolean },\n    component: IComponent,\n}\n\ninterface DispatchToProps {\n    showSidenavByUser: (value: boolean) => void;\n    showSidenavByWidth: (value: boolean) => void;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass Sidenav extends React.Component<Props, {}> {\n\n    private sidenav = createRef<HTMLUListElement>();\n    private scrollbar: (ScrollBar | null) = null;\n\n    public componentDidMount(): void {\n        window.addEventListener('resize', this.handleResize);\n        M.Sidenav.init(this.sidenav.current as Element);\n        this.scrollbar?.updateScroll();\n        this.handleResize();\n        this.blockBodyScroll();\n    };\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<{}>, snapshot?: any): void {\n        this.scrollbar?.updateScroll();\n        if (prevProps.sidenav.user != this.props.sidenav.user && !this.props.sidenav.user) {\n            M.Sidenav.getInstance(this.sidenav.current as Element).close();\n        }\n    }\n\n    public componentWillUnmount(): void {\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    public render() {\n        let links = (function (component) {\n            switch (component) {\n                case \"Management\":\n                    return sidenavManagementLinks;\n                case \"Monitoring\":\n                    return sidenavMonitoringLinks;\n                case \"Data\":\n                    return sidenavDataManagementLinks;\n            }\n        })(this.props.component);\n        return (\n            <ul id='slide-out' className='sidenav sidenav-fixed no-shadows'\n                style={this.props.sidenav.user ? {width: 200, transition: 'width .25s'} : {\n                    width: 0,\n                    transition: 'width .25s'\n                }} ref={this.sidenav}>\n                <div className='sidenav-menu'>\n                    <a\n                        className='sidenav-icon sidenav-trigger transparent btn-floating btn-flat btn-small waves-effect waves-light'\n                        data-target='slide-out'\n                        onClick={this.handleSidenav}>\n                        <i className='material-icons'>menu</i>\n                    </a>\n                </div>\n                <ScrollBar ref={(ref) => this.scrollbar = ref}\n                           component='div'>\n                    {links.map((link, index) =>\n                        <div key={index}>\n                            <li>\n                                <Link className='white-text' to={link.link} onClick={this.closeSlideSidenav}>\n                                    <span style={{whiteSpace: 'nowrap'}}>{link.name}</span>\n                                </Link>\n                            </li>\n                            {link.sub && link.sub.map((sublink, index) =>\n                                <div key={index}>\n                                    {<li>\n                                        <div className='divider grey darken-4'/>\n                                    </li>}\n                                    <li>\n                                        <Link className='white-text sub-link' to={`${link.link}${sublink.link}`}\n                                              onClick={this.closeSlideSidenav}>\n                                            <span style={{whiteSpace: 'nowrap'}}>{sublink.name}</span>\n                                        </Link>\n                                    </li>\n                                </div>\n                            )}\n                            {index < sidenavManagementLinks.length - 1 && <li>\n                                <div className='divider grey darken-3'/>\n                            </li>}\n                        </div>\n                    )}\n                </ScrollBar>\n            </ul>\n        )\n    }\n\n    private blockBodyScroll = () => {\n        this.sidenav.current?.addEventListener('wheel', event => event.preventDefault())\n    };\n\n    private shouldShowSidenav = () =>\n        window.innerWidth > 992;\n\n    private handleResize = () => {\n        let show = this.shouldShowSidenav();\n        const {width} = this.props.sidenav;\n        if (show !== width) {\n            this.props.showSidenavByWidth(show);\n        }\n        let sidenav = M.Sidenav.getInstance(this.sidenav.current as Element);\n        let {isOpen} = sidenav;\n        if (isOpen && !width && window.innerWidth > 992) {\n            sidenav.close();\n        }\n        this.scrollbar?.updateScroll();\n    };\n\n    private handleSidenav = () => {\n        let sidenav = M.Sidenav.getInstance(this.sidenav.current as Element);\n        let {isOpen} = sidenav;\n        this.props.showSidenavByUser(!isOpen);\n    };\n\n    private closeSlideSidenav = () => {\n        let sidenav = M.Sidenav.getInstance(this.sidenav.current as Element);\n        const {width} = this.props.sidenav;\n        if (!width) {\n            sidenav.close();\n        }\n    };\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        sidenav: state.ui.sidenav,\n        component: state.ui.component\n    }\n);\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({showSidenavByUser, showSidenavByWidth}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidenav);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport {Link, RouteComponentProps, withRouter} from \"react-router-dom\";\nimport styles from './Breadcrumbs.module.css';\nimport {\n    dataManagementAuthenticatedRoutes,\n    IComponent,\n    managementAuthenticatedRoutes,\n    monitoringAuthenticatedRoutes\n} from \"../../containers/Root.dev\";\nimport {camelCaseToSentenceCase, capitalize, snakeCaseToCamelCase} from \"../../utils/text\";\nimport {ReduxState} from \"../../reducers\";\nimport {connect} from \"react-redux\";\n\nexport type IBreadcrumb = { title: string, link?: string };\n\nexport type IBreadcrumbs = IBreadcrumb[];\n\ninterface State {\n    breadcrumbs: IBreadcrumbs;\n}\n\ninterface StateToProps {\n    component: IComponent,\n}\n\ntype Props = RouteComponentProps & StateToProps;\n\nclass Breadcrumbs extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            breadcrumbs: this.breadcrumbs(this.props)\n        };\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (prevProps.match !== this.props.match) {\n            this.setState({breadcrumbs: this.breadcrumbs(this.props)});\n        }\n    }\n\n    public render() {\n        return (\n            <div className={`${styles.container}`}>\n                {this.state.breadcrumbs.map(({title, link}, index) =>\n                    link && index !== this.state.breadcrumbs.length - 1\n                        ? <Link key={index} className={`breadcrumb ${styles.breadcrumb} white-text`}\n                                to={link}>{title}</Link>\n                        : <span key={index} className={`breadcrumb ${styles.breadcrumb} white-text`}>{title}</span>\n                )}\n            </div>\n        )\n    }\n\n    private breadcrumbs = (props: Props): IBreadcrumbs => {\n        let routes = (function (component) {\n            switch (component) {\n                case \"Management\":\n                    return managementAuthenticatedRoutes;\n                case \"Monitoring\":\n                    return monitoringAuthenticatedRoutes;\n                case \"Data\":\n                    return dataManagementAuthenticatedRoutes;\n            }\n        })(this.props.component);\n        let path = (props.location && props.location.pathname) || '';\n        // remove the extra '/' at the end\n        if (path !== '/' && path.endsWith('/')) {\n            path = path.substr(0, path.length - 1);\n        }\n        let links = [];\n        while (path) {\n            links.push(path);\n            path = path.substring(0, path.lastIndexOf('/'))\n        }\n        links = links.reverse();\n        return links.map(link => {\n            let path = link;\n            let url = props.match.url;\n            if (url.endsWith('/')) {\n                url = url.substr(0, url.length - 1);\n            }\n            if (path === url) {\n                path = path.replace(path, props.match.path);\n            }\n            if (path.indexOf('#') !== -1) {\n                path = path.substring(0, path.indexOf('#'));\n            }\n            if (path.startsWith('//')) {\n                path = path.substring(1);\n            }\n            let title = routes && routes[path] && routes[path].title;\n            if (!title) {\n                title = capitalize(link.substring(link.lastIndexOf('/') + 1));\n                if (title.indexOf('#') !== -1) {\n                    title = title.substring(0, title.indexOf('#'));\n                }\n            }\n            let formattedTitle = snakeCaseToCamelCase(title);\n            if (formattedTitle !== title) {\n                formattedTitle = camelCaseToSentenceCase(formattedTitle);\n            }\n            formattedTitle = capitalize(formattedTitle);\n            return {\n                title: formattedTitle,\n                link,\n            }\n        });\n    };\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        component: state.ui.component\n    }\n);\n\nexport default withRouter(connect(mapStateToProps, undefined)(Breadcrumbs));\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport Sidenav from \"../sidenav/Sidenav\";\nimport {ReduxState} from \"../../reducers\";\nimport {connect} from \"react-redux\";\nimport Breadcrumbs from \"../../components/breadcrumbs/Breadcrumbs\";\nimport M from \"materialize-css\";\nimport {RouteComponentProps, withRouter} from \"react-router\";\nimport {bindActionCreators} from \"redux\";\nimport {updateSearch} from \"../../actions\";\n\ninterface StateToProps {\n    sidenavVisible: boolean;\n}\n\ninterface DispatchToProps {\n    updateSearch: (search: string) => void;\n}\n\ninterface IMainLayout {\n    children?: React.ReactNode;\n}\n\ntype Props = IMainLayout & StateToProps & DispatchToProps & RouteComponentProps;\n\nclass MainLayout extends React.Component<Props, {}> {\n\n    public componentDidMount(): void {\n        M.AutoInit();\n        this.props.updateSearch('');\n    }\n\n    public render() {\n        const paddingLeft = this.props.sidenavVisible ? 200 : 0;\n\n        return (\n            <div>\n                <Sidenav/>\n                <div className=\"section content\" style={{paddingLeft, transition: 'padding-left .25s'}}>\n                    <div className=\"row col s12\">\n                        {/* @ts-ignore*/}\n                        <Breadcrumbs/>\n                    </div>\n                    <div className='row col s12 m12'>\n                        {this.props.children}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        sidenavVisible: state.ui.sidenav.user && state.ui.sidenav.width,\n    }\n);\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({updateSearch}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MainLayout));\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport styles from './CardItem.module.css';\n\ninterface CardItemProps {\n    label?: string;\n    value: string;\n}\n\nconst CardItem: React.FC<CardItemProps> = ({label, value}) =>\n    label\n        ? <div className={`${styles.cardItem}`}>\n            {label} <p className={`${styles.cardValue}`}>{value}</p>\n        </div>\n        : <p className={`${styles.cardValue}`}>{value}</p>\n\nexport default CardItem;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React, {useCallback, useEffect, useState} from 'react';\n\ninterface UseLongPressProps {\n    callback?: () => void;\n    ms: number;\n}\n\nconst UseLongPress: React.FC<UseLongPressProps> = ({\n                                                       children, callback = () => {\n    }, ms = 300\n                                                   }) => {\n    const [startLongPress, setStartLongPress] = useState(false);\n\n    useEffect(() => {\n        let timerId: NodeJS.Timeout;\n        if (startLongPress) {\n            timerId = setTimeout(callback, ms);\n        }\n\n        return () => {\n            clearTimeout(timerId);\n        };\n    }, [callback, ms, startLongPress]);\n\n    const start = useCallback(() => {\n        setStartLongPress(true);\n    }, []);\n    const stop = useCallback(() => {\n        setStartLongPress(false);\n    }, []);\n\n    return (\n        <div onMouseDown={start}\n             onMouseUp={stop}\n             onMouseLeave={stop}\n             onTouchStart={start}\n             onTouchEnd={stop}>\n            {children}\n        </div>\n    );\n\n};\n\nexport default UseLongPress;\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport styles from './ListItem.module.css';\nimport {Link} from \"react-router-dom\";\nimport UseLongPress from \"./UseLongPress\";\n\ninterface ListItemProps<T> {\n    link?: { pathname: string, state: any };\n    separate?: boolean | { color: string };\n    longPressCallback?: () => void;\n}\n\nexport default class ListItem<T> extends React.Component<ListItemProps<T>, {}> {\n\n    public render() {\n        const {link, longPressCallback} = this.props;\n        const separatorColor = this.getSeparatorColor();\n        return (\n            link\n                ? <Link to={{pathname: link.pathname, state: link.state}}>\n                    <div id='listItem' className={`${styles.item}`}\n                         style={separatorColor ? {borderBottom: `1px solid ${separatorColor}`} : undefined}>\n                        {this.props.children}\n                    </div>\n                </Link>\n                : <UseLongPress callback={longPressCallback && longPressCallback} ms={500}>\n                    <div id='listItem' className={`${styles.item} white-text`}\n                         style={separatorColor ? {borderBottom: `1px solid ${separatorColor}`} : undefined}>\n                        {this.props.children}\n                    </div>\n                </UseLongPress>\n        );\n    }\n\n    private getSeparatorColor = (): string | undefined => {\n        const {separate} = this.props;\n        if (typeof separate === 'boolean' && separate) {\n            return \"black\";\n        } else if (typeof separate === 'object') {\n            return separate.color ? separate.color : \"black\";\n        }\n    };\n}\n\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {MenuItem} from \"react-contextmenu\";\nimport {Link} from \"react-router-dom\";\nimport React from \"react\";\n\ninterface Props<T> {\n    option: string;\n    pathname: string;\n    selected?: string;\n    state: T;\n}\n\nconst LinkedContextMenuItem = <T extends object>({option, pathname, state, selected}: Props<T>) => (\n    <Link to={{pathname: pathname, state: {data: state, selected}}}>\n        <MenuItem data={state}>\n            {option}\n        </MenuItem>\n    </Link>\n);\n\nexport default LinkedContextMenuItem;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport axios, {AxiosError, AxiosRequestConfig, AxiosResponse, CancelTokenSource, Method} from \"axios\";\nimport {isAuthenticated} from \"./auth\";\nimport {camelCaseToSentenceCase, snakeCaseToCamelCase} from \"./text\";\n\nexport interface IReply<T> extends AxiosResponse<T> {\n\n}\n\nexport const API_URL = 'http://localhost:8080/api';\nexport const REQUEST_TIMEOUT = 600000;\nconst CancelToken = axios.CancelToken;\nexport const cancelRequests: { [key: string]: CancelTokenSource } = {};\n\nexport function postData<T>(url: string, requestBody: any,\n                            successCallback: (response: IReply<T>) => void, failureCallback: (reason: string) => void): void {\n    sendData(url, 'POST', requestBody, successCallback, failureCallback);\n}\n\nexport function putData<T>(url: string, requestBody: any,\n                           successCallback: (response: any) => void, failureCallback: (reason: string) => void): void {\n    sendData<T>(url, 'PUT', requestBody, successCallback, failureCallback);\n}\n\nexport function patchData<T>(url: string, requestBody: any,\n                             successCallback: (response: IReply<T>) => void, failureCallback: (reason: string) => void,\n                             action?: \"post\" | \"delete\",): void {\n    if (action) {\n        requestBody = {request: action.toUpperCase(), body: requestBody};\n    }\n    sendData<T>(url, 'PATCH', requestBody, successCallback, failureCallback);\n}\n\nfunction sendData<T>(endpoint: string, method: Method, data: any,\n                     successCallback: (response: IReply<T>) => void, failureCallback: (reason: string) => void) {\n    const url = new URL(endpoint.includes(API_URL) ? endpoint : `${API_URL}/${endpoint}`);\n    console.log(`${method} ${url} ${JSON.stringify(data)}`);\n    axios(url.href, {\n        method,\n        headers: {\n            //TODO remove headers\n            'Authorization': 'Basic YWRtaW46YWRtaW4=',\n            'Content-type': 'application/json;charset=UTF-8',\n            'Accept': 'application/json;charset=UTF-8',\n        },\n        data,\n        //TODO remove\n        timeout: REQUEST_TIMEOUT,\n        //TODO remove\n        cancelToken: setCancelRequest(method, url.pathname).token\n    }).then((response: AxiosResponse) => {\n        deleteCancelRequest(method, url.pathname);\n        console.log(response);\n        successCallback(response)\n    }).catch((error: AxiosError) => {\n        deleteCancelRequest(method, url.pathname);\n        if (axios.isCancel(error)) {\n            console.log(error.message || 'Request canceled');\n        } else {\n            const reason = buildErrorMessage(error);\n            console.error(reason);\n            failureCallback(reason);\n        }\n    })\n}\n\nexport function deleteData(endpoint: string,\n                           successCallback: () => void,\n                           failureCallback: (reason: string, data: any) => void,\n                           data?: any): void {\n    const url = new URL(endpoint.includes(API_URL) ? endpoint : `${API_URL}/${endpoint}`);\n    console.log(`DELETE ${url}`);\n    axios.delete(url.href, {\n        // TODO set options from setupAxiosInterceptors instead, after login\n        headers: {\n            'Authorization': 'Basic YWRtaW46YWRtaW4=', //TODO remove\n            'Content-type': 'application/json;charset=UTF-8',\n            'Accept': 'application/json;charset=UTF-8',\n        },\n        data,\n        timeout: REQUEST_TIMEOUT,\n        cancelToken: setCancelRequest('delete', url.pathname).token\n    }).then((response: AxiosResponse) => {\n        deleteCancelRequest('delete', url.pathname);\n        console.log(response);\n        successCallback();\n    }).catch((error: AxiosError) => {\n        deleteCancelRequest('delete', url.pathname);\n        if (axios.isCancel(error)) {\n            console.log(error.message || 'Request canceled');\n        } else {\n            const reason = buildErrorMessage(error);\n            console.error(reason);\n            failureCallback(reason, data);\n        }\n    })\n}\n\nfunction buildErrorMessage(error: AxiosError): string {\n    let responseMessage = error.response?.data.apierror?.message;\n    if (!responseMessage) {\n        return error.message;\n    }\n    const responseStatusCode = error.response?.status;\n    const responseStatusMessage = camelCaseToSentenceCase(snakeCaseToCamelCase(error.response?.data.apierror.status.toLowerCase()));\n    return `${responseStatusCode} ${responseStatusMessage} - ${responseMessage}`;\n}\n\nconst buildCancelRequest = (method: Method, url: string) =>\n    `${method}:${url.startsWith('/') ? url : '/' + url}`.toLowerCase();\n\nexport const setCancelRequest = (method: Method, url: string): CancelTokenSource => {\n    return cancelRequests[buildCancelRequest(method, url)] = CancelToken.source();\n};\n\nexport const getCancelRequest = (method: Method, url: string): CancelTokenSource | undefined =>\n    cancelRequests[buildCancelRequest(method, url)];\n\nexport const deleteCancelRequest = (method: Method, url: string): boolean =>\n    delete cancelRequests[buildCancelRequest(method, url)];\n\nexport const setupAxiosInterceptors = (token: string): void => {\n    axios.interceptors.request.use(\n        (config: AxiosRequestConfig) => {\n            if (isAuthenticated()) {\n                config.headers['Authorization'] = token;\n            }\n            config.headers['Content-Type'] = 'application/json;charset=UTF-8';\n            config.headers['Accept'] = 'application/json;charset=UTF-8';\n            config.timeout = REQUEST_TIMEOUT;\n            if (config.method && config.url) {\n                config.cancelToken = setCancelRequest(config.method, config.url).token;\n            }\n            return config\n        }\n    )\n};\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../BaseComponent\";\nimport React, {createRef} from \"react\";\nimport M, {ModalOptions} from \"materialize-css\";\nimport Form, {IFields, IValues} from \"../form/Form\";\nimport ScrollBar from \"react-perfect-scrollbar\";\n\ninterface InputDialogProps {\n    id: string;\n    title?: string;\n    fields: IFields;\n    values: IValues;\n    position?: string;\n    confirmCallback: (input: any) => void;\n    fullscreen?: boolean;\n    scrollbar?: React.RefObject<ScrollBar>;\n}\n\ntype Props = InputDialogProps;\n\ninterface State {\n    fullscreen: boolean;\n    scrollMaxHeight: number;\n}\n\nexport default class InputDialog extends BaseComponent<Props, State> {\n\n    private modal = createRef<HTMLDivElement>();\n    private scrollbar = this.props.scrollbar || createRef<ScrollBar>();\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            fullscreen: props.fullscreen || false,\n            scrollMaxHeight: this.calcDialogScrollMaxHeight(props.fullscreen || false)\n        }\n    }\n\n    public componentDidMount(): void {\n        this.initModal(this.props.position, this.state.fullscreen);\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        let modal = M.Modal.getInstance(this.modal.current as Element);\n        if (prevState.fullscreen !== this.state.fullscreen\n            || prevState.scrollMaxHeight !== this.state.scrollMaxHeight) {\n            modal.options.inDuration = 0;\n            modal.options.outDuration = 0;\n            modal.options.onOpenEnd = this.onOpenModal;\n            modal.options.onCloseStart = this.onCloseModal;\n        }\n        this.scrollbar?.current?.updateScroll();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    public render() {\n        const {id, title, fields, values, children} = this.props;\n        const {fullscreen} = this.state;\n        return (\n            <div id={id} className={`modal dialog ${fullscreen ? 'modal-fullscreen' : ''}`} ref={this.modal}>\n                <div className=\"modal-content\">\n                    {title && (\n                        <>\n                            <div className='modal-title'>\n                                {title}\n                                {!fullscreen && (\n                                    <button className='btn-floating btn-flat right'\n                                            onClick={this.toggleFullScreen}>\n                                        <i className=\"material-icons\">fullscreen</i>\n                                    </button>\n                                )}\n                                {fullscreen && (\n                                    <>\n                                        <button className='modal-close btn-floating btn-flat right'>\n                                            <i className=\"material-icons\">close</i>\n                                        </button>\n                                        <button className='btn-floating btn-flat right'\n                                                onClick={this.toggleFullScreen}>\n                                            <i className=\"material-icons\">fullscreen_exit</i>\n                                        </button>\n                                    </>\n                                )}\n                            </div>\n                        </>\n                    )}\n                    {/*@ts-ignore*/}\n                    <Form id='inputDialog'\n                          fields={fields}\n                          values={values}\n                          controlsMode={fullscreen ? 'modal-fullscreen' : 'modal'}\n                          isNew\n                          modal={{\n                              onConfirm: this.confirmCallback,\n                              scrollbar: this.scrollbar,\n                              scrollMaxHeight: this.state.scrollMaxHeight\n                          }}>\n                        {children}\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n\n    private initModal = (position?: string, fullScreen?: boolean) => {\n        let options: Partial<ModalOptions> = {\n            onOpenEnd: this.onOpenModal,\n            onCloseStart: this.onCloseModal,\n        };\n        if (position) {\n            options.startingTop = position;\n            options.endingTop = position;\n        }\n        if (fullScreen) {\n            options.startingTop = '0%';\n            options.endingTop = '0%';\n        }\n        M.Modal.init(this.modal.current as Element, options);\n    }\n\n    private calcDialogScrollMaxHeight = (fullscreen: boolean) =>\n        fullscreen\n            //116px because of 58px title and 58px footer\n            ? document.body.clientHeight - 116\n            : document.body.clientHeight * 0.7 - 116\n\n    private handleResize = () => {\n        this.setState({\n            scrollMaxHeight: this.calcDialogScrollMaxHeight(this.state.fullscreen)\n        })\n        this.scrollbar?.current?.updateScroll();\n    }\n\n    private onOpenModal = (): void => {\n        M.updateTextFields();\n        this.scrollbar.current?.updateScroll();\n    };\n\n    private onCloseModal = (): void => {\n        let modal = M.Modal.getInstance(this.modal.current as Element);\n        modal.options.inDuration = 250;\n        modal.options.outDuration = 250;\n    }\n\n    private confirmCallback = (values: IValues): void => {\n        let modal = M.Modal.getInstance(this.modal.current as Element);\n        modal.close();\n        this.props.confirmCallback(values);\n    };\n\n    private toggleFullScreen = () => {\n        this.setState({fullscreen: !this.state.fullscreen}, () => this.handleResize());\n    }\n\n}","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React, {createRef} from \"react\";\nimport M from \"materialize-css\";\nimport List from \"./List\";\nimport styles from \"./ControlledList.module.css\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport ScrollBar from \"react-perfect-scrollbar\";\nimport BaseComponent from \"../BaseComponent\";\nimport {deleteData} from \"../../utils/api\";\nimport {decodeHTML} from \"../../utils/text\";\nimport InputDialog from \"../dialogs/InputDialog\";\nimport {IFormModal, IValues, RestOperation} from \"../form/Form\";\n\ninterface IDropdown {\n    id: string,\n    title: string,\n    empty: string,\n    data: string[],\n    onSelect?: (selected: any) => void,\n    formModal?: IFormModal\n}\n\ninterface ControlledListProps<T> {\n    dataKey: string[],\n    isLoading?: boolean;\n    error?: string | null;\n    emptyMessage?: string;\n    data?: T[];\n    dropdown?: IDropdown;\n    formModal?: IFormModal;\n    show: (index: number, element: T, separate: boolean, checked: boolean,\n           handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void) => JSX.Element;\n    onAdd?: (data: string) => void;\n    onAddInput?: (input: IValues) => void;\n    onRemove?: (data: string[]) => void;\n    onDelete?: RestOperation;\n    removeButtonText?: string;\n    entitySaved?: boolean;\n    sort?: (a: T, b: T) => number;\n    invalidate?: (key: string) => string | undefined;\n}\n\ntype Props<T> = ControlledListProps<T>;\n\ntype DataState<T> = { value: T, isChecked: boolean, isNew: boolean } | undefined;\n\ninterface State<T> {\n    [key: string]: DataState<T>;\n}\n\nexport default class ControlledList<T> extends BaseComponent<Props<T>, State<T>> {\n\n    static defaultProps = {\n        dataKey: []\n    }\n    state: State<T> = {};\n    private globalCheckbox = createRef<HTMLInputElement>();\n    private dropdown = createRef<HTMLButtonElement>();\n    private scrollbar: (ScrollBar | null) = null;\n    private selected?: string;\n\n    public componentDidMount(): void {\n        this.initDropdown();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props<T>>, prevState: Readonly<State<T>>, snapshot?: any): void {\n        if (this.globalCheckbox.current) {\n            this.globalCheckbox.current.checked = Object.values(this.state)\n                .map(data => !data || data.isChecked)\n                .every(checked => checked);\n        }\n        if (prevProps.data !== this.props.data) {\n            const previousData = prevProps.data?.map(this.getDataStateKey) || [];\n            this.invalidateStateData(previousData);\n            this.setState((this.props.data || []).reduce((state: State<T>, data) => {\n                const dataStateKey = this.getDataStateKey(data);\n                state[dataStateKey] = {value: data, isChecked: false, isNew: false};\n                return state;\n            }, {}));\n        }\n        if (prevProps.entitySaved !== this.props.entitySaved) {\n            this.setState(Object.values(this.state).reduce((state: State<T>, data) => {\n                if (data) {\n                    const dataStateKey = this.getDataStateKey(data.value);\n                    state[dataStateKey] = {value: data.value, isChecked: false, isNew: false};\n                }\n                return state;\n            }, {}));\n        }\n        this.initDropdown();\n    }\n\n    public render() {\n        const {isLoading, error, emptyMessage, dropdown, formModal, sort, removeButtonText} = this.props;\n        // @ts-ignore\n        let data: T[] = Object.values(this.state).filter(data => data).map(data => data.value);\n        if (sort) {\n            data = data.sort(sort);\n        }\n        const DataList = List<T>();\n        return (\n            <div>\n                <div className='controlsContainer'>\n                    {!error && data.length > 0 && (\n                        <p className={`${styles.noLabelCheckbox}`}>\n                            <label>\n                                <input type=\"checkbox\"\n                                       onChange={this.handleGlobalCheckbox}\n                                       ref={this.globalCheckbox}/>\n                                <span/>\n                            </label>\n                        </p>\n                    )}\n                    {!error && dropdown && (\n                        <>\n                            <button\n                                className={`dropdown-trigger btn-floating btn-flat btn-small waves-effect waves-light right tooltipped ${styles.formButton}`}\n                                data-position=\"bottom\" data-tooltip={dropdown.title}\n                                data-target={`dropdown-${dropdown.id}`}\n                                ref={this.dropdown}>\n                                <i className=\"material-icons\">add</i>\n                            </button>\n                            <ul id={`dropdown-${dropdown.id}`}\n                                className={`dropdown-content ${styles.dropdown}`}>\n                                <li className={`${styles.disabled}`}>\n                                    <a className={`${!dropdown?.data.length ? 'dropdown-empty' : ''}`}>\n                                        {dropdown.data.length ? dropdown.title : dropdown.empty}\n                                    </a>\n                                </li>\n                                <PerfectScrollbar ref={(ref) => {\n                                    this.scrollbar = ref;\n                                }}>\n                                    {dropdown.data.map((data, index) =>\n                                        <li key={index} onClick={!dropdown?.formModal ? this.onAdd : this.setSelected}>\n                                            <a className={dropdown?.formModal ? 'modal-trigger' : ''}\n                                               data-target={dropdown.formModal?.id}>\n                                                {data}\n                                            </a>\n                                        </li>\n                                    )}\n                                </PerfectScrollbar>\n                            </ul>\n                            {dropdown?.formModal && this.inputDialog(dropdown?.formModal, true)}\n                        </>\n                    )}\n                    {(!error && formModal &&\n                        <>\n                            <button\n                                className={`modal-trigger btn-floating btn-flat btn-small waves-effect waves-light right tooltipped ${styles.button}`}\n                                data-position=\"bottom\" data-tooltip={formModal.title}\n                                data-target={formModal.id}>\n                                <i className=\"material-icons\">add</i>\n                            </button>\n                            {this.inputDialog(formModal)}\n                        </>\n                    )}\n                    <button className={`btn-flat btn-small waves-effect waves-light red-text right ${styles.button}`}\n                        /*style={!error && Object.values(this.state)\n                            .map(item => item?.isChecked || false)\n                            .some(checked => checked)\n                            ? {transform: \"scale(1)\"}\n                            : {transform: \"scale(0)\"}}*/\n                            disabled={!!error || Object.values(this.state)\n                                .map(item => item?.isChecked || false)\n                                .every(checked => !checked)}\n                            onClick={this.onRemove}>\n                        {removeButtonText || 'Remove'}\n                    </button>\n                </div>\n                <DataList\n                    isLoading={isLoading}\n                    error={error}\n                    emptyMessage={emptyMessage}\n                    list={data}\n                    show={this.show}/>\n            </div>\n        )\n    }\n\n    private initDropdown = () =>\n        M.Dropdown.init(this.dropdown.current as Element,\n            {\n                onOpenEnd: this.onOpenDropdown\n            });\n\n    private onOpenDropdown = () =>\n        this.scrollbar?.updateScroll();\n\n    private handleGlobalCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const {checked} = event.target;\n        this.setState(state =>\n            Object.entries(state).filter(([_, data]) => data).reduce((newState: State<T>, [data, dataState]) => {\n                if (dataState) {\n                    newState[data] = {value: dataState.value, isChecked: checked, isNew: dataState.isNew};\n                }\n                return newState;\n            }, {}));\n    };\n\n    private handleCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const {id: data, checked} = event.target;\n        if (this.state[data]) {\n            this.setState(state => ({\n                [data]: {\n                    // @ts-ignore\n                    value: state[data].value,\n                    isChecked: checked,\n                    // @ts-ignore\n                    isNew: state[data].isNew\n                }\n            }));\n        }\n    };\n\n    private getDataStateKey = (data: T): string => {\n        if (typeof data === 'string') {\n            return data;\n        }\n        const key = this.props.dataKey;\n        // @ts-ignore\n        let stateKey = data[key[0]];\n        for (let i = 1; i < key.length; i++) {\n            // @ts-ignore\n            let currentKey = key[i];\n            if (!stateKey[currentKey]) {\n                return stateKey;\n            }\n            stateKey = stateKey[currentKey];\n        }\n        return stateKey;\n    };\n\n    private getDataState = (data: T): DataState<T> => {\n        const dataKey = this.getDataStateKey(data);\n        return this.state[dataKey];\n    };\n\n    private show = (data: T, index: number): JSX.Element => {\n        const separate = index !== Object.entries(this.state).filter(([_, data]) => data).length - 1;\n        const checked = this.getDataState(data)?.isChecked || false;\n        return this.props.show(index, data, separate, checked, this.handleCheckbox)\n    };\n\n    private onAdd = (event: React.MouseEvent<HTMLLIElement>): void => {\n        const data = decodeHTML((event.target as HTMLLIElement).innerHTML);\n        // @ts-ignore\n        this.setState({[data]: {value: data, isChecked: false, isNew: true}});\n        this.props.onAdd?.(data);\n    };\n\n    private onAddDropdownModalInput = (input: any): void => {\n        if (this.selected) {\n            let selectedProperty;\n            for (let i = this.props.dataKey.length - 1; i >= 0; i--) {\n                selectedProperty = {[this.props.dataKey[i]]: selectedProperty ? selectedProperty : this.selected};\n            }\n            input = {...selectedProperty, ...input};\n            const key = this.getDataStateKey(input);\n            this.setState({[key]: {value: input, isChecked: false, isNew: true}});\n            this.props.onAddInput?.(input);\n        }\n    };\n\n    private onAddFormModalInput = (input: any): void => {\n        const key = this.getDataStateKey(input);\n        if (Object.keys(this.state).includes(key)) {\n            return super.toast(`Unable to add ${key}`, 10000, 'already exists');\n        }\n        this.setState({[key]: {value: input, isChecked: false, isNew: true}});\n        this.props.onAddInput?.(input);\n    };\n\n    private onRemove = (): void => {\n        if (!this.props.onDelete) {\n            return console.error('onDelete not defined');\n        }\n        const checkedData = Object.entries(this.state).filter(([_, data]) => data?.isChecked);\n        const unpersistedData = checkedData.filter(([_, data]) => data?.isNew).map(([name, _]) => name);\n        if (unpersistedData.length) {\n            this.invalidateStateData(unpersistedData);\n            this.props.onRemove?.(unpersistedData);\n        }\n        const persistedData = checkedData.filter(([_, data]) => !data?.isNew).map(([name, _]) => name);\n        if (persistedData.length) {\n            const {url} = this.props.onDelete;\n            if (persistedData.length === 1) {\n                deleteData(`${url}/${persistedData[0]}`, () => this.onDeleteSuccess(persistedData), this.onDeleteFailure);\n            } else {\n                deleteData(url, () => this.onDeleteSuccess(persistedData), this.onDeleteFailure, persistedData);\n            }\n        }\n    };\n\n    private onDeleteSuccess = (data: string[]): void => {\n        this.invalidateStateData(data);\n        this.props.onDelete?.successCallback(data);\n    };\n\n    private invalidateStateData = (data: string[]): void => {\n        this.setState(data.reduce((state: State<T>, data: string) => {\n            state[data] = undefined;\n            const key = this.props.invalidate?.(data);\n            if (key) {\n                state[key] = undefined\n            }\n            return state;\n        }, {}));\n    }\n\n\n    private onDeleteFailure = (reason: string, args: any): void =>\n        this.props.onDelete?.failureCallback(reason, args);\n\n    private inputDialog = (formModal: IFormModal, preSelected?: boolean): JSX.Element => {\n        return <InputDialog id={formModal.id}\n                            title={formModal.title}\n                            fields={formModal.fields}\n                            values={formModal.values}\n                            position={formModal.position}\n                            confirmCallback={preSelected ? this.onAddDropdownModalInput : this.onAddFormModalInput}\n                            fullscreen={formModal.fullScreen}\n                            scrollbar={formModal.scrollbar}>\n            {formModal?.content()}\n        </InputDialog>;\n    };\n\n    private setSelected = (event: any) => {\n        this.selected = decodeHTML((event.target as HTMLLIElement).innerHTML);\n        this.props.dropdown?.onSelect?.(this.selected);\n    };\n\n}","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport styles from './Error.module.css';\n\ninterface Props {\n    message: String;\n}\n\nexport const Error: React.FC<Props> = ({message}) =>\n    <div className={`${styles.container}`}>\n        <i className={`${styles.icon} material-icons`}>error_outline</i>\n        <h5 className={`${styles.message}`}>{message}</h5>\n    </div>;\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {Link} from \"react-router-dom\";\nimport React, {createRef} from \"react\";\nimport styles from \"./AddButton.module.css\";\nimport M from \"materialize-css\";\nimport ScrollBar from \"react-perfect-scrollbar\";\n\ninterface Props {\n    tooltip: { text: string, position: 'left' | 'right' | 'bottom' | 'top' };\n    pathname?: string;\n    dropdown?: {\n        id: string | number,\n        title: string,\n        empty?: string,\n        data: { text: string, pathname: string }[]\n    }\n    offset?: number;\n}\n\nexport default class AddButton extends React.Component<Props, {}> {\n\n    private dropdown = createRef<HTMLDivElement>();\n    private scrollbar: (ScrollBar | null) = null;\n\n    public componentDidMount(): void {\n        this.initDropdown();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<{}>, snapshot?: any): void {\n        this.initDropdown();\n    }\n\n    public render() {\n        const {offset, tooltip, pathname, dropdown} = this.props;\n        return (\n            <>\n                {!dropdown\n                    ? <div className=\"fixed-action-btn tooltipped\"\n                           data-position={tooltip.position}\n                           data-tooltip={tooltip.text}\n                           style={offset ? {right: `${offset * 55 + 23}px`} : undefined}>\n                        <Link className=\"waves-effect btn-floating grey darken-3\"\n                              to={pathname || \"\"}>\n                            <i className=\"large material-icons\">add</i>\n                        </Link>\n                    </div>\n                    : <>\n                        <div\n                            className=\"dropdown-trigger fixed-action-btn tooltipped waves-effect btn-floating grey darken-3\"\n                            data-position={tooltip.position}\n                            data-tooltip={tooltip.text}\n                            data-target={`dropdown-${dropdown.id}`}\n                            ref={this.dropdown}>\n                            <i className=\"large material-icons\">add</i>\n                        </div>\n                        <ul id={`dropdown-${dropdown.id}`}\n                            className={`dropdown-content ${styles.dropdown}`}>\n                            <li className={`${styles.disabled}`}>\n                                <a className={`${!dropdown?.data.length ? styles.dropdownEmpty : undefined}`}>\n                                    {dropdown.data.length ? dropdown.title : dropdown.empty}\n                                </a>\n                            </li>\n                            <ScrollBar ref={(ref) => {\n                                this.scrollbar = ref;\n                            }}>\n                                {dropdown.data.map((data, index) =>\n                                    <li key={index}>\n                                        <Link to={data.pathname}>\n                                            {data.text}\n                                        </Link>\n                                    </li>\n                                )}\n                            </ScrollBar>\n                        </ul>\n                    </>\n                }\n\n            </>\n        );\n    }\n\n    private initDropdown = () => {\n        M.Dropdown.init(this.dropdown.current as Element,\n            {\n                onOpenEnd: this.onOpenDropdown\n            });\n    };\n\n    private onOpenDropdown = () =>\n        this.scrollbar?.updateScroll();\n\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport styles from './LoadingSpinner.module.css';\n\nconst LoadingSpinner: React.FC = () =>\n    <div className={styles.container}>\n        <div className=\"preloader-wrapper active\">\n            <div className=\"spinner-layer spinner-white-only\">\n                <div className=\"circle-clipper left\">\n                    <div className=\"circle\"/>\n                </div>\n                <div className=\"gap-patch\">\n                    <div className=\"circle\"/>\n                </div>\n                <div className=\"circle-clipper right\">\n                    <div className=\"circle\"/>\n                </div>\n            </div>\n        </div>\n    </div>;\n\nexport default LoadingSpinner;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React, {createRef} from \"react\";\nimport M from \"materialize-css\";\nimport styles from './Tabs.module.css';\nimport {ReduxState} from \"../../reducers\";\nimport {connect} from \"react-redux\";\n\nexport type Tab = { title: string, id: string, content: () => JSX.Element, disabled?: boolean, hidden?: boolean, active?: boolean }\n\ninterface TabsProps {\n    tabs: Tab[];\n}\n\ninterface StateToProps {\n    sidenav: { user: boolean, width: boolean }\n}\n\ntype Props = StateToProps & TabsProps;\n\ninterface State {\n    previousScrollRight: number | null;\n    previousScrollLeft: number | null;\n    showScrollLeft: boolean;\n    showScrollRight: boolean;\n}\n\nclass Tabs extends React.Component<Props, State> {\n\n    state: State = {\n        previousScrollLeft: null,\n        previousScrollRight: null,\n        showScrollLeft: false,\n        showScrollRight: false,\n    }\n    private tabsRef = createRef<HTMLUListElement>();\n    private rightScrollTimer: NodeJS.Timeout | null = null;\n    private leftScrollTimer: NodeJS.Timeout | null = null;\n\n    componentDidMount() {\n        M.Tabs.init(this.tabsRef.current as Element);\n        window.addEventListener('resize', this.handleResize);\n        this.setState({\n            previousScrollLeft: null,\n            previousScrollRight: null,\n            showScrollLeft: this.shouldShowScrollLeft(),\n            showScrollRight: this.shouldShowScrollRight(),\n        })\n    }\n\n    componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any) {\n        if (prevProps.tabs !== this.props.tabs) {\n            M.Tabs.init(this.tabsRef.current as Element);\n        }\n        if (prevProps.sidenav !== this.props.sidenav) {\n            setTimeout(() => {\n                M.Tabs.getInstance(this.tabsRef.current as Element).updateTabIndicator();\n                this.setState({\n                    showScrollLeft: this.shouldShowScrollLeft(),\n                    showScrollRight: this.shouldShowScrollRight(),\n                })\n            }, 250);\n        }\n    }\n\n    public componentWillUnmount(): void {\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    public render() {\n        const {tabs} = this.props;\n        return (\n            <div>\n                {this.state.showScrollLeft &&\n                <button\n                    className={`btn-flat btn-small white-text left ${styles.scrollButton} ${styles.leftScrollButton}`}\n                    onTouchStart={this.setLeftScrollTimer}\n                    onMouseDown={this.setLeftScrollTimer}\n                    onTouchEnd={this.stopLeftScrollTimer}\n                    onMouseUp={this.stopLeftScrollTimer}>\n                    <i className=\"material-icons\">arrow_back</i>\n                </button>}\n                {this.state.showScrollRight &&\n                <button\n                    className={`btn-flat btn-small white-text right ${styles.scrollButton} ${styles.rightScrollButton}`}\n                    onTouchStart={this.setRightScrollTimer}\n                    onMouseDown={this.setRightScrollTimer}\n                    onTouchEnd={this.stopRightScrollTimer}\n                    onMouseUp={this.stopRightScrollTimer}>\n                    <i className=\"material-icons\">arrow_forward</i>\n                </button>}\n                <div className=\"row\">\n                    <div className=\"col s12\">\n                        <ul className=\"tabs tabs-fixed-width\" ref={this.tabsRef}>\n                            {tabs.map((tab, index) =>\n                                ((tab.hidden === undefined || !tab.hidden) && (\n                                    <li key={index} className={`tab ${tab.disabled ? 'disabled' : ''}`}>\n                                        <a className={`${tab.active ? 'active' : ''}`}\n                                           href={tabs.length === 1 ? undefined : `#${tab.id}`}>\n                                            {tab.title}\n                                        </a>\n                                    </li>\n                                ))\n                            )}\n                        </ul>\n                        {tabs.map((tab, index) =>\n                            ((tab.hidden === undefined || !tab.hidden) && (\n                                <div id={tab.id} key={index} className={`tab-content ${styles.tabContent} col s12`}>\n                                    {tab.content()}\n                                </div>\n                            ))\n                        )}\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n\n    private handleResize = () => {\n        this.setState({\n            showScrollLeft: this.shouldShowScrollLeft(),\n            showScrollRight: this.shouldShowScrollRight(),\n        })\n    }\n\n    private shouldShowScrollLeft = (): boolean => {\n        const tabs = this.tabsRef.current;\n        if (tabs) {\n            const show = tabs.scrollWidth > tabs.clientWidth && tabs.scrollLeft > 0;\n            this.setState({showScrollLeft: show});\n            return show;\n        }\n        return false;\n    }\n\n    private shouldShowScrollRight = (): boolean => {\n        const tabs = this.tabsRef.current;\n        if (tabs) {\n            const show = tabs.scrollWidth > tabs.clientWidth && tabs.scrollLeft + tabs.clientWidth !== tabs.scrollWidth;\n            this.setState({showScrollRight: show});\n            return show;\n        }\n        return false;\n    }\n\n    private setRightScrollTimer = () => {\n        this.stopLeftScrollTimer();\n        if (!this.rightScrollTimer) {\n            this.rightScrollTimer = setInterval(this.executeRightScroll, 25)\n        }\n    }\n\n    private executeRightScroll = () => {\n        const tabs = this.tabsRef.current;\n        if (tabs) {\n            if (this.state.previousScrollRight === tabs.scrollLeft) {\n                this.stopRightScrollTimer();\n            }\n            this.setState({previousScrollRight: tabs.scrollLeft});\n            tabs.scrollTo(tabs.scrollLeft + 10, 0);\n            this.shouldShowScrollLeft();\n            this.shouldShowScrollRight();\n        } else {\n            this.stopRightScrollTimer();\n        }\n    }\n\n    private stopRightScrollTimer = () => {\n        if (this.rightScrollTimer) {\n            clearInterval(this.rightScrollTimer);\n        }\n        this.rightScrollTimer = null;\n    }\n\n    private executeLeftScroll = () => {\n        const tabs = this.tabsRef.current;\n        if (tabs) {\n            if (this.state.previousScrollLeft === tabs.scrollLeft) {\n                this.stopLeftScrollTimer();\n            }\n            this.setState({previousScrollLeft: tabs.scrollLeft});\n            tabs.scrollTo(tabs.scrollLeft - 10, 0);\n            this.shouldShowScrollLeft();\n            this.shouldShowScrollRight();\n        } else {\n            this.stopLeftScrollTimer();\n        }\n    }\n\n    private setLeftScrollTimer = () => {\n\n        this.stopRightScrollTimer();\n        this.leftScrollTimer = setInterval(this.executeLeftScroll, 25)\n    }\n\n    private stopLeftScrollTimer = () => {\n        if (this.leftScrollTimer) {\n            clearInterval(this.leftScrollTimer)\n        }\n        this.leftScrollTimer = null;\n    }\n\n}\n\nfunction mapStateToProps(state: ReduxState): StateToProps {\n    return {\n        sidenav: state.ui.sidenav,\n    }\n}\n\nexport default connect(mapStateToProps)(Tabs);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport List from \"./List\";\nimport React from \"react\";\n\ninterface Props<T> {\n    isLoading: boolean;\n    error?: string | null;\n    emptyMessage: string;\n    list: T[];\n    card: (element: T) => JSX.Element;\n    predicate?: (item: T, filter: string) => boolean;\n}\n\ninterface State {\n    pagesize: number;\n}\n\nexport default class CardList<T> extends React.Component<Props<T>, State> {\n\n    constructor(props: Props<T>) {\n        super(props);\n        this.state = {\n            pagesize: this.calcPagesize()\n        }\n    }\n\n    public componentDidMount(): void {\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    public componentWillUnmount(): void {\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    public render() {\n        const GenericList = List<T>();\n        return <GenericList {...this.props}\n                            show={this.props.card}\n                            paginate={{pagesize: {initial: this.state.pagesize}}}/>\n    }\n\n    private handleResize = (_: Event) => {\n        this.setState({pagesize: this.calcPagesize()})\n    };\n\n    private calcPagesize = () => {\n        const width = window.innerWidth;\n        if (width <= 600) {\n            return 4;\n        } else if (width <= 992) {\n            return 6;\n        } else {\n            return 8;\n        }\n    };\n\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport styles from './CardTitle.module.css';\nimport {capitalize} from \"../../utils/text\";\n\ninterface CardTitleProps {\n    title: string;\n}\n\nconst CardTitle: React.FC<CardTitleProps> = ({title}) =>\n    <h6 className={`${styles.cardTitle}`}>{capitalize(title)}</h6>;\n\nexport default CardTitle;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React, {createRef} from \"react\";\nimport ScrollBar from \"react-perfect-scrollbar\";\nimport {Link} from \"react-router-dom\";\nimport CardTitle from \"../list/CardTitle\";\nimport {ContextMenu, ContextMenuTrigger, MenuItem} from \"react-contextmenu\";\nimport ConfirmDialog from \"../dialogs/ConfirmDialog\";\nimport {deleteData} from \"../../utils/api\";\nimport {RestOperation} from \"../form/Form\";\nimport ActionProgressBar from \"../actionloading/ActionProgressBar\";\nimport LinkedContextMenuItem from \"../contextmenu/LinkedContextMenuItem\";\nimport DividerContextMenuItem from \"../contextmenu/DividerContextMenuItem\";\nimport {ReduxState} from \"../../reducers\";\nimport {connect} from \"react-redux\";\n\ninterface CardProps<T> {\n    id: string;\n    title?: string;\n    link?: { to: { pathname: string, state: T } };\n    height?: number | string;\n    margin?: number | string;\n    hoverable?: boolean;\n    children?: any;\n    delete?: RestOperation;\n    loading?: boolean;\n    topContextMenuItems?: JSX.Element[];\n    bottomContextMenuItems?: JSX.Element[];\n}\n\ninterface State {\n    loading: boolean;\n}\n\ninterface StateToProps {\n    sidenavVisible: boolean;\n    confirmationDialog: boolean,\n}\n\ntype Props<T> = CardProps<T> & StateToProps;\n\nclass GenericCard<T> extends React.Component<Props<T>, State> {\n\n    private CARD_ITEM_HEIGHT = 39;\n\n    private scrollbar: (ScrollBar | null) = null;\n    private card = createRef<HTMLDivElement>();\n    private cardContent = createRef<HTMLDivElement>();\n\n    constructor(props: Props<T>) {\n        super(props);\n        this.state = {\n            loading: props.loading || false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.scrollbar?.updateScroll();\n        this.blockBodyScroll();\n    }\n\n    componentDidUpdate(prevProps: Readonly<Props<T>>, prevState: Readonly<{}>, snapshot?: any) {\n        if (prevProps.sidenavVisible !== this.props.sidenavVisible) {\n            this.scrollbar?.updateScroll();\n        }\n    }\n\n    public render() {\n        const {id, title, link, margin, topContextMenuItems, bottomContextMenuItems, confirmationDialog} = this.props;\n        const {loading} = this.state;\n        const cardElement =\n            <>\n                <ActionProgressBar loading={loading} backgroundColor={\"#1F1F1F\"} progressBarColor={\"#e51220\"}/>\n                {this.cardElement()}\n            </>;\n        return (\n            <>\n                <ContextMenuTrigger id={`contextMenu-${id}`}>\n                    <div className={`col s6 m4 l3`} style={{margin}}>\n                        {link\n                            ? <Link to={{\n                                pathname: link?.to.pathname,\n                                state: link?.to.state\n                            }}>\n                                {cardElement}\n                            </Link>\n                            : {cardElement}}\n                    </div>\n                </ContextMenuTrigger>\n                <ContextMenu id={`contextMenu-${id}`}>\n                    {topContextMenuItems?.map((menuItem, index) =>\n                        <div key={index}>\n                            {index > 0 && <MenuItem className='react-contextmenu-item--divider'/>}\n                            {menuItem}\n                        </div>\n                    )}\n                    {link &&\n                    <>\n                        {topContextMenuItems?.length\n                            ?\n                            <>\n                                <DividerContextMenuItem/>\n                                <DividerContextMenuItem/>\n                                <DividerContextMenuItem/>\n                                <DividerContextMenuItem/>\n                            </>\n                            : undefined}\n                        <LinkedContextMenuItem option={'Details'}\n                                               pathname={link?.to.pathname}\n                                               state={{data: link?.to.state}}/>\n                    </>}\n                    {bottomContextMenuItems?.map((menuItem, index) =>\n                        <div key={index}>\n                            {(topContextMenuItems?.length || link) && <DividerContextMenuItem/>}\n                            {menuItem}\n                        </div>\n                    )}\n                    {this.props.delete !== undefined\n                    && <div className={`${loading || !confirmationDialog ? '' : 'modal-trigger'}`} data-target={id}>\n                        {(topContextMenuItems?.length || link || bottomContextMenuItems?.length) &&\n                        <DividerContextMenuItem/>}\n                        <MenuItem\n                            className={`${loading ? 'react-contextmenu-item--disabled' : undefined} red-text`}\n                            data={this.props.link?.to.state}\n                            disabled={loading}\n                            onClick={confirmationDialog ? undefined : this.onDelete}>\n                            {this.props.delete.textButton || 'Delete'}\n                        </MenuItem>\n                    </div>}\n                </ContextMenu>\n                {this.props.delete !== undefined\n                && confirmationDialog\n                && <ConfirmDialog id={id}\n                                  message={`${this.props.delete.confirmMessage || `to ${this.props.delete.textButton?.toLowerCase() || 'delete'} ${title}`}`}\n                                  confirmCallback={this.onDelete}/>}\n            </>\n        )\n    }\n\n    private onDelete = () => {\n        const {delete: deleteCard} = this.props;\n        if (deleteCard) {\n            const args = this.props.link?.to.state;\n            deleteData(deleteCard.url,\n                () => deleteCard.successCallback(args),\n                (reply) => deleteCard.failureCallback(reply, args));\n            this.setState({loading: true});\n        }\n    }\n\n    private getChildrenCount = (): number =>\n        React.Children.count(this.props.children);\n\n    private getHeight = (): number | string =>\n        this.props.height || this.getChildrenCount() * this.CARD_ITEM_HEIGHT;\n\n    private blockBodyScroll = () => {\n        const cardContent = this.cardContent.current;\n        const height = this.getHeight();\n        if (cardContent && typeof height === \"number\" && cardContent.scrollHeight > height) {\n            this.card.current?.addEventListener('wheel', event => event.preventDefault())\n        }\n    };\n\n    private cardElement = (): JSX.Element => {\n        const {title, hoverable, link, children} = this.props;\n        const childrenCount = this.getChildrenCount();\n        return (\n            <div className={hoverable ? 'hoverable' : ''}\n                 style={childrenCount === 0 ? {borderBottom: '1px black solid'} : undefined}>\n                {title && <CardTitle title={title}/>}\n                {childrenCount > 0 && (\n                    <div className={`card gridCard`}\n                         style={{height: this.getHeight()}}\n                         ref={this.card}>\n                        <ScrollBar ref={(ref) => this.scrollbar = ref} component='div'>\n                            <div className='card-content' ref={this.cardContent}>\n                                {children}\n                            </div>\n                        </ScrollBar>\n                    </div>)}\n            </div>\n        )\n    };\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        sidenavVisible: state.ui.sidenav.user && state.ui.sidenav.width,\n        confirmationDialog: state.ui.confirmationDialog,\n    }\n);\n\nexport default function Card<T>() {\n    return connect(mapStateToProps)(GenericCard as new(props: Props<T>) => GenericCard<T>);\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nexport const snakeCaseToCamelCase = (text: string): string => text.replace(\n    /([_][a-z])/g,\n    (group) => group.toUpperCase()\n        .replace('-', '')\n        .replace('_', '')\n);\n\nexport const camelCaseToSentenceCase = (text: string): string => {\n    let sentenceCase = text.replace(/([A-Z])/g, \" $1\");\n    sentenceCase = sentenceCase.charAt(0).toUpperCase() + sentenceCase.slice(1);\n    return sentenceCase;\n};\n\nexport const capitalize = (text: string): string =>\n    text.charAt(0).toUpperCase() + text.substring(1);\n\nexport const decodeHTML = (html: string) => {\n    const txt = document.createElement('textarea');\n    txt.innerHTML = html;\n    return txt.value;\n};\n\nexport const zeroPad = (num: number, maxLength: number) => String(num).padStart(maxLength, '0');","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport styles from \"./UnsavedChanges.module.css\";\n\nconst UnsavedChanges: React.FC = () =>\n    <div className={`${styles.container}`}>\n        <div className={`${styles.message}`}>Don't forget to save your changes</div>\n    </div>;\n\nexport default UnsavedChanges;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slide\":\"Form_slide__2AhZc\",\"content\":\"Form_content__1y_Am\",\"emptyContent\":\"Form_emptyContent__1Yhy2\",\"controlButton\":\"Form_controlButton__2MDu7\",\"invalidateField\":\"Form_invalidateField__3yUEv\",\"validateField\":\"Form_validateField__2MmZy\",\"noValidationField\":\"Form_noValidationField__1bUVR\",\"dropdown\":\"Form_dropdown__3VWzj\",\"disabled\":\"Form_disabled__1r2AA\",\"dropdownEmpty\":\"Form_dropdownEmpty__3HXxp\",\"customButton\":\"Form_customButton__3IoRd\",\"formButton\":\"Form_formButton__3rAGV\",\"requiredLabel\":\"Form_requiredLabel__3eg29\",\"labelIcon\":\"Form_labelIcon__1SXZN\"};","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport * as React from \"react\";\nimport styles from './SimpleList.module.css';\n\ninterface GenericSimpleListProps<T> {\n    list: T[];\n    show: (element: T, index: number, last: boolean) => JSX.Element;\n    header?: () => JSX.Element;\n}\n\ntype Props<T> = GenericSimpleListProps<T>;\n\nexport default class SimpleList<T> extends React.Component<Props<T>, {}> {\n\n    public render() {\n        const {list, show, header} = this.props;\n        return (\n            <div className={styles.listWrapper}>\n                <div className={styles.itemListWrapper}>\n                    {header && header()}\n                    {list.map((c, i) => (\n                        <div key={i}>\n                            {show(c, i, i === list.length - 1)}\n                        </div>\n                    ))}\n                </div>\n            </div>);\n    }\n}","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport * as React from \"react\";\n\ninterface PageNumberProps {\n    page: number;\n    active: boolean;\n    setPage: (pageIndex: number) => void;\n}\n\nexport class PageNumber extends React.Component<PageNumberProps, {}> {\n\n    public render() {\n        const {page, active} = this.props;\n        return (\n            <li key={page} className={active ? \"active\" : \"waves-effect\"}>\n                <a onClick={this.changePage}>{page}</a>\n            </li>\n        );\n    };\n\n    private changePage = () => {\n        this.props.setPage(this.props.page - 1);\n    };\n}","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport * as React from \"react\";\nimport {ReduxState} from \"../../reducers\";\nimport {connect} from \"react-redux\";\nimport {PageNumber} from \"./PageNumber\";\nimport styles from './Pagination.module.css';\n\ninterface StateToProps {\n    sidenavVisible: boolean;\n}\n\ninterface PaginationProps {\n    max: number;\n    page: number;\n    setPage: (pageIndex: number) => void;\n    prevPage: () => void;\n    nextPage: () => void;\n}\n\ntype Props = StateToProps & PaginationProps;\n\nclass Pagination extends React.Component<Props, {}> {\n\n    public render() {\n        const {max, page, setPage, prevPage, nextPage, sidenavVisible} = this.props;\n        const needsEllipsis = max >= 10;\n        let pagination;\n        if (!needsEllipsis) {\n            const noEllipsis: number[] = this.noEllipsis(max);\n            pagination = noEllipsis.map((pageNumber, index) =>\n                <PageNumber key={index} page={pageNumber} active={index === page} setPage={setPage}/>\n            )\n        } else {\n            const beforeEllipsis: number[] = this.beforeEllipsis(max, page);\n            const betweenEllipsis: number[] = this.betweenEllipsis(max, page);\n            const afterEllipsis: number[] = this.afterEllipsis(max, page);\n            pagination =\n                <>\n                    {beforeEllipsis.map((pageNumber, index) =>\n                        <PageNumber key={index} page={pageNumber} active={index === page} setPage={setPage}/>\n                    )}\n                    {beforeEllipsis.length === 1 && (\n                        <>\n                            <i className={`material-icons white-text bottom ${styles.threeDotsIcon}`}>more_horiz</i>\n                            {afterEllipsis.length === 1 && (\n                                betweenEllipsis.map((pageNumber, index) =>\n                                    <PageNumber key={index} page={pageNumber} active={true}\n                                                setPage={setPage}/>\n                                )\n                            )}\n                        </>\n                    )}\n                    {afterEllipsis.length === 1 && (\n                        <i className={`material-icons white-text bottom ${styles.threeDotsIcon}`}>more_horiz</i>\n                    )}\n                    {afterEllipsis.map((pageNumber, index) =>\n                        <PageNumber key={index} page={pageNumber}\n                                    active={max - (afterEllipsis.length - index) + 1 === page}\n                                    setPage={setPage}/>\n                    )}\n                </>\n        }\n        return (\n            <ul className='pagination no-select'\n                style={sidenavVisible ? {left: \"100px\"} : undefined}>\n                <li className={page === 0 ? \"disabled\" : undefined}>\n                    <a onClick={prevPage}>\n                        <i className=\"material-icons small\">chevron_left</i>\n                    </a>\n                </li>\n                {pagination}\n                <li className={page === this.props.max ? \"disabled\" : undefined}>\n                    <a onClick={nextPage}>\n                        <i className=\"material-icons small\">chevron_right</i>\n                    </a>\n                </li>\n            </ul>\n        )\n    }\n\n    private noEllipsis = (max: number) =>\n        Array.from({length: max + 1}, (x, i) => i + 1);\n\n    private beforeEllipsis = (max: number, page: number): number[] =>\n        Array.from({length: page < 3 ? 3 : 1}, (x, i) => i + 1);\n\n    private afterEllipsis = (max: number, page: number): number[] =>\n        Array.from({length: page > max - 3 ? 3 : 1}, (x, i) => max - i + 1).reverse();\n\n    private betweenEllipsis = (max: number, page: number): number[] =>\n        Array.from({length: 1}, (x, i) => page + 1).reverse();\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        sidenavVisible: state.ui.sidenav.user && state.ui.sidenav.width,\n    }\n);\n\nexport default connect(mapStateToProps)(Pagination);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport * as React from \"react\";\nimport SimpleList from './SimpleList';\nimport './PagedList.css';\nimport {Dropdown} from \"../form/Dropdown\";\nimport Pagination from \"./Pagination\";\n\nexport interface IPagedList<T> {\n    list: T[];\n    show: (element: T, index: number, last: boolean) => JSX.Element;\n    paginate: {\n        pagesize: {\n            initial: number,\n            options?: ('Everything' | number)[],\n        },\n        page?: {\n            index?: number,\n            last?: boolean\n        },\n        position?: 'top' | 'bottom' | 'top-bottom';\n    };\n}\n\ninterface State {\n    max: number;\n    pagesize: number;\n    page: number;\n}\n\nexport class PagedList<T> extends React.Component<IPagedList<T>, State> {\n\n    private max: number = 0;\n\n    constructor(props: IPagedList<T>) {\n        super(props);\n        const initialMax = Math.max(0, Math.ceil(props.list.length / (props.paginate.pagesize.initial || 1)) - 1);\n        this.state = {\n            max: initialMax,\n            page: (props.paginate.page?.last ? initialMax : props.paginate.page?.index) || 0,\n            pagesize: props.paginate.pagesize.initial,\n        };\n    }\n\n    public render() {\n        const {list: l, show, paginate} = this.props;\n        const {page = 0, pagesize = l.length} = this.state;\n        const list = l.slice(page * pagesize, page * pagesize + pagesize);\n        const pagination = <Pagination max={this.state.max}\n                                       page={page}\n                                       setPage={this.setPage}\n                                       prevPage={this.prevPage}\n                                       nextPage={this.nextPage}/>;\n        // TODO: page transition. e.g. slide to the left while new page comes from the right. Using react spring\n        return (\n            <div className={'list'}>\n                {paginate.pagesize.options && (\n                    <div className={'pagination-dropdown'}>\n                        <Dropdown<(number | 'Everything')>\n                            id={'pageSize'}\n                            name={'pageSize'}\n                            value={this.state.pagesize === Number.MAX_VALUE ? 'Everything' : this.state.pagesize?.toString()}\n                            onChange={this.setPageSize}\n                            dropdown={{\n                                defaultValue: 'Page size',\n                                values: paginate.pagesize.options,\n                                optionToString: this.pageSizeOption\n                            }}>\n                        </Dropdown>\n                    </div>\n                )}\n                {(paginate.position === undefined || paginate.position === 'top' || paginate.position === 'top-bottom')\n                && this.state.max > 0 && pagination}\n                <SimpleList<T> {...this.props} list={list} show={show}/>\n                {(paginate.position === 'bottom' || paginate.position === 'top-bottom')\n                && this.state.max > 0 && pagination}\n            </div>\n        );\n    }\n\n    private setPage = (pageIndex: number): void => {\n        this.setState(state => ({\n            page: state.page === undefined ? 0 : Math.max(0, pageIndex),\n            max: Math.max(0, Math.ceil(this.props.list.length / this.state.pagesize) - 1)\n        }));\n        window.scrollTo(0, 0);\n    };\n\n    private prevPage = (): void => {\n        const {page} = this.state;\n        this.setPage(page === undefined ? 0 : Math.max(0, page - 1));\n    };\n\n    private nextPage = (): void => {\n        const {page} = this.state;\n        this.setPage(page === undefined ? 0 : Math.min(this.state.max, page + 1));\n    };\n\n    private setPageSize = (e: React.FormEvent<HTMLSelectElement>) => {\n        const selectedPageSize = e.currentTarget.value;\n        let pagesize: number;\n        if (selectedPageSize === 'Everything') {\n            pagesize = Number.MAX_VALUE;\n        } else {\n            pagesize = parseInt(selectedPageSize);\n        }\n        const max = Math.max(0, Math.ceil(this.props.list.length / pagesize) - 1);\n        this.setState({\n            pagesize,\n            max,\n            page: max,\n        })\n    };\n\n    private pageSizeOption = (option: (number | 'Everything')): string =>\n        option.toString();\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport {PagedList} from \"./PagedList\";\nimport SimpleList from \"./SimpleList\";\nimport {ReduxState} from \"../../reducers\";\nimport Empty from \"./Empty\";\n\ninterface FilteredListProps<T> {\n    list: T[];\n    show: (element: T, index: number, last: boolean) => JSX.Element;\n    predicate: (x: T, s: string) => boolean;\n    paginate?: {\n        pagesize: {\n            initial: number,\n            options?: ('Everything' | number)[],\n        },\n        page?: {\n            index?: number,\n            last?: boolean\n        },\n        position?: 'top' | 'bottom' | 'top-bottom';\n    };\n}\n\ninterface StateToProps {\n    search: string;\n}\n\ntype Props<T> = FilteredListProps<T> & StateToProps;\n\nclass GenericFilteredList<T> extends React.Component<Props<T>, {}> {\n\n    public render() {\n        const {list, predicate, search, paginate, ...otherProps} = this.props;\n        const filteredList = list.filter((s: T) => predicate(s, search));\n        if (list.length !== filteredList.length && filteredList.length === 0) {\n            return <Empty message={search} error={'No matches found'}/>;\n        }\n        if (paginate) {\n            return <PagedList {...otherProps} list={filteredList} paginate={paginate}/>\n        }\n        return <SimpleList<T> {...otherProps} list={filteredList}/>\n    }\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        search: state.ui.search.toLowerCase()\n    }\n);\n\nexport default function FilteredList<T>() {\n    return connect(mapStateToProps)(GenericFilteredList as new(props: Props<T>) => GenericFilteredList<T>);\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React, {useEffect, useState} from 'react';\n\n//import shuffle from 'lodash/shuffle'\n\ninterface AnimatedListProps<T> {\n    list: T[];\n    show: (element: T, index: number, last: boolean) => JSX.Element;\n    header?: () => JSX.Element;\n}\n\nexport default function AnimatedList<T>(props: AnimatedListProps<T>) {\n    const {list, show, header} = props;\n    const keyedList = list.map((item, index) => ({key: index, item}));\n    const [rows, setList] = useState(keyedList);\n\n    useEffect(() => setList(keyedList), [list, keyedList]);\n    /*useEffect(() => void setInterval(() => setList(shuffle), 2000), [])*/\n\n    let height = 0;\n    /* const transitions = useTransition(\n       rows.map(data => ({data, height: 32.4, y: (height += 32.4) - 32.4})),\n       (item: any) => item.data.key,\n       {\n         from: {height: 0, opacity: 0},\n         leave: {height: 0, opacity: 0},\n         enter: ({y, height}) => ({y, height, opacity: 1}),\n         update: ({y, height}) => ({y, height})\n       }\n     );*/\n    //FIXME: currently not being used, has a few bugs\n    return (\n        <div style={{height: (rows.length * 59)}}>\n            {/*{header && header()}\n      {transitions.map(({item, props: {y, ...rest}, key}, index) => (\n        <animated.div\n          key={key}\n          style={{\n            zIndex: list.length - index,\n            transform: y.interpolate((y: number) => `translate3d(0, ${y}px, 0)`), ...rest\n          }}>\n          {show(item.data.item, index, index === list.length - 1)}\n        </animated.div>\n      ))}*/}\n        </div>\n    )\n}","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport * as React from 'react';\nimport FilteredList from './FilteredList';\nimport {PagedList} from \"./PagedList\";\nimport SimpleList from \"./SimpleList\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport {Error} from \"../errors/Error\";\nimport AnimatedList from \"./AnimatedList\";\nimport Empty from \"./Empty\";\n\ninterface ListProps<T> {\n    isLoading?: boolean;\n    error?: string | null;\n    emptyMessage?: string;\n    list: T[];\n    show: (element: T, index: number, last: boolean) => JSX.Element;\n    predicate?: (element: T, filter: string) => boolean;\n    paginate?: {\n        pagesize: {\n            initial: number,\n            options?: ('Everything' | number)[],\n        },\n        page?: {\n            index?: number,\n            last?: boolean\n        },\n        position?: 'top' | 'bottom' | 'top-bottom';\n    };\n    animate?: boolean;\n    header?: () => JSX.Element;\n}\n\ntype Props<T> = ListProps<T>;\n\nclass GenericList<T> extends React.Component<Props<T>, {}> {\n\n    public render() {\n        const {isLoading, error, emptyMessage, list, predicate, paginate, animate} = this.props;\n        if (isLoading) {\n            return <LoadingSpinner/>;\n        }\n        if (error) {\n            return <Error message={error}/>;\n        }\n        if (list.length === 0 && emptyMessage) {\n            return <Empty message={emptyMessage}/>\n        }\n        if (predicate) {\n            const ListFiltered = FilteredList<T>();\n            return <ListFiltered {...this.props} predicate={predicate}/>\n        }\n        if (paginate) {\n            return <PagedList {...this.props} paginate={paginate}/>\n        }\n        if (animate) {\n            return <AnimatedList {...this.props} />\n        }\n        return <SimpleList<T> {...this.props}/>\n    }\n\n}\n\nexport default function List<T>() {\n    return (GenericList as new(props: Props<T>) => GenericList<T>);\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React, {createRef} from \"react\";\nimport M from \"materialize-css\";\nimport ResizeObserver from 'resize-observer-polyfill';\n\ninterface Props {\n    id: string;\n    title: string;\n    active?: boolean;\n    headerClassname?: string;\n    bodyClassname?: string;\n    onChange?: () => void;\n}\n\ninterface State {\n    isOpen: boolean;\n}\n\nexport default class extends React.Component<Props, State> {\n\n    state: State = {\n        isOpen: this.props.active || false\n    };\n\n    private collapsible = createRef<HTMLUListElement>();\n    private resizeObserver: (ResizeObserver | null) = null;\n\n    public componentDidMount(): void {\n        this.initCollapsible();\n        if (this.props.onChange) {\n            this.resizeObserver = new ResizeObserver(() => {\n                this.props.onChange?.();\n            });\n            this.resizeObserver.observe(this.collapsible.current as Element);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n        }\n    }\n\n    public render() {\n        const {id, title, active, headerClassname, bodyClassname, children} = this.props;\n        const {isOpen} = this.state;\n        return (\n            <ul id={id} className=\"collapsible\" ref={this.collapsible}>\n                <li className={active ? \"active\" : undefined}>\n                    <ul className={`collapsible-header no-select ${headerClassname}`} onClick={this.onChange}>\n                        <div className={`subtitle`}>{title}</div>\n                        <i className=\"material-icons\">{isOpen ? 'arrow_drop_down' : 'arrow_drop_up'}</i>\n                    </ul>\n                    <div className={`collapsible-body ${bodyClassname}`}>\n                        {children}\n                    </div>\n                </li>\n            </ul>\n        );\n    }\n\n    private initCollapsible = () => {\n        M.Collapsible.init(this.collapsible.current as Element);\n    };\n\n    private onChange = () => {\n        this.setState(state => ({isOpen: !state.isOpen}));\n        this.props.onChange?.();\n    }\n\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabsContainer\":\"Ssh_tabsContainer__3qJxj\",\"commandsContainer\":\"Ssh_commandsContainer__30k0m\",\"commandsHeader\":\"Ssh_commandsHeader__36wXw\",\"commandsTitle\":\"Ssh_commandsTitle__JzOBP\",\"commands\":\"Ssh_commands__3KMK6\",\"time\":\"Ssh_time__gGi5z\",\"hostname\":\"Ssh_hostname__1m-1b\",\"command\":\"Ssh_command__btPUA\",\"exitStatus\":\"Ssh_exitStatus__r7h3x\",\"controlsMenuLeft\":\"Ssh_controlsMenuLeft__3rWWY\",\"controlsMenuRight\":\"Ssh_controlsMenuRight__2d66p\",\"showCommandsButton\":\"Ssh_showCommandsButton__11yXy\",\"toggleCommandsButton\":\"Ssh_toggleCommandsButton__Z3Ymu\",\"shrink\":\"Ssh_shrink__11k_W\",\"expand\":\"Ssh_expand__2oUZE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"collapsibleContainer\":\"Rules_collapsibleContainer__1DpJL\",\"collapsibleSubtitle\":\"Rules_collapsibleSubtitle__2u3wR\",\"collapsibleCardList\":\"Rules_collapsibleCardList__QdCkn\"};","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport ListItem from \"../../../../components/list/ListItem\";\nimport styles from \"../../../../components/list/ListItem.module.css\";\nimport ControlledList from \"../../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {IRuleHost} from \"../../rules/hosts/RuleHost\";\nimport {Link} from \"react-router-dom\";\nimport {ICloudHost} from \"./CloudHost\";\nimport {loadCloudHostRules, loadRulesHost, removeCloudHostRules} from \"../../../../actions\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    rules: { [key: string]: IRuleHost },\n    rulesName: string[];\n}\n\ninterface DispatchToProps {\n    loadRulesHost: () => void;\n    loadCloudHostRules: (hostname: string) => void;\n    removeCloudHostRules: (hostname: string, rules: string[]) => void;\n}\n\ninterface HostRuleListProps {\n    isLoadingCloudHost: boolean;\n    loadCloudHostError?: string | null;\n    cloudHost: ICloudHost | Partial<ICloudHost> | null;\n    unsavedRules: string[];\n    onAddHostRule: (rule: string) => void;\n    onRemoveHostRules: (rule: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & HostRuleListProps;\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass CloudHostRuleList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadRulesHost();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.cloudHost?.instanceId && this.props.cloudHost?.instanceId) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList isLoading={!isNew ? this.props.isLoadingCloudHost || this.props.isLoading : undefined}\n                               error={!isNew ? this.props.loadCloudHostError || this.props.error : undefined}\n                               emptyMessage={`Rules list is empty`}\n                               data={this.props.rulesName}\n                               dropdown={{\n                                   id: 'rules',\n                                   title: 'Add host rule',\n                                   empty: 'No rules to add',\n                                   data: this.getSelectableRules()\n                               }}\n                               show={this.rule}\n                               onAdd={this.onAdd}\n                               onRemove={this.onRemove}\n                               onDelete={{\n                                   url: `hosts/cloud/${this.props.cloudHost?.instanceId}/rules`,\n                                   successCallback: this.onDeleteSuccess,\n                                   failureCallback: this.onDeleteFailure\n                               }}\n                               entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        const instanceId = this.props.cloudHost?.instanceId;\n        if (instanceId) {\n            this.props.loadCloudHostRules(instanceId);\n        }\n    };\n\n    private isNew = () =>\n        this.props.cloudHost?.instanceId === undefined;\n\n    private rule = (index: number, rule: string, separate: boolean, checked: boolean,\n                    handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedRules.includes(rule);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${styles.linkedItemContent}`}>\n                    <label>\n                        <input id={rule}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                {rule}\n              </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/rules/hosts/${rule}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (rule: string): void =>\n        this.props.onAddHostRule(rule);\n\n    private onRemove = (rules: string[]) =>\n        this.props.onRemoveHostRules(rules);\n\n    private onDeleteSuccess = (rules: string[]): void => {\n        const instanceId = this.props.cloudHost?.instanceId;\n        if (instanceId) {\n            this.props.removeCloudHostRules(instanceId, rules);\n        }\n    };\n\n    private onDeleteFailure = (reason: string, rules?: string[]): void =>\n        super.toast(`Unable to remove ${rules?.length === 1 ? rules[0] : 'rules'} from <b>${this.props.cloudHost?.instanceId}</b> cloud instance`, 10000, reason, true);\n\n    private getSelectableRules = () => {\n        const {rules, rulesName, unsavedRules} = this.props;\n        return Object.entries(rules)\n            .filter(([_, rule]) => !rule.generic)\n            .map(([ruleName, _]) => ruleName)\n            .filter(name => !rulesName.includes(name) && !unsavedRules.includes(name));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: HostRuleListProps): StateToProps {\n    const instanceId = ownProps.cloudHost?.instanceId;\n    const host = instanceId && state.entities.hosts.cloud.data[instanceId];\n    const rulesName = host && host.hostRules;\n    return {\n        isLoading: state.entities.hosts.cloud.isLoadingRules,\n        error: state.entities.hosts.cloud.loadRulesError,\n        rules: state.entities.rules.hosts.data,\n        rulesName: rulesName || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadRulesHost,\n        loadCloudHostRules,\n        removeCloudHostRules,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CloudHostRuleList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport {ICloudHost} from \"./CloudHost\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport ListItem from \"../../../../components/list/ListItem\";\nimport styles from \"../../../../components/list/ListItem.module.css\";\nimport ControlledList from \"../../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {\n    loadCloudHostSimulatedMetrics,\n    loadSimulatedHostMetrics,\n    removeCloudHostSimulatedMetrics\n} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {ISimulatedHostMetric} from \"../../metrics/hosts/SimulatedHostMetric\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    simulatedMetrics: { [key: string]: ISimulatedHostMetric },\n    simulatedMetricsName: string[];\n}\n\ninterface DispatchToProps {\n    loadSimulatedHostMetrics: (name?: string) => any;\n    loadCloudHostSimulatedMetrics: (cloudHost: string) => void;\n    removeCloudHostSimulatedMetrics: (cloudHost: string, simulatedMetrics: string[]) => void;\n}\n\ninterface HostSimulatedMetricListProps {\n    isLoadingCloudHost: boolean;\n    loadCloudHostError?: string | null;\n    cloudHost: ICloudHost | Partial<ICloudHost> | null;\n    unsavedSimulatedMetrics: string[];\n    onAddSimulatedHostMetric: (simulatedMetric: string) => void;\n    onRemoveSimulatedHostMetrics: (simulatedMetric: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & HostSimulatedMetricListProps;\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass CloudHostSimulatedMetricList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadSimulatedHostMetrics();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.cloudHost?.instanceId && this.props.cloudHost?.instanceId) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList isLoading={!isNew ? this.props.isLoadingCloudHost || this.props.isLoading : undefined}\n                               error={!isNew ? this.props.loadCloudHostError || this.props.error : undefined}\n                               emptyMessage={`Simulated metrics list is empty`}\n                               data={this.props.simulatedMetricsName}\n                               dropdown={{\n                                   id: 'simulatedMetrics',\n                                   title: 'Add simulated metric',\n                                   empty: 'No simulated metrics to add',\n                                   data: this.getSelectableSimulatedMetrics()\n                               }}\n                               show={this.simulatedMetric}\n                               onAdd={this.onAdd}\n                               onRemove={this.onRemove}\n                               onDelete={{\n                                   url: `hosts/cloud/${this.props.cloudHost?.instanceId}/simulated-metrics`,\n                                   successCallback: this.onDeleteSuccess,\n                                   failureCallback: this.onDeleteFailure\n                               }}\n                               entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        const instanceId = this.props.cloudHost?.instanceId;\n        if (instanceId) {\n            this.props.loadCloudHostSimulatedMetrics(instanceId);\n        }\n    };\n\n    private isNew = () =>\n        this.props.cloudHost?.instanceId === undefined;\n\n    private simulatedMetric = (index: number, simulatedMetric: string, separate: boolean, checked: boolean,\n                               handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedSimulatedMetrics.includes(simulatedMetric);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${styles.linkedItemContent}`}>\n                    <label>\n                        <input id={simulatedMetric}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                 {simulatedMetric}\n               </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/simulated-metrics/hosts/${simulatedMetric}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (simulatedMetric: string): void =>\n        this.props.onAddSimulatedHostMetric(simulatedMetric);\n\n    private onRemove = (simulatedMetrics: string[]) =>\n        this.props.onRemoveSimulatedHostMetrics(simulatedMetrics);\n\n    private onDeleteSuccess = (simulatedMetrics: string[]): void => {\n        const instanceId = this.props.cloudHost?.instanceId;\n        if (instanceId) {\n            this.props.removeCloudHostSimulatedMetrics(instanceId, simulatedMetrics);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to delete simulated metric`, 10000, reason, true);\n\n    private getSelectableSimulatedMetrics = () => {\n        const {simulatedMetrics, simulatedMetricsName, unsavedSimulatedMetrics} = this.props;\n        return Object.keys(simulatedMetrics).filter(name => !simulatedMetricsName.includes(name) && !unsavedSimulatedMetrics.includes(name));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: HostSimulatedMetricListProps): StateToProps {\n    const instanceId = ownProps.cloudHost?.instanceId;\n    const host = instanceId && state.entities.hosts.cloud.data[instanceId];\n    const simulatedMetricsName = host && host.hostSimulatedMetrics;\n    return {\n        isLoading: state.entities.hosts.cloud.isLoadingSimulatedMetrics,\n        error: state.entities.hosts.cloud.loadSimulatedMetricsError,\n        simulatedMetrics: Object.entries(state.entities.simulatedMetrics.hosts.data)\n            .filter(([_, simulatedMetric]) => !simulatedMetric.generic)\n            .map(([key, value]) => ({[key]: value}))\n            .reduce((fields, field) => {\n                for (let key in field) {\n                    fields[key] = field[key];\n                }\n                return fields;\n            }, {}),\n        simulatedMetricsName: simulatedMetricsName || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadSimulatedHostMetrics,\n        loadCloudHostSimulatedMetrics,\n        removeCloudHostSimulatedMetrics,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CloudHostSimulatedMetricList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\nimport React, {createRef} from \"react\";\nimport {connect} from \"react-redux\";\nimport {INewSshCommand, ISshCommand} from \"../../ssh/SshCommand\";\nimport SshPanel, {ICommand, IFileTransfer} from \"../../ssh/SshPanel\";\nimport {addCommand} from \"../../../../actions\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport Field from \"../../../../components/form/Field\";\nimport Form, {IFields, requiredAndTrimmed} from \"../../../../components/form/Form\";\nimport {IReply} from \"../../../../utils/api\";\nimport {ICloudHost} from \"./CloudHost\";\n\nconst buildNewSshCommand = (): INewSshCommand => ({\n    background: false,\n    hostAddress: undefined,\n    command: undefined,\n});\n\ninterface CloudHostSshCommandProps {\n    cloudHost: Partial<ICloudHost>;\n}\n\ninterface DispatchToProps {\n    addCommand: (command: ICommand) => void;\n}\n\ntype Props = CloudHostSshCommandProps & DispatchToProps;\n\nclass CloudHostSshCommand extends BaseComponent<Props, {}> {\n\n    private sshPanel = createRef<any>();\n\n    private commandFilter = (command: ICommand | IFileTransfer) =>\n       command.hostAddress.publicIpAddress === this.props.cloudHost.publicIpAddress\n\n    public render() {\n        const command = buildNewSshCommand();\n        return (\n            <>\n                {/*@ts-ignore*/}\n                <Form id={'sshCommand'}\n                      fields={this.getFields()}\n                      values={command}\n                      isNew\n                      post={{\n                          textButton: 'Execute',\n                          url: `hosts/cloud/${this.props.cloudHost?.instanceId}/ssh`,\n                          successCallback: this.onPostSuccess,\n                          failureCallback: this.onPostFailure\n                      }}>\n                    <Field key='background'\n                           id='background'\n                           type='checkbox'\n                           checkbox={{label: 'execute in the background'}}/>\n                    <Field key='command'\n                           id='command'\n                           label='command'/>\n                </Form>\n                <SshPanel ref={this.sshPanel} filter={this.commandFilter}/>\n            </>\n        );\n    }\n\n    private onPostSuccess = (reply: IReply<ISshCommand>): void => {\n        const command = reply.data;\n        const timestampedCommand = {...command, timestamp: Date.now()};\n        this.props.addCommand(timestampedCommand);\n        this.sshPanel.current?.scrollToTop();\n    };\n\n    private onPostFailure = (reason: string): void =>\n        super.toast(`Command execution failed`, 10000, reason, true);\n\n    private getFields = (): IFields => (\n        {\n            background: {\n                id: 'background',\n                label: 'background',\n            },\n            command: {\n                id: 'command',\n                label: 'command',\n                validation: {rule: requiredAndTrimmed}\n            },\n        }\n    );\n\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    addCommand,\n};\n\nexport default connect(undefined, mapDispatchToProps)(CloudHostSshCommand);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React, {createRef} from \"react\";\nimport {ISshFile} from \"../../ssh/SshFile\";\nimport {ICloudHost} from \"./CloudHost\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport Field from \"../../../../components/form/Field\";\nimport Form, {IFields, required} from \"../../../../components/form/Form\";\nimport {IReply} from \"../../../../utils/api\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {addCommand, loadScripts} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport SshPanel, {ICommand, IFileTransfer} from \"../../ssh/SshPanel\";\n\nconst buildNewSshCommand = (): Partial<ISshFile> => ({\n    hostAddress: undefined,\n    filename: undefined,\n});\n\ninterface StateToProps {\n    scripts: string[];\n}\n\ninterface DispatchToProps {\n    loadScripts: () => void;\n    addCommand: (command: IFileTransfer) => void;\n}\n\ninterface SshFileProps {\n    cloudHost: Partial<ICloudHost>;\n}\n\ntype Props = SshFileProps & StateToProps & DispatchToProps;\n\nclass CloudHostSshFileTransfer extends BaseComponent<Props, {}> {\n\n    private sshPanel = createRef<any>();\n\n    public componentDidMount(): void {\n        this.props.loadScripts();\n    };\n\n    private commandFilter = (command: ICommand | IFileTransfer) =>\n        command.hostAddress.publicIpAddress === this.props.cloudHost.publicIpAddress\n\n    public render() {\n        const command = buildNewSshCommand();\n        return (\n            <>\n                {/*@ts-ignore*/}\n                <Form id={'sshCommand'}\n                      fields={this.getFields()}\n                      values={command}\n                      isNew={true}\n                      post={{\n                          textButton: 'Upload',\n                          url: `hosts/cloud/${this.props.cloudHost?.instanceId}/sftp`,\n                          successCallback: this.onPostSuccess,\n                          failureCallback: this.onPostFailure\n                      }}>\n                    <Field key='filename'\n                           id='filename'\n                           label='filename'\n                           type='dropdown'\n                           dropdown={{\n                               defaultValue: 'Select filename',\n                               values: this.props.scripts,\n                               emptyMessage: 'No scripts available'\n                           }}/>\n                </Form>\n                <SshPanel ref={this.sshPanel} filter={this.commandFilter}/>\n            </>\n        );\n    }\n\n    private onPostSuccess = (reply: IReply<string>, args: ISshFile): void => {\n        super.toast(`<span class=\"green-text\">File uploaded</span>`);\n        const transfer = {...args, timestamp: Date.now()};\n        this.props.addCommand(transfer);\n        this.sshPanel.current?.scrollToTop();\n    };\n\n    private onPostFailure = (reason: string): void =>\n        super.toast(`Failed to upload file`, 10000, reason, true);\n\n    private getFields = (): IFields => (\n        {\n            filename: {\n                id: 'filename',\n                label: 'filename',\n                validation: {rule: required}\n            },\n        }\n    );\n\n}\n\nfunction mapStateToProps(state: ReduxState): StateToProps {\n    const scripts = state.entities.scripts.data;\n    return {\n        scripts\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadScripts,\n    addCommand,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CloudHostSshFileTransfer);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {RouteComponentProps} from \"react-router\";\nimport IDatabaseData from \"../../../../components/IDatabaseData\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport Form, {ICustomButton, IFields, IFormLoading, required} from \"../../../../components/form/Form\";\nimport LoadingSpinner from \"../../../../components/list/LoadingSpinner\";\nimport {Error} from \"../../../../components/errors/Error\";\nimport Field from \"../../../../components/form/Field\";\nimport Tabs, {Tab} from \"../../../../components/tabs/Tabs\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {\n    addCloudHost,\n    addCloudHostRule,\n    addCloudHostSimulatedMetrics,\n    loadCloudHosts,\n    loadCloudRegions,\n    updateCloudHost\n} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport React from \"react\";\nimport {deleteData, IReply, postData, putData} from \"../../../../utils/api\";\nimport GenericHostRuleList from \"../GenericHostRuleList\";\nimport CloudHostRuleList from \"./CloudHostRuleList\";\nimport UnsavedChanged from \"../../../../components/form/UnsavedChanges\";\nimport {Schemas} from \"../../../../middleware/api\";\nimport {normalize} from \"normalizr\";\nimport {isNew} from \"../../../../utils/router\";\nimport GenericSimulatedHostMetricList from \"../GenericSimulatedHostMetricList\";\nimport CloudHostSimulatedMetricList from \"./CloudHostSimulatedMetricList\";\nimport formStyles from \"../../../../components/form/Form.module.css\";\nimport {IWorkerManager} from \"../../workerManagers/WorkerManager\";\nimport {ICoordinates} from \"../../../../components/map/LocationMap\";\nimport {IMarker} from \"../../../../components/map/Marker\";\nimport CloudHostSshCommand from \"./CloudHostSshCommand\";\nimport CloudHostSshFileTransfer from \"./CloudHostSshFileTransfer\";\nimport { isEqual } from \"lodash\";\n\nexport interface ICloudHost extends IDatabaseData {\n    instanceId: string;\n    imageId: string;\n    instanceType: string;\n    state: {\n        code: number,\n        name: string\n    };\n    publicDnsName: string;\n    publicIpAddress: string;\n    privateIpAddress: string;\n    placement: IPlacement;\n    awsRegion: IAwsRegion;\n    worker: IWorkerManager\n    managedByWorker: IWorkerManager;\n    hostRules?: string[];\n    hostSimulatedMetrics?: string[];\n}\n\nexport interface IState {\n    code: number,\n    name: string\n}\n\nexport interface IPlacement {\n    affinity: any;\n    availabilityZone: string;\n    groupName: string;\n    hostId: string;\n    spreadDomain: string;\n    tenancy: string;\n}\n\ninterface INewCloudHost {\n    coordinates?: ICoordinates,\n}\n\nconst buildNewCloudHost = (): INewCloudHost => ({\n    coordinates: undefined,\n});\n\nexport const awsInstanceStates = {\n    PENDING: {name: \"pending\", code: 0},\n    RUNNING: {name: \"running\", code: 16},\n    SHUTTING_DOWN: {name: \"shutting-down\", code: 32},\n    TERMINATED: {name: \"terminated\", code: 48},\n    STOPPING: {name: \"stopping\", code: 64},\n    STOPPED: {name: \"stopped\", code: 80}\n};\n\nexport interface IAwsRegion {\n    zone: string,\n    name: string,\n    coordinates: ICoordinates,\n    available?: boolean,\n}\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    cloudHost?: Partial<ICloudHost>;\n    formCloudHost?: Partial<ICloudHost>;\n    newCloudHost?: INewCloudHost;\n    cloudRegions: IAwsRegion[];\n}\n\ninterface DispatchToProps {\n    loadCloudHosts: (instanceId: string) => void;\n    loadCloudRegions: () => void;\n    addCloudHost: (cloudHost: ICloudHost) => void;\n    updateCloudHost: (previousCloudHost: ICloudHost, currentCloudHost: ICloudHost) => void;\n    addCloudHostRule: (cloudHost: string, ruleName: string) => void;\n    addCloudHostSimulatedMetrics: (cloudHost: string, simulatedMetrics: string[]) => void;\n}\n\ninterface MatchParams {\n    instanceId: string;\n}\n\ninterface LocationState {\n    data: ICloudHost,\n    selected: 'cloudHost' | 'rules' | 'genericRules' | 'simulatedMetrics' | 'genericSimulatedMetrics' | 'ssh' | 'sftp'\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ninterface State {\n    cloudHost?: ICloudHost,\n    formCloudHost?: ICloudHost,\n    unsavedRules: string[],\n    unsavedSimulatedMetrics: string[],\n    loading: IFormLoading,\n}\n\nclass CloudHost extends BaseComponent<Props, State> {\n\n    state: State = {\n        unsavedRules: [],\n        unsavedSimulatedMetrics: [],\n        loading: undefined,\n    };\n    private mounted = false;\n\n    public componentDidMount(): void {\n        this.loadCloudHost();\n        this.props.loadCloudRegions();\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    render() {\n        return (\n            <MainLayout>\n                {this.shouldShowSaveButton() && !isNew(this.props.location.search) && <UnsavedChanged/>}\n                <div className=\"container\">\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private loadCloudHost = () => {\n        if (!isNew(this.props.location.search)) {\n            const instanceId = this.props.match.params.instanceId;\n            this.props.loadCloudHosts(instanceId);\n        }\n    };\n\n    private getCloudHost = () =>\n        this.props.cloudHost || this.state.cloudHost || {};\n\n    private getFormCloudHost = () =>\n        this.props.formCloudHost || this.state.formCloudHost;\n\n    private isNew = () =>\n        isNew(this.props.location.search);\n\n    private onPostSuccess = (reply: IReply<ICloudHost>): void => {\n        const cloudHost = reply.data;\n        super.toast(`<span class=\"green-text\">Cloud instance ${this.mounted ? `<b class=\"white-text\">${cloudHost.instanceId}</b>` : `<a href=/hosts/cloud/${cloudHost.instanceId}><b>${cloudHost.instanceId}</b></a>`} has started</span>`);\n        this.props.addCloudHost(cloudHost);\n        this.saveEntities(cloudHost);\n        if (this.mounted) {\n            this.updateCloudHost(cloudHost);\n            this.props.history.replace(cloudHost.instanceId);\n        }\n    };\n\n    private onPostFailure = (reason: string): void =>\n        super.toast(`Unable to start a new cloud instance`, 10000, reason, true);\n\n    private shouldShowSaveButton = () =>\n        !!this.state.unsavedRules.length\n        || !!this.state.unsavedSimulatedMetrics.length;\n\n    private saveEntities = (cloudHost: ICloudHost) => {\n        this.saveCloudHostRules(cloudHost);\n        this.saveCloudHostSimulatedMetrics(cloudHost);\n    };\n\n    private addCloudHostRule = (rule: string): void => {\n        this.setState({\n            unsavedRules: this.state.unsavedRules.concat(rule)\n        });\n    };\n\n    private removeCloudHostRules = (rules: string[]): void => {\n        this.setState({\n            unsavedRules: this.state.unsavedRules.filter(rule => !rules.includes(rule))\n        });\n    };\n\n    private saveCloudHostRules = (cloudHost: ICloudHost): void => {\n        const {unsavedRules} = this.state;\n        if (unsavedRules.length) {\n            postData(`hosts/cloud/${cloudHost.instanceId}/rules`, unsavedRules,\n                () => this.onSaveRulesSuccess(cloudHost),\n                (reason) => this.onSaveRulesFailure(cloudHost, reason));\n        }\n    };\n\n    private onSaveRulesSuccess = (cloudHost: ICloudHost): void => {\n        this.state.unsavedRules.forEach(rule => this.props.addCloudHostRule(cloudHost.instanceId, rule));\n        if (this.mounted) {\n            this.setState({unsavedRules: []});\n        }\n    };\n\n    private onSaveRulesFailure = (cloudHost: ICloudHost, reason: string): void =>\n        super.toast(`Unable to save rules of instance ${this.mounted ? `<b>${cloudHost.instanceId}</b>` : `<a href=/hosts/cloud/${cloudHost.instanceId}><b>${cloudHost.instanceId}</b></a>`} `, 10000, reason, true);\n\n    private removeHostSimulatedMetrics = (simulatedMetrics: string[]): void => {\n        this.setState({\n            unsavedSimulatedMetrics: this.state.unsavedSimulatedMetrics.filter(metric => !simulatedMetrics.includes(metric))\n        });\n    };\n\n    private addHostSimulatedMetric = (simulatedMetric: string): void => {\n        this.setState({\n            unsavedSimulatedMetrics: this.state.unsavedSimulatedMetrics.concat(simulatedMetric)\n        });\n    };\n\n    private saveCloudHostSimulatedMetrics = (cloudHost: ICloudHost): void => {\n        const {unsavedSimulatedMetrics} = this.state;\n        if (unsavedSimulatedMetrics.length) {\n            postData(`hosts/cloud/${cloudHost.instanceId}/simulated-metrics`, unsavedSimulatedMetrics,\n                () => this.onSaveSimulatedMetricsSuccess(cloudHost),\n                (reason) => this.onSaveSimulatedMetricsFailure(cloudHost, reason));\n        }\n    };\n\n    private onSaveSimulatedMetricsSuccess = (cloudHost: ICloudHost): void => {\n        this.props.addCloudHostSimulatedMetrics(cloudHost.instanceId, this.state.unsavedSimulatedMetrics);\n        if (this.mounted) {\n            this.setState({unsavedSimulatedMetrics: []});\n        }\n    };\n\n    private onSaveSimulatedMetricsFailure = (cloudHost: ICloudHost, reason: string): void =>\n        super.toast(`Unable to save simulated metrics of instance ${this.mounted ? `<b>${cloudHost.instanceId}</b>` : `<a href=/hosts/cloud/${cloudHost.instanceId}><b>${cloudHost.instanceId}</b></a>`}`, 10000, reason, true);\n\n    private startStopTerminateButtons = (): ICustomButton[] => {\n        const buttons: ICustomButton[] = [];\n        const cloudHost = this.getCloudHost();\n        const state = this.getCloudHost()?.state;\n        if (isEqual(state, awsInstanceStates.STOPPED)) {\n            buttons.push({\n                button:\n                    <button className={`btn-flat btn-small waves-effect waves-light blue-text ${formStyles.formButton}`}\n                            onClick={this.startCloudHost}>\n                        Start\n                    </button>\n            });\n        }\n        if (isEqual(state, awsInstanceStates.RUNNING)) {\n            buttons.push({\n                button:\n                    <button className={`btn-flat btn-small waves-effect waves-light blue-text ${formStyles.formButton}`}\n                            onClick={this.stopCloudHost}>\n                        Stop\n                    </button>\n            });\n        }\n        if (!isEqual(state, awsInstanceStates.TERMINATED)\n            && !isEqual(state, awsInstanceStates.SHUTTING_DOWN)) {\n            buttons.push({\n                button:\n                    <button\n                        className={`modal-trigger btn-flat btn-small waves-effect waves-light red-text ${formStyles.formButton}`}\n                        data-target='terminate-cloudHost'>\n                        Terminate\n                    </button>,\n                confirm: {\n                    id: 'terminate-cloudHost',\n                    message: `terminate instance ${cloudHost?.instanceId}`,\n                    onClickConfirm: this.terminateCloudHost\n                }\n            });\n        }\n        return buttons;\n    };\n\n    private startCloudHost = () => {\n        const cloudHost = this.getCloudHost();\n        const url = `hosts/cloud/${cloudHost.instanceId}/start`;\n        this.setState({loading: {method: 'put', url: url}});\n        putData(url, undefined,\n            (reply: IReply<ICloudHost>) => this.onStartSuccess(reply.data),\n            (reason) => this.onStartFailure(reason, cloudHost));\n    };\n\n    private onStartSuccess = (cloudHost: ICloudHost) => {\n        super.toast(`<span class=\"green-text\">Successfully started ${this.mounted ? `<b class=\"white-text\">${cloudHost.instanceId}</b>` : `<a href=/hosts/cloud/${cloudHost.instanceId}><b>${cloudHost.instanceId}</b></a>`} instance</span>`, 15000);\n        const previousCloudHost = this.getCloudHost();\n        if (previousCloudHost?.id) {\n            this.props.updateCloudHost(previousCloudHost as ICloudHost, cloudHost)\n        }\n        if (this.mounted) {\n            this.updateCloudHost(cloudHost);\n        }\n    };\n\n    private onStartFailure = (reason: string, cloudHost: Partial<ICloudHost>) => {\n        super.toast(`Failed to start ${this.mounted ? `<b>${cloudHost.instanceId}</b>` : `<a href=/hosts/cloud/${cloudHost.instanceId}><b>${cloudHost.instanceId}</b></a>`} instance`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: undefined});\n        }\n    };\n\n    private stopCloudHost = () => {\n        const cloudHost = this.getCloudHost();\n        const url = `hosts/cloud/${cloudHost.instanceId}/stop`;\n        this.setState({loading: {method: 'put', url: url}});\n        putData(url, undefined,\n            (reply: IReply<ICloudHost>) => this.onStopSuccess(reply.data),\n            (reason) => this.onStopFailure(reason, cloudHost));\n    };\n\n    private onStopSuccess = (cloudHost: ICloudHost) => {\n        super.toast(`<span class=\"green-text\">Successfully stopped ${this.mounted ? `<b class=\"white-text\">${cloudHost.instanceId}</b>` : `<a href=/hosts/cloud/${cloudHost.instanceId}><b>${cloudHost.instanceId}</b></a>`} instance</span>`, 15000);\n        const previousCloudHost = this.getCloudHost();\n        if (previousCloudHost?.id) {\n            this.props.updateCloudHost(previousCloudHost as ICloudHost, cloudHost)\n        }\n        if (this.mounted) {\n            this.updateCloudHost(cloudHost);\n        }\n    };\n\n    private onStopFailure = (reason: string, cloudHost: Partial<ICloudHost>) => {\n        super.toast(`Failed to stop ${this.mounted ? `<b>${cloudHost.instanceId}</b>` : `<a href=/hosts/cloud/${cloudHost.instanceId}><b>${cloudHost.instanceId}</b></a>`} instance`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: undefined});\n        }\n    };\n\n    private terminateCloudHost = () => {\n        const cloudHost = this.getCloudHost();\n        const url = `hosts/cloud/${cloudHost.instanceId}`;\n        this.setState({loading: {method: 'delete', url: url}});\n        deleteData(url,\n            () => this.onTerminateSuccess(cloudHost),\n            (reason) => this.onTerminateFailure(reason, cloudHost));\n    };\n\n    private onTerminateSuccess = (cloudHost: Partial<ICloudHost>) => {\n        super.toast(`<span class=\"green-text\">Successfully terminated <b class=\"white-text\">${cloudHost.instanceId}</b> instance</span>`, 15000);\n        if (this.mounted) {\n            this.props.history.push('/hosts/cloud');\n        }\n    };\n\n    private onTerminateFailure = (reason: string, cloudHost: Partial<ICloudHost>) => {\n        super.toast(`Failed to terminate ${this.mounted ? `<b>${cloudHost.instanceId}</b>` : `<a href=/hosts/cloud/${cloudHost.instanceId}><b>${cloudHost.instanceId}</b></a>`} instance`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: undefined});\n        }\n    };\n\n    private updateCloudHost = (cloudHost: ICloudHost) => {\n        cloudHost = Object.values(normalize(cloudHost, Schemas.CLOUD_HOST).entities.cloudHosts || {})[0];\n        const formCloudHost = {...cloudHost};\n        removeFields(formCloudHost);\n        this.setState({cloudHost: cloudHost, formCloudHost: formCloudHost, loading: undefined});\n    };\n\n    private getFields = (cloudHost: Partial<ICloudHost> | INewCloudHost): IFields =>\n        Object.entries(cloudHost).map(([key, _]) => {\n            return {\n                [key]: {\n                    id: key,\n                    label: key,\n                    validation: {rule: required}\n                }\n            };\n        }).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});\n\n    private cloudHostState = (state: IState) =>\n        state.name;\n\n    private cloudHostPlacement = (placement: IPlacement) =>\n        placement.availabilityZone;\n\n    private managedByWorker = (worker: IWorkerManager) =>\n        worker.id.toString();\n\n    private cloudHost = () => {\n        const {isLoading, error, newCloudHost} = this.props;\n        const isNewCloudHost = this.isNew();\n        const cloudHost = isNewCloudHost ? newCloudHost : this.getCloudHost();\n        const formCloudHost = this.getFormCloudHost();\n        // @ts-ignore\n        const cloudHostKey: (keyof ICloudHost) = formCloudHost && Object.keys(formCloudHost)[0];\n        return (\n            <>\n                {!isNewCloudHost && isLoading && <LoadingSpinner/>}\n                {!isNewCloudHost && !isLoading && error && <Error message={error}/>}\n                {(isNewCloudHost || !isLoading) && (isNewCloudHost || !error) && cloudHost && (\n                    /*@ts-ignore*/\n                    <Form id={cloudHostKey}\n                          fields={this.getFields(cloudHost)}\n                          values={cloudHost}\n                          isNew={isNewCloudHost}\n                          showSaveButton={this.shouldShowSaveButton()}\n                          post={{\n                              url: 'hosts/cloud',\n                              textButton: isNewCloudHost ? 'launch' : 'save',\n                              successCallback: this.onPostSuccess,\n                              failureCallback: this.onPostFailure\n                          }}\n                          customButtons={this.startStopTerminateButtons()}\n                          saveEntities={this.saveEntities}\n                          loading={this.state.loading}>\n                        {isNewCloudHost ?\n                            <Field key='coordinates' id='coordinates' type='map' label='select position'\n                                   map={{\n                                       editable: this.isNew(),\n                                       singleMarker: true,\n                                       zoomable: true,\n                                       labeled: true,\n                                       loading: isLoading,\n                                       markers: this.props.cloudRegions.filter(region => region.available).map(region => ({\n                                           title: region.zone + \" | \" + region.name,\n                                           latitude: region.coordinates.latitude,\n                                           longitude: region.coordinates.longitude,\n                                           color: 'green'\n                                       }))\n                                   }}/>\n                            : formCloudHost && Object.keys(formCloudHost).map((key, index) =>\n                            key === 'state'\n                                ? <Field<IState> key={index}\n                                                 id={key}\n                                                 label={key}\n                                                 valueToString={this.cloudHostState}/>\n                                : key === 'placement'\n                                ? <Field<IPlacement> key={index}\n                                                     id={key}\n                                                     label={key}\n                                                     valueToString={this.cloudHostPlacement}/>\n                                : key === 'awsRegion'\n                                    ? <Field<IAwsRegion> key='awsRegion' id='awsRegion' type='map'\n                                                         map={{\n                                                             editable: false,\n                                                             singleMarker: true,\n                                                             zoomable: true,\n                                                             labeled: true,\n                                                             loading: isLoading,\n                                                             valueToMarkers: (regions: IAwsRegion[]): IMarker[] =>\n                                                                 regions.map(region => ({\n                                                                     title: region.zone + \" | \" + region.name,\n                                                                     label: formCloudHost?.instanceId,\n                                                                     latitude: region.coordinates.latitude,\n                                                                     longitude: region.coordinates.longitude,\n                                                                 }))\n                                                         }}/>\n                                    : key === 'managedByWorker'\n                                        ? <Field<IWorkerManager> key={index}\n                                                                 id={key}\n                                                                 label={key}\n                                                                 valueToString={this.managedByWorker}/>\n                                        : <Field key={index}\n                                                 id={key}\n                                                 label={key}/>)}\n                    </Form>\n                )}\n            </>\n        )\n    };\n\n    private rules = (): JSX.Element =>\n        <CloudHostRuleList isLoadingCloudHost={this.props.isLoading}\n                           loadCloudHostError={!this.isNew() ? this.props.error : undefined}\n                           cloudHost={this.getCloudHost()}\n                           unsavedRules={this.state.unsavedRules}\n                           onAddHostRule={this.addCloudHostRule}\n                           onRemoveHostRules={this.removeCloudHostRules}/>;\n\n    private genericRules = (): JSX.Element =>\n        <GenericHostRuleList/>;\n\n    private simulatedMetrics = (): JSX.Element =>\n        <CloudHostSimulatedMetricList isLoadingCloudHost={this.props.isLoading}\n                                      loadCloudHostError={!this.isNew() ? this.props.error : undefined}\n                                      cloudHost={this.getCloudHost()}\n                                      unsavedSimulatedMetrics={this.state.unsavedSimulatedMetrics}\n                                      onAddSimulatedHostMetric={this.addHostSimulatedMetric}\n                                      onRemoveSimulatedHostMetrics={this.removeHostSimulatedMetrics}/>;\n\n    private genericSimulatedMetrics = (): JSX.Element =>\n        <GenericSimulatedHostMetricList/>;\n\n    private ssh = (): JSX.Element =>\n        <CloudHostSshCommand cloudHost={this.getCloudHost()}/>;\n\n    private sftp = (): JSX.Element =>\n        <CloudHostSshFileTransfer cloudHost={this.getCloudHost()}/>;\n\n    private tabs = (): Tab[] => {\n        const tabs = [\n            {\n                title: 'Cloud host',\n                id: 'cloudHost',\n                content: () => this.cloudHost(),\n                active: this.props.location.state?.selected === 'cloudHost'\n            },\n            {\n                title: 'Rules',\n                id: 'rules',\n                content: () => this.rules(),\n                active: this.props.location.state?.selected === 'rules'\n            },\n            {\n                title: 'Generic rules',\n                id: 'genericRules',\n                content: () => this.genericRules(),\n                active: this.props.location.state?.selected === 'genericRules'\n            },\n            {\n                title: 'Simulated metrics',\n                id: 'simulatedMetrics',\n                content: () => this.simulatedMetrics(),\n                active: this.props.location.state?.selected === 'simulatedMetrics'\n            },\n            {\n                title: 'Generic simulated metrics',\n                id: 'genericSimulatedMetrics',\n                content: () => this.genericSimulatedMetrics(),\n                active: this.props.location.state?.selected === 'genericSimulatedMetrics'\n            },\n        ];\n        if (isEqual(this.getCloudHost().state, awsInstanceStates.RUNNING)) {\n            tabs.push({\n                title: 'Execute command',\n                id: 'ssh',\n                content: () => this.ssh(),\n                active: this.props.location.state?.selected === 'ssh'\n            });\n            tabs.push({\n                title: 'Upload file',\n                id: 'sftp',\n                content: () => this.sftp(),\n                active: this.props.location.state?.selected === 'sftp'\n            });\n        }\n        return tabs;\n    }\n\n}\n\nfunction removeFields(cloudHost: Partial<ICloudHost>) {\n    delete cloudHost[\"id\"];\n    if (!cloudHost.publicDnsName) {\n        delete cloudHost[\"publicDnsName\"];\n    }\n    if (!cloudHost.publicIpAddress) {\n        delete cloudHost[\"publicIpAddress\"];\n    }\n    if (!cloudHost.privateIpAddress) {\n        delete cloudHost[\"privateIpAddress\"];\n    }\n    delete cloudHost[\"worker\"];\n    if (!cloudHost.managedByWorker) {\n        delete cloudHost[\"managedByWorker\"];\n    }\n    delete cloudHost[\"hostRules\"];\n    delete cloudHost[\"hostSimulatedMetrics\"];\n}\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.hosts.cloud.isLoadingHosts || state.entities.hosts.cloud.regions.isLoadingRegions;\n    const error = state.entities.hosts.cloud.loadHostsError || state.entities.hosts.cloud.regions.loadRegionsError;\n    const instanceId = props.match.params.instanceId;\n    const cloudHost = !isNew(props.location.search) ? state.entities.hosts.cloud.data[instanceId] : undefined;\n    const newCloudHost = isNew(props.location.search) ? buildNewCloudHost() : undefined;\n    let formCloudHost;\n    if (cloudHost) {\n        formCloudHost = {...cloudHost};\n        removeFields(formCloudHost);\n    }\n    return {\n        isLoading,\n        error,\n        cloudHost,\n        newCloudHost,\n        formCloudHost,\n        cloudRegions: state.entities.hosts.cloud.regions.data,\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadCloudHosts,\n    loadCloudRegions,\n    addCloudHost,\n    updateCloudHost,\n    addCloudHostRule,\n    addCloudHostSimulatedMetrics,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CloudHost);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SimulatedMetrics_container__3HekU\",\"collapsibleSubtitle\":\"SimulatedMetrics_collapsibleSubtitle__1giox\",\"collapsibleCardList\":\"SimulatedMetrics_collapsibleCardList__3CVaZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LogsList_container__2llQP\",\"list\":\"LogsList_list__1SaIy\",\"item\":\"LogsList_item__3GGrD\",\"lastItem\":\"LogsList_lastItem__GGENC\",\"column\":\"LogsList_column__32zEI\",\"headerItem\":\"LogsList_headerItem__-nPmd LogsList_item__3GGrD\",\"headerColumn\":\"LogsList_headerColumn__3qAYH\",\"timestampColumn\":\"LogsList_timestampColumn__1qEiJ LogsList_headerColumn__3qAYH\",\"levelColumn\":\"LogsList_levelColumn__3UFSM LogsList_headerColumn__3qAYH\",\"infoColumn\":\"LogsList_infoColumn__2TTuz LogsList_headerColumn__3qAYH\"};","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport axios, {AxiosResponse} from \"axios\";\nimport {API_URL, setupAxiosInterceptors} from \"./api\";\nimport Cookies from 'universal-cookie';\n\nconst USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nexport const basicAuthenticate = (username: string, password: string): Promise<AxiosResponse> =>\n    axios.get(`${API_URL}/basicauth`, {\n        headers: {\n            authorization: createBasicAuthToken(username, password)\n        }\n    });\n\nexport const createBasicAuthToken = (username: string, password: string): string =>\n    `Basic ` + window.btoa(username + \":\" + password);\n\nexport const isAuthenticated = (): boolean =>\n    !!getLoggedInUser();\n\nexport const registerSuccessfulLogin = (username: string, password: string): void => {\n    // 1 year expire date\n    let expires = new Date();\n    expires.setTime(expires.getTime() + 365 * 24 * 60 * 60 * 1000);\n    new Cookies().set(USER_NAME_SESSION_ATTRIBUTE_NAME, username, {path: '/', expires});\n    setupAxiosInterceptors(createBasicAuthToken(username, password));\n};\n\nexport const getLoggedInUser = () =>\n    new Cookies().get(USER_NAME_SESSION_ATTRIBUTE_NAME);\n\nexport const logout = () => {\n    new Cookies().remove(USER_NAME_SESSION_ATTRIBUTE_NAME);\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {MenuItem} from \"react-contextmenu\";\nimport React from \"react\";\n\ninterface Props {\n    className?: string;\n}\n\nconst DividerContextMenuItem = ({className}: Props) => (\n    <MenuItem className={`${className ? className + ' ' : ''}react-contextmenu-item--divider`}/>\n);\n\nexport default DividerContextMenuItem;","import styles from \"./Ssh.module.css\";\nimport ScrollBar from \"react-perfect-scrollbar\";\nimport {Resizable} from \"re-resizable\";\nimport React from \"react\";\nimport {ReduxState} from \"../../../reducers\";\nimport {addCommand, clearCommands} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport {ISshCommand} from \"./SshCommand\";\nimport {ISshFile} from \"./SshFile\";\n\nexport interface ICommand extends ISshCommand {\n    timestamp: number;\n}\n\nexport interface IFileTransfer extends ISshFile {\n    timestamp: number;\n}\n\ninterface SshPanelStateToProps {\n    sidenavVisible: boolean;\n    commands: (ICommand | IFileTransfer)[];\n}\n\ninterface SshPanelDispatchToProps {\n    addCommand: (command: ICommand | IFileTransfer) => void;\n    clearCommands: () => void;\n}\n\ninterface Props {\n    filter?: (command: ICommand | IFileTransfer) => boolean;\n}\n\nexport type SshPanelProps = Props & SshPanelStateToProps & SshPanelDispatchToProps;\n\ninterface State {\n    commandsHeight: number;\n    animate: boolean;\n}\n\nclass SshPanel extends React.Component<SshPanelProps, State> implements SshPanel {\n\n    private commandsContainer: any = null;\n    private commandsScrollbar: ScrollBar | null = null;\n    private leftControlsScrollbar: ScrollBar | null = null;\n    private rightControlsScrollbar: ScrollBar | null = null;\n    private COMMANDS_MIN_HEIGHT = 44;\n    private COMMANDS_DEFAULT_HEIGHT = 175;\n\n    constructor(props: SshPanelProps) {\n        super(props);\n        this.state = {\n            commandsHeight: this.COMMANDS_DEFAULT_HEIGHT,\n            animate: false,\n        }\n    }\n\n    public componentDidMount() {\n        this.updateScrollbars();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<SshPanelProps>, prevState: Readonly<State>, snapshot?: any) {\n        if (!this.state.animate && prevProps.sidenavVisible !== this.props.sidenavVisible) {\n            this.setState({animate: true});\n        }\n    }\n\n    public scrollToTop = () =>\n        this.commandsContainer.scrollTop = Number.MAX_SAFE_INTEGER;\n\n    private filteredCommands = () => {\n        const {commands, filter} = this.props;\n        return !filter ? commands : commands.filter((command: ICommand | IFileTransfer) => filter(command));\n    }\n\n    public render() {\n        const body = document.body, html = document.documentElement;\n        const maxHeight = Math.max(body.scrollHeight, body.offsetHeight,\n            html.clientHeight, html.scrollHeight, html.offsetHeight) - 50 - 56; // 56 for header and 50 for footer\n        return <Resizable\n            className={`${styles.commandsContainer} ${this.state.animate ? (this.props.sidenavVisible ? styles.shrink : styles.expand) : ''}`}\n            style={{\n                width: this.props.sidenavVisible ? 'calc(100vw - 200px)' : '100vw',\n                left: this.props.sidenavVisible ? '200px' : '0'\n            }}\n            maxHeight={maxHeight}\n            onResize={this.onResize}\n            enable={{top: true}}\n            size={{\n                width: this.props.sidenavVisible ? window.innerWidth - 200 : '100vw',\n                height: this.state.commandsHeight,\n            }}\n            onResizeStop={(e, direction, ref, d) => {\n                this.setState({\n                    commandsHeight: this.state.commandsHeight + d.height,\n                });\n            }}>\n            <div className={styles.controlsMenuLeft}>\n                <ScrollBar ref={(ref) => {\n                    this.leftControlsScrollbar = ref;\n                }}>\n                    <button className='btn-floating btn-flat btn-small tooltipped'\n                            onClick={this.props.clearCommands}\n                            data-position={'top'}\n                            data-tooltip={'Clear'}>\n                        <i className='material-icons grey-text'>delete_sweep</i>\n                    </button>\n                </ScrollBar>\n            </div>\n            <ScrollBar ref={(ref) => this.commandsScrollbar = ref}\n                       style={{flexGrow: 1}}\n                       containerRef={(container) => {\n                           this.commandsContainer = container;\n                       }}>\n                <div>\n                    <div className={styles.commandsHeader}>\n                        <div className={styles.commandsTitle}>\n                            Commands\n                        </div>\n                    </div>\n                </div>\n                <div className={styles.commands}>\n                    {this.filteredCommands().map((command: ICommand | IFileTransfer, index: number) => (\n                        <div key={index}>\n                            {'output' in command ?\n                                <>\n                                    <div>\n                                        <span className={styles.time}>{this.timestampToString(command.timestamp)}</span>\n                                        {!this.props.filter &&\n                                        <span className={styles.hostname}>{`${command.hostAddress.publicIpAddress}${command.hostAddress.privateIpAddress ? '/' + command.hostAddress.privateIpAddress : ''}:`}</span>}\n                                        <span className={styles.command}>{command.command}</span>\n                                        {command.exitStatus !== 0 && command.error !== null && command.output !== null &&\n                                        <span className={styles.exitStatus}>(exit: {command.exitStatus})</span>}\n                                    </div>\n                                    {command.error !== null && command.output !== null &&\n                                    <div dangerouslySetInnerHTML={{\n                                        __html:\n                                            ((command.exitStatus === 0 && command.error.length && command.error[0] === \"\") ? command.output.join(\"\\n\") : command.error.join(\"\\n\"))\n                                                .replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')\n                                    }}/>}\n                                </>\n                                :\n                                <>\n                                    <div>\n                                        <span className={styles.time}>{this.timestampToString(command.timestamp)}</span>\n                                        File {command.filename} transferred\n                                        to {`${command.hostAddress.publicIpAddress}${command.hostAddress.privateIpAddress ? '/' + command.hostAddress.privateIpAddress : ''}`}\n                                    </div>\n                                </>\n                            }\n                        </div>\n                    ))}\n                </div>\n            </ScrollBar>\n            <div className={styles.controlsMenuRight}>\n                <ScrollBar ref={(ref) => {\n                    this.rightControlsScrollbar = ref;\n                }}>\n                    <button className={`btn-floating btn-flat btn-small tooltipped`}\n                            onClick={this.toggleCommands}\n                            data-position={'left'}\n                            data-tooltip={this.state.commandsHeight <= this.COMMANDS_MIN_HEIGHT ? 'Show' : 'Hide'}>\n                        <i className='material-icons'>{this.state.commandsHeight <= this.COMMANDS_MIN_HEIGHT ? 'keyboard_arrow_up' : 'keyboard_arrow_down'}</i>\n                    </button>\n                </ScrollBar>\n            </div>\n        </Resizable>;\n    }\n\n    private onResize = () =>\n        this.updateScrollbars();\n\n    private updateScrollbars = () => {\n        this.commandsScrollbar?.updateScroll();\n        this.leftControlsScrollbar?.updateScroll();\n        this.rightControlsScrollbar?.updateScroll();\n    }\n\n    private toggleCommands = () =>\n        this.setState({commandsHeight: this.state.commandsHeight <= this.COMMANDS_MIN_HEIGHT ? this.COMMANDS_DEFAULT_HEIGHT : this.COMMANDS_MIN_HEIGHT},\n            () => setTimeout(() => this.updateScrollbars(), 500));\n\n    private timestampToString = (timestamp: number): string => {\n        const date = new Date(timestamp);\n        return this.dateFormat(date);\n    }\n\n    private dateFormat = (date: Date) => {\n        let monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n        let day = date.getDate();\n\n        let monthIndex = date.getMonth();\n        let monthName = monthNames[monthIndex];\n\n        let year = date.getFullYear().toString().substr(-2);\n\n        let millis = this.pad(date.getMilliseconds(), 3);\n\n        return `${day}/${monthName}/${year} ${date.toLocaleTimeString()}.${millis}`;\n    }\n\n    private pad = (n: number, width: number, padWith = 0) =>\n        (String(padWith).repeat(width) + String(n)).slice(String(n).length);\n}\n\nconst mapStateToProps = (state: ReduxState): SshPanelStateToProps => (\n    {\n        sidenavVisible: state.ui.sidenav.user && state.ui.sidenav.width,\n        commands: state.entities.commands\n    }\n);\n\nconst mapDispatchToProps: SshPanelDispatchToProps = {\n    addCommand,\n    clearCommands,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SshPanel);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport React from \"react\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport listItemStyles from \"../../../components/list/ListItem.module.css\";\nimport {Link} from \"react-router-dom\";\nimport ControlledList from \"../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {loadCloudHosts, loadEdgeHosts, loadWorkerManagerHosts, unassignWorkerManagerHosts,} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport {IWorkerManager} from \"./WorkerManager\";\nimport {INode} from \"../nodes/Node\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    nodes: { [key: string]: INode };\n    assignedHosts: string[];\n}\n\ninterface DispatchToProps {\n    loadCloudHosts: () => void;\n    loadEdgeHosts: () => void;\n    loadWorkerManagerHosts: (id: string) => void;\n    unassignWorkerManagerHosts: (id: string, assignedHosts: string[]) => void;\n}\n\ninterface WorkerManagerHostListProps {\n    isLoadingWorkerManager: boolean;\n    loadWorkerManagerError?: string | null;\n    workerManager: IWorkerManager | Partial<IWorkerManager> | undefined;\n    unSavedHosts: string[];\n    onAssignHost: (assignedHost: string) => void;\n    onUnassignHosts: (assignedHosts: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & WorkerManagerHostListProps;\n\ninterface State {\n    selectedHost?: string;\n    entitySaved: boolean;\n}\n\nclass AssignedHostsList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadCloudHosts();\n        this.props.loadEdgeHosts();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.workerManager?.id && this.props.workerManager?.id) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList<string>\n            isLoading={!isNew ? this.props.isLoadingWorkerManager || this.props.isLoading : undefined}\n            error={!isNew ? this.props.loadWorkerManagerError || this.props.error : undefined}\n            emptyMessage={`Assigned hosts list is empty`}\n            data={this.props.assignedHosts}\n            dropdown={{\n                id: 'workerManagerHosts',\n                title: 'Assign host',\n                empty: 'No hosts to assign',\n                data: this.getSelectableHosts(),\n            }}\n            show={this.assignedHost}\n            onAdd={this.onAdd}\n            onRemove={this.onRemove}\n            onDelete={{\n                url: `worker-managers/${this.props.workerManager?.id}/assigned-hosts`,\n                successCallback: this.onDeleteSuccess,\n                failureCallback: this.onDeleteFailure\n            }}\n            removeButtonText={'Unassign'}\n            entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.workerManager?.id) {\n            const {id} = this.props.workerManager;\n            this.props.loadWorkerManagerHosts(id.toString());\n        }\n    };\n\n    private isNew = () =>\n        this.props.workerManager?.id === undefined;\n\n    private assignedHost = (index: number, assignedHost: string, separate: boolean, checked: boolean,\n                            handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unSavedHosts.includes(assignedHost);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${listItemStyles.linkedItemContent}`}>\n                    <label>\n                        <input id={assignedHost}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? listItemStyles.unsavedItem : undefined}>\n                {assignedHost}\n              </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/nodes/${assignedHost}`}\n                          className={`${listItemStyles.link} waves-effect`}>\n                        <i className={`${listItemStyles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (assignedHost: string): void => {\n        this.props.onAssignHost(assignedHost);\n    };\n\n    private onRemove = (assignedHosts: string[]): void => {\n        this.props.onUnassignHosts(assignedHosts);\n    };\n\n    private onDeleteSuccess = (assignedHosts: string[]): void => {\n        if (this.props.workerManager?.id) {\n            const {id} = this.props.workerManager;\n            this.props.unassignWorkerManagerHosts(id.toString(), assignedHosts);\n        }\n    };\n\n    private onDeleteFailure = (reason: string, assignedHosts?: string[]): void =>\n        super.toast(`Unable to unassign worker-manager <b>${this.props.workerManager?.id}</b> from ${assignedHosts?.length === 1 ? assignedHosts[0] : 'hosts'}`, 10000, reason, true);\n\n    private getSelectableHosts = () => {\n        const {assignedHosts, nodes, unSavedHosts} = this.props;\n        return Object.entries(nodes)\n            .filter(([_, node]) => node.state === 'ready'\n                && !assignedHosts.includes(node.publicIpAddress)\n                && !unSavedHosts.includes(node.publicIpAddress)\n                && this.props.workerManager?.container?.publicIpAddress !== node.publicIpAddress)\n            .map(([_, node]) => node.publicIpAddress)\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: WorkerManagerHostListProps): StateToProps {\n    const id = ownProps.workerManager?.id;\n    const workerManager = id && state.entities.workerManagers.data[id];\n    const assignedHosts = workerManager && workerManager.assignedHosts;\n    return {\n        isLoading: state.entities.workerManagers.isLoadingWorkerManagers,\n        error: state.entities.workerManagers.loadWorkerManagersError,\n        nodes: state.entities.nodes.data,\n        assignedHosts: (assignedHosts && Object.values(assignedHosts)) || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadCloudHosts,\n        loadEdgeHosts,\n        loadWorkerManagerHosts,\n        unassignWorkerManagerHosts,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AssignedHostsList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport React from \"react\";\nimport {RouteComponentProps} from \"react-router\";\nimport Form, {IFields, requiredAndNumberAndMin, requiredAndTrimmed} from \"../../../components/form/Form\";\nimport LoadingSpinner from \"../../../components/list/LoadingSpinner\";\nimport {Error} from \"../../../components/errors/Error\";\nimport Field, {getTypeFromValue} from \"../../../components/form/Field\";\nimport Tabs, {Tab} from \"../../../components/tabs/Tabs\";\nimport MainLayout from \"../../../views/mainLayout/MainLayout\";\nimport {ReduxState} from \"../../../reducers\";\nimport {addWorkerManagers, assignWorkerManagerHosts, loadNodes, loadRegions, loadWorkerManagers} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport {IReply, postData} from \"../../../utils/api\";\nimport {isNew} from \"../../../utils/router\";\nimport {normalize} from \"normalizr\";\nimport {Schemas} from \"../../../middleware/api\";\nimport IDatabaseData from \"../../../components/IDatabaseData\";\nimport UnsavedChanged from \"../../../components/form/UnsavedChanges\";\nimport {IContainer} from \"../containers/Container\";\nimport {INode} from \"../nodes/Node\";\nimport AssignedHostsList from \"./AssignedHostsList\";\nimport {IHostAddress} from \"../hosts/Hosts\";\nimport {IRegion} from \"../regions/Region\";\n\nexport interface IWorkerManager extends IDatabaseData {\n    container: IContainer,\n    assignedHosts?: string[],\n}\n\ninterface INewWorkerManagerRegion {\n    regions: string[] | undefined\n}\n\ninterface INewWorkerManagerHost {\n    hostAddress: IHostAddress | undefined\n}\n\nconst buildNewWorkerManagerRegion = (): INewWorkerManagerRegion => ({\n    regions: undefined\n});\n\nconst buildNewWorkerManagerHost = (): INewWorkerManagerHost => ({\n    hostAddress: undefined,\n});\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    newWorkerManagerRegion?: INewWorkerManagerRegion;\n    newWorkerManagerHost?: INewWorkerManagerHost;\n    workerManager?: IWorkerManager;\n    formWorkerManager?: Partial<IWorkerManager>;\n    regions: { [key: string]: IRegion };\n    nodes: { [key: string]: INode };\n}\n\ninterface DispatchToProps {\n    loadWorkerManagers: (id: string) => void;\n    addWorkerManagers: (workerManagers: IWorkerManager[]) => void;\n    loadRegions: () => void;\n    loadNodes: () => void;\n    assignWorkerManagerHosts: (id: string, Hosts: string[]) => void;\n}\n\ninterface MatchParams {\n    id: string;\n}\n\ninterface LocationState {\n    data: IWorkerManager,\n    selected: 'workerManager' | 'assignHosts';\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ninterface State {\n    workerManager?: IWorkerManager,\n    formWorkerManager?: IWorkerManager,\n    unsavedHosts: string[],\n    currentForm: 'On regions' | 'On host',\n}\n\nclass WorkerManager extends BaseComponent<Props, State> {\n\n    state: State = {\n        unsavedHosts: [],\n        currentForm: 'On regions'\n    };\n    private mounted = false;\n\n    public componentDidMount(): void {\n        this.loadWorkerManager();\n        this.props.loadRegions();\n        this.props.loadNodes();\n        this.mounted = true;\n    }\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                {this.shouldShowSaveButton() && !isNew(this.props.location.search) && <UnsavedChanged/>}\n                <div className=\"container\">\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private loadWorkerManager = () => {\n        if (!isNew(this.props.location.search)) {\n            const workerManagerId = this.props.match.params.id;\n            this.props.loadWorkerManagers(workerManagerId);\n        }\n    };\n\n    private getWorkerManager = () =>\n        this.state.workerManager || this.props.workerManager;\n\n    private getFormWorkerManager = () =>\n        this.state.formWorkerManager || this.props.formWorkerManager;\n\n    private isNew = () =>\n        isNew(this.props.location.search);\n\n    private onPostSuccess = (reply: IReply<IWorkerManager[]>): void => {\n        let workerManagers = reply.data;\n        if (workerManagers.length === 1) {\n            const workerManager = workerManagers[0];\n            const publicIpAddress = workerManager.container.publicIpAddress;\n            super.toast(`<span class=\"green-text\">Worker-manager ${this.mounted ? `<b class=\"white-text\">${workerManager.id}</b>` : `<a href=/worker-managers/${workerManager.id}><b>${workerManager.id}</b></a>`} launched at ${publicIpAddress}</span>`);\n            this.saveEntities(workerManager);\n            if (this.mounted) {\n                this.updateWorkerManager(workerManager);\n                this.props.history.replace(workerManager.id.toString());\n            }\n        } else {\n            workerManagers = workerManagers.reverse();\n            super.toast(`<span class=\"green-text\">Launched ${workerManagers.length} worker-managers:<br/><b class=\"white-text\">${workerManagers.map(workerManager => `${workerManager.id} => Host ${workerManager.container.publicIpAddress} => Container ${workerManager.container.containerId}`).join('<br/>')}</b></span>`);\n            if (this.mounted) {\n                this.props.history.push(\"/worker-managers\");\n            }\n        }\n        this.props.addWorkerManagers(workerManagers);\n    };\n\n    private onPostFailure = (reason: string): void =>\n        super.toast(`Unable to launch worker-manager`, 10000, reason, true);\n\n    private onDeleteSuccess = (workerManager: IWorkerManager): void => {\n        super.toast(`<span class=\"green-text\">Worker-manager <b class=\"white-text\">${workerManager.id}</b> successfully stopped</span>`);\n        if (this.mounted) {\n            this.props.history.push(`/worker-managers`)\n        }\n    };\n\n    private onDeleteFailure = (reason: string, workerManager: IWorkerManager): void =>\n        super.toast(`Unable to stop ${this.mounted ? `<b>${workerManager.id}</b>` : `<a href=/worker-managers/${workerManager.id}><b>${workerManager.id}</b></a>`} worker-manager`, 10000, reason, true);\n\n    private updateWorkerManager = (workerManager: IWorkerManager) => {\n        workerManager = Object.values(normalize(workerManager, Schemas.WORKER_MANAGER).entities.workerManagers || {})[0];\n        const formWorkerManager = {...workerManager};\n        removeFields(formWorkerManager);\n        this.setState({workerManager: workerManager, formWorkerManager: formWorkerManager},\n            () => this.props.history.replace(workerManager.id.toString()));\n    };\n\n    private shouldShowSaveButton = () =>\n        !!this.state.unsavedHosts.length;\n\n    private saveEntities = (workerManager: IWorkerManager) => {\n        this.saveHosts(workerManager);\n    };\n\n    private assignHost = (Host: string): void => {\n        this.setState({\n            unsavedHosts: this.state.unsavedHosts.concat(Host)\n        });\n    };\n\n    private unassignHosts = (hosts: string[]): void => {\n        this.setState({\n            unsavedHosts: this.state.unsavedHosts.filter(Host => !hosts.includes(Host))\n        });\n    };\n\n    private saveHosts = (workerManager: IWorkerManager): void => {\n        const {unsavedHosts} = this.state;\n        if (unsavedHosts.length) {\n            postData(`worker-managers/${workerManager.id}/assigned-hosts`, unsavedHosts,\n                () => this.onSaveHostsSuccess(workerManager),\n                (reason) => this.onSaveHostsFailure(workerManager, reason));\n        }\n    };\n\n    private onSaveHostsSuccess = (workerManager: IWorkerManager): void => {\n        this.props.assignWorkerManagerHosts(workerManager.id.toString(), this.state.unsavedHosts);\n        if (this.mounted) {\n            this.setState({unsavedHosts: []});\n        }\n    };\n\n    private onSaveHostsFailure = (workerManager: IWorkerManager, reason: string): void =>\n        super.toast(`Unable to save assigned hosts of worker-manager ${this.mounted ? `<b>${workerManager.id}</b>` : `<a href=/worker-managers/${workerManager.id}><b>${workerManager.id}</b></a>`}`, 10000, reason, true);\n\n    private getFields = (workerManager: INewWorkerManagerRegion | INewWorkerManagerHost | IWorkerManager): IFields =>\n        Object.entries(workerManager).map(([key, value]) => {\n            return {\n                [key]: {\n                    id: key,\n                    label: key,\n                    validation: getTypeFromValue(value) === 'number'\n                        ? {rule: requiredAndNumberAndMin, args: 0}\n                        : {rule: requiredAndTrimmed}\n                }\n            };\n        }).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});\n\n    private getSelectableHosts = (): Partial<IHostAddress>[] =>\n        Object.entries(this.props.nodes)\n            .filter(([_, node]) => node.state === 'ready')\n            .map(([_, node]) =>\n                ({\n                    username: node.labels['username'],\n                    publicIpAddress: node.publicIpAddress,\n                    privateIpAddress: node.labels['privateIpAddress'],\n                    coordinates: node.labels['coordinates'] ? JSON.parse(node.labels['coordinates']) : undefined,\n                }))\n\n    private hostAddressesDropdown = (hostAddress: Partial<IHostAddress>): string =>\n        hostAddress.publicIpAddress + (hostAddress.privateIpAddress ? (\"/\" + hostAddress.privateIpAddress) : '') + \" - \" + hostAddress.coordinates?.label;\n\n    private containerIdField = (container: IContainer) =>\n        container.containerId;\n\n    private containerPublicIpAddressField = (container: IContainer) =>\n        container.publicIpAddress;\n\n    private formFields = (isNew: boolean, formWorkerManager?: Partial<IWorkerManager>) => {\n        const {currentForm} = this.state;\n        return (\n            isNew ?\n                currentForm === 'On regions'\n                    ?\n                    <Field key={'regions'}\n                           id={'regions'}\n                           label={'regions'}\n                           type={'list'}\n                           value={Object.keys(this.props.regions)}/>\n                    :\n                    <>\n                        <Field<Partial<IHostAddress>> key={'hostAddress'}\n                                                      id={'hostAddress'}\n                                                      label={'hostAddress'}\n                                                      type=\"dropdown\"\n                                                      dropdown={{\n                                                          defaultValue: \"Select host address\",\n                                                          values: this.getSelectableHosts(),\n                                                          optionToString: this.hostAddressesDropdown,\n                                                          emptyMessage: 'No hosts to select'\n                                                      }}/>\n                    </>\n                : formWorkerManager && Object.entries(formWorkerManager).map((([key, value], index) =>\n                key === 'container'\n                    ? <>\n                        <Field<IContainer> key={index}\n                                           id={key}\n                                           label={key + \" id\"}\n                                           valueToString={this.containerIdField}\n                                           icon={{linkedTo: `/containers/${(formWorkerManager as Partial<IWorkerManager>).container?.containerId}`}}/>\n                        <Field<IContainer>\n                            key={index + 1} // index + 1 is ok unless there are more fields after this one\n                            id={key}\n                            label={\"host\"}\n                            valueToString={this.containerPublicIpAddressField}/>\n                    </>\n                    : <Field key={index}\n                             id={key}\n                             label={key}/>))\n        );\n    };\n\n    private switchForm = (formId: 'On regions' | 'On host') =>\n        this.setState({currentForm: formId});\n\n    private workerManager = () => {\n        const {isLoading, error, newWorkerManagerRegion, newWorkerManagerHost} = this.props;\n        const {currentForm} = this.state;\n        const isNewWorkerManager = this.isNew();\n        const workerManager = isNewWorkerManager ? (currentForm === 'On regions' ? newWorkerManagerRegion : newWorkerManagerHost) : this.getWorkerManager();\n        const formWorkerManager = this.getFormWorkerManager();\n        // @ts-ignore\n        const workerManagerKey: (keyof IWorkerManager) = workerManager && Object.keys(workerManager)[0];\n        return (\n            <>\n                {!isNewWorkerManager && isLoading && <LoadingSpinner/>}\n                {!isNewWorkerManager && !isLoading && error && <Error message={error}/>}\n                {(isNewWorkerManager || !isLoading) && (isNewWorkerManager || !error) && workerManager && (\n                    /*@ts-ignore*/\n                    <Form id={workerManagerKey}\n                          fields={this.getFields(workerManager)}\n                          values={workerManager}\n                          isNew={isNew(this.props.location.search)}\n                          showSaveButton={this.shouldShowSaveButton()}\n                          post={{\n                              textButton: isNew(this.props.location.search) ? 'launch' : 'save',\n                              url: 'worker-managers',\n                              successCallback: this.onPostSuccess,\n                              failureCallback: this.onPostFailure\n                          }}\n                          delete={{\n                              textButton: 'Stop',\n                              url: `worker-managers/${(workerManager as IWorkerManager).id}`,\n                              successCallback: this.onDeleteSuccess,\n                              failureCallback: this.onDeleteFailure\n                          }}\n                          saveEntities={this.saveEntities}\n                          switchDropdown={isNewWorkerManager ? {\n                              options: currentForm === 'On regions' ? ['On host'] : ['On regions'],\n                              onSwitch: this.switchForm\n                          } : undefined}>\n                        {this.formFields(isNewWorkerManager, formWorkerManager)}\n                    </Form>\n                )}\n            </>\n        )\n    };\n\n    private assignHosts = (): JSX.Element =>\n        <AssignedHostsList isLoadingWorkerManager={this.props.isLoading}\n                           loadWorkerManagerError={!this.isNew() ? this.props.error : undefined}\n                           workerManager={this.getWorkerManager()}\n                           unSavedHosts={this.state.unsavedHosts}\n                           onAssignHost={this.assignHost}\n                           onUnassignHosts={this.unassignHosts}/>;\n\n    private tabs = (): Tab[] => [\n        {\n            title: 'Worker manager',\n            id: 'workerManager',\n            content: () => this.workerManager(),\n            active: this.props.location.state?.selected === 'workerManager'\n        },\n        {\n            title: 'Assigned hosts',\n            id: 'assignHosts',\n            content: () => this.assignHosts(),\n            active: this.props.location.state?.selected === 'assignHosts'\n        }\n    ];\n\n}\n\nfunction removeFields(workerManager: Partial<IWorkerManager>) {\n    delete workerManager[\"id\"];\n    delete workerManager[\"assignedHosts\"];\n}\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.workerManagers.isLoadingWorkerManagers;\n    const error = state.entities.workerManagers.loadWorkerManagersError;\n    const id = props.match.params.id;\n    const newWorkerManager = isNew(props.location.search);\n    const newWorkerManagerRegion = newWorkerManager ? buildNewWorkerManagerRegion() : undefined;\n    const newWorkerManagerHost = newWorkerManager ? buildNewWorkerManagerHost() : undefined;\n    const workerManager = !newWorkerManager ? state.entities.workerManagers.data[id] : undefined;\n    let formWorkerManager;\n    if (workerManager) {\n        formWorkerManager = {...workerManager};\n        removeFields(formWorkerManager);\n    }\n    const regions = state.entities.regions.data;\n    const nodes = state.entities.nodes.data;\n    return {\n        isLoading,\n        error,\n        newWorkerManagerRegion,\n        newWorkerManagerHost,\n        workerManager,\n        formWorkerManager,\n        regions,\n        nodes\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadWorkerManagers,\n    addWorkerManagers,\n    loadRegions,\n    loadNodes,\n    assignWorkerManagerHosts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WorkerManager);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport CardItem from \"../../../components/list/CardItem\";\nimport Card from \"../../../components/cards/Card\";\nimport {IWorkerManager} from \"./WorkerManager\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport LinkedContextMenuItem from \"../../../components/contextmenu/LinkedContextMenuItem\";\nimport {deleteWorkerManager} from \"../../../actions\";\nimport {connect} from \"react-redux\";\n\ninterface State {\n    loading: boolean;\n}\n\ninterface WorkerManagerCardProps {\n    workerManager: IWorkerManager;\n}\n\ninterface DispatchToProps {\n    deleteWorkerManager: (workerManager: IWorkerManager) => void;\n}\n\ntype Props = DispatchToProps & WorkerManagerCardProps;\n\nclass WorkerManagerCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    private onStopSuccess = (workerManager: IWorkerManager): void => {\n        super.toast(`<span class=\"green-text\">Worker-manager <b class=\"white-text\">${workerManager.id}</b> successfully stopped</span>`);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.deleteWorkerManager(workerManager)\n    }\n\n    private onStopFailure = (reason: string, workerManager: IWorkerManager): void => {\n        super.toast(`Unable to stop worker-manager <a href=/worker-managers/${workerManager.id}><b>${workerManager.id}</b></a>`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    }\n\n    private contextMenu = (): JSX.Element[] => {\n        const {workerManager} = this.props;\n        return [\n            <LinkedContextMenuItem\n                option={'View associated container'}\n                pathname={`/containers/${workerManager.container.containerId}`}\n                state={workerManager}/>,\n            <LinkedContextMenuItem\n                option={'Modify assigned hosts'}\n                pathname={`/worker-managers/${workerManager.id}`}\n                selected={'assignHosts'}\n                state={workerManager}/>,\n        ];\n    }\n\n    public render() {\n        const {workerManager} = this.props;\n        const {loading} = this.state;\n        const CardWorkerManager = Card<IWorkerManager>();\n        return <CardWorkerManager id={`worker-manager-${workerManager.id}`}\n                                  title={workerManager.id.toString()}\n                                  link={{to: {pathname: `/worker-managers/${workerManager.id}`, state: workerManager}}}\n                                  height={'175px'}\n                                  margin={'10px 0'}\n                                  hoverable\n                                  delete={{\n                                      textButton: 'Stop',\n                                      url: `worker-managers/${workerManager?.id}`,\n                                      successCallback: this.onStopSuccess,\n                                      failureCallback: this.onStopFailure,\n                                  }}\n                                  loading={loading}\n                                  bottomContextMenuItems={this.contextMenu()}>\n            <CardItem key={'container'}\n                      label={'Container'}\n                      value={workerManager.container.containerId}/>\n            <CardItem key={'host'}\n                      label={'Host'}\n                      value={workerManager.container.publicIpAddress}/>\n        </CardWorkerManager>\n    }\n\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    deleteWorkerManager\n};\n\nexport default connect(null, mapDispatchToProps)(WorkerManagerCard);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport {connect} from \"react-redux\";\nimport {IWorkerManager} from \"./WorkerManager\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport CardList from \"../../../components/list/CardList\";\nimport {ReduxState} from \"../../../reducers\";\nimport {loadWorkerManagers} from \"../../../actions\";\nimport WorkerManagerCard from \"./WorkerManagerCard\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    workerManagers: IWorkerManager[];\n}\n\ninterface DispatchToProps {\n    loadWorkerManagers: () => void;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass WorkerManagersList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadWorkerManagers();\n    }\n\n    public render() {\n        return (\n            <CardList<IWorkerManager>\n                isLoading={this.props.isLoading}\n                error={this.props.error}\n                emptyMessage={\"No worker-managers to display\"}\n                list={this.props.workerManagers}\n                card={this.workerManager}\n                predicate={this.predicate}/>\n        );\n    }\n\n    private workerManager = (workerManager: IWorkerManager): JSX.Element =>\n        <WorkerManagerCard key={workerManager.id} workerManager={workerManager}/>;\n\n    private predicate = (workerManager: IWorkerManager, search: string): boolean =>\n        workerManager.id.toString().toLowerCase().includes(search);\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.workerManagers.isLoadingWorkerManagers,\n        error: state.entities.workerManagers.loadWorkerManagersError,\n        workerManagers: (state.entities.workerManagers.data && Object.values(state.entities.workerManagers.data).reverse()) || [],\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadWorkerManagers,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WorkerManagersList);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport MainLayout from \"../../../views/mainLayout/MainLayout\";\nimport AddButton from \"../../../components/form/AddButton\";\nimport styles from \"./WorkerManagers.module.css\";\nimport WorkerManagersList from \"./WorkerManagersList\";\n\nconst WorkerManagers: React.FC = () =>\n    <MainLayout>\n        <AddButton tooltip={{text: 'Launch worker-manager', position: 'left'}}\n                   pathname={'/worker-managers/launch?new'}/>\n        <div className={`${styles.container}`}>\n            <WorkerManagersList/>\n        </div>\n    </MainLayout>;\n\nexport default WorkerManagers;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {IRuleApp} from \"./RuleApp\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport ListItem from \"../../../../components/list/ListItem\";\nimport styles from \"../../../../components/list/ListItem.module.css\";\nimport React from \"react\";\nimport ControlledList from \"../../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {loadConditions, loadRuleAppConditions, removeRuleAppConditions} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {IRuleCondition} from \"../conditions/RuleCondition\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    ruleConditions: string[];\n    conditions: { [key: string]: IRuleCondition };\n}\n\ninterface DispatchToProps {\n    loadConditions: () => void;\n    loadRuleAppConditions: (ruleName: string) => void;\n    removeRuleAppConditions: (ruleName: string, conditions: string[]) => void;\n}\n\ninterface AppRuleConditionListProps {\n    isLoadingRuleApp: boolean;\n    loadRuleAppError?: string | null;\n    ruleApp: IRuleApp | Partial<IRuleApp> | null;\n    unsavedConditions: string[];\n    onAddRuleCondition: (condition: string) => void;\n    onRemoveRuleConditions: (condition: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & AppRuleConditionListProps\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass RuleAppConditionsList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadConditions();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.ruleApp?.name && this.props.ruleApp?.name) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList\n            isLoading={!isNew ? this.props.isLoadingRuleApp || this.props.isLoading : undefined}\n            error={!isNew ? this.props.loadRuleAppError || this.props.error : undefined}\n            emptyMessage={`Conditions list is empty`}\n            data={this.props.ruleConditions}\n            dropdown={{\n                id: 'conditions',\n                title: 'Add condition',\n                empty: 'No conditions to add',\n                data: this.getSelectableConditionNames()\n            }}\n            show={this.condition}\n            onAdd={this.onAdd}\n            onRemove={this.onRemove}\n            onDelete={{\n                url: `rules/apps/${this.props.ruleApp?.name}/conditions`,\n                successCallback: this.onDeleteSuccess,\n                failureCallback: this.onDeleteFailure\n            }}\n            entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.ruleApp?.name) {\n            const {name} = this.props.ruleApp;\n            this.props.loadRuleAppConditions(name);\n        }\n    };\n\n    private isNew = () =>\n        this.props.ruleApp?.name === undefined;\n\n    private condition = (index: number, condition: string, separate: boolean, checked: boolean,\n                         handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedConditions.includes(condition);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={styles.linkedItemContent}>\n                    <label>\n                        <input id={condition}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                {condition}\n              </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/rules/conditions/${condition}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (condition: string): void =>\n        this.props.onAddRuleCondition(condition);\n\n    private onRemove = (conditions: string[]) =>\n        this.props.onRemoveRuleConditions(conditions);\n\n    private onDeleteSuccess = (conditions: string[]): void => {\n        if (this.props.ruleApp?.name) {\n            const {name} = this.props.ruleApp;\n            this.props.removeRuleAppConditions(name, conditions);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to delete condition`, 10000, reason, true);\n\n    private getSelectableConditionNames = () => {\n        const {conditions, ruleConditions, unsavedConditions} = this.props;\n        return Object.keys(conditions)\n            .filter(condition => !ruleConditions.includes(condition) && !unsavedConditions.includes(condition));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: AppRuleConditionListProps): StateToProps {\n    const ruleName = ownProps.ruleApp?.name;\n    const rule = ruleName && state.entities.rules.apps.data[ruleName];\n    const ruleConditions = rule && rule.conditions;\n    return {\n        isLoading: state.entities.rules.apps.isLoadingConditions,\n        error: state.entities.rules.apps.loadConditionsError,\n        ruleConditions: ruleConditions || [],\n        conditions: state.entities.rules.conditions.data,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadRuleAppConditions,\n        removeRuleAppConditions,\n        loadConditions,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RuleAppConditionsList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport ListItem from \"../../../../components/list/ListItem\";\nimport styles from \"../../../../components/list/ListItem.module.css\";\nimport React from \"react\";\nimport ControlledList from \"../../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {loadApps, loadRuleApps, removeRuleApps,} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {IApp} from \"../../apps/App\";\nimport {IRuleApp} from \"./RuleApp\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    ruleApps: string[];\n    apps: { [key: string]: IApp };\n}\n\ninterface DispatchToProps {\n    loadApps: () => void;\n    loadRuleApps: (ruleName: string) => void;\n    removeRuleApps: (ruleName: string, apps: string[]) => void;\n}\n\ninterface AppRuleAppsListProps {\n    isLoadingRuleApp: boolean;\n    loadRuleAppError?: string | null;\n    ruleApp: IRuleApp | Partial<IRuleApp> | null;\n    unsavedApps: string[];\n    onAddRuleApp: (app: string) => void;\n    onRemoveRuleApps: (apps: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & AppRuleAppsListProps\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass RuleAppAppsList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadApps();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.ruleApp?.name && this.props.ruleApp?.name) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList\n            isLoading={!isNew ? this.props.isLoadingRuleApp || this.props.isLoading : undefined}\n            error={!isNew ? this.props.loadRuleAppError || this.props.error : undefined}\n            emptyMessage={`Apps list is empty`}\n            data={this.props.ruleApps}\n            dropdown={{\n                id: 'apps',\n                title: 'Add app',\n                empty: 'No apps to add',\n                data: this.getSelectableAppNames()\n            }}\n            show={this.app}\n            onAdd={this.onAdd}\n            onRemove={this.onRemove}\n            onDelete={{\n                url: `rules/apps/${this.props.ruleApp?.name}/apps`,\n                successCallback: this.onDeleteSuccess,\n                failureCallback: this.onDeleteFailure\n            }}\n            entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.ruleApp?.name) {\n            const {name} = this.props.ruleApp;\n            this.props.loadRuleApps(name);\n        }\n    };\n\n    private isNew = () =>\n        this.props.ruleApp?.name === undefined;\n\n    private app = (index: number, app: string, separate: boolean, checked: boolean,\n                   handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedApps.includes(app);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={styles.linkedItemContent}>\n                    <label>\n                        <input id={app}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                {app}\n              </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/apps/${app}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (app: string): void =>\n        this.props.onAddRuleApp(app);\n\n    private onRemove = (apps: string[]) =>\n        this.props.onRemoveRuleApps(apps);\n\n    private onDeleteSuccess = (apps: string[]): void => {\n        if (this.props.ruleApp?.name) {\n            const {name} = this.props.ruleApp;\n            this.props.removeRuleApps(name, apps);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to remove app`, 10000, reason, true);\n\n    private getSelectableAppNames = () => {\n        const {apps, ruleApps, unsavedApps} = this.props;\n        return Object.keys(apps)\n            .filter(app => !ruleApps.includes(app) && !unsavedApps.includes(app));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: AppRuleAppsListProps): StateToProps {\n    const ruleName = ownProps.ruleApp?.name;\n    const rule = ruleName && state.entities.rules.apps.data[ruleName];\n    const ruleApps = rule && rule.apps;\n    return {\n        isLoading: state.entities.rules.apps.isLoadingApps,\n        error: state.entities.rules.apps.loadAppsError,\n        ruleApps: ruleApps || [],\n        apps: state.entities.apps.data,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadRuleApps,\n        removeRuleApps,\n        loadApps,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RuleAppAppsList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {componentTypes, IDecision, IRule} from \"../Rule\";\nimport {RouteComponentProps} from \"react-router\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport Form, {IFields, requiredAndNumberAndMinAndMax, requiredAndTrimmed} from \"../../../../components/form/Form\";\nimport LoadingSpinner from \"../../../../components/list/LoadingSpinner\";\nimport {Error} from \"../../../../components/errors/Error\";\nimport Field from \"../../../../components/form/Field\";\nimport Tabs, {Tab} from \"../../../../components/tabs/Tabs\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {\n    addRuleApp,\n    addRuleAppConditions,\n    addRuleApps,\n    loadDecisions,\n    loadRulesApp,\n    updateRuleApp,\n} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport React from \"react\";\nimport {IReply, postData} from \"../../../../utils/api\";\nimport RuleAppConditionList from \"./RuleAppConditionsList\";\nimport UnsavedChanged from \"../../../../components/form/UnsavedChanges\";\nimport RuleAppAppsList from \"./RuleAppAppsList\";\nimport {isNew} from \"../../../../utils/router\";\nimport {normalize} from \"normalizr\";\nimport {Schemas} from \"../../../../middleware/api\";\n\nexport interface IRuleApp extends IRule {\n    apps?: string[]\n}\n\nconst buildNewAppRule = (): Partial<IRuleApp> => ({\n    name: undefined,\n    priority: 0,\n    decision: undefined,\n});\n\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    ruleApp: Partial<IRuleApp>;\n    formRuleApp?: Partial<IRuleApp>,\n    decisions: { [key: string]: IDecision },\n}\n\ninterface DispatchToProps {\n    loadRulesApp: (name: string) => void;\n    addRuleApp: (ruleApp: IRuleApp) => void;\n    updateRuleApp: (previousRuleApp: IRuleApp, currentRuleApp: IRuleApp) => void;\n    loadDecisions: () => void;\n    addRuleAppConditions: (ruleName: string, conditions: string[]) => void;\n    addRuleApps: (ruleName: string, apps: string[]) => void;\n}\n\ninterface MatchParams {\n    name: string;\n}\n\ninterface LocationState {\n    data: IRuleApp,\n    selected: 'appRule' | 'ruleConditions' | 'apps'\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ntype State = {\n    ruleApp?: IRuleApp,\n    formRuleApp?: IRuleApp,\n    unsavedConditions: string[],\n    unsavedApps: string[],\n}\n\nclass RuleApp extends BaseComponent<Props, State> {\n\n    state: State = {\n        unsavedConditions: [],\n        unsavedApps: [],\n    };\n    private mounted = false;\n\n    public componentDidMount(): void {\n        this.loadRuleApp();\n        this.props.loadDecisions();\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                {this.shouldShowSaveButton() && !isNew(this.props.location.search) && <UnsavedChanged/>}\n                <div className=\"container\">\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private loadRuleApp = () => {\n        if (!isNew(this.props.location.search)) {\n            const ruleName = this.props.match.params.name;\n            this.props.loadRulesApp(ruleName);\n        }\n    };\n\n    private getRuleApp = () =>\n        this.state.ruleApp || this.props.ruleApp;\n\n    private getFormRuleApp = () =>\n        this.state.formRuleApp || this.props.formRuleApp;\n\n    private isNew = () =>\n        isNew(this.props.location.search);\n\n    private onPostSuccess = (reply: IReply<IRuleApp>): void => {\n        const ruleApp = reply.data;\n        super.toast(`<span class=\"green-text\">App rule ${this.mounted ? `<b class=\"white-text\">${ruleApp.name}</b>` : `<a href=/rules/apps/${ruleApp.name}><b>${ruleApp.name}</b></a>`} saved</span>`);\n        this.props.addRuleApp(ruleApp);\n        this.saveEntities(reply.data);\n        if (this.mounted) {\n            this.updateRuleApp(ruleApp);\n            this.props.history.replace(ruleApp.name);\n        }\n    };\n\n    private onPostFailure = (reason: string, ruleApp: IRuleApp): void =>\n        super.toast(`Unable to save app rule <b>${ruleApp.name}</b>`, 10000, reason, true);\n\n    private onPutSuccess = (reply: IReply<IRuleApp>): void => {\n        const ruleApp = reply.data;\n        super.toast(`<span class=\"green-text\">Changes to ${this.mounted ? `<b class=\"white-text\">${ruleApp.name}</b>` : `<a href=/rules/apps/${ruleApp.name}><b>${ruleApp.name}</b></a>`} app rule have been saved</span>`);\n        this.saveEntities(ruleApp);\n        const previousRuleApp = this.getRuleApp();\n        if (previousRuleApp?.id) {\n            this.props.updateRuleApp(previousRuleApp as IRuleApp, ruleApp)\n        }\n        if (this.mounted) {\n            this.updateRuleApp(ruleApp);\n            this.props.history.replace(ruleApp.name);\n        }\n    };\n\n    private onPutFailure = (reason: string, ruleApp: IRuleApp): void =>\n        super.toast(`Unable to update app rule ${this.mounted ? `<b>${ruleApp.name}</b>` : `<a href=/rules/apps/${ruleApp.name}><b>${ruleApp.name}</b></a>`}`, 10000, reason, true);\n\n    private onDeleteSuccess = (ruleApp: IRuleApp): void => {\n        super.toast(`<span class=\"green-text\">App rule <b class=\"white-text\">${ruleApp.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.props.history.push(`/rules/apps`);\n        }\n    };\n\n    private onDeleteFailure = (reason: string, ruleApp: IRuleApp): void =>\n        super.toast(`Unable to delete app rule ${this.mounted ? `<b>${ruleApp.name}</b>` : `<a href=/rules/apps/${ruleApp.name}><b>${ruleApp.name}</b></a>`}`, 10000, reason, true);\n\n    private shouldShowSaveButton = () =>\n        !!this.state.unsavedConditions.length\n        || !!this.state.unsavedApps.length;\n\n    private saveEntities = (rule: IRuleApp) => {\n        this.saveRuleConditions(rule);\n        this.saveRuleApps(rule);\n    };\n\n    private addRuleCondition = (condition: string): void => {\n        this.setState({\n            unsavedConditions: this.state.unsavedConditions.concat(condition)\n        });\n    };\n\n    private removeRuleConditions = (conditions: string[]): void => {\n        this.setState({\n            unsavedConditions: this.state.unsavedConditions.filter(condition => !conditions.includes(condition))\n        });\n    };\n\n    private saveRuleConditions = (rule: IRuleApp): void => {\n        const {unsavedConditions} = this.state;\n        if (unsavedConditions.length) {\n            postData(`rules/apps/${rule.name}/conditions`, unsavedConditions,\n                () => this.onSaveConditionsSuccess(rule),\n                (reason) => this.onSaveConditionsFailure(rule, reason));\n        }\n    };\n\n    private onSaveConditionsSuccess = (rule: IRuleApp): void => {\n        this.props.addRuleAppConditions(rule.name, this.state.unsavedConditions);\n        if (this.mounted) {\n            this.setState({unsavedConditions: []});\n        }\n    };\n\n    private onSaveConditionsFailure = (ruleApp: IRuleApp, reason: string): void =>\n        super.toast(`Unable to save conditions of app rule ${this.mounted ? `<b>${ruleApp.name}</b>` : `<a href=/rules/apps/${ruleApp.name}><b>${ruleApp.name}</b></a>`}`, 10000, reason, true);\n\n    private addRuleApp = (app: string): void =>\n        this.setState({\n            unsavedApps: this.state.unsavedApps.concat(app)\n        });\n\n    private removeRuleApps = (apps: string[]): void => {\n        this.setState({\n            unsavedApps: this.state.unsavedApps.filter(app => !apps.includes(app))\n        });\n    };\n\n    private saveRuleApps = (rule: IRuleApp): void => {\n        const {unsavedApps} = this.state;\n        if (unsavedApps.length) {\n            postData(`rules/apps/${rule.name}/apps`, unsavedApps,\n                () => this.onSaveAppsSuccess(rule),\n                (reason) => this.onSaveAppsFailure(rule, reason));\n        }\n    };\n\n    private onSaveAppsSuccess = (rule: IRuleApp): void => {\n        this.props.addRuleApps(rule.name, this.state.unsavedApps);\n        if (this.mounted) {\n            this.setState({unsavedApps: []});\n        }\n    };\n\n    private onSaveAppsFailure = (ruleApp: IRuleApp, reason: string): void =>\n        super.toast(`Unable to save apps of app rule ${this.mounted ? `<b>${ruleApp.name}</b>` : `<a href=/rules/apps/${ruleApp.name}><b>${ruleApp.name}</b></a>`}`, 10000, reason, true);\n\n    private updateRuleApp = (ruleApp: IRuleApp) => {\n        ruleApp = Object.values(normalize(ruleApp, Schemas.RULE_APP).entities.appRules || {})[0];\n        const formRuleApp = {...ruleApp};\n        removeFields(formRuleApp);\n        this.setState({ruleApp: ruleApp, formRuleApp: formRuleApp});\n    };\n\n    private getFields = (appRule: Partial<IRule>): IFields =>\n        Object.entries(appRule).map(([key, _]) => {\n            return {\n                [key]: {\n                    id: key,\n                    label: key,\n                    validation:\n                        key === 'priority'\n                            ? {rule: requiredAndNumberAndMinAndMax, args: [0, 2147483647]}\n                            : {rule: requiredAndTrimmed}\n                }\n            };\n        }).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});\n\n    private decisionDropdownOption = (decision: IDecision): string =>\n        decision.ruleDecision;\n\n    private getSelectableDecisions = () =>\n        Object.values(this.props.decisions)\n            .filter(decision => decision.componentType.type.toLowerCase() === componentTypes.SERVICE.type.toLowerCase());\n\n    private appRule = () => {\n        const {isLoading, error} = this.props;\n        const ruleApp = this.getRuleApp();\n        const formRuleApp = this.getFormRuleApp();\n        // @ts-ignore\n        const ruleKey: (keyof IRuleApp) = formRuleApp && Object.keys(formRuleApp)[0];\n        const isNewRuleApp = this.isNew();\n        return (\n            <>\n                {!isNewRuleApp && isLoading && <LoadingSpinner/>}\n                {!isNewRuleApp && !isLoading && error && <Error message={error}/>}\n                {(isNewRuleApp || !isLoading) && (isNewRuleApp || !error) && formRuleApp && (\n                    /*@ts-ignore*/\n                    <Form id={ruleKey}\n                          fields={this.getFields(formRuleApp)}\n                          values={ruleApp}\n                          isNew={isNew(this.props.location.search)}\n                          showSaveButton={this.shouldShowSaveButton()}\n                          post={{\n                              url: 'rules/apps',\n                              successCallback: this.onPostSuccess,\n                              failureCallback: this.onPostFailure\n                          }}\n                          put={{\n                              url: `rules/apps/${ruleApp.name}`,\n                              successCallback: this.onPutSuccess,\n                              failureCallback: this.onPutFailure\n                          }}\n                          delete={{\n                              url: `rules/apps/${ruleApp.name}`,\n                              successCallback: this.onDeleteSuccess,\n                              failureCallback: this.onDeleteFailure\n                          }}\n                          saveEntities={this.saveEntities}>\n                        {Object.entries(formRuleApp).map(([key, value], index) =>\n                            key === 'decision'\n                                ? <Field<IDecision> key={index}\n                                                    id={key}\n                                                    label={key}\n                                                    type=\"dropdown\"\n                                                    dropdown={{\n                                                        defaultValue: \"Choose decision\",\n                                                        values: this.getSelectableDecisions(),\n                                                        optionToString: this.decisionDropdownOption,\n                                                        emptyMessage: 'No decisions available'\n                                                    }}/>\n                                : <Field key={index}\n                                         id={key}\n                                         label={key}\n                                         type={key === 'priority' ? \"number\" : \"text\"}/>\n                        )}\n                    </Form>\n                )}\n            </>\n        )\n    };\n\n    private conditions = (): JSX.Element =>\n        <RuleAppConditionList isLoadingRuleApp={this.props.isLoading}\n                              loadRuleAppError={!this.isNew() ? this.props.error : undefined}\n                              ruleApp={this.getRuleApp()}\n                              unsavedConditions={this.state.unsavedConditions}\n                              onAddRuleCondition={this.addRuleCondition}\n                              onRemoveRuleConditions={this.removeRuleConditions}/>;\n\n    private apps = (): JSX.Element =>\n        <RuleAppAppsList isLoadingRuleApp={this.props.isLoading}\n                         loadRuleAppError={!this.isNew() ? this.props.error : undefined}\n                         ruleApp={this.getRuleApp()}\n                         unsavedApps={this.state.unsavedApps}\n                         onAddRuleApp={this.addRuleApp}\n                         onRemoveRuleApps={this.removeRuleApps}/>;\n\n    private tabs = (): Tab[] => [\n        {\n            title: 'App rule',\n            id: 'appRule',\n            content: () => this.appRule(),\n            active: this.props.location.state?.selected === 'appRule'\n        },\n        {\n            title: 'Conditions',\n            id: 'ruleConditions',\n            content: () => this.conditions(),\n            active: this.props.location.state?.selected === 'ruleConditions'\n        },\n        {\n            title: 'Apps',\n            id: 'apps',\n            content: () => this.apps(),\n            active: this.props.location.state?.selected === 'apps'\n        }\n    ];\n\n}\n\nfunction removeFields(ruleApp: Partial<IRuleApp>) {\n    delete ruleApp[\"id\"];\n    delete ruleApp[\"conditions\"];\n    delete ruleApp[\"apps\"];\n}\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.rules.apps.isLoadingRules;\n    const error = state.entities.rules.apps.loadRulesError;\n    const name = props.match.params.name;\n    const ruleApp = isNew(props.location.search) ? buildNewAppRule() : state.entities.rules.apps.data[name];\n    let formRuleApp;\n    if (ruleApp) {\n        formRuleApp = {...ruleApp};\n        removeFields(formRuleApp);\n    }\n    const decisions = state.entities.decisions.data;\n    return {\n        isLoading,\n        error,\n        ruleApp,\n        formRuleApp,\n        decisions,\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadRulesApp,\n    addRuleApp,\n    updateRuleApp,\n    loadDecisions,\n    addRuleAppConditions,\n    addRuleApps,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RuleApp);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport AddButton from \"../../../../components/form/AddButton\";\nimport styles from './RulesApp.module.css';\nimport RulesAppList from \"./RulesAppList\";\n\nconst RulesApp: React.FC = () =>\n    <MainLayout>\n        <AddButton tooltip={{text: 'Add app rule', position: 'left'}}\n                   pathname={'/rules/apps/new_app_rule?new'}/>\n        <div className={`${styles.app}`}>\n            <RulesAppList/>\n        </div>\n    </MainLayout>;\n\nexport default RulesApp;\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport AddButton from \"../../../../components/form/AddButton\";\nimport styles from './SimulatedAppMetrics.module.css'\nimport SimulatedAppMetricsList from \"./SimulatedAppMetricsList\";\n\nconst SimulatedAppMetrics: React.FC = () =>\n    <MainLayout>\n        <AddButton tooltip={{text: 'Add simulated app metric', position: 'left'}}\n                   pathname={'/simulated-metrics/apps/add_simulated_metric?new'}/>\n        <div className={`${styles.app}`}>\n            <SimulatedAppMetricsList/>\n        </div>\n    </MainLayout>;\n\nexport default SimulatedAppMetrics;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport ListItem from \"../../../../components/list/ListItem\";\nimport styles from \"../../../../components/list/ListItem.module.css\";\nimport ControlledList from \"../../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {loadApps, loadSimulatedAppMetricApps, removeSimulatedAppMetricApps,} from \"../../../../actions\";\nimport {IApp} from \"../../apps/App\";\nimport {ISimulatedAppMetric} from \"./SimulatedAppMetric\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    apps: { [key: string]: IApp },\n    simulatedMetricApps: string[];\n}\n\ninterface DispatchToProps {\n    loadApps: () => void;\n    loadSimulatedAppMetricApps: (name: string) => void;\n    removeSimulatedAppMetricApps: (name: string, apps: string[]) => void;\n}\n\ninterface SimulatedAppMetricAppListProps {\n    isLoadingSimulatedAppMetric: boolean;\n    loadSimulatedAppMetricError?: string | null;\n    simulatedAppMetric: ISimulatedAppMetric | Partial<ISimulatedAppMetric> | null;\n    unsavedApps: string[];\n    onAddApp: (app: string) => void;\n    onRemoveApps: (app: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & SimulatedAppMetricAppListProps;\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass SimulatedAppMetricAppList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadApps();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.simulatedAppMetric?.name && this.props.simulatedAppMetric?.name) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList\n            isLoading={!isNew ? this.props.isLoadingSimulatedAppMetric || this.props.isLoading : undefined}\n            error={!isNew ? this.props.loadSimulatedAppMetricError || this.props.error : undefined}\n            emptyMessage={`Apps list is empty`}\n            data={this.props.simulatedMetricApps}\n            dropdown={{\n                id: 'apps',\n                title: 'Add app',\n                empty: 'No apps to add',\n                data: this.getSelectableApps()\n            }}\n            show={this.app}\n            onAdd={this.onAdd}\n            onRemove={this.onRemove}\n            onDelete={{\n                url: `simulated-metrics/apps/${this.props.simulatedAppMetric?.name}/apps`,\n                successCallback: this.onDeleteSuccess,\n                failureCallback: this.onDeleteFailure\n            }}\n            entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.simulatedAppMetric?.name) {\n            const {name} = this.props.simulatedAppMetric;\n            this.props.loadSimulatedAppMetricApps(name);\n        }\n    };\n\n    private isNew = () =>\n        this.props.simulatedAppMetric?.name === undefined;\n\n    private app = (index: number, app: string, separate: boolean, checked: boolean,\n                   handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedApps.includes(app);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${styles.linkedItemContent}`}>\n                    <label>\n                        <input id={app}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n               <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                 {app}\n               </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/apps/${app}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (app: string): void =>\n        this.props.onAddApp(app);\n\n    private onRemove = (app: string[]) =>\n        this.props.onRemoveApps(app);\n\n    private onDeleteSuccess = (app: string[]): void => {\n        if (this.props.simulatedAppMetric?.name) {\n            const {name} = this.props.simulatedAppMetric;\n            this.props.removeSimulatedAppMetricApps(name, app);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to remove app`, 10000, reason, true);\n\n    private getSelectableApps = () => {\n        const {apps, simulatedMetricApps, unsavedApps} = this.props;\n        return Object.keys(apps).filter(app => !simulatedMetricApps.includes(app) && !unsavedApps.includes(app));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: SimulatedAppMetricAppListProps): StateToProps {\n    const name = ownProps.simulatedAppMetric?.name;\n    const simulatedMetric = name && state.entities.simulatedMetrics.apps.data[name];\n    const simulatedMetricApps = simulatedMetric && simulatedMetric.apps;\n    return {\n        isLoading: state.entities.simulatedMetrics.apps.isLoadingApps,\n        error: state.entities.simulatedMetrics.apps.loadAppsError,\n        apps: state.entities.apps.data,\n        simulatedMetricApps: simulatedMetricApps || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadApps,\n        loadSimulatedAppMetricApps,\n        removeSimulatedAppMetricApps,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimulatedAppMetricAppList);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport IDatabaseData from \"../../../../components/IDatabaseData\";\nimport {RouteComponentProps} from \"react-router\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport Form, {IFields, requiredAndTrimmed} from \"../../../../components/form/Form\";\nimport LoadingSpinner from \"../../../../components/list/LoadingSpinner\";\nimport {Error} from \"../../../../components/errors/Error\";\nimport Field from \"../../../../components/form/Field\";\nimport Tabs, {Tab} from \"../../../../components/tabs/Tabs\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {\n    addSimulatedAppMetric,\n    addSimulatedAppMetricApps,\n    loadFields,\n    loadSimulatedAppMetrics,\n    updateSimulatedAppMetric\n} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport React from \"react\";\nimport {IReply, postData} from \"../../../../utils/api\";\nimport UnsavedChanged from \"../../../../components/form/UnsavedChanges\";\nimport {isNew} from \"../../../../utils/router\";\nimport {normalize} from \"normalizr\";\nimport {Schemas} from \"../../../../middleware/api\";\nimport {IField} from \"../../rules/Rule\";\nimport SimulatedAppMetricAppsList from \"./SimulatedAppMetricAppsList\";\n\nexport interface ISimulatedAppMetric extends IDatabaseData {\n    name: string;\n    field: IField;\n    minimumValue: number;\n    maximumValue: number;\n    override: boolean;\n    active: boolean;\n    apps?: string[];\n}\n\nconst buildNewSimulatedAppMetric = (): Partial<ISimulatedAppMetric> => ({\n    name: undefined,\n    field: undefined,\n    minimumValue: undefined,\n    maximumValue: undefined,\n    override: true,\n    active: true,\n});\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    simulatedAppMetric: Partial<ISimulatedAppMetric>;\n    formSimulatedAppMetric?: Partial<ISimulatedAppMetric>;\n    fields: { [key: string]: IField };\n}\n\ninterface DispatchToProps {\n    loadSimulatedAppMetrics: (name: string) => void;\n    addSimulatedAppMetric: (simulatedAppMetric: ISimulatedAppMetric) => void;\n    updateSimulatedAppMetric: (previousSimulatedAppMetric: ISimulatedAppMetric,\n                               currentSimulatedAppMetric: ISimulatedAppMetric) => void;\n    loadFields: () => void;\n    addSimulatedAppMetricApps: (name: string, apps: string[]) => void;\n}\n\ninterface MatchParams {\n    name: string;\n}\n\ninterface LocationState {\n    data: ISimulatedAppMetric,\n    selected: 'simulatedAppMetric' | 'apps',\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ninterface State {\n    simulatedAppMetric?: ISimulatedAppMetric,\n    formSimulatedAppMetric?: ISimulatedAppMetric,\n    unsavedApps: string[],\n}\n\nclass SimulatedAppMetric extends BaseComponent<Props, State> {\n\n    state: State = {\n        unsavedApps: [],\n    };\n    private mounted = false;\n\n    public componentDidMount(): void {\n        this.loadSimulatedAppMetric();\n        this.props.loadFields();\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                {this.shouldShowSaveButton() && !isNew(this.props.location.search) && <UnsavedChanged/>}\n                <div className=\"container\">\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private loadSimulatedAppMetric = () => {\n        if (!isNew(this.props.location.search)) {\n            const name = this.props.match.params.name;\n            this.props.loadSimulatedAppMetrics(name);\n        }\n    };\n\n    private getSimulatedAppMetric = () =>\n        this.props.simulatedAppMetric || this.state.simulatedAppMetric;\n\n    private getFormSimulatedAppMetric = () =>\n        this.props.formSimulatedAppMetric || this.state.formSimulatedAppMetric;\n\n    private isNew = () =>\n        isNew(this.props.location.search);\n\n    private onPostSuccess = (reply: IReply<ISimulatedAppMetric>): void => {\n        const simulatedMetric = reply.data;\n        super.toast(`<span class=\"green-text\">Simulated app metric ${this.mounted ? `<b class=\"white-text\">${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/Apps/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`} saved</span>`);\n        this.props.addSimulatedAppMetric(simulatedMetric);\n        this.saveEntities(simulatedMetric);\n        if (this.mounted) {\n            this.updateSimulatedAppMetric(simulatedMetric);\n            this.props.history.replace(simulatedMetric.name);\n        }\n    };\n\n    private onPostFailure = (reason: string, simulatedAppMetric: ISimulatedAppMetric): void =>\n        super.toast(`Unable to save simulated app metric <b>${simulatedAppMetric.name}</b>`, 10000, reason, true);\n\n    private onPutSuccess = (reply: IReply<ISimulatedAppMetric>): void => {\n        const simulatedMetric = reply.data;\n        super.toast(`<span class=\"green-text\">Changes to ${this.mounted ? `<b class=\"white-text\">${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/Apps/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`} simulated app metric have been saved</span>`);\n        this.saveEntities(simulatedMetric);\n        const previousSimulatedAppMetric = this.getSimulatedAppMetric();\n        if (previousSimulatedAppMetric.id) {\n            this.props.updateSimulatedAppMetric(previousSimulatedAppMetric as ISimulatedAppMetric, simulatedMetric);\n        }\n        if (this.mounted) {\n            this.updateSimulatedAppMetric(simulatedMetric);\n            this.props.history.replace(simulatedMetric.name);\n        }\n    };\n\n    private onPutFailure = (reason: string, simulatedMetric: ISimulatedAppMetric): void =>\n        super.toast(`Unable to update ${this.mounted ? `<b>${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/Apps/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`} simulated app metric`, 10000, reason, true);\n\n    private onDeleteSuccess = (simulatedMetric: ISimulatedAppMetric): void => {\n        super.toast(`<span class=\"green-text\">Simulated app metric <b class=\"white-text\">${simulatedMetric.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.props.history.push(`/simulated-metrics/Apps`);\n        }\n    };\n\n    private onDeleteFailure = (reason: string, simulatedMetric: ISimulatedAppMetric): void =>\n        super.toast(`Unable to delete ${this.mounted ? `<b>${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/Apps/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`} simulated app metric`, 10000, reason, true);\n\n    private shouldShowSaveButton = () =>\n        !!this.state.unsavedApps.length;\n\n    private saveEntities = (simulatedMetric: ISimulatedAppMetric) => {\n        this.saveSimulatedAppMetricApps(simulatedMetric);\n    };\n\n    private addSimulatedAppMetricApp = (app: string): void => {\n        this.setState({\n            unsavedApps: this.state.unsavedApps.concat(app)\n        });\n    };\n\n    private removeSimulatedAppMetricApps = (apps: string[]): void => {\n        this.setState({\n            unsavedApps: this.state.unsavedApps.filter(app => !apps.includes(app))\n        });\n    };\n\n    private saveSimulatedAppMetricApps = (simulatedMetric: ISimulatedAppMetric): void => {\n        const {unsavedApps} = this.state;\n        if (unsavedApps.length) {\n            postData(`simulated-metrics/apps/${simulatedMetric.name}/apps`, unsavedApps,\n                () => this.onSaveAppsSuccess(simulatedMetric),\n                (reason) => this.onSaveAppsFailure(simulatedMetric, reason));\n        }\n    };\n\n    private onSaveAppsSuccess = (simulatedMetric: ISimulatedAppMetric): void => {\n        this.props.addSimulatedAppMetricApps(simulatedMetric.name, this.state.unsavedApps);\n        if (this.mounted) {\n            this.setState({unsavedApps: []});\n        }\n    };\n\n    private onSaveAppsFailure = (simulatedMetric: ISimulatedAppMetric, reason: string): void =>\n        super.toast(`Unable to save apps of simulated app metric ${this.mounted ? `<b>${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/apps/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`}`, 10000, reason, true);\n\n    private updateSimulatedAppMetric = (simulatedAppMetric: ISimulatedAppMetric) => {\n        simulatedAppMetric = Object.values(normalize(simulatedAppMetric, Schemas.SIMULATED_APP_METRIC).entities.simulatedAppMetrics || {})[0];\n        const formSimulatedAppMetric = {...simulatedAppMetric};\n        removeFields(formSimulatedAppMetric);\n        this.setState({\n            simulatedAppMetric: simulatedAppMetric,\n            formSimulatedAppMetric: formSimulatedAppMetric\n        });\n    };\n\n    private getFields = (simulatedAppMetric: Partial<ISimulatedAppMetric>): IFields =>\n        Object.entries(simulatedAppMetric).map(([key, _]) => {\n            return {\n                [key]: {\n                    id: key,\n                    label: key,\n                    validation: {rule: requiredAndTrimmed}\n                }\n            };\n        }).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});\n\n    private fieldOption = (field: IField): string =>\n        field.name;\n\n    private simulatedAppMetric = () => {\n        const {isLoading, error} = this.props;\n        const simulatedAppMetric = this.getSimulatedAppMetric();\n        const formSimulatedAppMetric = this.getFormSimulatedAppMetric();\n        // @ts-ignore\n        const simulatedAppMetricKey: (keyof ISimulatedAppMetric) = formSimulatedAppMetric && Object.keys(formSimulatedAppMetric)[0];\n        const isNewSimulatedAppMetric = this.isNew();\n        return (\n            <>\n                {!isNewSimulatedAppMetric && isLoading && <LoadingSpinner/>}\n                {!isNewSimulatedAppMetric && !isLoading && error && <Error message={error}/>}\n                {(isNewSimulatedAppMetric || !isLoading) && (isNewSimulatedAppMetric || !error) && formSimulatedAppMetric && (\n                    /*@ts-ignore*/\n                    <Form id={simulatedAppMetricKey}\n                          fields={this.getFields(formSimulatedAppMetric)}\n                          values={simulatedAppMetric}\n                          isNew={isNew(this.props.location.search)}\n                          showSaveButton={this.shouldShowSaveButton()}\n                          post={{\n                              url: 'simulated-metrics/apps',\n                              successCallback: this.onPostSuccess,\n                              failureCallback: this.onPostFailure\n                          }}\n                          put={{\n                              url: `simulated-metrics/apps/${simulatedAppMetric.name}`,\n                              successCallback: this.onPutSuccess,\n                              failureCallback: this.onPutFailure\n                          }}\n                          delete={{\n                              url: `simulated-metrics/apps/${simulatedAppMetric.name}`,\n                              successCallback: this.onDeleteSuccess,\n                              failureCallback: this.onDeleteFailure\n                          }}\n                          saveEntities={this.saveEntities}>\n                        {Object.keys(formSimulatedAppMetric).map((key, index) =>\n                            key === 'field'\n                                ? <Field<IField> key='fields'\n                                                 id='field'\n                                                 label='field'\n                                                 type='dropdown'\n                                                 dropdown={{\n                                                     defaultValue: \"Select field\",\n                                                     values: Object.values(this.props.fields),\n                                                     optionToString: this.fieldOption,\n                                                     emptyMessage: 'No fields available'\n                                                 }}/>\n                                : key === 'override'\n                                ? <Field key={index}\n                                         id={key}\n                                         type='checkbox'\n                                         checkbox={{label: 'override real metrics'}}/>\n                                : key === 'active'\n                                    ? <Field key={index}\n                                             id={key}\n                                             type='checkbox'\n                                             checkbox={{label: 'active'}}/>\n                                    : key === 'minimumValue' || key === 'maximumValue'\n                                        ? <Field key={index}\n                                                 id={key}\n                                                 label={key}\n                                                 type={'number'}/>\n                                        : <Field key={index}\n                                                 id={key}\n                                                 label={key}/>\n                        )}\n                    </Form>\n                )}\n            </>\n        )\n    };\n\n    private apps = (): JSX.Element =>\n        <SimulatedAppMetricAppsList isLoadingSimulatedAppMetric={this.props.isLoading}\n                                    loadSimulatedAppMetricError={!this.isNew() ? this.props.error : undefined}\n                                    simulatedAppMetric={this.getSimulatedAppMetric()}\n                                    unsavedApps={this.state.unsavedApps}\n                                    onAddApp={this.addSimulatedAppMetricApp}\n                                    onRemoveApps={this.removeSimulatedAppMetricApps}/>;\n\n    private tabs = (): Tab[] => [\n        {\n            title: 'Simulated metric',\n            id: 'simulatedAppMetric',\n            content: () => this.simulatedAppMetric(),\n            active: this.props.location.state?.selected === 'simulatedAppMetric'\n        },\n        {\n            title: 'Apps',\n            id: 'apps',\n            content: () => this.apps(),\n            active: this.props.location.state?.selected === 'apps'\n        },\n    ];\n\n}\n\nfunction removeFields(simulatedAppMetric: Partial<ISimulatedAppMetric>) {\n    delete simulatedAppMetric[\"id\"];\n    delete simulatedAppMetric[\"apps\"];\n}\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.simulatedMetrics.apps.isLoadingSimulatedAppMetrics;\n    const error = state.entities.simulatedMetrics.apps.loadSimulatedAppMetricsError;\n    const name = props.match.params.name;\n    const simulatedAppMetric = isNew(props.location.search) ? buildNewSimulatedAppMetric() : state.entities.simulatedMetrics.apps.data[name];\n    let formSimulatedAppMetric;\n    if (simulatedAppMetric) {\n        formSimulatedAppMetric = {...simulatedAppMetric};\n        removeFields(formSimulatedAppMetric);\n    }\n    const fields = state.entities.fields.data;\n    return {\n        isLoading,\n        error,\n        simulatedAppMetric,\n        formSimulatedAppMetric,\n        fields\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadSimulatedAppMetrics,\n    addSimulatedAppMetric,\n    updateSimulatedAppMetric,\n    loadFields,\n    addSimulatedAppMetricApps,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimulatedAppMetric);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport M from \"materialize-css\";\nimport {Route, Switch} from \"react-router-dom\";\nimport LoadingBar from \"react-redux-loading-bar\";\nimport Navbar from \"../views/navbar/Navbar\";\nimport ManagementLanding from \"../routes/management/landing/Landing\";\nimport MonitoringLanding from \"../routes/monitoring/landing/Landing\";\nimport DataManagementLanding from \"../routes/dataManagement/landing/Landing\";\nimport Services from \"../routes/management/services/Services\";\nimport Service from \"../routes/management/services/Service\";\nimport {connect, Provider} from \"react-redux\";\nimport Login from \"../views/login/Login\";\nimport AuthenticatedRoute from \"../components/AuthenticatedRoute\";\nimport ManagementLogs from \"../routes/management/logs/ManagementLogs\";\nimport Region from \"../routes/management/regions/Region\";\nimport Regions from \"../routes/management/regions/Regions\";\nimport Nodes from \"../routes/management/nodes/Nodes\";\nimport Node from \"../routes/management/nodes/Node\";\nimport CloudHost from \"../routes/management/hosts/cloud/CloudHost\";\nimport EdgeHost from \"../routes/management/hosts/edge/EdgeHost\";\nimport Hosts from \"../routes/management/hosts/Hosts\";\nimport CloudHosts from \"../routes/management/hosts/cloud/CloudHosts\";\nimport EdgeHosts from \"../routes/management/hosts/edge/EdgeHosts\";\nimport Containers from \"../routes/management/containers/Containers\";\nimport Container from \"../routes/management/containers/Container\";\nimport Apps from \"../routes/management/apps/Apps\";\nimport App from \"../routes/management/apps/App\";\nimport RulesHost from \"../routes/management/rules/hosts/RulesHost\";\nimport RulesService from \"../routes/management/rules/services/RulesService\";\nimport Rules from \"../routes/management/rules/Rules\";\nimport RuleConditions from \"../routes/management/rules/conditions/RuleConditions\";\nimport Condition from \"../routes/management/rules/conditions/RuleCondition\";\nimport LoadBalancers from \"../routes/management/loadBalancers/LoadBalancers\";\nimport LoadBalancer from \"../routes/management/loadBalancers/LoadBalancer\";\nimport RegistrationServers from \"../routes/management/registrationServers/RegistrationServers\";\nimport RegistrationServer from \"../routes/management/registrationServers/RegistrationServer\";\nimport SimulatedMetrics from \"../routes/management/metrics/SimulatedMetrics\";\nimport SimulatedServiceMetric from \"../routes/management/metrics/services/SimulatedServiceMetric\";\nimport SimulatedHostMetric from \"../routes/management/metrics/hosts/SimulatedHostMetric\";\nimport SimulatedHostMetrics from \"../routes/management/metrics/hosts/SimulatedHostMetrics\";\nimport SimulatedServiceMetrics from \"../routes/management/metrics/services/SimulatedServiceMetrics\";\nimport {PageNotFound} from \"../components/PageNotFound\";\nimport {Footer} from \"../views/footer/Footer\";\nimport RulesContainer from \"../routes/management/rules/containers/RulesContainer\";\nimport RuleService from \"../routes/management/rules/services/RuleService\";\nimport RuleHost from \"../routes/management/rules/hosts/RuleHost\";\nimport RuleContainer from \"../routes/management/rules/containers/RuleContainer\";\nimport SimulatedContainerMetrics from \"../routes/management/metrics/containers/SimulatedContainerMetrics\";\nimport SimulatedContainerMetric from \"../routes/management/metrics/containers/SimulatedContainerMetric\";\nimport Ssh from \"../routes/management/ssh/Ssh\";\nimport {ReduxState} from \"../reducers\";\nimport Settings from \"../routes/management/settings/Settings\";\nimport MonitoringSettings from \"../routes/monitoring/settings/Settings\";\nimport DataManagementSettings from \"../routes/dataManagement/settings/Settings\";\nimport WorkerManager from \"../routes/management/workerManagers/WorkerManager\";\nimport WorkerManagers from \"../routes/management/workerManagers/WorkerManagers\";\nimport RuleApp from \"../routes/management/rules/apps/RuleApp\";\nimport RulesApp from \"../routes/management/rules/apps/RulesApp\";\nimport SimulatedAppMetrics from \"../routes/management/metrics/apps/SimulatedAppMetrics\";\nimport SimulatedAppMetric from \"../routes/management/metrics/apps/SimulatedAppMetric\";\n\ninterface RootContainerProps {\n    store: any;\n}\n\ninterface StateToProps {\n    component: IComponent;\n}\n\ntype Props = StateToProps & RootContainerProps;\n\nexport const managementAuthenticatedRoutes: { [path: string]: { title?: string, component: any, search?: boolean } } = {\n    \"/home\": {title: 'Microservices dynamic system management', component: ManagementLanding},\n    \"/apps\": {component: Apps, search: true},\n    \"/apps/:name\": {component: App},\n    \"/services\": {component: Services, search: true},\n    \"/services/:name\": {component: Service},\n    \"/services/service\": {component: Service},\n    \"/containers\": {component: Containers, search: true},\n    \"/containers/:id\": {component: Container},\n    \"/hosts\": {component: Hosts, search: true},\n    \"/hosts/cloud\": {component: CloudHosts},\n    \"/hosts/cloud/:instanceId\": {component: CloudHost},\n    \"/hosts/edge\": {component: EdgeHosts},\n    \"/hosts/edge/:hostname\": {component: EdgeHost},\n    \"/nodes\": {component: Nodes, search: true},\n    \"/nodes/:id\": {component: Node},\n    \"/rules\": {component: Rules, search: true},\n    \"/rules/hosts\": {component: RulesHost, search: true},\n    \"/rules/hosts/:name\": {component: RuleHost},\n    \"/rules/apps\": {component: RulesApp, search: true},\n    \"/rules/apps/:name\": {component: RuleApp},\n    \"/rules/services\": {component: RulesService, search: true},\n    \"/rules/services/:name\": {component: RuleService},\n    \"/rules/containers\": {component: RulesContainer, search: true},\n    \"/rules/containers/:name\": {component: RuleContainer},\n    \"/rules/conditions\": {component: RuleConditions, search: true},\n    \"/rules/conditions/:name\": {component: Condition},\n    \"/simulated-metrics\": {component: SimulatedMetrics, search: true},\n    \"/simulated-metrics/hosts\": {component: SimulatedHostMetrics, search: true},\n    \"/simulated-metrics/hosts/:name\": {component: SimulatedHostMetric},\n    \"/simulated-metrics/apps\": {component: SimulatedAppMetrics, search: true},\n    \"/simulated-metrics/apps/:name\": {component: SimulatedAppMetric},\n    \"/simulated-metrics/services\": {component: SimulatedServiceMetrics, search: true},\n    \"/simulated-metrics/services/:name\": {component: SimulatedServiceMetric},\n    \"/simulated-metrics/containers\": {component: SimulatedContainerMetrics, search: true},\n    \"/simulated-metrics/containers/:name\": {component: SimulatedContainerMetric},\n    \"/regions\": {component: Regions, search: true},\n    \"/regions/:name\": {component: Region},\n    \"/load-balancers\": {component: LoadBalancers, search: true},\n    \"/load-balancers/:id\": {component: LoadBalancer},\n    \"/registration-servers\": {component: RegistrationServers, search: true},\n    \"/registration-servers/:id\": {component: RegistrationServer},\n    \"/worker-managers\": {component: WorkerManagers, search: true},\n    \"/worker-managers/:id\": {component: WorkerManager},\n    \"/ssh\": {component: Ssh},\n    \"/settings\": {component: Settings},\n    \"/logs\": {component: ManagementLogs, search: true},\n    \"/*\": {title: \"404 - Not found\", component: PageNotFound},\n};\n\nexport const monitoringAuthenticatedRoutes: { [path: string]: { title?: string, component: any, search?: boolean } } = {\n    \"/home\": {title: 'Microservices dynamic system monitoring', component: MonitoringLanding},\n    \"/settings\": {component: MonitoringSettings},\n    \"/*\": {title: \"404 - Not found\", component: PageNotFound},\n};\n\nexport const dataManagementAuthenticatedRoutes: { [path: string]: { title?: string, component: any, search?: boolean } } = {\n    \"/home\": {title: 'Microservices dynamic system data management', component: DataManagementLanding},\n    \"/settings\": {component: DataManagementSettings},\n    \"/*\": {title: \"404 - Not found\", component: PageNotFound},\n};\n\nexport type IComponent = 'Management' | 'Monitoring' | 'Data';\n\nexport const components: IComponent[] = [\n    'Management', 'Monitoring', 'Data'\n];\n\nclass Root extends React.Component<Props, {}> {\n\n    public componentDidMount(): void {\n        M.AutoInit();\n    }\n\n    public render() {\n        let routes = (function (component) {\n            switch (component) {\n                case \"Management\":\n                    return managementAuthenticatedRoutes;\n                case \"Monitoring\":\n                    return monitoringAuthenticatedRoutes;\n                case \"Data\":\n                    return dataManagementAuthenticatedRoutes;\n            }\n        })(this.props.component);\n        return (\n            <main>\n                <Provider store={this.props.store}>\n                    <LoadingBar showFastActions className=\"loading-bar\"/>\n                    <Navbar/>\n                    <div className='main-content'>\n                        <Switch>\n                            <Route path=\"/\" exact component={Login}/>\n                            <Route path=\"/login\" exact component={Login}/>\n                            {Object.entries(routes).map(([path, {title, component}], index) =>\n                                <AuthenticatedRoute key={index} exact path={path} title={title}\n                                                    component={component}/>)}\n                        </Switch>\n                    </div>\n                </Provider>\n                <Footer/>\n            </main>\n        );\n    }\n\n}\n\nfunction mapStateToProps(state: ReduxState): StateToProps {\n    return {\n        component: state.ui.component\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(Root);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdown\":\"ControlledList_dropdown__3yJiT\",\"disabled\":\"ControlledList_disabled__iQmsX\",\"noLabelCheckbox\":\"ControlledList_noLabelCheckbox__3Oe_Z\",\"button\":\"ControlledList_button__1v40T\"};","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React, {createRef} from \"react\";\nimport M from \"materialize-css\";\n\ninterface Props<T> {\n    className?: string;\n    id: string;\n    name: string;\n    value: any;\n    disabled?: boolean;\n    dropdown: { defaultValue?: string | number, values: T[], optionToString?: (v: T) => string, emptyMessage?: string };\n    onChange: (e: React.FormEvent<HTMLSelectElement>) => void;\n    onBlur?: (e: React.FormEvent<HTMLSelectElement>) => void;\n}\n\nexport class Dropdown<T> extends React.Component<Props<T>, {}> {\n\n    private dropdown = createRef<HTMLSelectElement>();\n\n    public componentDidMount(): void {\n        this.initDropdown();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props<T>>, prevState: Readonly<{}>, snapshot?: any): void {\n        this.initDropdown();\n        M.updateTextFields();\n    }\n\n    public render() {\n        const {className, id, name, value, disabled, onChange, onBlur, dropdown} = this.props;\n        let valueString = value === undefined ? \"\" : value;\n        valueString = typeof valueString === 'object' ? JSON.stringify(valueString) : valueString.toString();\n        const values = dropdown.values;\n        if (!values.length && value) {\n            values.push(value);\n        }\n        return (\n            <select\n                className={className}\n                id={id}\n                name={name}\n                value={valueString}\n                disabled={disabled || values.length === 0}\n                onChange={onChange}\n                onBlur={onBlur}\n                ref={this.dropdown}>\n                {<>\n                    {values.length > 0 && dropdown.defaultValue &&\n                    <option key={dropdown.defaultValue} value=\"\" disabled hidden>\n                        {dropdown.defaultValue}\n                    </option>}\n                    {values.length === 0 && dropdown.emptyMessage &&\n                    <option value=\"\" disabled hidden>\n                        {dropdown.emptyMessage}\n                    </option>}\n                    {values.map((option, index) =>\n                        <option key={index}\n                                value={typeof option === 'string' || typeof option === 'boolean' ? option.toString() : JSON.stringify(option)}>\n                            {typeof option === 'string' || typeof option === 'boolean' ? option.toString() : dropdown.optionToString?.(option)}\n                        </option>)}\n                </>}\n            </select>\n        )\n    }\n\n    private initDropdown = (): void => {\n        M.FormSelect.init(this.dropdown.current as Element);\n    };\n\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport IDatabaseData from \"../../../components/IDatabaseData\";\n\nexport interface IRule extends IDatabaseData {\n    name: string;\n    priority: number;\n    generic: boolean;\n    decision: IDecision;\n    conditions: string[];\n}\n\nexport interface IDecision extends IDatabaseData {\n    ruleDecision: string;\n    componentType: IComponentType;\n}\n\ninterface IComponentType extends IDatabaseData {\n    type: string;\n}\n\nexport const componentTypes = {\n    HOST: {type: \"host\"},\n    SERVICE: {type: \"service\"},\n};\n\nexport interface IValueMode extends IDatabaseData {\n    name: string;\n}\n\nexport interface IField extends IDatabaseData {\n    name: string;\n    query: IPrometheusQuery;\n}\n\nexport interface IPrometheusQuery {\n    query: string;\n}\n\nexport interface IOperator extends IDatabaseData {\n    operator: string;\n    symbol: string;\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport MainLayout from \"../views/mainLayout/MainLayout\";\n\nexport const PageNotFound: React.FC = () =>\n    <MainLayout/>;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Hosts_container__cpr1D\",\"collapsibleSubtitle\":\"Hosts_collapsibleSubtitle__1LoKM\",\"collapsibleCardList\":\"Hosts_collapsibleCardList__1ncNC\"};","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../BaseComponent\";\nimport React, {createRef} from \"react\";\nimport M, {ModalOptions} from \"materialize-css\";\nimport {IValues} from \"../form/Form\";\nimport ScrollBar from \"react-perfect-scrollbar\";\n\ninterface DialogProps {\n    id: string;\n    title?: string;\n    position?: string;\n    confirmCallback?: (input: any) => void;\n    fullscreen?: boolean;\n    scrollbar?: React.RefObject<ScrollBar>;\n    locked?: boolean;\n    footer?: false;\n    onClose?: () => void;\n    titleButtons?: JSX.Element;\n}\n\ntype Props = DialogProps;\n\ninterface State {\n    fullscreen: boolean;\n    scrollMaxHeight: number;\n}\n\nexport default class Dialog extends BaseComponent<Props, State> {\n\n    private modal = createRef<HTMLDivElement>();\n    private scrollbar = this.props.scrollbar || createRef<ScrollBar>();\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            fullscreen: props.fullscreen || false,\n            scrollMaxHeight: this.calcDialogScrollMaxHeight(props.fullscreen || false)\n        }\n    }\n\n    public componentDidMount(): void {\n        this.initModal(this.props.position, this.state.fullscreen);\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        let modal = M.Modal.getInstance(this.modal.current as Element);\n        if (prevState.fullscreen !== this.state.fullscreen\n            || prevState.scrollMaxHeight !== this.state.scrollMaxHeight) {\n            modal.options.inDuration = 0;\n            modal.options.outDuration = 0;\n            modal.options.onOpenEnd = this.onOpenModal;\n            modal.options.onCloseStart = this.onCloseModal;\n            modal.options.preventScrolling = true;\n        }\n        this.scrollbar?.current?.updateScroll();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    public render() {\n        const {id, title, children, locked, footer, confirmCallback, titleButtons} = this.props;\n        const {fullscreen} = this.state;\n        return (\n            <div id={id} className={`modal dialog ${fullscreen ? 'modal-fullscreen' : ''}`} ref={this.modal}>\n                <div className=\"modal-content\">\n                    {title && (\n                        <>\n                            <div className='modal-title'>\n                                {title}\n                                {!fullscreen && (\n                                    <button className='btn-floating btn-flat right'\n                                            onClick={this.toggleFullScreen}\n                                            type='button'>\n                                        <i className=\"material-icons\">fullscreen</i>\n                                    </button>\n                                )}\n                                {fullscreen && (\n                                    <>\n                                        <button className='modal-close btn-floating btn-flat right'\n                                                type='button'>\n                                            <i className=\"material-icons\">close</i>\n                                        </button>\n                                        {!locked &&\n                                        <button className='btn-floating btn-flat right'\n                                                onClick={this.toggleFullScreen}\n                                                type='button'>\n                                            <i className=\"material-icons\">fullscreen_exit</i>\n                                        </button>}\n                                    </>\n                                )}\n                                {titleButtons}\n                            </div>\n                        </>\n                    )}\n                    <ScrollBar ref={this.scrollbar}\n                               component={'div'}\n                               style={this.state.scrollMaxHeight ? {maxHeight: Math.floor(this.state.scrollMaxHeight)} : undefined}>\n                        {children}\n                    </ScrollBar>\n                    {(footer == undefined || footer) &&\n                    <div\n                        className={`modal-footer dialog-footer`}>\n                        <div>\n                            <button\n                                className={`modal-close waves-effect waves-light btn-flat red-text inline-button`}\n                                type=\"button\">\n                                Cancel\n                            </button>\n                            {confirmCallback &&\n                            <button className={`waves-effect waves-light btn-flat green-text inline-button`}\n                                    type=\"button\"\n                                    onClick={this.confirmCallback}>\n                                Confirm\n                            </button>}\n                        </div>\n                    </div>}\n                </div>\n            </div>\n        );\n    }\n\n    private initModal = (position?: string, fullScreen?: boolean) => {\n        let options: Partial<ModalOptions> = {\n            onOpenEnd: this.onOpenModal,\n            onCloseStart: this.onCloseModal,\n            preventScrolling: true\n        };\n        if (position) {\n            options.startingTop = position;\n            options.endingTop = position;\n        }\n        if (fullScreen) {\n            options.startingTop = '0%';\n            options.endingTop = '0%';\n        }\n        M.Modal.init(this.modal.current as Element, options);\n    }\n\n    private calcDialogScrollMaxHeight = (fullscreen: boolean) =>\n        fullscreen\n            //116px because of 58px title and 58px footer\n            ? document.body.clientHeight - 116\n            : document.body.clientHeight * 0.7 - 116\n\n    private handleResize = () => {\n        this.setState({\n            scrollMaxHeight: this.calcDialogScrollMaxHeight(this.state.fullscreen)\n        })\n        this.scrollbar?.current?.updateScroll();\n    }\n\n    private onOpenModal = (): void => {\n        M.updateTextFields();\n        this.scrollbar.current?.updateScroll();\n    };\n\n    private onCloseModal = (): void => {\n        let modal = M.Modal.getInstance(this.modal.current as Element);\n        modal.options.inDuration = 250;\n        modal.options.outDuration = 250;\n        this.props.onClose?.();\n    }\n\n    private confirmCallback = (values: IValues): void => {\n        let modal = M.Modal.getInstance(this.modal.current as Element);\n        modal.close();\n        this.props.confirmCallback?.(values);\n    };\n\n    private toggleFullScreen = () => {\n        this.setState({fullscreen: !this.state.fullscreen}, () => this.handleResize());\n    }\n\n}","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport styles from './Empty.module.css';\n\ninterface Props {\n    icon?: boolean;\n    message?: string;\n    error?: string;\n}\n\nconst Empty: React.FC<Props> = ({icon, message, error}: Props) =>\n    <div className={`${styles.container}`}>\n        {(icon === undefined || icon) && (\n            <i className={`${styles.icon} ${error ? 'red-text' : ''} material-icons`}>error_outline</i>)}\n        <h6 className={`${styles.message}`}>{message || ''}\n            <div className='red-text'>{error || ''}</div>\n        </h6>\n    </div>;\n\nexport default Empty;\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport React from \"react\";\nimport styles from \"../../../components/list/ListItem.module.css\";\nimport {Link} from \"react-router-dom\";\nimport List from \"../../../components/list/List\";\nimport {ReduxState} from \"../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport {loadRulesService} from \"../../../actions\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    genericServiceRules: string[];\n}\n\ninterface DispatchToProps {\n    loadRulesService: () => void;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass GenericServiceRuleList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadRulesService();\n    }\n\n    public render() {\n        const RulesList = List<string>();\n        return (\n            <RulesList isLoading={this.props.isLoading}\n                       error={this.props.error}\n                       emptyMessage={`Generic service rules list is empty`}\n                       list={this.props.genericServiceRules}\n                       show={this.rule}/>\n        );\n    }\n\n    private rule = (rule: string, index: number): JSX.Element =>\n        <ListItem key={index} separate={index !== this.props.genericServiceRules.length - 1}>\n            <div className={`${styles.linkedItemContent}`}>\n                <span>{rule}</span>\n            </div>\n            <Link to={`/rules/services/${rule}`}\n                  className={`${styles.link} waves-effect`}>\n                <i className={`${styles.linkIcon} material-icons right`}>link</i>\n            </Link>\n        </ListItem>;\n\n}\n\nfunction mapStateToProps(state: ReduxState): StateToProps {\n    return {\n        isLoading: state.entities.rules.services.isLoadingRules,\n        error: state.entities.rules.services.loadRulesError,\n        genericServiceRules: Object.entries(state.entities.rules.services.data)\n            .filter(([_, rule]) => rule.generic)\n            .map(([ruleName, _]) => ruleName)\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadRulesService,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GenericServiceRuleList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport React from \"react\";\nimport styles from \"../../../components/list/ListItem.module.css\";\nimport {Link} from \"react-router-dom\";\nimport List from \"../../../components/list/List\";\nimport {ReduxState} from \"../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport {loadSimulatedServiceMetrics} from \"../../../actions\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    genericSimulatedServiceMetrics: string[];\n}\n\ninterface DispatchToProps {\n    loadSimulatedServiceMetrics: () => void;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass GenericSimulatedServiceMetricList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadSimulatedServiceMetrics();\n    }\n\n    public render() {\n        const SimulatedMetricsList = List<string>();\n        return (\n            <SimulatedMetricsList isLoading={this.props.isLoading}\n                                  error={this.props.error}\n                                  emptyMessage={`Generic simulated metrics list is empty`}\n                                  list={this.props.genericSimulatedServiceMetrics}\n                                  show={this.simulatedMetric}/>\n        );\n    }\n\n    private simulatedMetric = (simulatedMetric: string, index: number): JSX.Element =>\n        <ListItem key={index} separate={index !== this.props.genericSimulatedServiceMetrics.length - 1}>\n            <div className={`${styles.linkedItemContent}`}>\n                <span>{simulatedMetric}</span>\n            </div>\n            <Link to={`/simulated-metrics/services/${simulatedMetric}`}\n                  className={`${styles.link} waves-effect`}>\n                <i className={`${styles.linkIcon} material-icons right`}>link</i>\n            </Link>\n        </ListItem>;\n\n}\n\nfunction mapStateToProps(state: ReduxState): StateToProps {\n    return {\n        isLoading: state.entities.simulatedMetrics.services.isLoadingSimulatedServiceMetrics,\n        error: state.entities.simulatedMetrics.services.loadSimulatedServiceMetricsError,\n        genericSimulatedServiceMetrics: Object.entries(state.entities.simulatedMetrics.services.data)\n            .filter(([_, simulatedMetric]) => simulatedMetric.generic)\n            .map(([simulatedMetricName, _]) => simulatedMetricName)\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadSimulatedServiceMetrics,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GenericSimulatedServiceMetricList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\n\ninterface Props {\n    icon: string;\n    tooltip: {\n        text?: string,\n        deactivatedText?: string,\n        activatedText?: string,\n        position: 'left' | 'right' | 'bottom' | 'top'\n    };\n    clickCallback: () => void;\n    active?: boolean;\n    automatic?: boolean;\n    offset?: number;\n}\n\ninterface State {\n    isActive: boolean;\n}\n\nexport default class ActionButton extends React.Component<Props, State> {\n\n    state: State = {\n        isActive: (this.props.automatic && this.props.active) || false\n    };\n\n    handleOnClick = () => {\n        if (this.props.automatic) {\n            this.setState(state => ({isActive: !state.isActive}));\n        }\n        this.props.clickCallback();\n    };\n\n    public render() {\n        const {icon, offset, tooltip, automatic} = this.props;\n        const {isActive} = this.state;\n        return (\n            <div className={`fixed-action-btn tooltipped waves-effect btn-floating grey darken-${isActive ? '4' : '3'}`}\n                 style={offset ? {right: `${offset * 55 + 23}px`} : undefined}\n                 data-position={tooltip.position}\n                 data-tooltip={`${automatic ? (isActive ? tooltip.activatedText : tooltip.deactivatedText) : tooltip.text}`}\n                 onClick={this.handleOnClick}>\n                <i className=\"large material-icons\">{icon}</i>\n            </div>\n        );\n    }\n\n}","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {Point} from \"react-simple-maps\";\nimport React from \"react\";\nimport {ICoordinates} from \"./LocationMap\";\n\nexport interface IMarker extends ICoordinates {\n    title: string,\n    color?: string,\n    titleCoordinates?: boolean,\n}\n\ninterface Props {\n    setTooltipContent: (tooltip: string) => void;\n    title: string;\n    titleCoordinates: boolean;\n    label?: string;\n    location: Point;\n    color: string;\n    size: number;\n    onRemove?: () => void;\n}\n\nexport default function Marker({setTooltipContent, title, titleCoordinates, label, location, color, size, onRemove}: Props) {\n    let tooltip = \"\";\n    if (title) {\n        tooltip += title;\n        if (titleCoordinates) {\n            tooltip += ' (';\n        }\n    }\n    if (titleCoordinates) {\n        tooltip += `Lat: ${location[1].toFixed(2)}, Lon: ${location[0].toFixed(2)}`;\n        if (title) {\n            tooltip += ')';\n        }\n    }\n    return (\n        <>\n            <circle r={size}\n                    fill={color}\n                    onMouseEnter={() => setTooltipContent(tooltip)}\n                    onMouseLeave={() => setTooltipContent(\"\")}\n                    onClick={onRemove}/>\n            <circle r={size} stroke=\"black\" strokeWidth={size/2.5} fill=\"none\" />\n            {label &&\n            <text\n                textAnchor=\"middle\"\n                y={size * 3.7}\n                style={{fontFamily: \"system-ui\", fill: \"#5D5A6D\", fontSize: size * 3, pointerEvents: \"none\"}}>\n                {label}\n            </text>}\n        </>\n\n    );\n}\n","/*\n * MIT License\n *  \n * Copyright (c) 2020 manager\n *  \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *  \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport MapChart from \"./MapChart\";\nimport ReactTooltip from \"react-tooltip\";\nimport {Point} from \"react-simple-maps\";\nimport Marker, {IMarker} from \"./Marker\";\nimport Dialog from \"../dialogs/Dialog\";\nimport styles from \"../../routes/management/landing/Landing.module.css\";\n\nexport interface ICoordinates {\n    label?: string,\n    latitude: number,\n    longitude: number,\n}\n\ninterface Props {\n    onSelect?: (marker: IMarker) => void;\n    onDeselect?: (marker: IMarker) => void;\n    onClear?: () => void;\n    locations: IMarker[],\n    marker?: { color?: string, size?: number, labeled?: boolean },\n    hover?: boolean,\n    clickHighlight?: boolean,\n    zoomable?: boolean,\n    position?: { coordinates: Point, zoom: number },\n    center?: boolean;\n    resizable?: boolean;\n}\n\ninterface State {\n    tooltip: string;\n    markerSize: number;\n    center: boolean;\n}\n\nexport default class LocationMap extends React.Component<Props, State> {\n\n    private DEFAULT_MARKER_SIZE = 4;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            tooltip: \"\",\n            markerSize: this.props.marker?.size || this.DEFAULT_MARKER_SIZE,\n            center: this.props.center || true\n        }\n    }\n\n    public componentDidMount() {\n        M.AutoInit();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any) {\n        if (prevProps.zoomable !== this.props.zoomable) {\n            this.resizeMarkers({coordinates: [0, 0], zoom: 1});\n        }\n    }\n\n    private setTooltip = (tooltip: string) =>\n        this.setState({tooltip});\n\n    private resizeMarkers = (position: { coordinates: Point, zoom: number }) =>\n        this.setState({markerSize: (this.props.marker?.size || this.DEFAULT_MARKER_SIZE) / position.zoom})\n\n    private handleCenter = () =>\n        this.setState({center: !this.center()})\n\n    private center = () =>\n        this.props.center === undefined ? this.state.center : this.props.center && this.state.center;\n\n    private buttons = (tooltipPosition: string) => (\n        <>\n            <button className={`btn-floating btn-flat right tooltipped`}\n                    data-position={tooltipPosition}\n                    data-tooltip={'Center'}\n                    onClick={this.handleCenter}\n                    type='button'>\n                <i className=\"material-icons\">center_focus_weak</i>;\n            </button>\n            {this.props.onClear &&\n            <button className={`btn-floating btn-flat right tooltipped`}\n                    data-position={tooltipPosition}\n                    data-tooltip={'Clear'}\n                    onClick={this.props.onClear}\n                    type='button'>\n                <i className=\"material-icons\">clear_all</i>;\n            </button>}\n        </>\n    );\n\n    public render() {\n        const {onSelect, onDeselect, locations, marker, hover, clickHighlight, zoomable, position, resizable} = this.props;\n        const {tooltip, markerSize} = this.state;\n        const markers = locations.map((location, key): { coordinates: Point, marker: JSX.Element } => ({\n            coordinates: [location.longitude, location.latitude],\n            marker: <Marker key={key} setTooltipContent={this.setTooltip}\n                            title={location.title} label={marker?.labeled ? location.label : undefined}\n                            titleCoordinates={location.titleCoordinates === undefined ? true : location.titleCoordinates}\n                            location={[location.longitude, location.latitude]}\n                            color={location.color || marker?.color || \"red\"} size={markerSize}\n                            onRemove={() => {\n                                this.setTooltip(\"\");\n                                onDeselect?.({\n                                    title: location.title,\n                                    label: location.label,\n                                    latitude: location.latitude,\n                                    longitude: location.longitude\n                                });\n                            }}/>\n        }));\n        const map = <>\n            <MapChart setTooltipContent={this.setTooltip} onClick={onSelect} markers={markers} hover={hover}\n                      clickHighlight={clickHighlight} zoomable={zoomable} position={position} center={this.center()}\n                      onZoom={this.resizeMarkers}/>\n            <ReactTooltip html multiline>\n                {tooltip}\n            </ReactTooltip>\n        </>;\n        return <>\n            {resizable &&\n            <>\n                <button className={`modal-trigger btn-floating btn-flat right tooltipped`}\n                        data-position={'top'}\n                        data-tooltip={'Fullscreen'}\n                        data-target={'fullscreen-modal'}\n                        type='button'>\n                    <i className=\"material-icons\">fullscreen</i>\n                </button>\n                {this.buttons('top')}\n                <Dialog id={'fullscreen-modal'}\n                        title={'Location'}\n                        fullscreen\n                        locked\n                        footer={false}\n                        titleButtons={this.buttons('bottom')}>\n                    {map}\n                </Dialog>\n            </>}\n            {map}\n        </>;\n    }\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"CheckboxList_title__24AgF\",\"listWrapper\":\"CheckboxList_listWrapper__QYK6t\",\"globalCheckbox\":\"CheckboxList_globalCheckbox__3oAAy\",\"requiredLabel\":\"CheckboxList_requiredLabel__3DYUA\"};","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React, {createRef} from 'react'\nimport {basicAuthenticate, isAuthenticated, registerSuccessfulLogin} from \"../../utils/auth\";\nimport {RouteComponentProps} from \"react-router\";\nimport styles from './Login.module.css';\nimport M from \"materialize-css\";\nimport {bindActionCreators} from \"redux\";\nimport {showSidenavByUser} from \"../../actions\";\nimport {connect} from \"react-redux\";\nimport {AxiosError} from \"axios\";\nimport BaseComponent from \"../../components/BaseComponent\";\n\ninterface State {\n    username: string;\n    password: string;\n    showPassword: boolean;\n}\n\ninterface DispatchToProps {\n    showSidenavByUser: (value: boolean) => void;\n}\n\ntype Props = DispatchToProps & RouteComponentProps;\n\nclass Login extends BaseComponent<Props, State> {\n\n    state = {\n        username: '',\n        password: '',\n        showPassword: false,\n    };\n    private tabs = createRef<HTMLUListElement>();\n\n    public componentDidMount(): void {\n        M.Tabs.init(this.tabs.current as Element);\n        M.updateTextFields();\n    }\n\n    public render() {\n        if (isAuthenticated()) {\n            this.props.history.push(`/home`);\n        }\n        const {username, password, showPassword} = this.state;\n        return (\n            <div className={`container ${styles.container} row`}>\n                <ul className={`tabs ${styles.tabs} col s9 m6 l6 offset-s1 offset-m3 offset-l3`} ref={this.tabs}>\n                    <li className={`tab col s12`}><a className={styles.title}>Enter your credentials</a></li>\n                </ul>\n                <div className={`tab-content ${styles.tabContent} col s9 m6 l6 offset-s1 offset-m3 offset-l3`}>\n                    <form onSubmit={this.handleLogin}>\n                        <div className=\"input-field col s12\">\n                            <i className=\"material-icons prefix\">account_circle</i>\n                            <label className=\"active\" htmlFor=\"username\">Username</label>\n                            <input id=\"username\" name=\"username\" value={username}\n                                   type=\"text\" required onChange={this.handleChange}/>\n                        </div>\n                        <div className=\"input-field col s12\">\n                            <i className=\"material-icons prefix\">vpn_key</i>\n                            <label className=\"active\" htmlFor=\"password\">Password</label>\n                            <input id=\"password\" name=\"password\" value={password}\n                                   autoComplete=\"off\"\n                                   type={showPassword ? \"text\" : \"password\"}\n                                   required\n                                   onChange={this.handleChange}/>\n                            <i className=\"material-icons suffix\" onClick={this.handleShowPassword}>\n                                {showPassword ? \"visibility_off\" : \"visibility\"}\n                            </i>\n                        </div>\n                        <button className=\"btn btn-flat waves-effect waves-light white-text right slide\"\n                                type=\"submit\" tabIndex={0} onClick={this.handleLogin}>\n                            Login\n                        </button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n\n    private handleChange = ({target: {name, value}}: React.ChangeEvent<HTMLInputElement>) =>\n        this.setState({[name]: value} as Pick<State, any>);\n\n    private handleShowPassword = () =>\n        this.setState({showPassword: !this.state.showPassword});\n\n    private handleLogin = (e: React.FormEvent) => {\n        e.preventDefault();\n        const {username, password} = this.state;\n        basicAuthenticate(username, password)\n            .then(() => {\n                registerSuccessfulLogin(username, password);\n                this.props.history.push(`/home`);\n            }).catch((e: AxiosError) => {\n            super.toast(`Unable to login`, 7500, e.response?.status === 401 ? 'Invalid username and/or password' : e.message, true, true);\n        })\n    };\n\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({showSidenavByUser}, dispatch);\n\nexport default connect(null, mapDispatchToProps)(Login);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport React, {createRef} from \"react\";\nimport {IService} from \"./Service\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport listItemStyles from \"../../../components/list/ListItem.module.css\";\nimport appServiceStyles from \"./ServiceAppList.module.css\";\nimport {Link} from \"react-router-dom\";\nimport ControlledList from \"../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {loadApps, loadAppServices, loadServiceApps, removeServiceApps} from \"../../../actions\";\nimport Field from \"../../../components/form/Field\";\nimport {IFields, IValues, requiredAndNumberAndMinAndMax} from \"../../../components/form/Form\";\nimport List from \"../../../components/list/List\";\nimport M from \"materialize-css\";\nimport Collapsible from \"../../../components/collapsible/Collapsible\";\nimport {IApp} from \"../apps/App\";\nimport {IAppService} from \"../apps/AppServicesList\";\nimport {connect} from \"react-redux\";\nimport ScrollBar from \"react-perfect-scrollbar\";\n\nexport interface IAddServiceApp {\n    name: string;\n    launchOrder: number;\n}\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    apps: { [key: string]: IApp },\n    serviceApps: string[];\n    isLoadingAppServices: boolean;\n}\n\ninterface DispatchToProps {\n    loadApps: (name?: string) => any;\n    loadServiceApps: (serviceName: string) => void;\n    loadAppServices: (appName: string) => void;\n    removeServiceApps: (serviceName: string, apps: string[]) => void\n}\n\ninterface ServiceAppListProps {\n    isLoadingService: boolean;\n    loadServiceError?: string | null;\n    service: IService | Partial<IService> | null;\n    unsavedApps: IAddServiceApp[];\n    onAddServiceApp: (app: IAddServiceApp) => void;\n    onRemoveServiceApps: (apps: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & ServiceAppListProps;\n\ntype State = {\n    selectedApp?: string,\n    entitySaved: boolean;\n}\n\nclass ServiceAppList extends BaseComponent<Props, State> {\n\n    private collapsible = createRef<HTMLUListElement>();\n    private scrollbar = createRef<ScrollBar>();\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadApps();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        M.Collapsible.init(this.collapsible.current as Element);\n        if (!prevProps.service?.serviceName && this.props.service?.serviceName) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList<string>\n            isLoading={!isNew ? this.props.isLoadingService || this.props.isLoading : undefined}\n            error={!isNew ? this.props.loadServiceError || this.props.error : undefined}\n            emptyMessage='Apps list is empty'\n            data={this.props.serviceApps}\n            dataKey={['name']}\n            dropdown={{\n                id: 'apps',\n                title: 'Add app',\n                empty: 'No apps to add',\n                data: this.getSelectableAppsNames(),\n                onSelect: this.onSelectApp,\n                formModal: {\n                    id: 'serviceApp',\n                    title: 'Add app',\n                    fields: this.getModalFields(),\n                    values: this.getModalValues(),\n                    content: this.serviceAppModal,\n                    position: '20%',\n                    scrollbar: this.scrollbar,\n                }\n            }}\n            show={this.app}\n            onAddInput={this.onAdd}\n            onRemove={this.onRemove}\n            onDelete={{\n                url: `services/${this.props.service?.serviceName}/apps`,\n                successCallback: this.onDeleteSuccess,\n                failureCallback: this.onDeleteFailure\n            }}\n            entitySaved={this.state.entitySaved}/>;\n\n    }\n\n    private loadEntities = () => {\n        if (this.props.service?.serviceName) {\n            const {serviceName} = this.props.service;\n            this.props.loadServiceApps(serviceName);\n        }\n    };\n\n    private isNew = () =>\n        this.props.service?.serviceName === undefined;\n\n    private app = (index: number, app: string | IAddServiceApp, separate: boolean, checked: boolean,\n                   handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const appName = typeof app === 'string' ? app : app.name;\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedApps.map(app => app.name).includes(appName);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${listItemStyles.linkedItemContent}`}>\n                    <label>\n                        <input id={appName}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? listItemStyles.unsavedItem : undefined}>\n                {typeof app === 'object' ? app.launchOrder + '.' : ''} {appName}\n              </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/apps/${appName}`}\n                          className={`${listItemStyles.link} waves-effect`}>\n                        <i className={`${listItemStyles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (app: IValues): void => {\n        this.props.onAddServiceApp(app as IAddServiceApp);\n        this.setState({selectedApp: undefined});\n    };\n\n    private onRemove = (apps: string[]): void =>\n        this.props.onRemoveServiceApps(apps);\n\n    private onDeleteSuccess = (apps: string[]): void => {\n        if (this.props.service?.serviceName) {\n            const {serviceName} = this.props.service;\n            this.props.removeServiceApps(serviceName, apps);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to delete app`, 10000, reason, true);\n\n    private getSelectableAppsNames = () => {\n        const {apps, serviceApps, unsavedApps} = this.props;\n        const unsavedAppsNames = unsavedApps.map(app => app.name);\n        return Object.keys(apps).filter(name => !serviceApps.includes(name) && !unsavedAppsNames.includes(name));\n    };\n\n    private appServicesLaunchOrder = (service: IAppService, index: number) =>\n        <ListItem key={index}>\n            <div className={`${appServiceStyles.appServiceItem}`}>\n                <span>{service.launchOrder} - {service.service.serviceName}</span>\n            </div>\n        </ListItem>;\n\n    private appServicesList = (): IAppService[] => {\n        if (!this.state.selectedApp) {\n            return [];\n        }\n        if (!this.props.apps[this.state.selectedApp]) {\n            return [];\n        }\n        const services = this.props.apps[this.state.selectedApp].services;\n        if (!services) {\n            return [];\n        }\n        return Object.values(services)\n            .filter(service => service.service.serviceName !== this.props.service?.serviceName)\n            .sort((a, b) => a.launchOrder - b.launchOrder);\n    };\n\n    private serviceAppModal = () => {\n        const OtherServicesList = List<IAppService>();\n        const list = this.appServicesList();\n        return (\n            <>\n                <Field key='launchOrder' id={'launchOrder'} label='launchOrder' type={'number'}/>\n                {list && !!list.length &&\n                <Collapsible id={'otherServicesList'}\n                             title={'Other services\\' launch order'}\n                             onChange={this.updateModalScrollbar}>\n                    <OtherServicesList list={list} show={this.appServicesLaunchOrder}/>\n                </Collapsible>}\n            </>\n        )\n    };\n\n    private getModalFields = (): IFields => (\n        {\n            launchOrder: {\n                id: 'launchOrder',\n                label: 'launchOrder',\n                validation: {rule: requiredAndNumberAndMinAndMax, args: [0, 2147483647]}\n            }\n        }\n    );\n\n    private getModalValues = (): IValues => (\n        {\n            launchOrder: undefined\n        }\n    );\n\n    private onSelectApp = (selectedApp: string): void => {\n        this.setState({selectedApp: selectedApp});\n        this.props.loadAppServices(selectedApp);\n    };\n\n    private updateModalScrollbar = () =>\n        this.scrollbar.current?.updateScroll();\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: ServiceAppListProps): StateToProps {\n    const serviceName = ownProps.service?.serviceName;\n    const service = serviceName && state.entities.services.data[serviceName];\n    const serviceApps = service && service.apps;\n    return {\n        isLoading: state.entities.services.isLoadingApps,\n        error: state.entities.services.loadAppsError,\n        apps: state.entities.apps.data,\n        serviceApps: serviceApps || [],\n        isLoadingAppServices: state.entities.apps.isLoadingServices,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadApps,\n        loadServiceApps,\n        loadAppServices,\n        removeServiceApps,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ServiceAppList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport {ReduxState} from \"../../../reducers\";\nimport {IService} from \"./Service\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\nimport {\n    addServiceDependencies,\n    loadServiceDependencies,\n    loadServices,\n    removeServiceDependencies\n} from \"../../../actions\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport {Link} from \"react-router-dom\";\nimport ControlledList from \"../../../components/list/ControlledList\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport styles from \"../../../components/list/ListItem.module.css\";\n\nexport interface IServiceDependency extends IService {\n}\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    services: { [key: string]: IService },\n    dependencies: string[];\n}\n\ninterface DispatchToProps {\n    loadServices: () => void;\n    loadServiceDependencies: (serviceName: string) => void;\n    removeServiceDependencies: (serviceName: string, dependencies: string[]) => void;\n}\n\ninterface ServiceDependencyProps {\n    isLoadingService: boolean;\n    loadServiceError?: string | null;\n    service: IService | Partial<IService> | null;\n    unsavedDependencies: string[];\n    onAddServiceDependency: (dependency: string) => void;\n    onRemoveServiceDependencies: (dependencies: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & ServiceDependencyProps;\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass ServiceDependencyList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadServices();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.service?.serviceName && this.props.service?.serviceName) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList isLoading={!isNew ? this.props.isLoadingService || this.props.isLoading : undefined}\n                               error={!isNew ? this.props.loadServiceError || this.props.error : undefined}\n                               emptyMessage={`Dependencies list is empty`}\n                               data={this.props.dependencies}\n                               dropdown={{\n                                   id: 'dependencies',\n                                   title: 'Add dependency',\n                                   empty: 'No dependencies to add',\n                                   data: this.getSelectableServicesNames()\n                               }}\n                               show={this.dependency}\n                               onAdd={this.onAdd}\n                               onRemove={this.onRemove}\n                               onDelete={{\n                                   url: `services/${this.props.service?.serviceName}/dependencies`,\n                                   successCallback: this.onDeleteSuccess,\n                                   failureCallback: this.onDeleteFailure\n                               }}\n                               entitySaved={this.state.entitySaved}/>;\n\n    }\n\n    private loadEntities = () => {\n        if (this.props.service?.serviceName) {\n            const {serviceName} = this.props.service;\n            this.props.loadServiceDependencies(serviceName);\n        }\n    };\n\n    private isNew = () =>\n        this.props.service?.serviceName === undefined;\n\n    private dependency = (index: number, dependency: string, separate: boolean, checked: boolean,\n                          handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedDependencies.includes(dependency);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${styles.linkedItemContent}`}>\n                    <label>\n                        <input id={dependency}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                 {dependency}\n              </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/services/${dependency}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (dependency: string): void =>\n        this.props.onAddServiceDependency(dependency);\n\n    private onRemove = (dependencies: string[]) =>\n        this.props.onRemoveServiceDependencies(dependencies);\n\n    private onDeleteSuccess = (dependencies: string[]): void => {\n        if (this.props.service?.serviceName) {\n            const {serviceName} = this.props.service;\n            this.props.removeServiceDependencies(serviceName, dependencies);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to delete dependency`, 10000, reason, true);\n\n    private getSelectableServicesNames = () => {\n        const {services, service, dependencies, unsavedDependencies} = this.props;\n        return Object.keys(services)\n            .filter(name => (!service || name !== service.serviceName) && !dependencies.includes(name) && !unsavedDependencies.includes(name));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: ServiceDependencyProps): StateToProps {\n    const serviceName = ownProps.service?.serviceName;\n    const service = serviceName && state.entities.services.data[serviceName];\n    const dependencies = service && service.dependencies;\n    return {\n        isLoading: state.entities.services.isLoadingDependencies,\n        error: state.entities.services.loadDependenciesError,\n        services: state.entities.services.data,\n        dependencies: dependencies || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadServices,\n        loadServiceDependencies,\n        addServiceDependencies,\n        removeServiceDependencies,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ServiceDependencyList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {IService} from \"./Service\";\nimport React from \"react\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport styles from \"../../../components/list/ListItem.module.css\";\nimport {Link} from \"react-router-dom\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport {ReduxState} from \"../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport List from \"../../../components/list/List\";\nimport {loadServiceDependents} from \"../../../actions\";\n\nexport interface IDependent extends IService {\n}\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    dependentNames: string[];\n}\n\ninterface DispatchToProps {\n    loadServiceDependents: (serviceName: string) => void;\n}\n\ninterface ServiceDependentListProps {\n    isLoadingService: boolean;\n    loadServiceError?: string | null;\n    service: IService | Partial<IService> | null;\n}\n\ntype Props = StateToProps & DispatchToProps & ServiceDependentListProps;\n\nclass ServiceDependentList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.loadEntities();\n    }\n\n    public render() {\n        const DependentsList = List<string>();\n        return (\n            <DependentsList isLoading={this.props.isLoadingService || this.props.isLoading}\n                            error={this.props.loadServiceError || this.props.error}\n                            emptyMessage={`Dependents list is empty`}\n                            list={this.props.dependentNames}\n                            show={this.dependent}/>\n        );\n    }\n\n    private loadEntities = () => {\n        if (this.props.service?.serviceName) {\n            const {serviceName} = this.props.service;\n            this.props.loadServiceDependents(serviceName);\n        }\n    };\n\n    private dependent = (dependent: string, index: number): JSX.Element =>\n        <ListItem key={index} separate={index !== this.props.dependentNames.length - 1}>\n            <div className={`${styles.linkedItemContent}`}>\n                <span>{dependent}</span>\n            </div>\n            <Link to={`/services/${dependent}`}\n                  className={`${styles.link} waves-effect`}>\n                <i className={`${styles.linkIcon} material-icons right`}>link</i>\n            </Link>\n        </ListItem>;\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: ServiceDependentListProps): StateToProps {\n    const serviceName = ownProps.service?.serviceName;\n    const service = serviceName && state.entities.services.data[serviceName];\n    const serviceDependents = service && service.dependents;\n    return {\n        isLoading: state.entities.services.isLoadingDependents,\n        error: state.entities.services.loadDependentsError,\n        dependentNames: serviceDependents || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadServiceDependents,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ServiceDependentList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport {IService} from \"./Service\";\nimport IDatabaseData from \"../../../components/IDatabaseData\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport styles from \"../../../components/list/ListItem.module.css\";\nimport ControlledList from \"../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {loadServicePredictions, removeServicePredictions} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport {IFields, IValues, requiredAndNumberAndMin, requiredAndTrimmed} from \"../../../components/form/Form\";\nimport Field, {getTypeFromValue} from \"../../../components/form/Field\";\n\nexport interface IPrediction extends IDatabaseData {\n    name: string;\n    description: string;\n    startDate: string;\n    startTime: string;\n    endDate: string;\n    endTime: string;\n    minimumReplicas: number;\n}\n\nconst emptyPrediction = (): Partial<IPrediction> => ({\n    name: undefined,\n    description: undefined,\n    startDate: undefined,\n    startTime: undefined,\n    endDate: undefined,\n    endTime: undefined,\n    minimumReplicas: undefined\n});\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    predictions: IPrediction[];\n}\n\ninterface DispatchToProps {\n    loadServicePredictions: (serviceName: string) => void;\n    removeServicePredictions: (serviceName: string, predictions: string[]) => void;\n}\n\ninterface ServicePredictionListProps {\n    isLoadingService: boolean;\n    loadServiceError?: string | null;\n    service: IService | Partial<IService> | null;\n    unsavedPredictions: IPrediction[];\n    onAddServicePrediction: (prediction: IPrediction) => void;\n    onRemoveServicePredictions: (prediction: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & ServicePredictionListProps;\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass ServicePredictionList extends BaseComponent<Props, State> {\n\n    //TODO allow to edit prediction details, by clicking the prediction opening a filled modal form\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.service?.serviceName && this.props.service?.serviceName) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList<IPrediction>\n            isLoading={!isNew ? this.props.isLoadingService || this.props.isLoading : undefined}\n            error={!isNew ? this.props.loadServiceError || this.props.error : undefined}\n            emptyMessage='Predictions list is empty'\n            data={this.props.predictions}\n            dataKey={['name']}\n            formModal={{\n                id: 'servicePrediction',\n                title: 'Add prediction',\n                fields: this.getFields(),\n                values: emptyPrediction(),\n                content: this.predictionModal,\n                fullScreen: window.innerWidth < 993,\n            }}\n            show={this.prediction}\n            onAddInput={this.onAdd}\n            onRemove={this.onRemove}\n            onDelete={{\n                url: `services/${this.props.service?.serviceName}/predictions`,\n                successCallback: this.onDeleteSuccess,\n                failureCallback: this.onDeleteFailure\n            }}\n            entitySaved={this.state.entitySaved}/>;\n\n    }\n\n    private loadEntities = () => {\n        if (this.props.service?.serviceName) {\n            const {serviceName} = this.props.service;\n            this.props.loadServicePredictions(serviceName);\n        }\n    };\n\n    private isNew = () =>\n        this.props.service?.serviceName === undefined;\n\n    private prediction = (index: number, prediction: IPrediction, separate: boolean, checked: boolean,\n                          handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedPredictions.includes(prediction);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${styles.listItemContent}`}>\n                    <label>\n                        <input id={prediction.name}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                {prediction.name} ({prediction.minimumReplicas} replicas)\n              </div>\n            </span>\n                    </label>\n                    <div className={`${styles.smallText}`}>\n                        {prediction.startDate === prediction.endDate ?\n                            <div>{prediction.startDate} {prediction.startTime} <span\n                                className={styles.arrow}>&rarr;</span> {prediction.endTime}</div>\n                            :\n                            <>\n                                <div>{prediction.startDate} {prediction.startTime}</div>\n                                <div>{prediction.endDate} {prediction.endTime}</div>\n                            </>\n                        }\n                    </div>\n                </div>\n            </ListItem>\n        );\n    };\n\n    private onAdd = (prediction: IValues): void => {\n        this.props.onAddServicePrediction(prediction as IPrediction);\n    };\n\n    private onRemove = (predictions: string[]) =>\n        this.props.onRemoveServicePredictions(predictions);\n\n    private onDeleteSuccess = (predictions: string[]): void => {\n        if (this.props.service?.serviceName) {\n            const {serviceName} = this.props.service;\n            this.props.removeServicePredictions(serviceName, predictions);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to delete prediction`, 10000, reason, true);\n\n    private getFields = (): IFields =>\n        Object.entries(emptyPrediction()).map(([key, value]) => {\n            return {\n                [key]: {\n                    id: key,\n                    label: key,\n                    validation: getTypeFromValue(value) === 'number'\n                        ? {rule: requiredAndNumberAndMin, args: 0}\n                        : {rule: requiredAndTrimmed}\n                }\n            };\n        }).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});\n\n    private predictionModal = () =>\n        <div>\n            <Field key='name' id={'name'} label='name'/>\n            <Field key='description' id={'description'} label='description' type='multilinetext'/>\n            <div className={'col s6 inline-field'}>\n                <Field key='startDate' id={'startDate'} label='startDate' type='datepicker'/>\n            </div>\n            <div className={'col s6 inline-field'}>\n                <Field key='startTime' id={'startTime'} label='startTime' type='timepicker' icon={{include: false}}/>\n            </div>\n            <div className={'col s6 inline-field'}>\n                <Field key='endDate' id={'endDate'} label='endDate' type='datepicker'/>\n            </div>\n            <div className={'col s6 inline-field'}>\n                <Field key='endTime' id={'endTime'} label='endTime' type='timepicker' icon={{include: false}}/>\n            </div>\n            <Field key='minimumReplicas' id={'minimumReplicas'} label='minimumReplicas' type={'number'}/>\n        </div>;\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: ServicePredictionListProps): StateToProps {\n    const serviceName = ownProps.service?.serviceName;\n    const service = serviceName && state.entities.services.data[serviceName];\n    const predictions = service && service.predictions;\n    return {\n        isLoading: state.entities.services.isLoadingPredictions,\n        error: state.entities.services.loadPredictionsError,\n        predictions: (predictions && Object.values(predictions)) || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadServicePredictions,\n        removeServicePredictions,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ServicePredictionList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport {IService} from \"./Service\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport styles from \"../../../components/list/ListItem.module.css\";\nimport ControlledList from \"../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {loadRulesService, loadServiceRules, removeServiceRules} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport {IRuleService} from \"../rules/services/RuleService\";\nimport {Link} from \"react-router-dom\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    rules: { [key: string]: IRuleService },\n    rulesName: string[];\n}\n\ninterface DispatchToProps {\n    loadRulesService: (name?: string) => any;\n    loadServiceRules: (serviceName: string) => void;\n    removeServiceRules: (serviceName: string, rules: string[]) => void;\n}\n\ninterface ServiceRuleListProps {\n    isLoadingService: boolean;\n    loadServiceError?: string | null;\n    service: IService | Partial<IService> | null;\n    unsavedRules: string[];\n    onAddServiceRule: (rule: string) => void;\n    onRemoveServiceRules: (rule: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & ServiceRuleListProps;\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass ServiceRuleList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadRulesService();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.service?.serviceName && this.props.service?.serviceName) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList isLoading={!isNew ? this.props.isLoadingService || this.props.isLoading : undefined}\n                               error={!isNew ? this.props.loadServiceError || this.props.error : undefined}\n                               emptyMessage={`Rules list is empty`}\n                               data={this.props.rulesName}\n                               dropdown={{\n                                   id: 'rules',\n                                   title: 'Add rule',\n                                   empty: 'No rules to add',\n                                   data: this.getSelectableRules()\n                               }}\n                               show={this.rule}\n                               onAdd={this.onAdd}\n                               onRemove={this.onRemove}\n                               onDelete={{\n                                   url: `services/${this.props.service?.serviceName}/rules`,\n                                   successCallback: this.onDeleteSuccess,\n                                   failureCallback: this.onDeleteFailure\n                               }}\n                               entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.service?.serviceName) {\n            const {serviceName} = this.props.service;\n            this.props.loadServiceRules(serviceName);\n        }\n    };\n\n    private isNew = () =>\n        this.props.service?.serviceName === undefined;\n\n    private rule = (index: number, rule: string, separate: boolean, checked: boolean,\n                    handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedRules.includes(rule);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${styles.linkedItemContent}`}>\n                    <label>\n                        <input id={rule}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                 {rule}\n               </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/rules/services/${rule}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (rule: string): void =>\n        this.props.onAddServiceRule(rule);\n\n    private onRemove = (rules: string[]) =>\n        this.props.onRemoveServiceRules(rules);\n\n    private onDeleteSuccess = (rules: string[]): void => {\n        if (this.props.service?.serviceName) {\n            const {serviceName} = this.props.service;\n            this.props.removeServiceRules(serviceName, rules);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to delete rule`, 10000, reason, true);\n\n    private getSelectableRules = () => {\n        const {rules, rulesName, unsavedRules} = this.props;\n        return Object.entries(rules)\n            .filter(([_, rule]) => !rule.generic)\n            .map(([ruleName, _]) => ruleName)\n            .filter(name => !rulesName.includes(name) && !unsavedRules.includes(name));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: ServiceRuleListProps): StateToProps {\n    const serviceName = ownProps.service?.serviceName;\n    const service = serviceName && state.entities.services.data[serviceName];\n    const rulesName = service && service.serviceRules;\n    return {\n        isLoading: state.entities.services.isLoadingRules,\n        error: state.entities.services.loadRulesError,\n        rules: Object.entries(state.entities.rules.services.data)\n            .filter(([_, rule]) => !rule.generic)\n            .map(([key, value]) => ({[key]: value}))\n            .reduce((fields, field) => {\n                for (let key in field) {\n                    fields[key] = field[key];\n                }\n                return fields;\n            }, {}),\n        rulesName: rulesName || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadRulesService,\n        loadServiceRules,\n        removeServiceRules,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ServiceRuleList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport {IService} from \"./Service\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport styles from \"../../../components/list/ListItem.module.css\";\nimport ControlledList from \"../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {\n    loadServiceSimulatedMetrics,\n    loadSimulatedServiceMetrics,\n    removeServiceSimulatedMetrics\n} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {ISimulatedServiceMetric} from \"../metrics/services/SimulatedServiceMetric\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    simulatedMetrics: { [key: string]: ISimulatedServiceMetric },\n    simulatedMetricsName: string[];\n}\n\ninterface DispatchToProps {\n    loadSimulatedServiceMetrics: (name?: string) => any;\n    loadServiceSimulatedMetrics: (serviceName: string) => void;\n    removeServiceSimulatedMetrics: (serviceName: string, simulatedMetrics: string[]) => void;\n}\n\ninterface ServiceSimulatedMetricListProps {\n    isLoadingService: boolean;\n    loadServiceError?: string | null;\n    service: IService | Partial<IService> | null;\n    unsavedSimulatedMetrics: string[];\n    onAddSimulatedServiceMetric: (simulatedMetric: string) => void;\n    onRemoveSimulatedServiceMetrics: (simulatedMetric: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & ServiceSimulatedMetricListProps;\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass ServiceSimulatedMetricList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadSimulatedServiceMetrics();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.service?.serviceName && this.props.service?.serviceName) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList isLoading={!isNew ? this.props.isLoadingService || this.props.isLoading : undefined}\n                               error={!isNew ? this.props.loadServiceError || this.props.error : undefined}\n                               emptyMessage={`Simulated metrics list is empty`}\n                               data={this.props.simulatedMetricsName}\n                               dropdown={{\n                                   id: 'simulatedMetrics',\n                                   title: 'Add simulated metric',\n                                   empty: 'No simulated metrics to add',\n                                   data: this.getSelectableSimulatedMetrics()\n                               }}\n                               show={this.simulatedMetric}\n                               onAdd={this.onAdd}\n                               onRemove={this.onRemove}\n                               onDelete={{\n                                   url: `services/${this.props.service?.serviceName}/simulated-metrics`,\n                                   successCallback: this.onDeleteSuccess,\n                                   failureCallback: this.onDeleteFailure\n                               }}\n                               entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.service?.serviceName) {\n            const {serviceName} = this.props.service;\n            this.props.loadServiceSimulatedMetrics(serviceName);\n        }\n    };\n\n    private isNew = () =>\n        this.props.service?.serviceName === undefined;\n\n    private simulatedMetric = (index: number, simulatedMetric: string, separate: boolean, checked: boolean,\n                               handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedSimulatedMetrics.includes(simulatedMetric);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${styles.linkedItemContent}`}>\n                    <label>\n                        <input id={simulatedMetric}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                 {simulatedMetric}\n               </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/simulated-metrics/services/${simulatedMetric}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (simulatedMetric: string): void =>\n        this.props.onAddSimulatedServiceMetric(simulatedMetric);\n\n    private onRemove = (simulatedMetrics: string[]) =>\n        this.props.onRemoveSimulatedServiceMetrics(simulatedMetrics);\n\n    private onDeleteSuccess = (simulatedMetrics: string[]): void => {\n        if (this.props.service?.serviceName) {\n            const {serviceName} = this.props.service;\n            this.props.removeServiceSimulatedMetrics(serviceName, simulatedMetrics);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to delete simulated metric`, 10000, reason, true);\n\n    private getSelectableSimulatedMetrics = () => {\n        const {simulatedMetrics, simulatedMetricsName, unsavedSimulatedMetrics} = this.props;\n        return Object.keys(simulatedMetrics).filter(name => !simulatedMetricsName.includes(name) && !unsavedSimulatedMetrics.includes(name));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: ServiceSimulatedMetricListProps): StateToProps {\n    const serviceName = ownProps.service?.serviceName;\n    const service = serviceName && state.entities.services.data[serviceName];\n    const simulatedMetricsName = service && service.serviceSimulatedMetrics;\n    return {\n        isLoading: state.entities.services.isLoadingSimulatedMetrics,\n        error: state.entities.services.loadSimulatedMetricsError,\n        simulatedMetrics: Object.entries(state.entities.simulatedMetrics.services.data)\n            .filter(([_, simulatedMetric]) => !simulatedMetric.generic)\n            .map(([key, value]) => ({[key]: value}))\n            .reduce((fields, field) => {\n                for (let key in field) {\n                    fields[key] = field[key];\n                }\n                return fields;\n            }, {}),\n        simulatedMetricsName: simulatedMetricsName || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadSimulatedServiceMetrics,\n        loadServiceSimulatedMetrics,\n        removeServiceSimulatedMetrics,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ServiceSimulatedMetricList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport Form, {IFields, requiredAndNumberAndMinAndMax, requiredAndTrimmed} from \"../../../components/form/Form\"\nimport IDatabaseData from \"../../../components/IDatabaseData\";\nimport {\n    addService,\n    addServiceApps,\n    addServiceDependencies,\n    addServicePredictions,\n    addServiceRules,\n    addServiceSimulatedMetrics,\n    loadServices,\n    updateService\n} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport MainLayout from \"../../../views/mainLayout/MainLayout\";\nimport LoadingSpinner from \"../../../components/list/LoadingSpinner\";\nimport {ReduxState} from \"../../../reducers\";\nimport Field, {getTypeFromValue} from \"../../../components/form/Field\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport {Error} from \"../../../components/errors/Error\";\nimport Tabs, {Tab} from \"../../../components/tabs/Tabs\";\nimport {IReply, postData} from \"../../../utils/api\";\nimport ServiceAppList, {IAddServiceApp} from \"./ServiceAppList\";\nimport ServiceDependencyList from \"./ServiceDependencyList\";\nimport ServiceDependentList from \"./ServiceDependentList\";\nimport ServicePredictionList, {IPrediction} from \"./ServicePredictionList\";\nimport ServiceRuleList from \"./ServiceRuleList\";\nimport UnsavedChanged from \"../../../components/form/UnsavedChanges\";\nimport GenericServiceRuleList from \"./GenericServiceRuleList\";\nimport {isNew} from \"../../../utils/router\";\nimport {normalize} from \"normalizr\";\nimport {Schemas} from \"../../../middleware/api\";\nimport ServiceSimulatedMetricList from \"./ServiceSimulatedMetricList\";\nimport GenericServiceSimulatedMetricList from \"./GenericSimulatedServiceMetricList\";\n\nexport interface IService extends IDatabaseData {\n    serviceName: string;\n    dockerRepository: string;\n    defaultExternalPort: number;\n    defaultInternalPort: number;\n    defaultDb?: string;\n    launchCommand?: string;\n    minimumReplicas: number;\n    maximumReplicas: number;\n    outputLabel?: string;\n    serviceType: ServiceType;\n    expectedMemoryConsumption: number;\n    apps?: string[];\n    dependencies?: string[];\n    dependents?: string[];\n    predictions?: { [key: string]: IPrediction };\n    serviceRules?: string[];\n    serviceSimulatedMetrics?: string[];\n}\n\nexport type ServiceType = 'FRONTEND' | 'BACKEND' | 'DATABASE' | 'SYSTEM';\n\nconst buildNewService = (): Partial<IService> => ({\n    serviceName: undefined,\n    dockerRepository: undefined,\n    defaultExternalPort: undefined,\n    defaultInternalPort: undefined,\n    defaultDb: undefined,\n    launchCommand: undefined,\n    minimumReplicas: undefined,\n    maximumReplicas: undefined,\n    outputLabel: undefined,\n    serviceType: undefined,\n    expectedMemoryConsumption: undefined,\n});\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    service: Partial<IService>;\n    formService?: Partial<IService>,\n}\n\ninterface DispatchToProps {\n    loadServices: (name: string) => void;\n    addService: (service: IService) => void;\n    updateService: (previousService: IService, currentService: IService) => void;\n    addServiceApps: (serviceName: string, apps: string[]) => void;\n    addServiceDependencies: (serviceName: string, dependencies: string[]) => void;\n    addServicePredictions: (serviceName: string, predictions: IPrediction[]) => void;\n    addServiceRules: (serviceName: string, rules: string[]) => void;\n    addServiceSimulatedMetrics: (serviceName: string, simulatedMetrics: string[]) => void;\n}\n\ninterface MatchParams {\n    name: string;\n}\n\ninterface LocationState {\n    data: IService,\n    selected: 'services' | 'apps' | 'dependencies' | 'dependents' | 'predictions' | 'serviceRules' | 'genericRules'\n        | 'simulatedMetrics' | 'genericSimulatedMetrics'\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ninterface State {\n    service?: IService,\n    formService?: IService,\n    unsavedApps: IAddServiceApp[],\n    unsavedDependencies: string[],\n    unsavedPredictions: IPrediction[],\n    unsavedRules: string[],\n    unsavedSimulatedMetrics: string[],\n}\n\nclass Service extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            unsavedApps: [],\n            unsavedDependencies: [],\n            unsavedPredictions: [],\n            unsavedRules: [],\n            unsavedSimulatedMetrics: [],\n        };\n    }\n\n    public componentDidMount(): void {\n        this.loadService();\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                {this.shouldShowSaveButton() && !isNew(this.props.location.search) && <UnsavedChanged/>}\n                <div className=\"container\">\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private loadService = () => {\n        if (!this.isNew()) {\n            const serviceName = this.props.match.params.name;\n            this.props.loadServices(serviceName);\n        }\n    };\n\n    private getService = () =>\n        this.props.service || this.state.service;\n\n    private getFormService = () =>\n        this.props.formService || this.state.formService;\n\n    private isNew = () =>\n        isNew(this.props.location.search);\n\n    private onPostSuccess = (reply: IReply<IService>): void => {\n        const service = reply.data;\n        super.toast(`<span class=\"green-text\">Service ${this.mounted ? `<b class=\"white-text\">${service.serviceName}</b>` : `<a href=/services/${service.serviceName}><b>${service.serviceName}</b></a>`} saved</span>`);\n        this.props.addService(service);\n        this.saveEntities(service);\n        if (this.mounted) {\n            this.updateService(service);\n            this.props.history.replace(service.serviceName);\n        }\n    };\n\n    private onPostFailure = (reason: string, service: IService): void =>\n        super.toast(`Unable to save service <b>${service.serviceName}</b>`, 10000, reason, true);\n\n    private onPutSuccess = (reply: IReply<IService>): void => {\n        const service = reply.data;\n        super.toast(`<span class=\"green-text\">Changes to ${this.mounted ? `<b class=\"white-text\">${service.serviceName}</b>` : `<a href=/services/${service.serviceName}><b>${service.serviceName}</b></a>`} service have been saved</span>`);\n        this.saveEntities(service);\n        const previousService = this.getService();\n        if (previousService.id) {\n            this.props.updateService(previousService as IService, service);\n        }\n        if (this.mounted) {\n            this.updateService(service);\n            this.props.history.replace(service.serviceName);\n        }\n    };\n\n    private onPutFailure = (reason: string, service: IService): void =>\n        super.toast(`Unable to update ${this.mounted ? `<b>${service.serviceName}</b>` : `<a href=/services/${service.serviceName}><b>${service.serviceName}</b></a>`} service`, 10000, reason, true);\n\n    private onDeleteSuccess = (service: IService): void => {\n        super.toast(`<span class=\"green-text\">Service <b class=\"white-text\">${service.serviceName}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.props.history.push(`/services`);\n        }\n    };\n\n    private onDeleteFailure = (reason: string, service: IService): void =>\n        super.toast(`Unable to delete ${this.mounted ? `<b>${service.serviceName}</b>` : `<a href=/services/${service.serviceName}><b>${service.serviceName}</b></a>`} service`, 10000, reason, true);\n\n    private shouldShowSaveButton = () =>\n        !!this.state.unsavedApps.length\n        || !!this.state.unsavedDependencies.length\n        || !!this.state.unsavedPredictions.length\n        || !!this.state.unsavedRules.length\n        || !!this.state.unsavedSimulatedMetrics.length;\n\n    private saveEntities = (service: IService) => {\n        this.saveServiceApps(service);\n        this.saveServiceDependencies(service);\n        this.saveServicePredictions(service);\n        this.saveServiceRules(service);\n        this.saveServiceSimulatedMetrics(service);\n    };\n\n    private addServiceApp = (app: IAddServiceApp): void => {\n        this.setState({\n            unsavedApps: this.state.unsavedApps.concat(app)\n        });\n    };\n\n    private removeServiceApps = (apps: string[]): void => {\n        this.setState({\n            unsavedApps: this.state.unsavedApps.filter(app => !apps.includes(app.name))\n        });\n    };\n\n    private saveServiceApps = (service: IService): void => {\n        const {unsavedApps} = this.state;\n        if (unsavedApps.length) {\n            postData(`services/${service.serviceName}/apps`, unsavedApps,\n                () => this.onSaveAppsSuccess(service),\n                (reason) => this.onSaveAppsFailure(service, reason));\n        }\n    };\n\n    private onSaveAppsSuccess = (service: IService): void => {\n        this.props.addServiceApps(service.serviceName, this.state.unsavedApps.map(app => app.name));\n        if (this.mounted) {\n            this.setState({unsavedApps: []});\n        }\n    };\n\n    private onSaveAppsFailure = (service: IService, reason: string): void =>\n        super.toast(`Unable to save apps of service ${this.mounted ? `<b>${service.serviceName}</b>` : `<a href=/services/${service.serviceName}><b>${service.serviceName}</b></a>`}`, 10000, reason, true);\n\n    private addServiceDependency = (dependency: string): void => {\n        this.setState({\n            unsavedDependencies: this.state.unsavedDependencies.concat(dependency)\n        });\n    };\n\n    private removeServiceDependencies = (dependencies: string[]): void => {\n        this.setState({\n            unsavedDependencies: this.state.unsavedDependencies.filter(dependency => !dependencies.includes(dependency))\n        });\n    };\n\n    private saveServiceDependencies = (service: IService): void => {\n        const {unsavedDependencies} = this.state;\n        if (unsavedDependencies.length) {\n            postData(`services/${service.serviceName}/dependencies`, unsavedDependencies,\n                () => this.onSaveDependenciesSuccess(service),\n                (reason) => this.onSaveDependenciesFailure(service, reason));\n        }\n    };\n\n    private onSaveDependenciesSuccess = (service: IService): void => {\n        this.props.addServiceDependencies(service.serviceName, this.state.unsavedDependencies);\n        if (this.mounted) {\n            this.setState({unsavedDependencies: []});\n        }\n    };\n\n    private onSaveDependenciesFailure = (service: IService, reason: string): void =>\n        super.toast(`Unable to save dependencies of service ${this.mounted ? `<b>${service.serviceName}</b>` : `<a href=/services/${service.serviceName}><b>${service.serviceName}</b></a>`}`, 10000, reason, true);\n\n    private addServicePrediction = (prediction: IPrediction): void => {\n        this.setState({\n            unsavedPredictions: this.state.unsavedPredictions.concat(prediction)\n        });\n    };\n\n    private removeServicePredictions = (predictions: string[]): void => {\n        this.setState({\n            unsavedPredictions: this.state.unsavedPredictions.filter(prediction => !predictions.includes(prediction.name))\n        });\n    };\n\n    private saveServicePredictions = (service: IService): void => {\n        const {unsavedPredictions} = this.state;\n        if (unsavedPredictions.length) {\n            postData(`services/${service.serviceName}/predictions`, unsavedPredictions,\n                () => this.onSavePredictionsSuccess(service),\n                (reason) => this.onSavePredictionsFailure(service, reason));\n        }\n    };\n\n    private onSavePredictionsSuccess = (service: IService): void => {\n        this.props.addServicePredictions(service.serviceName, this.state.unsavedPredictions);\n        if (this.mounted) {\n            this.setState({unsavedPredictions: []});\n        }\n    };\n\n    private onSavePredictionsFailure = (service: IService, reason: string): void =>\n        super.toast(`Unable to save predictions of service ${this.mounted ? `<b>${service.serviceName}</b>` : `<a href=/services/${service.serviceName}><b>${service.serviceName}</b></a>`}`, 10000, reason, true);\n\n    private addServiceRule = (rule: string): void => {\n        this.setState({\n            unsavedRules: this.state.unsavedRules.concat(rule)\n        });\n    };\n\n    private removeServiceRules = (rules: string[]): void => {\n        this.setState({\n            unsavedRules: this.state.unsavedRules.filter(rule => !rules.includes(rule))\n        });\n    };\n\n    private saveServiceRules = (service: IService): void => {\n        const {unsavedRules} = this.state;\n        if (unsavedRules.length) {\n            postData(`services/${service.serviceName}/rules`, unsavedRules,\n                () => this.onSaveRulesSuccess(service),\n                (reason) => this.onSaveRulesFailure(service, reason));\n        }\n    };\n\n    private onSaveRulesSuccess = (service: IService): void => {\n        this.props.addServiceRules(service.serviceName, this.state.unsavedRules);\n        if (this.mounted) {\n            this.setState({unsavedRules: []});\n        }\n    };\n\n    private onSaveRulesFailure = (service: IService, reason: string): void =>\n        super.toast(`Unable to save rules of service ${this.mounted ? `<b>${service.serviceName}</b>` : `<a href=/services/${service.serviceName}><b>${service.serviceName}</b></a>`}`, 10000, reason, true);\n\n    private addServiceSimulatedMetric = (simulatedMetric: string): void => {\n        this.setState({\n            unsavedSimulatedMetrics: this.state.unsavedSimulatedMetrics.concat(simulatedMetric)\n        });\n    };\n\n    private removeServiceSimulatedMetrics = (simulatedMetrics: string[]): void => {\n        this.setState({\n            unsavedSimulatedMetrics: this.state.unsavedSimulatedMetrics.filter(metric => !simulatedMetrics.includes(metric))\n        });\n    };\n\n    private saveServiceSimulatedMetrics = (service: IService): void => {\n        const {unsavedSimulatedMetrics} = this.state;\n        if (unsavedSimulatedMetrics.length) {\n            postData(`services/${service.serviceName}/simulated-metrics`, unsavedSimulatedMetrics,\n                () => this.onSaveSimulatedMetricsSuccess(service),\n                (reason) => this.onSaveSimulatedMetricsFailure(service, reason));\n        }\n    };\n\n    private onSaveSimulatedMetricsSuccess = (service: IService): void => {\n        this.props.addServiceSimulatedMetrics(service.serviceName, this.state.unsavedSimulatedMetrics);\n        if (this.mounted) {\n            this.setState({unsavedSimulatedMetrics: []});\n        }\n    };\n\n    private onSaveSimulatedMetricsFailure = (service: IService, reason: string): void =>\n        super.toast(`Unable to save simulated metrics of service ${this.mounted ? `<b>${service.serviceName}</b>` : `<a href=/services/${service.serviceName}><b>${service.serviceName}</b></a>`}`, 10000, reason, true);\n\n    private updateService = (service: IService) => {\n        service = Object.values(normalize(service, Schemas.SERVICE).entities.services || {})[0];\n        const formService = {...service};\n        removeFields(formService);\n        this.setState({service: service, formService: formService});\n    };\n\n    private getFields = (service: Partial<IService>): IFields =>\n        Object.entries(service).map(([key, value]) => {\n            return {\n                [key]: {\n                    id: key,\n                    label: key,\n                    validation:\n                        getTypeFromValue(value) === 'number'\n                            ? {rule: requiredAndNumberAndMinAndMax, args: [0, 2147483647]}\n                            : !['defaultDb', 'launchCommand', 'minimumReplicas', 'maximumReplicas', 'expectedMemoryConsumption'].includes(key)\n                            ? {rule: requiredAndTrimmed}\n                            : undefined\n                }\n            };\n        }).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});\n\n    private service = () => {\n        const {isLoading, error} = this.props;\n        const service = this.getService();\n        const formService = this.getFormService();\n        // @ts-ignore\n        const serviceKey: (keyof IService) = formService && Object.keys(formService)[0];\n        const isNewService = this.isNew();\n        return (\n            <>\n                {!isNewService && isLoading && <LoadingSpinner/>}\n                {!isNewService && !isLoading && error && <Error message={error}/>}\n                {(isNewService || !isLoading) && (isNewService || !error) && formService && (\n                    /*@ts-ignore*/\n                    <Form id={serviceKey}\n                          fields={this.getFields(formService)}\n                          values={service}\n                          isNew={isNewService}\n                          showSaveButton={this.shouldShowSaveButton()}\n                          post={{\n                              url: 'services',\n                              successCallback: this.onPostSuccess,\n                              failureCallback: this.onPostFailure\n                          }}\n                          put={{\n                              url: `services/${service.serviceName}`,\n                              successCallback: this.onPutSuccess,\n                              failureCallback: this.onPutFailure\n                          }}\n                          delete={{\n                              url: `services/${service.serviceName}`,\n                              successCallback: this.onDeleteSuccess,\n                              failureCallback: this.onDeleteFailure\n                          }}\n                          saveEntities={this.saveEntities}>\n                        {Object.entries(formService).map(([key, value], index) =>\n                            key === 'serviceType'\n                                ? <Field key={index}\n                                         id={key}\n                                         type=\"dropdown\"\n                                         label={key}\n                                         dropdown={{\n                                             defaultValue: \"Choose service type\",\n                                             values: [\"FRONTEND\", \"BACKEND\", \"DATABASE\", \"SYSTEM\"]\n                                         }}/>\n                                : <Field key={index}\n                                         id={key}\n                                         label={key}\n                                         type={['defaultExternalPort', 'defaultInternalPort', 'minimumReplicas', 'maximumReplicas',\n                                             'expectedMemoryConsumption'].includes(key) ? 'number' : 'text'}/>\n                        )}\n                    </Form>\n                )}\n            </>\n        )\n    };\n\n    private apps = (): JSX.Element =>\n        <ServiceAppList isLoadingService={this.props.isLoading}\n                        loadServiceError={!this.isNew() ? this.props.error : undefined}\n                        service={this.getService()}\n                        unsavedApps={this.state.unsavedApps}\n                        onAddServiceApp={this.addServiceApp}\n                        onRemoveServiceApps={this.removeServiceApps}/>;\n\n    private dependencies = (): JSX.Element =>\n        <ServiceDependencyList isLoadingService={this.props.isLoading}\n                               loadServiceError={!this.isNew() ? this.props.error : undefined}\n                               service={this.getService()}\n                               unsavedDependencies={this.state.unsavedDependencies}\n                               onAddServiceDependency={this.addServiceDependency}\n                               onRemoveServiceDependencies={this.removeServiceDependencies}/>;\n\n    private dependents = (): JSX.Element =>\n        <ServiceDependentList isLoadingService={this.props.isLoading}\n                              loadServiceError={!this.isNew() ? this.props.error : undefined}\n                              service={this.getService()}/>;\n\n    private predictions = (): JSX.Element =>\n        <ServicePredictionList isLoadingService={this.props.isLoading}\n                               loadServiceError={!this.isNew() ? this.props.error : undefined}\n                               service={this.getService()}\n                               unsavedPredictions={this.state.unsavedPredictions}\n                               onAddServicePrediction={this.addServicePrediction}\n                               onRemoveServicePredictions={this.removeServicePredictions}/>;\n\n    private rules = (): JSX.Element =>\n        <ServiceRuleList isLoadingService={this.props.isLoading}\n                         loadServiceError={!this.isNew() ? this.props.error : undefined}\n                         service={this.getService()}\n                         unsavedRules={this.state.unsavedRules}\n                         onAddServiceRule={this.addServiceRule}\n                         onRemoveServiceRules={this.removeServiceRules}/>;\n\n    private genericRules = (): JSX.Element =>\n        <GenericServiceRuleList/>;\n\n    private simulatedMetrics = (): JSX.Element =>\n        <ServiceSimulatedMetricList isLoadingService={this.props.isLoading}\n                                    loadServiceError={!this.isNew() ? this.props.error : undefined}\n                                    service={this.getService()}\n                                    unsavedSimulatedMetrics={this.state.unsavedSimulatedMetrics}\n                                    onAddSimulatedServiceMetric={this.addServiceSimulatedMetric}\n                                    onRemoveSimulatedServiceMetrics={this.removeServiceSimulatedMetrics}/>;\n\n    private genericSimulatedMetrics = (): JSX.Element =>\n        <GenericServiceSimulatedMetricList/>;\n\n    private tabs = (): Tab[] => ([\n        {\n            title: 'Service',\n            id: 'service',\n            content: () => this.service(),\n            active: this.props.location.state?.selected === 'services'\n        },\n        {\n            title: 'Apps',\n            id: 'apps',\n            content: () => this.apps(),\n            active: this.props.location.state?.selected === 'apps'\n        },\n        {\n            title: 'Dependencies',\n            id: 'dependencies',\n            content: () => this.dependencies(),\n            active: this.props.location.state?.selected === 'dependencies'\n        },\n        {\n            title: 'Dependents',\n            id: 'dependents',\n            content: () => this.dependents(),\n            hidden: this.isNew(),\n            active: this.props.location.state?.selected === 'dependents'\n        },\n        {\n            title: 'Predictions',\n            id: 'predictions',\n            content: () => this.predictions(),\n            active: this.props.location.state?.selected === 'predictions'\n        },\n        {\n            title: 'Rules',\n            id: 'serviceRules',\n            content: () => this.rules(),\n            active: this.props.location.state?.selected === 'serviceRules'\n        },\n        {\n            title: 'Generic rules',\n            id: 'genericRules',\n            content: () => this.genericRules(),\n            active: this.props.location.state?.selected === 'genericRules'\n        },\n        {\n            title: 'Simulated metrics',\n            id: 'simulatedMetrics',\n            content: () => this.simulatedMetrics(),\n            active: this.props.location.state?.selected === 'simulatedMetrics'\n        },\n        {\n            title: 'Generic simulated metrics',\n            id: 'genericSimulatedMetrics',\n            content: () => this.genericSimulatedMetrics(),\n            active: this.props.location.state?.selected === 'genericSimulatedMetrics'\n        }\n    ]);\n\n}\n\nfunction removeFields(service: Partial<IService>) {\n    delete service[\"id\"];\n    delete service[\"apps\"];\n    delete service[\"dependencies\"];\n    delete service[\"dependents\"];\n    delete service[\"predictions\"];\n    delete service[\"serviceRules\"];\n    delete service[\"serviceSimulatedMetrics\"];\n}\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.services.isLoadingServices;\n    const error = state.entities.services.loadServicesError;\n    const name = props.match.params.name;\n    const service = isNew(props.location.search) ? buildNewService() : state.entities.services.data[name];\n    let formService;\n    if (service) {\n        formService = {...service};\n        removeFields(formService);\n    }\n    return {\n        isLoading,\n        error,\n        service,\n        formService,\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadServices,\n    updateService,\n    addService,\n    addServiceApps,\n    addServiceDependencies,\n    addServicePredictions,\n    addServiceRules,\n    addServiceSimulatedMetrics,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Service);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabContent\":\"Tabs_tabContent__38fjD\",\"scrollButton\":\"Tabs_scrollButton__gDX6k\",\"leftScrollButton\":\"Tabs_leftScrollButton__3O2Ch\",\"rightScrollButton\":\"Tabs_rightScrollButton__wKZAM\"};","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React, {createRef} from \"react\";\nimport M from \"materialize-css\";\nimport {bindActionCreators} from \"redux\";\nimport {hideConfirmationDialog} from \"../../actions\";\nimport {connect} from \"react-redux\";\nimport styles from './ConfirmDialog.module.css';\n\n\ninterface DispatchToProps {\n    hideConfirmationDialog: (hidden: boolean) => void;\n}\n\ninterface ConfirmDialogProps {\n    id: string;\n    message: string;\n    cancel?: boolean;\n    cancelCallback?: () => void;\n    confirm?: boolean;\n    confirmCallback?: () => void;\n}\n\ntype Props = DispatchToProps & ConfirmDialogProps;\n\nclass ConfirmDialog extends React.Component<Props, {}> {\n\n    private modal = createRef<HTMLDivElement>();\n    private checkbox = createRef<HTMLInputElement>();\n\n    public componentDidMount(): void {\n        this.initModal();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<{}>, snapshot?: any): void {\n        this.initModal();\n    }\n\n    private initModal = () => {\n        M.Modal.init(this.modal.current as Element, {\n            /*startingTop: '38.5%',\n            endingTop: '38.5%',*/\n            preventScrolling: false\n        });\n    }\n\n    private handleCancel = () => {\n        this.props.cancelCallback?.();\n        this.props.hideConfirmationDialog(this.checkbox?.current?.checked || false);\n    }\n\n    private handleConfirm = () => {\n        this.props.confirmCallback?.();\n        this.props.hideConfirmationDialog(this.checkbox?.current?.checked || false);\n    }\n\n    public render() {\n        const {message} = this.props;\n        return (\n            <div id={this.props.id} className='modal dialog' ref={this.modal}>\n                <div className=\"modal-content\">\n                    <div className=\"modal-message\">{`Are you sure you want ${message.startsWith('to ') ? 'to ' : ''}`}\n                        <div\n                            className=\"dialog-message\">{message.startsWith('to ') ? message.substr(3, message.length) : message}</div>\n                        ?\n                    </div>\n                </div>\n                <div className={`modal-footer dialog-footer`}>\n                    <div className={`${styles.hideSection}`}>\n                        <label>\n                            <input ref={this.checkbox}\n                                   id={'disable-confirmation-dialog'}\n                                   type=\"checkbox\"/>\n                            <span className={`${styles.hideMessage}`}>Don't show me this again</span>\n                        </label>\n                    </div>\n                    <button className=\"modal-close waves-effect waves-red btn-flat white-text\"\n                            onClick={this.handleCancel}>\n                        No\n                    </button>\n                    <button className=\"modal-close waves-effect waves-green btn-flat white-text\"\n                            onClick={this.handleConfirm}>\n                        Absolutely\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({hideConfirmationDialog}, dispatch);\n\nexport default connect(null, mapDispatchToProps)(ConfirmDialog);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Services_container__1G0ge\",\"details\":\"Services_details__3k2Ha\",\"dependencies\":\"Services_dependencies__3WHW0\",\"filterDropdown\":\"Services_filterDropdown__3niOu\",\"clearButton\":\"Services_clearButton__2NQrd\",\"clearButtonIcon\":\"Services_clearButtonIcon__3T7-e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__2IH6b\",\"tabs\":\"Login_tabs__3k-HK\",\"tabContent\":\"Login_tabContent__3cs_F\",\"title\":\"Login_title__55rFr\"};","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport MainLayout from '../../../views/mainLayout/MainLayout';\nimport styles from './Landing.module.css';\nimport LocationMap from \"../../../components/map/LocationMap\";\nimport {loadContainers} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport {ReduxState} from \"../../../reducers\";\nimport Dialog from \"../../../components/dialogs/Dialog\";\nimport {IContainer} from \"../containers/Container\";\nimport {IMarker} from \"../../../components/map/Marker\";\nimport {Error} from \"../../../components/errors/Error\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    containers: { [key: string]: IContainer };\n}\n\ninterface DispatchToProps {\n    loadContainers: () => void;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\ninterface State {\n    center: boolean\n}\n\nclass Landing extends React.Component<Props, State> {\n\n    private reloadData: NodeJS.Timeout | null = null;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {center: true};\n    }\n\n    public componentDidMount() {\n        this.props.loadContainers();\n        this.reloadData = setInterval(this.props.loadContainers, 15000);\n    }\n\n    public componentWillUnmount() {\n        if (this.reloadData) {\n            clearTimeout(this.reloadData);\n            this.reloadData = null;\n        }\n    }\n\n    private handleCenter = () =>\n        this.setState({center: !this.state.center})\n\n    private getContainersMarkers = (): IMarker[] => {\n        const containers: IContainer[] = Object.values(this.props.containers);\n        const markers = new Map<String, IMarker>();\n        containers\n            .forEach(container => {\n                const publicIpAddress = container.publicIpAddress;\n                const marker = markers.get(publicIpAddress) || {title: '', label: '', latitude: 0, longitude: 0};\n                if (marker.title === '') {\n                    marker.title += container.coordinates.label + '<br/>' + publicIpAddress + '<br/>';\n                }\n                marker.title += container.containerId.substr(0, 5) + ' - ' + container.labels['serviceName'] + '<br/>';\n                marker.label = publicIpAddress;\n                marker.latitude = container.coordinates.latitude;\n                marker.longitude = container.coordinates.longitude;\n                markers.set(publicIpAddress, marker);\n            });\n        return Array.from(markers.values());\n    }\n\n    public render() {\n        const {error} = this.props;\n        const {center} = this.state;\n        const centerButton =\n            <button className={`btn-floating btn-flat right tooltipped ${styles.centerButton}`}\n                    data-position={'bottom'}\n                    data-tooltip={'Center'}\n                    onClick={this.handleCenter}\n                    type='button'>\n                <i className=\"material-icons\">center_focus_weak</i>;\n            </button>;\n        const map = <>\n            {error && <Error message={error}/>}\n            {!error && <LocationMap locations={this.getContainersMarkers()} zoomable center={center} hover/>}\n        </>;\n        return <div className={`${styles.container}`}>\n            <div className={`${styles.buttons}`}>\n                <button className={`modal-trigger btn-floating btn-flat right tooltipped`}\n                        data-position={'bottom'}\n                        data-tooltip={'Fullscreen'}\n                        data-target={'fullscreen-modal'}\n                        type='button'>\n                    <i className=\"material-icons\">fullscreen</i>\n                </button>\n                {centerButton}\n            </div>\n            <MainLayout>\n                <Dialog id={'fullscreen-modal'}\n                        title={'Microservices dynamic system management'}\n                        fullscreen\n                        locked\n                        footer={false}\n                        titleButtons={centerButton}>\n                    {map}\n                </Dialog>\n                {map}\n            </MainLayout>\n        </div>;\n    }\n\n}\n\nfunction mapStateToProps(state: ReduxState): StateToProps {\n    const isLoading = state.entities.containers.isLoadingContainers;\n    const error = state.entities.containers.loadContainersError;\n    const containers = state.entities.containers.data;\n    return {\n        isLoading,\n        error,\n        containers,\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadContainers,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Landing);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport MainLayout from '../../../views/mainLayout/MainLayout';\n\nconst Landing = () =>\n    <MainLayout>\n\n    </MainLayout>;\n\nexport default Landing;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport MainLayout from '../../../views/mainLayout/MainLayout';\n\nconst Landing = () =>\n    <MainLayout>\n\n    </MainLayout>;\n\nexport default Landing;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport styles from './ActionLoadingSpinner.module.css';\n\ninterface LoadingProgressProps {\n    loading: boolean;\n    backgroundColor?: string;\n    progressBarColor?: string;\n}\n\nconst ActionProgressBar: React.FC<LoadingProgressProps> = (props: LoadingProgressProps) =>\n    <div className={styles.container}>\n        <div className=\"progress\"\n             style={{backgroundColor: props.backgroundColor ? props.backgroundColor : '#36393F'}}>\n            {props.loading\n                ?\n                <div className=\"indeterminate\"\n                     style={{backgroundColor: props.progressBarColor ? props.progressBarColor : 'black'}}/>\n                :\n                <div className=\"determinate\"\n                     style={{\n                         width: '100%',\n                         backgroundColor: props.backgroundColor ? props.backgroundColor : 'black'\n                     }}/>}\n        </div>\n    </div>;\n\nexport default ActionProgressBar;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {Redirect, Route} from \"react-router\";\nimport React from \"react\";\nimport {isAuthenticated} from \"../utils/auth\";\n\ninterface Props {\n    exact: boolean;\n    path: string;\n    component: any;\n    title?: string;\n}\n\nconst AuthenticatedRoute = ({exact, path, component: Component, title}: Props) =>\n    isAuthenticated()\n        ? <Route exact={exact} path={path} render={props => <Component {...props} key={path} title={title}/>}/>\n        : <Redirect to=\"/login\"/>;\n\nexport default AuthenticatedRoute;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport {RouteComponentProps} from \"react-router\";\nimport Form from \"../../../components/form/Form\";\nimport Field from \"../../../components/form/Field\";\nimport LoadingSpinner from \"../../../components/list/LoadingSpinner\";\nimport {Error} from \"../../../components/errors/Error\";\nimport React from \"react\";\nimport Tabs, {Tab} from \"../../../components/tabs/Tabs\";\nimport MainLayout from \"../../../views/mainLayout/MainLayout\";\nimport {ReduxState} from \"../../../reducers\";\nimport {loadRegions} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport {isNew} from \"../../../utils/router\";\n\nexport interface IRegion /*extends IDatabaseData*/\n{\n    region: string;\n    coordinates: Coordinates;\n    /*active: boolean;*/\n}\n\nconst buildNewRegion = (): Partial<IRegion> => ({\n    region: undefined,\n    coordinates: undefined,\n    /*active: true,*/\n});\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    region: Partial<IRegion>;\n    /*formRegion?: Partial<IRegion>,*/\n}\n\ninterface DispatchToProps {\n    loadRegions: (name: string) => void;\n    /*addRegion: (region: IRegion) => void;\n    updateRegion: (previousRegion: IRegion, currentRegion: IRegion) => void;*/\n}\n\ninterface MatchParams {\n    name: string;\n}\n\ninterface LocationState {\n    data: IRegion,\n    selected: 'region'\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ninterface State {\n    region?: IRegion,\n    /*formRegion?: IRegion,*/\n}\n\nclass Region extends BaseComponent<Props, State> {\n\n    state: State = {};\n    private mounted = false;\n\n    public componentDidMount(): void {\n        this.loadRegion();\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                <div className=\"container\">\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private loadRegion = () => {\n        if (!isNew(this.props.location.search)) {\n            const regionName = this.props.match.params.name;\n            this.props.loadRegions(regionName);\n        }\n    };\n\n    private getRegion = () =>\n        this.state.region || this.props.region;\n\n    /*private getFormRegion = () =>\n        this.state.formRegion || this.props.formRegion;*/\n\n    /*private isNew = () =>\n        isNew(this.props.location.search);*/\n\n    /*private onPostSuccess = (reply: IReply<IRegion>): void => {\n        const region = reply.data;\n        super.toast(`<span class=\"green-text\">Region ${this.mounted ? `<b class=\"white-text\">${region.region}</b>` : `<a href=/regions/${region.region}><b>${region.region}</b></a>`} saved</span>`);\n        this.props.addRegion(region);\n        if (this.mounted) {\n            this.updateRegion(region);\n            this.props.history.replace(region.region);\n        }\n    };*/\n\n    /*private onPostFailure = (reason: string, region: IRegion): void =>\n        super.toast(`Unable to save region <b>${region.region}</b>`, 10000, reason, true);*/\n\n    /*private onPutSuccess = (reply: IReply<IRegion>): void => {\n        const region = reply.data;\n        super.toast(`<span class=\"green-text\">Changes to ${this.mounted ? `<b class=\"white-text\">${region.region}</b>` : `<a href=/regions/${region.region}><b>${region.name}</b></a>`} region have been saved</span>`);\n        const previousRegion = this.getRegion();\n        if (previousRegion?.id) {\n            this.props.updateRegion(previousRegion as IRegion, region)\n        }\n        if (this.mounted) {\n            this.updateRegion(region);\n            this.props.history.replace(region.region);\n        }\n    };*/\n\n    /*private onPutFailure = (reason: string, region: IRegion): void =>\n        super.toast(`Unable to update region ${this.mounted ? `<b>${region.region}</b>` : `<a href=/regions/${region.name}><b>${region.name}</b></a>`}`, 10000, reason, true);*/\n\n    /*private onDeleteSuccess = (region: IRegion): void => {\n        super.toast(`<span class=\"green-text\">Region <b class=\"white-text\">${region.region}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.props.history.push(`/regions`);\n        }\n    };*/\n\n    /*private onDeleteFailure = (reason: string, region: IRegion): void =>\n        super.toast(`Unable to delete region ${this.mounted ? `<b>${region.region}</b>` : `<a href=/regions/${region.name}><b>${region.name}</b></a>`}`, 10000, reason, true);*/\n\n    /*private updateRegion = (region: IRegion) => {\n        region = Object.values(normalize(region, Schemas.REGION).entities.regions || {})[0];\n        const formRegion = {...region};\n        removeFields(formRegion);\n        this.setState({region: region, formRegion: formRegion});\n    };*/\n\n    /*private getFields = (region: Partial<IRegion>): IFields =>\n        Object.keys(region).map(key => {\n            return {\n                [key]: {\n                    id: key,\n                    label: key,\n                    validation: key === 'coordinates'\n                        ? {rule: requireGreaterOrEqualSize, args: 1}\n                        : {rule: required}\n                }\n            };\n        }).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});*/\n\n    private region = () => {\n        const {isLoading, error} = this.props;\n        const region = this.getRegion();\n        /*const formRegion = this.getFormRegion();*/\n        // @ts-ignore\n        const regionKey: (keyof IRegion) = region && Object.keys(region)[0];\n        /*const isNewRegion = this.isNew();*/\n        return (\n            <>\n                {/*{!isNewRegion && isLoading && <LoadingSpinner/>}*/}\n                {isLoading && <LoadingSpinner/>}\n                {/*{!isNewRegion && !isLoading && error && <Error message={error}/>}*/}\n                {!isLoading && error && <Error message={error}/>}\n                {/*{(isNewRegion || !isLoading) && (isNewRegion || !error) && formRegion && (*/}\n                {!isLoading && !error && region && (\n                    /*@ts-ignore*/\n                    <Form id={regionKey}\n                        /*fields={this.getFields(formRegion)}*/\n                        /*fields={this.getFields(region)}*/\n                          values={region}\n                        /*isNew={isNew(this.props.location.search)}*/\n                        /*post={{\n                            url: 'regions',\n                            successCallback: this.onPostSuccess,\n                            failureCallback: this.onPostFailure\n                        }}*/\n                        /*put={{\n                            url: `regions/${region.region}`,\n                            successCallback: this.onPutSuccess,\n                            failureCallback: this.onPutFailure\n                        }}*/\n                        /*delete={{\n                            url: `regions/${region.region}`,\n                            successCallback: this.onDeleteSuccess,\n                            failureCallback: this.onDeleteFailure\n                        }}*/>\n                        {Object.keys(region).map((key, index) =>\n                            /*key === 'active'\n                                ? <Field key={index}\n                                                     id={key}\n                                                     type='checkbox'\n                                                     checkbox={{label: 'region active'}}/>\n                                :*/ key === 'coordinates'\n                            ? <Field key={index} id='coordinates' label='location' type='map'\n                                     map={{loading: isLoading, editable: false, zoomable: true, labeled: true}}/>\n                            : <Field key={index}\n                                     id={key}\n                                     label={key}/>\n                        )}\n                    </Form>\n                )}\n            </>\n        )\n    };\n\n    private tabs = (): Tab[] => [\n        {\n            title: 'Region',\n            id: 'region',\n            content: () => this.region(),\n            active: this.props.location.state?.selected === 'region'\n        },\n    ];\n\n}\n\n/*function removeFields(region: Partial<IRegion>) {\n    delete region[\"id\"];\n}*/\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.regions.isLoadingRegions;\n    const error = state.entities.regions.loadRegionsError;\n    const name = props.match.params.name;\n    const region = isNew(props.location.search) ? buildNewRegion() : state.entities.regions.data[name];\n    /*let formRegion;\n    if (region) {\n        formRegion = {...region};\n        removeFields(formRegion);\n    }*/\n    return {\n        isLoading,\n        error,\n        region,\n        /*formRegion,*/\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadRegions,\n    /*addRegion,\n    updateRegion,*/\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Region);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport styles from \"../../../components/list/ListItem.module.css\";\nimport React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport List from \"../../../components/list/List\";\nimport {ReduxState} from \"../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {loadRulesHost} from \"../../../actions\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    genericHostRules: string[];\n}\n\ninterface DispatchToProps {\n    loadRulesHost: () => void;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass GenericHostRuleList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadRulesHost();\n    }\n\n    public render() {\n        const RulesList = List<string>();\n        return (\n            <RulesList isLoading={this.props.isLoading}\n                       error={this.props.error}\n                       emptyMessage={`Generic host rules list is empty`}\n                       list={this.props.genericHostRules}\n                       show={this.rule}/>\n        );\n    }\n\n    private rule = (rule: string, index: number): JSX.Element =>\n        <ListItem key={index} separate={index !== this.props.genericHostRules.length - 1}>\n            <div className={`${styles.linkedItemContent}`}>\n                <span>{rule}</span>\n            </div>\n            <Link to={`/rules/hosts/${rule}`}\n                  className={`${styles.link} waves-effect`}>\n                <i className={`${styles.linkIcon} material-icons right`}>link</i>\n            </Link>\n        </ListItem>;\n\n}\n\nfunction mapStateToProps(state: ReduxState): StateToProps {\n    return {\n        isLoading: state.entities.rules.hosts.isLoadingRules,\n        error: state.entities.rules.hosts.loadRulesError,\n        genericHostRules: Object.entries(state.entities.rules.hosts.data)\n            .filter(([_, rule]) => rule.generic)\n            .map(([ruleName, _]) => ruleName)\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadRulesHost,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GenericHostRuleList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport React from \"react\";\nimport styles from \"../../../components/list/ListItem.module.css\";\nimport {Link} from \"react-router-dom\";\nimport List from \"../../../components/list/List\";\nimport {ReduxState} from \"../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport {loadSimulatedHostMetrics} from \"../../../actions\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    genericSimulatedHostMetrics: string[];\n}\n\ninterface DispatchToProps {\n    loadSimulatedHostMetrics: () => void;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass GenericSimulatedHostMetricList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadSimulatedHostMetrics();\n    }\n\n    public render() {\n        const SimulatedMetricsList = List<string>();\n        return (\n            <SimulatedMetricsList isLoading={this.props.isLoading}\n                                  error={this.props.error}\n                                  emptyMessage={`Generic simulated metrics list is empty`}\n                                  list={this.props.genericSimulatedHostMetrics}\n                                  show={this.simulatedMetric}/>\n        );\n    }\n\n    private simulatedMetric = (simulatedMetric: string, index: number): JSX.Element =>\n        <ListItem key={index} separate={index !== this.props.genericSimulatedHostMetrics.length - 1}>\n            <div className={`${styles.linkedItemContent}`}>\n                <span>{simulatedMetric}</span>\n            </div>\n            <Link to={`/simulated-metrics/hosts/${simulatedMetric}`}\n                  className={`${styles.link} waves-effect`}>\n                <i className={`${styles.linkIcon} material-icons right`}>link</i>\n            </Link>\n        </ListItem>;\n\n}\n\nfunction mapStateToProps(state: ReduxState): StateToProps {\n    return {\n        isLoading: state.entities.simulatedMetrics.hosts.isLoadingSimulatedHostMetrics,\n        error: state.entities.simulatedMetrics.hosts.loadSimulatedHostMetricsError,\n        genericSimulatedHostMetrics: Object.entries(state.entities.simulatedMetrics.hosts.data)\n            .filter(([_, simulatedMetric]) => simulatedMetric.generic)\n            .map(([simulatedMetricName, _]) => simulatedMetricName)\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadSimulatedHostMetrics,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GenericSimulatedHostMetricList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport MainLayout from '../../../views/mainLayout/MainLayout';\nimport AddButton from \"../../../components/form/AddButton\";\nimport styles from './Hosts.module.css'\nimport CloudHostsList from \"./cloud/CloudHostsList\";\nimport EdgeHostsList from \"./edge/EdgeHostsList\";\nimport Collapsible from \"../../../components/collapsible/Collapsible\";\nimport {ICoordinates} from \"../../../components/map/LocationMap\";\n\nexport interface IHostAddress {\n    username: string | undefined;\n    publicDnsName: string | undefined;\n    publicIpAddress: string;\n    privateIpAddress: string | undefined;\n    coordinates: ICoordinates;\n}\n\nconst Hosts = () =>\n    <MainLayout>\n        <AddButton tooltip={{text: 'Add host', position: 'left'}}\n                   dropdown={{\n                       id: 'hosts',\n                       title: 'Host type',\n                       data: [\n                           {text: 'Cloud', pathname: '/hosts/cloud/new_instance?new'},\n                           {text: 'Edge', pathname: '/hosts/edge/add_machine?new'}\n                       ],\n                   }}/>\n        <div className={`${styles.container}`}>\n            <Collapsible id={\"cloudHostsCollapsible\"}\n                         title={'Cloud'}\n                         active\n                         headerClassname={styles.collapsibleSubtitle}\n                         bodyClassname={styles.collapsibleCardList}>\n                <CloudHostsList/>\n            </Collapsible>\n        </div>\n        <div className={`${styles.container}`}>\n            <Collapsible id={\"edgeHostsCollapsible\"}\n                         title={'Edge'}\n                         active\n                         headerClassname={styles.collapsibleSubtitle}\n                         bodyClassname={styles.collapsibleCardList}>\n                <EdgeHostsList/>\n            </Collapsible>\n        </div>\n    </MainLayout>;\n\nexport default Hosts;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport AddButton from \"../../../../components/form/AddButton\";\nimport styles from '../edge/EdgeHosts.module.css'\nimport CloudHostsList from \"./CloudHostsList\";\nimport ActionButton from \"../../../../components/list/ActionButton\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport {syncCloudHosts} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\n\ninterface DispatchToProps {\n    syncCloudHosts: () => void;\n}\n\ntype Props = DispatchToProps;\n\nclass CloudHosts extends BaseComponent<Props, {}> {\n\n    public render() {\n        return (\n            <MainLayout>\n                <AddButton tooltip={{text: 'Start cloud instance', position: 'left'}}\n                           pathname={'/hosts/cloud/new_instance?new'}\n                           offset={1}/>\n                <ActionButton icon={'sync'}\n                              tooltip={{text: 'Sync cloud instances', position: 'bottom'}}\n                              clickCallback={this.syncCloudInstances}\n                              offset={0}/>\n                <div className={`${styles.container}`}>\n                    <CloudHostsList/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private syncCloudInstances = () => {\n        this.props.syncCloudHosts();\n    };\n\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    syncCloudHosts,\n};\n\nexport default connect(null, mapDispatchToProps)(CloudHosts);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"EdgeHosts_container__2IgZD\"};","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport AddButton from \"../../../../components/form/AddButton\";\nimport styles from './EdgeHosts.module.css'\nimport EdgeHostsList from \"./EdgeHostsList\";\n\nconst EdgeHosts: React.FC = () =>\n    <MainLayout>\n        <AddButton tooltip={{text: 'Add edge host', position: 'left'}}\n                   pathname={'/hosts/edge/add_machine?new'}/>\n        <div className={`${styles.container}`}>\n            <EdgeHostsList/>\n        </div>\n    </MainLayout>;\n\nexport default EdgeHosts;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport AddButton from \"../../../../components/form/AddButton\";\nimport styles from './RulesHost.module.css';\nimport RulesHostList from \"./RulesHostList\";\n\nconst RulesHost: React.FC = () =>\n    <MainLayout>\n        <AddButton tooltip={{text: 'Add host rule', position: 'left'}}\n                   pathname={'/rules/hosts/new_host_rule?new'}/>\n        <div className={`${styles.container}`}>\n            <RulesHostList/>\n        </div>\n    </MainLayout>;\n\nexport default RulesHost;\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport AddButton from \"../../../../components/form/AddButton\";\nimport styles from './RulesService.module.css';\nimport RulesServiceList from \"./RulesServiceList\";\n\nconst RulesService: React.FC = () =>\n    <MainLayout>\n        <AddButton tooltip={{text: 'Add service rule', position: 'left'}}\n                   pathname={'/rules/services/new_service_rule?new'}/>\n        <div className={`${styles.container}`}>\n            <RulesServiceList/>\n        </div>\n    </MainLayout>;\n\nexport default RulesService;\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport MainLayout from '../../../views/mainLayout/MainLayout';\nimport AddButton from \"../../../components/form/AddButton\";\nimport styles from './Rules.module.css'\nimport Collapsible from \"../../../components/collapsible/Collapsible\";\nimport RulesHostList from \"./hosts/RulesHostList\";\nimport RulesServiceList from \"./services/RulesServiceList\";\nimport RuleConditionsList from \"./conditions/RuleConditionsList\";\nimport RulesContainerList from \"./containers/RulesContainerList\";\nimport RulesAppList from \"./apps/RulesAppList\";\n\nconst Rules = () =>\n    <MainLayout>\n        <AddButton tooltip={{text: 'Add condition or rule', position: 'left'}}\n                   dropdown={{\n                       id: 'addRuleOrCondition',\n                       title: 'Select menu',\n                       data: [\n                           {text: 'Rule condition', pathname: '/rules/conditions/new_condition?new'},\n                           {text: 'Host rule', pathname: '/rules/hosts/new_host_rule?new'},\n                           {text: 'App rule', pathname: '/rules/apps/new_app_rule?new'},\n                           {text: 'Service rule', pathname: '/rules/services/new_service_rule?new'},\n                           {text: 'Container rule', pathname: '/rules/containers/new_container_rule?new'},\n                       ],\n                   }}/>\n        <div className={`${styles.collapsibleContainer}`}>\n            <Collapsible id={\"rulesConditionCollapsible\"}\n                         title={'Conditions'}\n                         active\n                         headerClassname={styles.collapsibleSubtitle}\n                         bodyClassname={styles.collapsibleCardList}>\n                <RuleConditionsList/>\n            </Collapsible>\n        </div>\n        <div className={`${styles.collapsibleContainer}`}>\n            <Collapsible id={\"rulesHostCollapsible\"}\n                         title={'Hosts'}\n                         active\n                         headerClassname={styles.collapsibleSubtitle}\n                         bodyClassname={styles.collapsibleCardList}>\n                <RulesHostList/>\n            </Collapsible>\n        </div>\n        <div className={`${styles.collapsibleContainer}`}>\n            <Collapsible id={\"rulesAppCollapsible\"}\n                         title={'Apps'}\n                         active\n                         headerClassname={styles.collapsibleSubtitle}\n                         bodyClassname={styles.collapsibleCardList}>\n                <RulesAppList/>\n            </Collapsible>\n        </div>\n        <div className={`${styles.collapsibleContainer}`}>\n            <Collapsible id={\"rulesServiceCollapsible\"}\n                         title={'Services'}\n                         active\n                         headerClassname={styles.collapsibleSubtitle}\n                         bodyClassname={styles.collapsibleCardList}>\n                <RulesServiceList/>\n            </Collapsible>\n        </div>\n        <div className={`${styles.collapsibleContainer}`}>\n            <Collapsible id={\"rulesContainerCollapsible\"}\n                         title={'Containers'}\n                         active\n                         headerClassname={styles.collapsibleSubtitle}\n                         bodyClassname={styles.collapsibleCardList}>\n                <RulesContainerList/>\n            </Collapsible>\n        </div>\n    </MainLayout>;\n\nexport default Rules;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport AddButton from \"../../../../components/form/AddButton\";\nimport styles from \"./RuleConditions.module.css\";\nimport RuleConditionsList from \"./RuleConditionsList\";\n\nconst RuleConditions: React.FC = () =>\n    <MainLayout>\n        <AddButton tooltip={{text: 'Add rule condition', position: 'left'}}\n                   pathname={'/rules/conditions/new_condition?new'}/>\n        <div className={`${styles.container}`}>\n            <RuleConditionsList/>\n        </div>\n    </MainLayout>;\n\nexport default RuleConditions;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport {IField, IOperator, IValueMode} from \"../Rule\";\nimport IDatabaseData from \"../../../../components/IDatabaseData\";\nimport {RouteComponentProps} from \"react-router\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport Form, {IFields, requiredAndNumberAndMin, requiredAndTrimmed} from \"../../../../components/form/Form\";\nimport Field, {getTypeFromValue} from \"../../../../components/form/Field\";\nimport LoadingSpinner from \"../../../../components/list/LoadingSpinner\";\nimport {Error} from \"../../../../components/errors/Error\";\nimport Tabs, {Tab} from \"../../../../components/tabs/Tabs\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {\n    addCondition,\n    loadConditions,\n    loadFields,\n    loadOperators,\n    loadValueModes,\n    updateCondition\n} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport {IReply} from \"../../../../utils/api\";\nimport {isNew} from \"../../../../utils/router\";\nimport {normalize} from \"normalizr\";\nimport {Schemas} from \"../../../../middleware/api\";\n\nexport interface IRuleCondition extends IDatabaseData {\n    name: string;\n    valueMode: IValueMode;\n    field: IField;\n    operator: IOperator;\n    value: number;\n}\n\nconst buildNewCondition = (): Partial<IRuleCondition> => ({\n    name: undefined,\n    valueMode: undefined,\n    field: undefined,\n    operator: undefined,\n    value: undefined\n});\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    condition: Partial<IRuleCondition>;\n    formCondition?: Partial<IRuleCondition>,\n    valueModes: { [key: string]: IValueMode };\n    fields: { [key: string]: IField };\n    operators: { [key: string]: IOperator };\n}\n\ninterface DispatchToProps {\n    loadConditions: (name: string) => void;\n    addCondition: (condition: IRuleCondition) => void;\n    updateCondition: (previousCondition: IRuleCondition, currentCondition: IRuleCondition) => void;\n    loadValueModes: () => void;\n    loadFields: () => void;\n    loadOperators: () => void;\n}\n\ninterface MatchParams {\n    name: string;\n}\n\ninterface LocationState {\n    data: IRuleCondition,\n    selected: 'condition'\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ntype State = {\n    condition?: IRuleCondition,\n    formCondition?: IRuleCondition,\n}\n\nclass RuleCondition extends BaseComponent<Props, State> {\n\n    state: State = {};\n    private mounted = false;\n\n    public componentDidMount(): void {\n        this.loadCondition();\n        this.props.loadValueModes();\n        this.props.loadFields();\n        this.props.loadOperators();\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                <div className=\"container\">\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private loadCondition = () => {\n        if (!isNew(this.props.location.search)) {\n            const conditionName = this.props.match.params.name;\n            this.props.loadConditions(conditionName);\n        }\n    };\n\n    private getCondition = () =>\n        this.props.condition || this.state.condition;\n\n    private getFormCondition = () =>\n        this.props.formCondition || this.state.formCondition;\n\n    private isNew = () =>\n        isNew(this.props.location.search);\n\n    private onPostSuccess = (reply: IReply<IRuleCondition>): void => {\n        const condition = reply.data;\n        super.toast(`<span class=\"green-text\">Condition ${this.mounted ? `<b class=\"white-text\">${condition.name}</b>` : `<a href=/rules/conditions/${condition.name}><b>${condition.name}</b></a>`} saved</span>`);\n        this.props.addCondition(condition);\n        if (this.mounted) {\n            this.updateCondition(condition);\n            this.props.history.replace(condition.name);\n        }\n    };\n\n    private onPostFailure = (reason: string, condition: IRuleCondition): void =>\n        super.toast(`Unable to save condition <b>${condition.name}</b>`, 10000, reason, true);\n\n    private onPutSuccess = (reply: IReply<IRuleCondition>): void => {\n        const condition = reply.data;\n        super.toast(`<span class=\"green-text\">Changes to ${this.mounted ? `<b class=\"white-text\">${condition.name}</b>` : `<a href=/rules/conditions/${condition.name}><b>${condition.name}</b></a>`} condition have been saved</span>`);\n        const previousCondition = this.getCondition();\n        if (previousCondition?.id) {\n            this.props.updateCondition(previousCondition as IRuleCondition, condition)\n        }\n        if (this.mounted) {\n            this.updateCondition(condition);\n            this.props.history.replace(condition.name);\n        }\n    };\n\n    private onPutFailure = (reason: string, condition: IRuleCondition): void =>\n        super.toast(`Unable to update condition ${this.mounted ? `<b>${condition.name}</b>` : `<a href=/rules/conditions/${condition.name}><b>${condition.name}</b></a>`}`, 10000, reason, true);\n\n    private onDeleteSuccess = (condition: IRuleCondition): void => {\n        super.toast(`<span class=\"green-text\">Condition <b class=\"white-text\">${condition.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.props.history.push(`/rules/conditions`)\n        }\n    };\n\n    private onDeleteFailure = (reason: string, condition: IRuleCondition): void =>\n        super.toast(`Unable to delete condition ${this.mounted ?\n            <b>${condition.name}</b> : `<a href=/rules/conditions/${condition.name}><b>${condition.name}</b></a>`}`, 10000, reason, true);\n\n    private updateCondition = (condition: IRuleCondition) => {\n        condition = Object.values(normalize(condition, Schemas.RULE_CONDITION).entities.conditions || {})[0];\n        const formCondition = {...condition};\n        removeFields(formCondition);\n        this.setState({condition: condition, formCondition: formCondition});\n    };\n\n    private getFields = (condition: Partial<IRuleCondition>): IFields =>\n        Object.entries(condition).map(([key, value]) => {\n            return {\n                [key]: {\n                    id: key,\n                    label: key,\n                    validation: getTypeFromValue(value) === 'number'\n                        ? {rule: requiredAndNumberAndMin, args: 0}\n                        : {rule: requiredAndTrimmed}\n                }\n            };\n        }).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});\n\n    private fieldOption = (field: IField): string =>\n        field.name;\n\n    private operatorOption = (operator: IOperator): string =>\n        operator.symbol;\n\n    private valueModeOption = (valueMode: IValueMode): string =>\n        valueMode.name;\n\n    private condition = () => {\n        const {isLoading, error} = this.props;\n        const condition = this.getCondition();\n        const formCondition = this.getFormCondition();\n        // @ts-ignore\n        const conditionKey: (keyof IRuleCondition) = formCondition && Object.keys(formCondition)[0];\n        const isNewRuleCondition = this.isNew();\n        return (\n            <>\n                {!isNewRuleCondition && isLoading && <LoadingSpinner/>}\n                {!isNewRuleCondition && !isLoading && error && <Error message={error}/>}\n                {(isNewRuleCondition || !isLoading) && (isNewRuleCondition || !error) && formCondition && (\n                    /*@ts-ignore*/\n                    <Form id={conditionKey}\n                          fields={this.getFields(formCondition)}\n                          values={condition}\n                          isNew={isNew(this.props.location.search)}\n                          post={{\n                              url: 'rules/conditions',\n                              successCallback: this.onPostSuccess,\n                              failureCallback: this.onPostFailure\n                          }}\n                          put={{\n                              url: `rules/conditions/${condition.name}`,\n                              successCallback: this.onPutSuccess,\n                              failureCallback: this.onPutFailure\n                          }}\n                          delete={{\n                              url: `rules/conditions/${condition.name}`,\n                              successCallback: this.onDeleteSuccess,\n                              failureCallback: this.onDeleteFailure\n                          }}>\n                        <Field key='name' id={'name'} label='name'/>\n                        <Field<IField> key='fields'\n                                       id='field'\n                                       label='field'\n                                       type='dropdown'\n                                       dropdown={{\n                                           defaultValue: \"Select field\",\n                                           values: Object.values(this.props.fields),\n                                           optionToString: this.fieldOption,\n                                           emptyMessage: 'No fields available'\n                                       }}/>\n                        <Field<IOperator> key='operators'\n                                          id='operator'\n                                          label='operator'\n                                          type='dropdown'\n                                          dropdown={{\n                                              defaultValue: \"Select operator\",\n                                              values: Object.values(this.props.operators),\n                                              optionToString: this.operatorOption,\n                                              emptyMessage: 'No operators available'\n                                          }}/>\n                        <Field<IValueMode> key='valueModes'\n                                           id='valueMode'\n                                           label='valueMode'\n                                           type='dropdown'\n                                           dropdown={{\n                                               defaultValue: 'Select value mode',\n                                               values: Object.values(this.props.valueModes),\n                                               optionToString: this.valueModeOption,\n                                               emptyMessage: 'No value modes available'\n                                           }}/>\n                        <Field key='value' id='value' label='value' type=\"number\"/>\n                    </Form>\n                )}\n            </>\n        )\n    };\n\n    private tabs = (): Tab[] => [\n        {\n            title: 'Condition',\n            id: 'condition',\n            content: () => this.condition(),\n            active: this.props.location.state?.selected === 'condition'\n        },\n    ];\n\n}\n\nfunction removeFields(condition: Partial<IRuleCondition>) {\n    delete condition[\"id\"];\n}\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.rules.conditions.isLoadingConditions;\n    const error = state.entities.rules.conditions.loadConditionsError;\n    const name = props.match.params.name;\n    const condition = isNew(props.location.search) ? buildNewCondition() : state.entities.rules.conditions.data[name];\n    let formCondition;\n    if (condition) {\n        formCondition = {...condition};\n        removeFields(formCondition);\n    }\n    const valueModes = state.entities.valueModes.data;\n    const fields = state.entities.fields.data;\n    const operators = state.entities.operators.data;\n    return {\n        isLoading,\n        error,\n        condition,\n        formCondition,\n        valueModes,\n        fields,\n        operators,\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadConditions,\n    addCondition,\n    updateCondition,\n    loadValueModes,\n    loadFields,\n    loadOperators,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RuleCondition);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport React from \"react\";\nimport {RouteComponentProps} from \"react-router\";\nimport Form, {IFields, required, requiredAndNumberAndMin, requiredAndTrimmed} from \"../../../components/form/Form\";\nimport LoadingSpinner from \"../../../components/list/LoadingSpinner\";\nimport {Error} from \"../../../components/errors/Error\";\nimport Field, {getTypeFromValue} from \"../../../components/form/Field\";\nimport Tabs, {Tab} from \"../../../components/tabs/Tabs\";\nimport MainLayout from \"../../../views/mainLayout/MainLayout\";\nimport {ReduxState} from \"../../../reducers\";\nimport {addLoadBalancers, loadLoadBalancers, loadNodes, loadRegions} from \"../../../actions\";\nimport {IRegion} from \"../regions/Region\";\nimport {IReply} from \"../../../utils/api\";\nimport {isNew} from \"../../../utils/router\";\nimport {IContainer} from \"../containers/Container\";\nimport {normalize} from \"normalizr\";\nimport {Schemas} from \"../../../middleware/api\";\nimport {IHostAddress} from \"../hosts/Hosts\";\nimport {INode} from \"../nodes/Node\";\nimport {connect} from \"react-redux\";\n\nexport interface ILoadBalancer extends IContainer {\n}\n\ninterface INewLoadBalancerRegion {\n    regions: string[] | undefined\n}\n\ninterface INewLoadBalancerHost {\n    host: IHostAddress | undefined\n}\n\nconst buildNewLoadBalancerRegion = (): INewLoadBalancerRegion => ({\n    regions: undefined\n});\n\nconst buildNewLoadBalancerHost = (): INewLoadBalancerHost => ({\n    host: undefined\n});\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    newLoadBalancerRegion?: INewLoadBalancerRegion;\n    newLoadBalancerHost?: INewLoadBalancerHost;\n    loadBalancer?: ILoadBalancer;\n    formLoadBalancer?: Partial<ILoadBalancer>;\n    regions: { [key: string]: IRegion };\n    nodes: { [key: string]: INode };\n}\n\ninterface DispatchToProps {\n    loadLoadBalancers: (id: string) => void;\n    addLoadBalancers: (loadBalancers: ILoadBalancer[]) => void;\n    loadRegions: () => void;\n    loadNodes: () => void;\n}\n\ninterface MatchParams {\n    id: string;\n}\n\ninterface LocationState {\n    data: ILoadBalancer,\n    selected: 'loadBalancer';\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ninterface State {\n    loadBalancer?: ILoadBalancer,\n    formLoadBalancer?: ILoadBalancer,\n    currentForm: 'On regions' | 'On host',\n}\n\nclass LoadBalancer extends BaseComponent<Props, State> {\n\n    state: State = {\n        currentForm: 'On regions'\n    };\n    private mounted = false;\n\n    public componentDidMount(): void {\n        this.loadLoadBalancer();\n        this.props.loadRegions();\n        this.props.loadNodes();\n        this.mounted = true;\n    }\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                <div className=\"container\">\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private loadLoadBalancer = () => {\n        if (!isNew(this.props.location.search)) {\n            const loadBalancerId = this.props.match.params.id;\n            this.props.loadLoadBalancers(loadBalancerId);\n        }\n    };\n\n    private getLoadBalancer = () =>\n        this.props.loadBalancer || this.state.loadBalancer;\n\n    private getFormLoadBalancer = () =>\n        this.props.formLoadBalancer || this.state.formLoadBalancer;\n\n    private isNew = () =>\n        isNew(this.props.location.search);\n\n    private onPostSuccess = (reply: IReply<ILoadBalancer[]>): void => {\n        let loadBalancers = reply.data;\n        if (loadBalancers.length === 1) {\n            const loadBalancer = loadBalancers[0];\n            super.toast(`<span class=\"green-text\">Load-balancer ${this.mounted ? `<b class=\"white-text\">${loadBalancer.containerId}</b>` : `<a href=/load-balancers/${loadBalancer.containerId}><b>${loadBalancer.containerId}</b></a>`} launched</span>`);\n            if (this.mounted) {\n                this.updateLoadBalancer(loadBalancer);\n                this.props.history.replace(loadBalancer.containerId)\n            }\n        } else {\n            loadBalancers = loadBalancers.reverse();\n            super.toast(`<span class=\"green-text\">Launched ${loadBalancers.length} load-balancers:<br/><b class=\"white-text\">${loadBalancers.map(loadBalancer => `Container ${loadBalancer.containerId} => Host ${loadBalancer.publicIpAddress}`).join('<br/>')}</b></span>`);\n            if (this.mounted) {\n                this.props.history.push('/load-balancers');\n            }\n        }\n        this.props.addLoadBalancers(loadBalancers);\n    };\n\n    private onPostFailure = (reason: string): void =>\n        super.toast(`Unable to launch load-balancer`, 10000, reason, true);\n\n    private onDeleteSuccess = (loadBalancer: ILoadBalancer): void => {\n        super.toast(`<span class=\"green-text\">Load-balancer <b class=\"white-text\">${loadBalancer.containerId}</b> successfully stopped</span>`);\n        if (this.mounted) {\n            this.props.history.push(`/load-balancers`)\n        }\n    };\n\n    private onDeleteFailure = (reason: string, loadBalancer: ILoadBalancer): void =>\n        super.toast(`Unable to stop load-balancer ${this.mounted ? `<b>${loadBalancer.containerId}</b>` : `<a href=/load-balancers/${loadBalancer.containerId}><b>${loadBalancer.containerId}</b></a>`}`, 10000, reason, true);\n\n    private updateLoadBalancer = (loadBalancer: ILoadBalancer) => {\n        loadBalancer = Object.values(normalize(loadBalancer, Schemas.LOAD_BALANCER).entities.loadBalancers || {})[0];\n        const formLoadBalancer = {...loadBalancer};\n        removeFields(formLoadBalancer);\n        this.setState({loadBalancer: loadBalancer, formLoadBalancer: formLoadBalancer});\n    };\n\n    private getFields = (loadBalancer: INewLoadBalancerRegion | INewLoadBalancerHost | ILoadBalancer): IFields => {\n        if (this.isNew()) {\n            if (this.state.currentForm === 'On regions') {\n                return {\n                    regions: {\n                        id: 'regions',\n                        label: 'regions',\n                        validation: {rule: required}\n                    },\n                }\n            } else {\n                return {\n                    hostAddress: {\n                        id: 'hostAddress',\n                        label: 'hostAddress',\n                        validation: {rule: required}\n                    },\n                }\n            }\n        } else {\n            return Object.entries(loadBalancer).map(([key, value]) => {\n                return {\n                    [key]: {\n                        id: key,\n                        label: key,\n                        validation: getTypeFromValue(value) === 'number'\n                            ? {rule: requiredAndNumberAndMin, args: 0}\n                            : {rule: requiredAndTrimmed}\n                    }\n                };\n            }).reduce((fields, field) => {\n                for (let key in field) {\n                    fields[key] = field[key];\n                }\n                return fields;\n            }, {});\n        }\n\n    }\n\n    private getSelectableHosts = (): Partial<IHostAddress>[] =>\n        Object.entries(this.props.nodes)\n            .filter(([_, node]) => node.state === 'ready')\n            .map(([_, node]) =>\n                ({\n                    username: node.labels['username'],\n                    publicIpAddress: node.publicIpAddress,\n                    privateIpAddress: node.labels['privateIpAddress'],\n                    coordinates: node.labels['coordinates'] ? JSON.parse(node.labels['coordinates']) : undefined,\n                }))\n\n    private hostAddressesDropdown = (hostAddress: Partial<IHostAddress>): string =>\n        hostAddress.publicIpAddress + (hostAddress.privateIpAddress ? (\"/\" + hostAddress.privateIpAddress) : '') + \" - \" + hostAddress.coordinates?.label;\n\n    private regionOption = (region: IRegion) =>\n        region.region;\n\n    private formFields = (isNew: boolean, formLoadBalancer?: Partial<ILoadBalancer>) => {\n        const {currentForm} = this.state;\n        return (\n            isNew ?\n                currentForm === 'On regions'\n                    ?\n                    <Field key={'regions'}\n                           id={'regions'}\n                           label={'regions'}\n                           type={'list'}\n                           value={Object.keys(this.props.regions)}/>\n                    :\n                    <>\n                        <Field<Partial<IHostAddress>> key={'hostAddress'}\n                                                      id={'hostAddress'}\n                                                      label={'hostAddress'}\n                                                      type=\"dropdown\"\n                                                      dropdown={{\n                                                          defaultValue: \"Select host address\",\n                                                          values: this.getSelectableHosts(),\n                                                          optionToString: this.hostAddressesDropdown,\n                                                          emptyMessage: 'No hosts to select'\n                                                      }}/>\n                    </>\n                : formLoadBalancer && Object.entries(formLoadBalancer).map((([key, value], index) =>\n                key === 'containerId'\n                    ? <Field key={index}\n                             id={key}\n                             label={key}\n                             icon={{linkedTo: '/containers/' + (formLoadBalancer as Partial<ILoadBalancer>).containerId}}/>\n                    : key === 'created'\n                    ? <Field key={index}\n                             id={key}\n                             label={key}\n                             type={\"date\"}/>\n                    : key === 'region'\n                        ? <Field<IRegion> key={index}\n                                          id={key}\n                                          type=\"dropdown\"\n                                          label={key}\n                                          valueToString={this.regionOption}\n                                          dropdown={{\n                                              defaultValue: \"Select region\",\n                                              emptyMessage: \"No regions to select\",\n                                              values: [(formLoadBalancer as ILoadBalancer).region],\n                                              optionToString: this.regionOption\n                                          }}/>\n                        : <Field key={index}\n                                 id={key}\n                                 label={key}/>))\n        );\n    };\n\n    private switchForm = (formId: 'On regions' | 'On host') =>\n        this.setState({currentForm: formId});\n\n    private loadBalancer = () => {\n        const {isLoading, error, newLoadBalancerRegion, newLoadBalancerHost} = this.props;\n        const {currentForm} = this.state;\n        const isNewLoadBalancer = this.isNew();\n        const loadBalancer = isNewLoadBalancer ? (currentForm === 'On regions' ? newLoadBalancerRegion : newLoadBalancerHost) : this.getLoadBalancer();\n        const formLoadBalancer = this.getFormLoadBalancer();\n        // @ts-ignore\n        const loadBalancerKey: (keyof ILoadBalancer) = formLoadBalancer && Object.keys(formLoadBalancer)[0];\n        return (\n            <>\n                {!isNewLoadBalancer && isLoading && <LoadingSpinner/>}\n                {!isNewLoadBalancer && !isLoading && error && <Error message={error}/>}\n                {(isNewLoadBalancer || !isLoading) && (isNewLoadBalancer || !error) && loadBalancer && (\n                    /*@ts-ignore*/\n                    <Form id={loadBalancerKey}\n                          fields={this.getFields(loadBalancer)}\n                          values={loadBalancer}\n                          isNew={isNew(this.props.location.search)}\n                          post={{\n                              textButton: 'launch',\n                              url: 'load-balancers',\n                              successCallback: this.onPostSuccess,\n                              failureCallback: this.onPostFailure\n                          }}\n                          delete={{\n                              textButton: 'Stop',\n                              url: `containers/${(loadBalancer as ILoadBalancer).containerId}`,\n                              successCallback: this.onDeleteSuccess,\n                              failureCallback: this.onDeleteFailure\n                          }}\n                          switchDropdown={isNewLoadBalancer ? {\n                              options: currentForm === 'On regions' ? ['On host'] : ['On regions'],\n                              onSwitch: this.switchForm\n                          } : undefined}>\n                        {this.formFields(isNewLoadBalancer, formLoadBalancer)}\n                    </Form>\n                )}\n            </>\n        )\n    };\n\n    private tabs = (): Tab[] => [\n        {\n            title: 'Load balancer',\n            id: 'loadBalancer',\n            content: () => this.loadBalancer(),\n            active: this.props.location.state?.selected === 'loadBalancer'\n        },\n    ];\n\n}\n\nfunction removeFields(loadBalancer: Partial<ILoadBalancer>) {\n    delete loadBalancer[\"id\"];\n    delete loadBalancer[\"ports\"];\n    delete loadBalancer[\"labels\"];\n    delete loadBalancer[\"logs\"];\n    delete loadBalancer[\"coordinates\"];\n}\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.loadBalancers.isLoadingLoadBalancers;\n    const error = state.entities.loadBalancers.loadLoadBalancersError;\n    const id = props.match.params.id;\n    const newLoadBalancer = isNew(props.location.search);\n    const newLoadBalancerRegion = newLoadBalancer ? buildNewLoadBalancerRegion() : undefined;\n    const newLoadBalancerHost = newLoadBalancer ? buildNewLoadBalancerHost() : undefined;\n    const loadBalancer = !newLoadBalancer ? state.entities.loadBalancers.data[id] : undefined;\n    let formLoadBalancer;\n    if (loadBalancer) {\n        formLoadBalancer = {...loadBalancer};\n        removeFields(formLoadBalancer);\n    }\n    const regions = state.entities.regions.data;\n    const nodes = state.entities.nodes.data;\n    return {\n        isLoading,\n        error,\n        newLoadBalancerRegion,\n        newLoadBalancerHost,\n        loadBalancer,\n        formLoadBalancer,\n        regions,\n        nodes\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadLoadBalancers,\n    addLoadBalancers,\n    loadRegions,\n    loadNodes,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoadBalancer);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport React from \"react\";\nimport {RouteComponentProps} from \"react-router\";\nimport Form, {IFields, requiredAndNumberAndMin, requiredAndTrimmed} from \"../../../components/form/Form\";\nimport LoadingSpinner from \"../../../components/list/LoadingSpinner\";\nimport {Error} from \"../../../components/errors/Error\";\nimport Field, {getTypeFromValue} from \"../../../components/form/Field\";\nimport Tabs, {Tab} from \"../../../components/tabs/Tabs\";\nimport MainLayout from \"../../../views/mainLayout/MainLayout\";\nimport {ReduxState} from \"../../../reducers\";\nimport {addRegistrationServers, loadNodes, loadRegions, loadRegistrationServers,} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport {IRegion} from \"../regions/Region\";\nimport {IReply} from \"../../../utils/api\";\nimport {isNew} from \"../../../utils/router\";\nimport {IContainer} from \"../containers/Container\";\nimport {normalize} from \"normalizr\";\nimport {Schemas} from \"../../../middleware/api\";\nimport {IHostAddress} from \"../hosts/Hosts\";\nimport {INode} from \"../nodes/Node\";\n\nexport interface IRegistrationServer extends IContainer {\n}\n\ninterface INewRegistrationServerRegion {\n    regions: string[] | undefined\n}\n\ninterface INewRegistrationServerHost {\n    hostAddress: IHostAddress | undefined\n}\n\nconst buildNewRegistrationServerRegion = (): INewRegistrationServerRegion => ({\n    regions: undefined\n});\n\nconst buildNewRegistrationServerHost = (): INewRegistrationServerHost => ({\n    hostAddress: undefined\n});\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    newRegistrationServerHost?: INewRegistrationServerHost;\n    newRegistrationServerRegion?: INewRegistrationServerRegion;\n    registrationServer?: IRegistrationServer;\n    formRegistrationServer?: Partial<IRegistrationServer>;\n    regions: { [key: string]: IRegion };\n    nodes: { [key: string]: INode };\n}\n\ninterface DispatchToProps {\n    loadRegistrationServers: (id: string) => void;\n    addRegistrationServers: (registrationServers: IRegistrationServer[]) => void;\n    loadRegions: () => void;\n    loadNodes: () => void;\n}\n\ninterface MatchParams {\n    id: string;\n}\n\ninterface LocationState {\n    data: IRegistrationServer,\n    selected: 'registrationServer';\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ninterface State {\n    registrationServer?: IRegistrationServer,\n    formRegistrationServer?: IRegistrationServer,\n    currentForm: 'On regions' | 'On host',\n}\n\nclass RegistrationServer extends BaseComponent<Props, State> {\n\n    state: State = {\n        currentForm: 'On regions'\n    };\n    private mounted = false;\n\n    public componentDidMount(): void {\n        this.loadRegistrationServer();\n        this.props.loadRegions();\n        this.props.loadNodes();\n        this.mounted = true;\n    }\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                <div className=\"container\">\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private loadRegistrationServer = () => {\n        if (!isNew(this.props.location.search)) {\n            const registrationServerId = this.props.match.params.id;\n            this.props.loadRegistrationServers(registrationServerId);\n        }\n    };\n\n    private getRegistrationServer = () =>\n        this.props.registrationServer || this.state.registrationServer;\n\n    private getFormRegistrationServer = () =>\n        this.props.formRegistrationServer || this.state.formRegistrationServer;\n\n    private isNew = () =>\n        isNew(this.props.location.search);\n\n    private onPostSuccess = (reply: IReply<IRegistrationServer[]>): void => {\n        let registrationServers = reply.data;\n        if (registrationServers.length === 1) {\n            const registrationServer = registrationServers[0];\n            super.toast(`<span class=\"green-text\">Registration server launched on container ${this.mounted ? `<b class=\"white-text\">${registrationServer.containerId}</b>` : `<a href=/registration-servers/${registrationServer.containerId}><b>${registrationServer.containerId}</b></a>`}</span>`);\n            if (this.mounted) {\n                this.updateRegistrationServer(registrationServer);\n                this.props.history.replace(registrationServer.containerId)\n            }\n        } else {\n            registrationServers = registrationServers.reverse();\n            super.toast(`<span class=\"green-text\">Launched ${registrationServers.length} registration-servers:<br/><b class=\"white-text\">${registrationServers.map(registrationServer => `Container ${registrationServer.containerId} => Host ${registrationServer.publicIpAddress}`).join('<br/>')}</b></span>`);\n            if (this.mounted) {\n                this.props.history.push('/registration-servers');\n            }\n        }\n        this.props.addRegistrationServers(registrationServers);\n    };\n\n    private onPostFailure = (reason: string): void =>\n        super.toast(`Unable to launch registration server`, 10000, reason, true);\n\n    private onDeleteSuccess = (registrationServer: IRegistrationServer): void => {\n        super.toast(`<span class=\"green-text\">Registration server <b class=\"white-text\">${registrationServer.containerId}</b> successfully stopped</span>`);\n        if (this.mounted) {\n            this.props.history.push(`/registration-servers`)\n        }\n    };\n\n    private onDeleteFailure = (reason: string, registrationServer: IRegistrationServer): void =>\n        super.toast(`Unable to stop registration-server ${this.mounted ? `<b>${registrationServer.containerId}</b>` : `<a href=/registration-servers/${registrationServer.containerId}><b>${registrationServer.containerId}</b></a>`}`, 10000, reason, true);\n\n    private updateRegistrationServer = (registrationServer: IRegistrationServer) => {\n        registrationServer = Object.values(normalize(registrationServer, Schemas.REGISTRATION_SERVER).entities.registrationServers || {})[0];\n        const formRegistrationServer = {...registrationServer};\n        removeFields(formRegistrationServer);\n        this.setState({registrationServer: registrationServer, formRegistrationServer: formRegistrationServer});\n    };\n\n    private getFields = (registrationServer: INewRegistrationServerRegion | INewRegistrationServerHost | IRegistrationServer): IFields =>\n        Object.entries(registrationServer).map(([key, value]) => {\n            return {\n                [key]: {\n                    id: key,\n                    label: key,\n                    validation: getTypeFromValue(value) === 'number'\n                        ? {rule: requiredAndNumberAndMin, args: 0}\n                        : {rule: requiredAndTrimmed}\n                }\n            };\n        }).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});\n\n    private getSelectableHosts = (): Partial<IHostAddress>[] =>\n        Object.entries(this.props.nodes)\n            .filter(([_, node]) => node.state === 'ready')\n            .map(([_, node]) =>\n                ({\n                    username: node.labels['username'],\n                    publicIpAddress: node.publicIpAddress,\n                    privateIpAddress: node.labels['privateIpAddress'],\n                    coordinates: node.labels['coordinates'] ? JSON.parse(node.labels['coordinates']) : undefined,\n                }))\n\n    private hostAddressesDropdown = (hostAddress: Partial<IHostAddress>): string =>\n        hostAddress.publicIpAddress + (hostAddress.privateIpAddress ? (\"/\" + hostAddress.privateIpAddress) : '') + \" - \" + hostAddress.coordinates?.label;\n\n    private regionOption = (region: IRegion) =>\n        region.region;\n\n    private formFields = (isNew: boolean, formRegistrationServer?: Partial<IRegistrationServer>) => {\n        const {currentForm} = this.state;\n        return (\n            isNew ?\n                currentForm === 'On regions'\n                    ?\n                    <Field key={'regions'}\n                           id={'regions'}\n                           label={'regions'}\n                           type={'list'}\n                           value={Object.keys(this.props.regions)}/>\n                    :\n                    <>\n                        <Field<Partial<IHostAddress>> key={'hostAddress'}\n                                                      id={'hostAddress'}\n                                                      label={'hostAddress'}\n                                                      type=\"dropdown\"\n                                                      dropdown={{\n                                                          defaultValue: \"Select host address\",\n                                                          values: this.getSelectableHosts(),\n                                                          optionToString: this.hostAddressesDropdown,\n                                                          emptyMessage: 'No hosts to select'\n                                                      }}/>\n                    </>\n                : formRegistrationServer && Object.entries(formRegistrationServer).map((([key, value], index) =>\n                key === 'containerId'\n                    ? <Field key={index}\n                             id={key}\n                             label={key}\n                             icon={{linkedTo: '/containers/' + (formRegistrationServer as Partial<IRegistrationServer>).containerId}}/>\n                    : key === 'created'\n                    ? <Field key={index}\n                             id={key}\n                             label={key}\n                             type={\"date\"}/>\n                    : key === 'region'\n                        ? <Field<IRegion> key={index}\n                                          id={key}\n                                          type=\"dropdown\"\n                                          label={key}\n                                          valueToString={this.regionOption}\n                                          dropdown={{\n                                              defaultValue: \"Select region\",\n                                              emptyMessage: \"No regions to select\",\n                                              values: [(formRegistrationServer as IRegistrationServer).region],\n                                              optionToString: this.regionOption\n                                          }}/>\n                        : <Field key={index}\n                                 id={key}\n                                 label={key}/>))\n        );\n    };\n\n    private switchForm = (formId: 'On regions' | 'On host') =>\n        this.setState({currentForm: formId});\n\n    private registrationServer = () => {\n        const {isLoading, error, newRegistrationServerRegion, newRegistrationServerHost} = this.props;\n        const {currentForm} = this.state;\n        const isNewRegistrationServer = this.isNew();\n        const registrationServer = isNewRegistrationServer ? (currentForm === 'On regions' ? newRegistrationServerRegion : newRegistrationServerHost) : this.getRegistrationServer();\n        const formRegistrationServer = this.getFormRegistrationServer();\n        // @ts-ignore\n        const registrationServerKey: (keyof IRegistrationServer) = formRegistrationServer && Object.keys(formRegistrationServer)[0];\n        return (\n            <>\n                {!isNewRegistrationServer && isLoading && <LoadingSpinner/>}\n                {!isNewRegistrationServer && !isLoading && error && <Error message={error}/>}\n                {(isNewRegistrationServer || !isLoading) && (isNewRegistrationServer || !error) && registrationServer && (\n                    /*@ts-ignore*/\n                    <Form id={registrationServerKey}\n                          fields={this.getFields(registrationServer)}\n                          values={registrationServer}\n                          isNew={isNew(this.props.location.search)}\n                          post={{\n                              textButton: 'launch',\n                              url: 'registration-server',\n                              successCallback: this.onPostSuccess,\n                              failureCallback: this.onPostFailure\n                          }}\n                          delete={{\n                              textButton: 'Stop',\n                              url: `containers/${(registrationServer as IRegistrationServer).containerId}`,\n                              successCallback: this.onDeleteSuccess,\n                              failureCallback: this.onDeleteFailure\n                          }}\n                          switchDropdown={isNewRegistrationServer ? {\n                              options: currentForm === 'On regions' ? ['On host'] : ['On regions'],\n                              onSwitch: this.switchForm\n                          } : undefined}>\n                        {this.formFields(isNewRegistrationServer, formRegistrationServer)}\n                    </Form>\n                )}\n            </>\n        )\n    };\n\n    private tabs = (): Tab[] => [\n        {\n            title: 'Registration Server',\n            id: 'registrationServer',\n            content: () => this.registrationServer(),\n            active: this.props.location.state?.selected === 'registrationServer'\n        },\n    ];\n\n}\n\nfunction removeFields(registrationServer: Partial<IRegistrationServer>) {\n    delete registrationServer[\"id\"];\n    delete registrationServer[\"ports\"];\n    delete registrationServer[\"labels\"];\n    delete registrationServer[\"logs\"];\n    delete registrationServer[\"coordinates\"];\n}\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.registrationServers.isLoadingRegistrationServers;\n    const error = state.entities.registrationServers.loadRegistrationServersError;\n    const id = props.match.params.id;\n    const newRegistrationServer = isNew(props.location.search);\n    const newRegistrationServerRegion = newRegistrationServer ? buildNewRegistrationServerRegion() : undefined;\n    const newRegistrationServerHost = newRegistrationServer ? buildNewRegistrationServerHost() : undefined;\n    const registrationServer = !newRegistrationServer ? state.entities.registrationServers.data[id] : undefined;\n    let formRegistrationServer;\n    if (registrationServer) {\n        formRegistrationServer = {...registrationServer};\n        removeFields(formRegistrationServer);\n    }\n    const regions = state.entities.regions.data;\n    const nodes = state.entities.nodes.data;\n    return {\n        isLoading,\n        error,\n        newRegistrationServerRegion,\n        newRegistrationServerHost,\n        registrationServer,\n        formRegistrationServer,\n        regions,\n        nodes\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadRegistrationServers,\n    addRegistrationServers,\n    loadRegions,\n    loadNodes,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationServer);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport MainLayout from '../../../views/mainLayout/MainLayout';\nimport AddButton from \"../../../components/form/AddButton\";\nimport styles from './SimulatedMetrics.module.css'\nimport Collapsible from \"../../../components/collapsible/Collapsible\";\nimport SimulatedHostMetricsList from \"./hosts/SimulatedHostMetricsList\";\nimport SimulatedServiceMetricsList from \"./services/SimulatedServiceMetricsList\";\nimport SimulatedContainerMetricsList from \"./containers/SimulatedContainerMetricsList\";\nimport SimulatedAppMetricsList from \"./apps/SimulatedAppMetricsList\";\n\nconst SimulatedMetrics = () =>\n    <MainLayout>\n        <AddButton tooltip={{text: 'Add simulated metric', position: 'left'}}\n                   dropdown={{\n                       id: 'simulatedMetrics',\n                       title: 'Simulated metric',\n                       data: [\n                           {text: 'Host', pathname: '/simulated-metrics/hosts/new_metric?new'},\n                           {text: 'App', pathname: '/simulated-metrics/apps/new_metric?new'},\n                           {text: 'Service', pathname: '/simulated-metrics/services/new_metric?new'},\n                           {text: 'Container', pathname: '/simulated-metrics/containers/new_metric?new'},\n                       ],\n                   }}/>\n        <div className={`${styles.container}`}>\n            <Collapsible id={\"hostsCollapsible\"}\n                         title={'Hosts'}\n                         active\n                         headerClassname={styles.collapsibleSubtitle}\n                         bodyClassname={styles.collapsibleCardList}>\n                <SimulatedHostMetricsList/>\n            </Collapsible>\n        </div>\n        <div className={`${styles.container}`}>\n            <Collapsible id={\"appsCollapsible\"}\n                         title={'Apps'}\n                         active\n                         headerClassname={styles.collapsibleSubtitle}\n                         bodyClassname={styles.collapsibleCardList}>\n                <SimulatedAppMetricsList/>\n            </Collapsible>\n        </div>\n        <div className={`${styles.container}`}>\n            <Collapsible id={\"servicesCollapsible\"}\n                         title={'Services'}\n                         active\n                         headerClassname={styles.collapsibleSubtitle}\n                         bodyClassname={styles.collapsibleCardList}>\n                <SimulatedServiceMetricsList/>\n            </Collapsible>\n        </div>\n        <div className={`${styles.container}`}>\n            <Collapsible id={\"containersCollapsible\"}\n                         title={'Containers'}\n                         active\n                         headerClassname={styles.collapsibleSubtitle}\n                         bodyClassname={styles.collapsibleCardList}>\n                <SimulatedContainerMetricsList/>\n            </Collapsible>\n        </div>\n    </MainLayout>;\n\nexport default SimulatedMetrics;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport AddButton from \"../../../../components/form/AddButton\";\nimport styles from './SimulatedHostMetrics.module.css'\nimport SimulatedHostMetricsList from \"./SimulatedHostMetricsList\";\n\nconst SimulatedHostMetrics: React.FC = () =>\n    <MainLayout>\n        <AddButton tooltip={{text: 'Add simulated host metric', position: 'left'}}\n                   pathname={'/simulated-metrics/hosts/add_simulated_metric?new'}/>\n        <div className={`${styles.container}`}>\n            <SimulatedHostMetricsList/>\n        </div>\n    </MainLayout>;\n\nexport default SimulatedHostMetrics;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport AddButton from \"../../../../components/form/AddButton\";\nimport styles from './SimulatedServiceMetrics.module.css'\nimport SimulatedServiceMetricsList from \"./SimulatedServiceMetricsList\";\n\nconst SimulatedServiceMetrics: React.FC = () =>\n    <MainLayout>\n        <AddButton tooltip={{text: 'Add simulated service metric', position: 'left'}}\n                   pathname={'/simulated-metrics/services/add_simulated_metric?new'}/>\n        <div className={`${styles.container}`}>\n            <SimulatedServiceMetricsList/>\n        </div>\n    </MainLayout>;\n\nexport default SimulatedServiceMetrics;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\n\nexport const Footer: React.FC = () =>\n    <footer className=\"page-footer\">\n        <div className=\"row\">\n            <div className=\"right\">\n                © {(new Date().getFullYear())} μs-manager\n            </div>\n        </div>\n    </footer>;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport AddButton from \"../../../../components/form/AddButton\";\nimport styles from './RulesContainer.module.css';\nimport RulesContainerList from \"./RulesContainerList\";\n\nconst RulesContainer: React.FC = () =>\n    <MainLayout>\n        <AddButton tooltip={{text: 'Add container rule', position: 'left'}}\n                   pathname={'/rules/containers/new_container_rule?new'}/>\n        <div className={`${styles.container}`}>\n            <RulesContainerList/>\n        </div>\n    </MainLayout>;\n\nexport default RulesContainer;\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport AddButton from \"../../../../components/form/AddButton\";\nimport styles from './SimulatedContainerMetrics.module.css'\nimport SimulatedContainerMetricsList from \"./SimulatedContainerMetricsList\";\n\nconst SimulatedContainerMetrics: React.FC = () =>\n    <MainLayout>\n        <AddButton tooltip={{text: 'Add simulated container metric', position: 'left'}}\n                   pathname={'/simulated-metrics/containers/add_simulated_metric?new'}/>\n        <div className={`${styles.container}`}>\n            <SimulatedContainerMetricsList/>\n        </div>\n    </MainLayout>;\n\nexport default SimulatedContainerMetrics;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport MainLayout from \"../../../views/mainLayout/MainLayout\";\n\nconst Settings = () => (\n    <MainLayout>\n\n    </MainLayout>\n);\n\nexport default Settings;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport MainLayout from \"../../../views/mainLayout/MainLayout\";\nimport React from \"react\";\n\nconst Settings = () => (\n    <MainLayout>\n\n    </MainLayout>\n);\n\nexport default Settings;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport MainLayout from \"../../../views/mainLayout/MainLayout\";\nimport React from \"react\";\n\nconst Settings = () => (\n    <MainLayout>\n\n    </MainLayout>\n);\n\nexport default Settings;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {ReduxState} from \"../reducers\";\n\nexport const loadState = () => {\n    try {\n        const serializedState = localStorage.getItem('state');\n        if (serializedState === null) {\n            return undefined;\n        }\n        return JSON.parse(serializedState);\n    } catch (e) {\n        console.log('Failed to load state from local storage: ' + e);\n        return undefined;\n    }\n};\n\nexport const saveState = (state: ReduxState) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('state', serializedState);\n    } catch (e) {\n        console.log('Failed to save state to local storage: ' + e);\n    }\n};\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport styles from \"../../../components/list/ListItem.module.css\";\nimport List from \"../../../components/list/List\";\nimport React from \"react\";\nimport {IContainer, IContainerPort} from \"./Container\";\n\ninterface ContainerPortsListProps {\n    isLoadingContainer: boolean;\n    loadContainerError?: string | null;\n    container?: IContainer | null;\n}\n\ntype Props = ContainerPortsListProps;\n\nexport default class ContainerPortsList extends BaseComponent<Props, {}> {\n\n    public render() {\n        const PortsList = List<IContainerPort>();\n        return (\n            <PortsList isLoading={this.props.isLoadingContainer}\n                       error={this.props.loadContainerError}\n                       emptyMessage={`No ports associated`}\n                       list={this.ports()}\n                       show={this.port}/>\n        );\n    }\n\n    private ports = () =>\n        this.props.container?.ports || [];\n\n    private port = (port: IContainerPort, index: number): JSX.Element =>\n        <ListItem key={index} separate={index !== this.ports().length - 1}>\n            <div className={`${styles.listItemContent}`}>\n                <span>{port.publicPort}:{port.privatePort} {port.ip}/{port.type}</span>\n            </div>\n        </ListItem>;\n\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport styles from \"../../../components/list/ListItem.module.css\";\nimport List from \"../../../components/list/List\";\nimport React from \"react\";\nimport {IContainer} from \"./Container\";\n\ninterface PortsListProps {\n    isLoadingContainer: boolean;\n    loadContainerError?: string | null;\n    container?: IContainer | null;\n}\n\ntype Props = PortsListProps;\n\nexport default class ContainerLabelsList extends BaseComponent<Props, {}> {\n\n    public render() {\n        const LabelsList = List<string>();\n        return (\n            <LabelsList isLoading={this.props.isLoadingContainer}\n                        error={this.props.loadContainerError}\n                        emptyMessage={`No labels associated`}\n                        list={this.labels()}\n                        show={this.label}/>\n        );\n    }\n\n    private labels = (): string[] =>\n        Object.entries(this.props.container?.labels || []).map(([key, value]) => `${key} = ${value}`);\n\n    private label = (label: string, index: number): JSX.Element =>\n        <ListItem key={index} separate={index !== this.labels().length - 1}>\n            <div className={`${styles.listItemContent}`}>\n                <span>{label}</span>\n            </div>\n        </ListItem>;\n\n}","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport styles from \"./ContainerLogsList.module.css\";\nimport List from \"../../../components/list/List\";\nimport React from \"react\";\nimport {IContainer} from \"./Container\";\nimport {ReduxState} from \"../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {loadContainerLogs} from \"../../../actions\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    logs?: string;\n}\n\ninterface DispatchToProps {\n    loadContainerLogs: (containerId: string) => void;\n}\n\ninterface PortsListProps {\n    isLoadingContainer: boolean;\n    loadContainerError?: string | null;\n    container?: IContainer | null;\n}\n\ntype Props = StateToProps & DispatchToProps & PortsListProps;\n\nclass ContainerLogsList extends BaseComponent<Props, {}> {\n\n    componentDidMount(): void {\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<{}>, snapshot?: any): void {\n        if (prevProps.container?.containerId !== this.props.container?.containerId) {\n            this.loadEntities();\n        }\n    }\n\n    public render() {\n        const logs = this.logs();\n        const LogsList = List<string>();\n        return (\n            <>\n                {!!logs.length && (\n                    <div className='smallControlsContainer'>\n                        <button className='btn-floating btn-flat btn-small waves-effect waves-light right tooltipped'\n                                data-position=\"left\"\n                                data-tooltip=\"Reload\"\n                                type=\"button\"\n                                onClick={this.reloadLogs}>\n                            <i className=\"large material-icons\">cached</i>\n                        </button>\n                    </div>)}\n                <div className={styles.logsListContainer}>\n                    <LogsList isLoading={this.props.isLoadingContainer || this.props.isLoading}\n                              error={this.props.loadContainerError || this.props.error}\n                              emptyMessage={`No logs available`}\n                              list={logs}\n                              show={this.log}\n                              paginate={{\n                                  pagesize: {initial: 50},\n                                  page: {last: true},\n                                  position: 'top-bottom',\n                              }}/>\n                </div>\n            </>\n\n        );\n    }\n\n    private loadEntities = () => {\n        this.reloadLogs();\n    };\n\n    private reloadLogs = () => {\n        if (this.props.container?.containerId) {\n            const {containerId} = this.props.container;\n            this.props.loadContainerLogs(containerId);\n        }\n    };\n\n    private logs = () => {\n        let logs = this.props.container?.logs?.split(\"\\n\");\n        if (logs) {\n            // pop 1 to remove the last \\n\n            logs.pop();\n        } else {\n            logs = [];\n        }\n        return logs;\n    };\n\n    private log = (logs: string, index: number): JSX.Element =>\n        <ListItem key={index}>\n            <div className={styles.listItemContent}>\n                <span>{logs}</span>\n            </div>\n        </ListItem>;\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: PortsListProps): StateToProps {\n    const containerId = ownProps.container?.containerId;\n    const container = containerId && state.entities.containers.data[containerId];\n    const logs = container && container.logs;\n    return {\n        isLoading: state.entities.containers.isLoadingLogs,\n        error: state.entities.containers.loadLogsError,\n        logs: logs\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadContainerLogs\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContainerLogsList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport {IContainer} from \"./Container\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport styles from \"../../../components/list/ListItem.module.css\";\nimport ControlledList from \"../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {loadContainerRules, loadRulesContainer, removeContainerRules} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport {IRuleContainer} from \"../rules/containers/RuleContainer\";\nimport {Link} from \"react-router-dom\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    rules: { [key: string]: IRuleContainer },\n    rulesName: string[];\n}\n\ninterface DispatchToProps {\n    loadRulesContainer: (name?: string) => any;\n    loadContainerRules: (containerId: string) => void;\n    removeContainerRules: (containerId: string, rules: string[]) => void;\n}\n\ninterface ContainerRuleListProps {\n    isLoadingContainer: boolean;\n    loadContainerError?: string | null;\n    container?: IContainer | Partial<IContainer> | null;\n    unsavedRules: string[];\n    onAddContainerRule: (rule: string) => void;\n    onRemoveContainerRules: (rule: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & ContainerRuleListProps;\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass ContainerRuleList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadRulesContainer();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.container?.containerId && this.props.container?.containerId) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList isLoading={!isNew ? this.props.isLoadingContainer || this.props.isLoading : undefined}\n                               error={!isNew ? this.props.loadContainerError || this.props.error : undefined}\n                               emptyMessage={`Rules list is empty`}\n                               data={this.props.rulesName}\n                               dropdown={{\n                                   id: 'rules',\n                                   title: 'Add rule',\n                                   empty: 'No rules to add',\n                                   data: this.getSelectableRules()\n                               }}\n                               show={this.rule}\n                               onAdd={this.onAdd}\n                               onRemove={this.onRemove}\n                               onDelete={{\n                                   url: `containers/${this.props.container?.containerId}/rules`,\n                                   successCallback: this.onDeleteSuccess,\n                                   failureCallback: this.onDeleteFailure\n                               }}\n                               entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.container?.containerId) {\n            const {containerId} = this.props.container;\n            this.props.loadContainerRules(containerId);\n        }\n    };\n\n    private isNew = () =>\n        this.props.container?.containerId === undefined;\n\n    private rule = (index: number, rule: string, separate: boolean, checked: boolean,\n                    handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedRules.includes(rule);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${styles.linkedItemContent}`}>\n                    <label>\n                        <input id={rule}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                 {rule}\n               </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/rules/containers/${rule}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (rule: string): void =>\n        this.props.onAddContainerRule(rule);\n\n    private onRemove = (rules: string[]) =>\n        this.props.onRemoveContainerRules(rules);\n\n    private onDeleteSuccess = (rules: string[]): void => {\n        if (this.props.container?.containerId) {\n            const {containerId} = this.props.container;\n            this.props.removeContainerRules(containerId, rules);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to delete rule`, 10000, reason, true);\n\n    private getSelectableRules = () => {\n        const {rules, rulesName, unsavedRules} = this.props;\n        return Object.keys(rules).filter(name => !rulesName.includes(name) && !unsavedRules.includes(name));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: ContainerRuleListProps): StateToProps {\n    const containerId = ownProps.container?.containerId;\n    const container = containerId && state.entities.containers.data[containerId];\n    const rulesName = container && container.containerRules;\n    return {\n        isLoading: state.entities.containers.isLoadingRules,\n        error: state.entities.containers.loadRulesError,\n        rules: Object.entries(state.entities.rules.containers.data)\n            .filter(([_, rule]) => !rule.generic)\n            .map(([key, value]) => ({[key]: value}))\n            .reduce((fields, field) => {\n                for (let key in field) {\n                    fields[key] = field[key];\n                }\n                return fields;\n            }, {}),\n        rulesName: rulesName || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadRulesContainer,\n        loadContainerRules,\n        removeContainerRules,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContainerRuleList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport {IContainer} from \"./Container\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport styles from \"../../../components/list/ListItem.module.css\";\nimport ControlledList from \"../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {\n    loadContainerSimulatedMetrics,\n    loadSimulatedContainerMetrics,\n    removeContainerSimulatedMetrics\n} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {ISimulatedContainerMetric} from \"../metrics/containers/SimulatedContainerMetric\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    simulatedMetrics: { [key: string]: ISimulatedContainerMetric },\n    simulatedMetricsName: string[];\n}\n\ninterface DispatchToProps {\n    loadSimulatedContainerMetrics: (name?: string) => any;\n    loadContainerSimulatedMetrics: (containerId: string) => void;\n    removeContainerSimulatedMetrics: (containerId: string, simulatedMetrics: string[]) => void;\n}\n\ninterface ContainerSimulatedMetricListProps {\n    isLoadingContainer: boolean;\n    loadContainerError?: string | null;\n    container?: IContainer | Partial<IContainer> | null;\n    unsavedSimulatedMetrics: string[];\n    onAddSimulatedContainerMetric: (simulatedMetric: string) => void;\n    onRemoveSimulatedContainerMetrics: (simulatedMetric: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & ContainerSimulatedMetricListProps;\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass ContainerSimulatedMetricList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadSimulatedContainerMetrics();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.container?.containerId && this.props.container?.containerId) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList isLoading={!isNew ? this.props.isLoadingContainer || this.props.isLoading : undefined}\n                               error={!isNew ? this.props.loadContainerError || this.props.error : undefined}\n                               emptyMessage={`Simulated metrics list is empty`}\n                               data={this.props.simulatedMetricsName}\n                               dropdown={{\n                                   id: 'simulatedMetrics',\n                                   title: 'Add simulated metric',\n                                   empty: 'No simulated metrics to add',\n                                   data: this.getSelectableSimulatedMetrics()\n                               }}\n                               show={this.simulatedMetric}\n                               onAdd={this.onAdd}\n                               onRemove={this.onRemove}\n                               onDelete={{\n                                   url: `containers/${this.props.container?.containerId}/simulated-metrics`,\n                                   successCallback: this.onDeleteSuccess,\n                                   failureCallback: this.onDeleteFailure\n                               }}\n                               entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.container?.containerId) {\n            const {containerId} = this.props.container;\n            this.props.loadContainerSimulatedMetrics(containerId);\n        }\n    };\n\n    private isNew = () =>\n        this.props.container?.containerId === undefined;\n\n    private simulatedMetric = (index: number, simulatedMetric: string, separate: boolean, checked: boolean,\n                               handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedSimulatedMetrics.includes(simulatedMetric);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${styles.linkedItemContent}`}>\n                    <label>\n                        <input id={simulatedMetric}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                 {simulatedMetric}\n               </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/simulated-metrics/containers/${simulatedMetric}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (simulatedMetric: string): void =>\n        this.props.onAddSimulatedContainerMetric(simulatedMetric);\n\n    private onRemove = (simulatedMetrics: string[]) =>\n        this.props.onRemoveSimulatedContainerMetrics(simulatedMetrics);\n\n    private onDeleteSuccess = (simulatedMetrics: string[]): void => {\n        if (this.props.container?.containerId) {\n            const {containerId} = this.props.container;\n            this.props.removeContainerSimulatedMetrics(containerId, simulatedMetrics);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to delete simulated metric`, 10000, reason, true);\n\n    private getSelectableSimulatedMetrics = () => {\n        const {simulatedMetrics, simulatedMetricsName, unsavedSimulatedMetrics} = this.props;\n        return Object.keys(simulatedMetrics).filter(name => !simulatedMetricsName.includes(name) && !unsavedSimulatedMetrics.includes(name));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: ContainerSimulatedMetricListProps): StateToProps {\n    const containerId = ownProps.container?.containerId;\n    const container = containerId && state.entities.containers.data[containerId];\n    const simulatedMetricsName = container && container.containerSimulatedMetrics;\n    return {\n        isLoading: state.entities.containers.isLoadingSimulatedMetrics,\n        error: state.entities.containers.loadSimulatedMetricsError,\n        simulatedMetrics: Object.entries(state.entities.simulatedMetrics.containers.data)\n            .map(([key, value]) => ({[key]: value}))\n            .reduce((fields, field) => {\n                for (let key in field) {\n                    fields[key] = field[key];\n                }\n                return fields;\n            }, {}),\n        simulatedMetricsName: simulatedMetricsName || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadSimulatedContainerMetrics,\n        loadContainerSimulatedMetrics,\n        removeContainerSimulatedMetrics,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContainerSimulatedMetricList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {RouteComponentProps} from \"react-router\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport Form, {\n    IFields,\n    IFormLoading,\n    required,\n    requiredAndNumberAndMin,\n    requiredAndTrimmed,\n    requireGreaterOrEqualSize\n} from \"../../../components/form/Form\";\nimport Field, {getTypeFromValue} from \"../../../components/form/Field\";\nimport LoadingSpinner from \"../../../components/list/LoadingSpinner\";\nimport {Error} from \"../../../components/errors/Error\";\nimport Tabs, {Tab} from \"../../../components/tabs/Tabs\";\nimport MainLayout from \"../../../views/mainLayout/MainLayout\";\nimport {ReduxState} from \"../../../reducers\";\nimport {\n    addContainers,\n    addContainerRules,\n    addContainerSimulatedMetrics,\n    loadContainers,\n    loadNodes,\n    loadServices\n} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport React from \"react\";\nimport {ICloudHost} from \"../hosts/cloud/CloudHost\";\nimport {IEdgeHost} from \"../hosts/edge/EdgeHost\";\nimport {IService} from \"../services/Service\";\nimport ContainerPortsList from \"./ContainerPortsList\";\nimport ContainerLabelsList from \"./ContainerLabelsList\";\nimport ContainerLogsList from \"./ContainerLogsList\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport ScrollBar from \"react-perfect-scrollbar\";\nimport M from \"materialize-css\";\nimport styles from \"../../../components/list/ControlledList.module.css\";\nimport {decodeHTML} from \"../../../utils/text\";\nimport {IReply, postData} from \"../../../utils/api\";\nimport {isNew} from \"../../../utils/router\";\nimport {normalize} from \"normalizr\";\nimport {Schemas} from \"../../../middleware/api\";\nimport IDatabaseData from \"../../../components/IDatabaseData\";\nimport ContainerRuleList from \"./ContainerRuleList\";\nimport ContainerSimulatedMetricList from \"./ContainerSimulatedMetricList\";\nimport UnsavedChanged from \"../../../components/form/UnsavedChanges\";\nimport formStyles from \"../../../components/form/Form.module.css\";\nimport {INode} from \"../nodes/Node\";\nimport {IHostAddress} from \"../hosts/Hosts\";\nimport {ICoordinates} from \"../../../components/map/LocationMap\";\nimport GenericSimulatedServiceMetricList from \"../services/GenericSimulatedServiceMetricList\";\nimport GenericServiceRuleList from \"../services/GenericServiceRuleList\";\nimport {IRegion} from \"../regions/Region\";\nimport {Point} from \"react-simple-maps\";\nimport {IMarker} from \"../../../components/map/Marker\";\n\nexport interface IContainer extends IDatabaseData {\n    containerId: string;\n    type: ContainerType;\n    created: number;\n    names: string[];\n    image: string;\n    command: string;\n    network: string;\n    publicIpAddress: string;\n    privateIpAddress: string;\n    ports: IContainerPort[];\n    labels: IContainerLabel;\n    region: IRegion;\n    coordinates: ICoordinates;\n    logs?: string;\n    containerRules?: string[];\n    containerSimulatedMetrics?: string[];\n}\n\nexport type ContainerType = 'SINGLETON' | 'BY_REQUEST'\n\nexport interface IContainerPort {\n    publicPort: number;\n    privatePort: number;\n    type: string;\n    ip: string;\n}\n\nexport interface IContainerLabel {\n    [key: string]: string\n}\n\ninterface INewContainerHost {\n    service?: string,\n    externalPort?: number,\n    internalPort?: number,\n    hostAddress?: IHostAddress,\n}\n\ninterface INewContainerLocation {\n    service?: string,\n    externalPort?: number,\n    internalPort?: number,\n    coordinates?: Point[];\n}\n\nconst buildNewContainerHost = (): INewContainerHost => ({\n    service: undefined,\n    externalPort: undefined,\n    internalPort: undefined,\n    hostAddress: undefined,\n});\n\nconst buildNewContainerLocation = (): INewContainerLocation => ({\n    service: undefined,\n    externalPort: undefined,\n    internalPort: undefined,\n    coordinates: undefined,\n});\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    newContainerHost?: INewContainerHost;\n    newContainerLocation?: INewContainerLocation;\n    container?: IContainer;\n    formContainer?: Partial<IContainer> | INewContainerHost;\n    nodes: { [key: string]: INode };\n    services: { [key: string]: IService };\n    cloudHosts: { [key: string]: ICloudHost };\n    edgeHosts: { [key: string]: IEdgeHost };\n    containers: { [key: string]: IContainer };\n}\n\ninterface DispatchToProps {\n    loadContainers: (containerId?: string) => void;\n    loadNodes: () => void;\n    loadServices: () => void;\n    addContainers: (containers: IContainer[]) => void;\n    addContainerRules: (containerId: string, rules: string[]) => void;\n    addContainerSimulatedMetrics: (containerId: string, simulatedMetrics: string[]) => void;\n}\n\ninterface MatchParams {\n    id: string;\n}\n\ninterface LocationState {\n    data: IContainer,\n    selected: 'container' | 'ports' | 'containerLabels' | 'logs' | 'rules' | 'genericServiceRules'\n        | 'simulatedMetrics' | 'genericSimulatedMetrics';\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ninterface State {\n    container?: IContainer,\n    formContainer?: IContainer,\n    loading: IFormLoading,\n    defaultInternalPort: number,\n    defaultExternalPort: number,\n    unsavedRules: string[],\n    unsavedSimulatedMetrics: string[],\n    currentForm: 'On host' | 'On location',\n}\n\nclass Container extends BaseComponent<Props, State> {\n\n    state: State = {\n        loading: undefined,\n        defaultInternalPort: 0,\n        defaultExternalPort: 0,\n        unsavedRules: [],\n        unsavedSimulatedMetrics: [],\n        currentForm: 'On location',\n    };\n    private mounted = false;\n    private scrollbar: (ScrollBar | null) = null;\n\n    public componentDidMount(): void {\n        this.loadContainer();\n        this.props.loadNodes();\n        this.props.loadServices();\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                {this.shouldShowSaveButton() && !isNew(this.props.location.search) && <UnsavedChanged/>}\n                <div className=\"container\">\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private initDropdown = (dropdown: HTMLButtonElement | null) => {\n        if (dropdown) {\n            M.Dropdown.init(dropdown,\n                {\n                    onOpenEnd: this.onOpenDropdown\n                });\n        }\n    };\n\n    private onOpenDropdown = () =>\n        this.scrollbar?.updateScroll();\n\n    private loadContainer = () => {\n        if (!this.isNew()) {\n            const containerId = this.props.match.params.id;\n            this.props.loadContainers(containerId);\n        } else {\n            this.props.loadContainers();\n        }\n    };\n\n    private getContainer = () =>\n        this.props.container || this.state.container;\n\n    private getFormContainer = () =>\n        this.props.formContainer || this.state.formContainer;\n\n    private isNew = () =>\n        isNew(this.props.location.search);\n\n    private onPostSuccess = (reply: IReply<IContainer[]>): void => {\n        let containers = reply.data;\n        if (containers.length === 1) {\n            const container = containers[0];\n            super.toast(`<span class=\"green-text\">Container ${this.mounted ? `<b class=\"white-text\">${container.containerId}</b>` : `<a href=/containers/${container.containerId}><b>${container.containerId}</b></a>`} has started at host ${container.publicIpAddress}</span>`);\n            this.saveEntities(container);\n            if (this.mounted) {\n                this.updateContainer(container);\n                this.props.history.replace(container.containerId);\n            }\n        } else {\n            containers = containers.reverse();\n            super.toast(`<span class=\"green-text\">Launched ${containers.length} containers:<br/><b class=\"white-text\">${containers.map(container => `${container.id} => Host ${container.publicIpAddress}`).join('<br/>')}</b></span>`);\n            if (this.mounted) {\n                this.props.history.push(\"/containers\");\n            }\n        }\n        this.props.addContainers(containers);\n    };\n\n    private onPostFailure = (reason: string, container: INewContainerHost): void =>\n        super.toast(`Unable to start container at <b>${container.hostAddress?.publicIpAddress}/${container.hostAddress?.privateIpAddress}</b>`, 10000, reason, true);\n\n    private onDeleteSuccess = (container: IContainer): void => {\n        super.toast(`<span class=\"green-text\">Container <b class=\"white-text\">${container.containerId}</b> successfully stopped</span>`);\n        if (this.mounted) {\n            this.props.history.push(`/containers`);\n        }\n    };\n\n    private onDeleteFailure = (reason: string, container: IContainer): void =>\n        super.toast(`Unable to stop container ${this.mounted ? `<b>${container.containerId}</b>` : `<a href=/containers/${container.containerId}><b>${container.containerId}</b></a>`}`, 10000, reason, true);\n\n    private replicateButton = () =>\n        <>\n            <button\n                className={`btn-flat btn-small waves-effect waves-light blue-text dropdown-trigger ${formStyles.formButton}`}\n                data-target={`replicate-dropdown-host-address`}\n                ref={(ref) => this.initDropdown(ref)}>\n                Replicate\n            </button>\n            {this.chooseHostAddressDropdown('replicate-dropdown-host-address', this.replicate)}\n        </>\n\n    private migrateButton = () =>\n        <>\n            <button\n                className={`btn-flat btn-small waves-effect waves-light blue-text dropdown-trigger ${formStyles.formButton}`}\n                data-target={`migrate-dropdown-host-address`}\n                ref={(ref) => this.initDropdown(ref)}>\n                Migrate\n            </button>\n            {this.chooseHostAddressDropdown('migrate-dropdown-host-address', this.migrate)}\n        </>\n\n    private chooseHostAddressDropdown = (id: string, onClick: (event: any) => void) => {\n        const nodes = Object.values(this.props.nodes)\n            .filter(node => node.state === 'ready' && (!id.includes('migrate') || node.publicIpAddress != this.getContainer()?.publicIpAddress));\n        return <ul id={id}\n                   className={`dropdown-content ${styles.dropdown}`}>\n            <li className={`${styles.disabled}`}>\n                <a className={`${!nodes.length ? 'dropdown-empty' : ''}`}>\n                    {!nodes.length ? 'No nodes to select' : 'Choose host address'}\n                </a>\n            </li>\n            <PerfectScrollbar ref={(ref) => this.scrollbar = ref}>\n                {nodes.map((node, index) =>\n                    <li key={index} onClick={onClick}>\n                        <a>\n                            {`${node.publicIpAddress + (node.labels['privateIpAddress'] ? \" (\" + node.labels['privateIpAddress'] + \")\" : '')}`}\n                        </a>\n                    </li>\n                )}\n            </PerfectScrollbar>\n        </ul>;\n    }\n\n    private replicate = (event: any) => {\n        const container = this.getContainer();\n        const hostAddress = decodeHTML((event.target as HTMLLIElement).innerHTML).split(' (');\n        const publicIpAddress = hostAddress[0];\n        const privateIpAddress = hostAddress[1]?.substr(0, hostAddress[1].length - 1);\n        const url = `containers/${container?.containerId}/replicate`;\n        this.setState({loading: {method: 'post', url: url}});\n        postData(url, {publicIpAddress: publicIpAddress, privateIpAddress: privateIpAddress},\n            (reply: IReply<IContainer>) => this.onReplicateSuccess(reply.data),\n            (reason: string) => this.onReplicateFailure(reason, container));\n    };\n\n    private onReplicateSuccess = (container: IContainer) => {\n        super.toast(`<span class=\"green-text\">Replicated ${container.image.split('/').splice(1)} to container </span><a href=/containers/${container.containerId}><b>${container.containerId}</b></a>`, 15000);\n        if (this.mounted) {\n            this.setState({loading: undefined});\n        }\n    };\n\n    private onReplicateFailure = (reason: string, container?: IContainer) => {\n        super.toast(`Unable to replicate container ${this.mounted ? `<b>${container?.containerId}</b>` : `<a href=/containers/${container?.containerId}><b>${container?.containerId}</b></a>`}`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: undefined});\n        }\n    };\n\n    private migrate = (event: any) => {\n        const container = this.getContainer();\n        const hostAddress = decodeHTML((event.target as HTMLLIElement).innerHTML).split(' (');\n        const publicIpAddress = hostAddress[0];\n        const privateIpAddress = hostAddress[1]?.substr(0, hostAddress[1].length - 1)\n        const url = `containers/${container?.containerId}/migrate`;\n        this.setState({loading: {method: 'post', url: url}});\n        postData(url, {publicIpAddress: publicIpAddress, privateIpAddress: privateIpAddress},\n            (reply: IReply<IContainer>) => this.onMigrateSuccess(reply.data),\n            (reason) => this.onMigrateFailure(reason, container));\n    };\n\n    private onMigrateSuccess = (container: IContainer) => {\n        const parentContainer = this.getContainer();\n        super.toast(`<span class=\"green-text\">Migrated ${this.mounted ? parentContainer?.containerId : `<a href=/containers/${parentContainer?.containerId}>${parentContainer?.containerId}</a>`} to container </span><a href=/containers/${container.containerId}>${container.containerId}</a>`, 15000);\n        if (this.mounted) {\n            this.setState({loading: undefined});\n        }\n    };\n\n    private onMigrateFailure = (reason: string, container?: IContainer) => {\n        super.toast(`Unable to migrate container ${this.mounted ? `<b>${container?.containerId}</b>` : `<a href=/containers/${container?.containerId}><b>${container?.containerId}</b></a>`}`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: undefined});\n        }\n    };\n\n    private addContainerRule = (rule: string): void => {\n        this.setState({\n            unsavedRules: this.state.unsavedRules.concat(rule)\n        });\n    };\n\n    private removeContainerRules = (rules: string[]): void => {\n        this.setState({\n            unsavedRules: this.state.unsavedRules.filter(rule => !rules.includes(rule))\n        });\n    };\n\n    private saveContainerRules = (container: IContainer): void => {\n        const {unsavedRules} = this.state;\n        if (unsavedRules.length) {\n            postData(`containers/${container.containerId}/rules`, unsavedRules,\n                () => this.onSaveRulesSuccess(container),\n                (reason) => this.onSaveRulesFailure(container, reason));\n        }\n    };\n\n    private onSaveRulesSuccess = (container: IContainer): void => {\n        this.props.addContainerRules(container.containerId, this.state.unsavedRules);\n        if (this.mounted) {\n            this.setState({unsavedRules: []});\n        }\n    };\n\n    private onSaveRulesFailure = (container: IContainer, reason: string): void =>\n        super.toast(`Unable to save rules of container ${this.mounted ? `<b>${container.containerId}</b>` : `<a href=/containers/${container.containerId}><b>${container.containerId}</b></a>`}`, 10000, reason, true);\n\n    private addContainerSimulatedMetric = (simulatedMetric: string): void => {\n        this.setState({\n            unsavedSimulatedMetrics: this.state.unsavedSimulatedMetrics.concat(simulatedMetric)\n        });\n    };\n\n    private removeContainerSimulatedMetrics = (simulatedMetrics: string[]): void => {\n        this.setState({\n            unsavedSimulatedMetrics: this.state.unsavedSimulatedMetrics.filter(metric => !simulatedMetrics.includes(metric))\n        });\n    };\n\n    private saveContainerSimulatedMetrics = (container: IContainer): void => {\n        const {unsavedSimulatedMetrics} = this.state;\n        if (unsavedSimulatedMetrics.length) {\n            postData(`containers/${container.containerId}/simulated-metrics`, unsavedSimulatedMetrics,\n                () => this.onSaveSimulatedMetricsSuccess(container),\n                (reason) => this.onSaveSimulatedMetricsFailure(container, reason));\n        }\n    };\n\n    private onSaveSimulatedMetricsSuccess = (container: IContainer): void => {\n        this.props.addContainerSimulatedMetrics(container.containerId, this.state.unsavedSimulatedMetrics);\n        if (this.mounted) {\n            this.setState({unsavedSimulatedMetrics: []});\n        }\n    };\n\n    private onSaveSimulatedMetricsFailure = (container: IContainer, reason: string): void =>\n        super.toast(`Unable to save simulated metrics of container ${this.mounted ? `<b>${container.containerId}</b>` : `<a href=/containers/${container.containerId}><b>${container.containerId}</b></a>`}`, 10000, reason, true);\n\n    private shouldShowSaveButton = () =>\n        !!this.state.unsavedRules.length\n        || !!this.state.unsavedSimulatedMetrics.length;\n\n    private saveEntities = (container: IContainer) => {\n        this.saveContainerRules(container);\n        this.saveContainerSimulatedMetrics(container);\n    };\n\n    private updateContainer = (container: IContainer) => {\n        container = Object.values(normalize(container, Schemas.CONTAINER).entities.containers || {})[0];\n        const formContainer = {...container};\n        removeFields(formContainer);\n        this.setState({container: container, formContainer: formContainer, loading: undefined});\n    };\n\n    private commonFields = (): IFields => {\n        return ['service', 'externalPort', 'internalPort'].map(field => ({\n            [field]: {\n                id: field,\n                label: field,\n                validation: {rule: required}\n            }\n        })).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});\n    }\n\n    private getFields = (container: INewContainerHost | INewContainerLocation | IContainer): IFields => {\n        if (this.isNew()) {\n            return this.state.currentForm === 'On host'\n                ? ({\n                    ...this.commonFields(),\n                    hostAddress: {\n                        id: 'hostAddress',\n                        label: 'hostAddress',\n                        validation: {rule: required}\n                    },\n                }) : ({\n                    ...this.commonFields(),\n                    coordinates: {\n                        id: 'coordinates',\n                        label: 'coordinates',\n                        validation: {rule: requireGreaterOrEqualSize, args: 1}\n                    },\n                })\n        } else {\n            return Object.entries(container).map(([key, value]) => {\n                return {\n                    [key]: {\n                        id: key,\n                        label: key,\n                        validation: getTypeFromValue(value) === 'number'\n                            ? {rule: requiredAndNumberAndMin, args: 0}\n                            : key === 'coordinates'\n                                ? {rule: requireGreaterOrEqualSize, args: 1}\n                                : {rule: requiredAndTrimmed}\n                    }\n                };\n            }).reduce((fields, field) => {\n                for (let key in field) {\n                    fields[key] = field[key];\n                }\n                return fields;\n            }, {});\n        }\n    }\n\n    private getSelectableHosts = (): Partial<IHostAddress>[] =>\n        Object.entries(this.props.nodes)\n            .filter(([_, node]) => node.state === 'ready')\n            .map(([_, node]) =>\n                ({\n                    username: node.labels['username'],\n                    publicIpAddress: node.publicIpAddress,\n                    privateIpAddress: node.labels['privateIpAddress'],\n                    coordinates: node.labels['coordinates'] ? JSON.parse(node.labels['coordinates']) : undefined,\n                }))\n\n    private hostAddressesDropdown = (hostAddress: Partial<IHostAddress>): string =>\n        hostAddress.publicIpAddress + (hostAddress.privateIpAddress ? (\"/\" + hostAddress.privateIpAddress) : '') + \" - \" + hostAddress.coordinates?.label;\n\n    //TODO get apps' services instead (in case a service is associated to more than 1 app)\n    private getSelectableServices = () =>\n        Object.values(this.props.services).filter(service => service.serviceType !== 'SYSTEM')\n            .map(service => service.serviceName).sort();\n    /*Object.entries(this.props.services)\n        .filter(([_, service]) => service.serviceType.toLowerCase() !== 'system')\n        .map(([serviceName, _]) => serviceName);*/\n\n    private setDefaultPorts = (serviceName: string) => {\n        const service = this.props.services[serviceName];\n        this.setState({\n            defaultExternalPort: service.defaultExternalPort,\n            defaultInternalPort: service.defaultInternalPort\n        });\n    };\n\n    private hostLink = (publicIpAddress: string) => {\n        const cloudHost = Object.values(this.props.cloudHosts).filter(c => c.publicIpAddress === publicIpAddress)[0];\n        if (cloudHost) {\n            return '/hosts/cloud/' + cloudHost.instanceId;\n        }\n        const edgeHost = Object.values(this.props.edgeHosts).filter(e => e.publicIpAddress === publicIpAddress)[0];\n        if (edgeHost) {\n            return '/hosts/edge/' + edgeHost.publicIpAddress;\n        }\n        return null;\n    }\n\n    private regionOption = (region: IRegion) =>\n        region.region;\n\n    private switchForm = (formId: 'On host' | 'On location') =>\n        this.setState({currentForm: formId});\n\n    private getContainersMarkers = (): IMarker[] => {\n        const containers: IContainer[] = Object.values(this.props.containers);\n        const markers = new Map<String, IMarker>();\n        containers\n            .forEach(container => {\n                const publicIpAddress = container.publicIpAddress;\n                const marker = markers.get(publicIpAddress) || {title: '', label: '', latitude: 0, longitude: 0};\n                if (marker.title === '') {\n                    marker.title += container.coordinates.label + '<br/>';\n                }\n                marker.title += container.containerId.substr(0, 5) + ' - ' + container.labels['serviceName'] + '<br/>';\n                marker.label = publicIpAddress;\n                marker.latitude = container.coordinates.latitude;\n                marker.longitude = container.coordinates.longitude;\n                marker.color = 'green';\n                markers.set(publicIpAddress, marker);\n            });\n        return Array.from(markers.values());\n    }\n\n    private formFields = (formContainer: INewContainerHost | Partial<IContainer>, isNew: boolean): JSX.Element => {\n        const {currentForm} = this.state;\n        return isNew ?\n            currentForm === 'On host'\n                ?\n                <>\n                    <Field key={'service'}\n                           id={'service'}\n                           label={'service'}\n                           type={'dropdown'}\n                           dropdown={{\n                               defaultValue: \"Select service\",\n                               values: this.getSelectableServices(),\n                               selectCallback: this.setDefaultPorts,\n                               emptyMessage: 'No services available'\n                           }}/>\n                    <Field key={'externalPort'}\n                           id={'externalPort'}\n                           label={'externalPort'}\n                           type={'number'}/>\n                    <Field key={'internalPort'}\n                           id={'internalPort'}\n                           label={'internalPort'}\n                           type={'number'}/>\n                    <Field<Partial<IHostAddress>> key={'hostAddress'}\n                                                  id={'hostAddress'}\n                                                  label={'hostAddress'}\n                                                  type={'dropdown'}\n                                                  dropdown={{\n                                                      defaultValue: \"Select host address\",\n                                                      values: this.getSelectableHosts(),\n                                                      optionToString: this.hostAddressesDropdown,\n                                                      emptyMessage: 'No hosts available'\n                                                  }}/>\n                </>\n                :\n                <>\n                    <Field key={'service'}\n                           id={'service'}\n                           label={'service'}\n                           type={'dropdown'}\n                           dropdown={{\n                               defaultValue: \"Select service\",\n                               values: this.getSelectableServices(),\n                               selectCallback: this.setDefaultPorts,\n                               emptyMessage: 'No services available'\n                           }}/>\n                    <Field key={'externalPort'}\n                           id={'externalPort'}\n                           label={'externalPort'}\n                           type={'number'}/>\n                    <Field key={'internalPort'}\n                           id={'internalPort'}\n                           label={'internalPort'}\n                           type={'number'}/>\n                    <Field key='coordinates' id='coordinates' label='select position(s)' type='map'\n                           map={{\n                               loading: this.props.isLoading,\n                               editable: true,\n                               labeled: false,\n                               markers: this.getContainersMarkers()\n                           }}/>\n                </>\n            :\n            <>\n                {Object.entries(formContainer).map(([key, value], index) =>\n                    key === 'created'\n                        ? <Field key={index}\n                                 id={key}\n                                 label={key}\n                                 type={\"date\"}/>\n                        : key === 'publicIpAddress'\n                        ? <Field key={index}\n                                 id={key}\n                                 label={key}\n                                 icon={{linkedTo: this.hostLink}}/>\n                        : key === 'region'\n                            ? <Field<IRegion> key={index}\n                                              id={key}\n                                              type=\"dropdown\"\n                                              label={key}\n                                              valueToString={this.regionOption}\n                                              dropdown={{\n                                                  defaultValue: \"Select region\",\n                                                  emptyMessage: \"No regions to select\",\n                                                  values: [(formContainer as IContainer).region],\n                                                  optionToString: this.regionOption\n                                              }}/>\n                            : key === 'coordinates'\n                                ? <Field key={index} id='coordinates' label='location' type='map'\n                                         map={{\n                                             loading: this.props.isLoading,\n                                             editable: false,\n                                             zoomable: true,\n                                             labeled: true\n                                         }}/>\n                                : <Field key={index}\n                                         id={key}\n                                         label={key}/>\n                )}\n            </>;\n    }\n\n    private container = () => {\n        const {isLoading, error} = this.props;\n        let {newContainerHost, newContainerLocation} = this.props;\n        const {currentForm} = this.state;\n        const isNewContainer = this.isNew();\n        if (isNewContainer) {\n            newContainerHost = {\n                ...newContainerHost,\n                internalPort: this.state.defaultInternalPort,\n                externalPort: this.state.defaultExternalPort\n            };\n            newContainerLocation = {\n                ...newContainerHost,\n                internalPort: this.state.defaultInternalPort,\n                externalPort: this.state.defaultExternalPort\n            };\n        }\n        const container = isNewContainer ? (currentForm === 'On host' ? newContainerHost : newContainerLocation) : this.getContainer();\n        const formContainer = this.getFormContainer();\n        // @ts-ignore\n        const containerKey: (keyof IContainer) = formContainer && Object.keys(formContainer)[0];\n        return (\n            <>\n                {!isNewContainer && isLoading && <LoadingSpinner/>}\n                {!isNewContainer && !isLoading && error && <Error message={error}/>}\n                {(isNewContainer || !isLoading) && (isNewContainer || !error) && container && (\n                    /*@ts-ignore*/\n                    <Form id={containerKey}\n                          fields={this.getFields(container)}\n                          values={container}\n                          isNew={isNewContainer}\n                          showSaveButton={this.shouldShowSaveButton()}\n                          post={{\n                              textButton: 'Launch',\n                              url: 'containers',\n                              successCallback: this.onPostSuccess,\n                              failureCallback: this.onPostFailure\n                          }}\n                        // delete button is never present on new nodes, so a type cast is safe\n                          delete={container && (container as IContainer).type !== 'SINGLETON'\n                              ? {\n                                  textButton: 'Stop',\n                                  url: `containers/${(container as IContainer).containerId}`,\n                                  successCallback: this.onDeleteSuccess,\n                                  failureCallback: this.onDeleteFailure\n                              }\n                              : undefined}\n                        // custom buttons are never present on new nodes, so a type cast is safe\n                          customButtons={container && (container as IContainer).type !== 'SINGLETON'\n                              ? [{button: this.replicateButton()}, {button: this.migrateButton()}]\n                              : undefined}\n                          loading={this.state.loading}\n                          saveEntities={this.saveEntities}\n                          switchDropdown={isNewContainer ? {\n                              options: currentForm === 'On host' ? ['On location'] : ['On host'],\n                              onSwitch: this.switchForm\n                          } : undefined}>\n                        {this.formFields(formContainer || {}, isNewContainer)}\n                    </Form>\n                )}\n            </>\n        )\n    };\n\n    private ports = (): JSX.Element =>\n        <ContainerPortsList isLoadingContainer={this.props.isLoading}\n                            loadContainerError={!this.isNew() ? this.props.error : undefined}\n                            container={this.getContainer()}/>;\n\n    private labels = (): JSX.Element =>\n        <ContainerLabelsList isLoadingContainer={this.props.isLoading}\n                             loadContainerError={!this.isNew() ? this.props.error : undefined}\n                             container={this.getContainer()}/>;\n\n    private logs = (): JSX.Element =>\n        <ContainerLogsList isLoadingContainer={this.props.isLoading}\n                           loadContainerError={!this.isNew() ? this.props.error : undefined}\n                           container={this.getContainer()}/>;\n\n    private rules = (): JSX.Element =>\n        <ContainerRuleList isLoadingContainer={this.props.isLoading}\n                           loadContainerError={!this.isNew() ? this.props.error : undefined}\n                           container={this.getContainer()}\n                           unsavedRules={this.state.unsavedRules}\n                           onAddContainerRule={this.addContainerRule}\n                           onRemoveContainerRules={this.removeContainerRules}/>;\n\n    private genericRules = (): JSX.Element =>\n        <GenericServiceRuleList/>;\n\n    private simulatedMetrics = (): JSX.Element =>\n        <ContainerSimulatedMetricList isLoadingContainer={this.props.isLoading}\n                                      loadContainerError={!this.isNew() ? this.props.error : undefined}\n                                      container={this.getContainer()}\n                                      unsavedSimulatedMetrics={this.state.unsavedSimulatedMetrics}\n                                      onAddSimulatedContainerMetric={this.addContainerSimulatedMetric}\n                                      onRemoveSimulatedContainerMetrics={this.removeContainerSimulatedMetrics}/>;\n\n    private genericSimulatedMetrics = (): JSX.Element =>\n        <GenericSimulatedServiceMetricList/>;\n\n    private tabs = (): Tab[] => ([\n        {\n            title: 'Container',\n            id: 'container',\n            content: () => this.container(),\n            active: this.props.location.state?.selected === 'container'\n        },\n        {\n            title: 'Ports',\n            id: 'ports',\n            content: () => this.ports(),\n            hidden: this.isNew(),\n            active: this.props.location.state?.selected === 'ports'\n        },\n        {\n            title: 'Labels',\n            id: 'containerLabels',\n            content: () => this.labels(),\n            hidden: this.isNew(),\n            active: this.props.location.state?.selected === 'containerLabels'\n        },\n        {\n            title: 'Logs',\n            id: 'logs',\n            content: () => this.logs(),\n            hidden: this.isNew(),\n            active: this.props.location.state?.selected === 'logs'\n        },\n        {\n            title: 'Rules',\n            id: 'rules',\n            content: () => this.rules(),\n            active: this.props.location.state?.selected === 'rules'\n        },\n        {\n            title: 'Generic rules',\n            id: 'genericContainerRules',\n            content: () => this.genericRules(),\n            active: this.props.location.state?.selected === 'genericServiceRules'\n        },\n        {\n            title: 'Simulated metrics',\n            id: 'simulatedMetrics',\n            content: () => this.simulatedMetrics(),\n            active: this.props.location.state?.selected === 'simulatedMetrics'\n        },\n        {\n            title: 'Generic simulated metrics',\n            id: 'genericSimulatedMetrics',\n            content: () => this.genericSimulatedMetrics(),\n            active: this.props.location.state?.selected === 'genericSimulatedMetrics'\n        }\n    ]);\n\n}\n\nfunction removeFields(container: Partial<IContainer>) {\n    delete container[\"id\"];\n    delete container[\"ports\"];\n    delete container[\"labels\"];\n    delete container[\"logs\"];\n    delete container[\"containerRules\"];\n    delete container[\"containerSimulatedMetrics\"];\n}\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.containers.isLoadingContainers;\n    const error = state.entities.containers.loadContainersError;\n    const id = props.match.params.id;\n    const newContainerHost = isNew(props.location.search) ? buildNewContainerHost() : undefined;\n    const newContainerLocation = isNew(props.location.search) ? buildNewContainerLocation() : undefined;\n    const container = !isNew(props.location.search) ? state.entities.containers.data[id] : undefined;\n    let formContainer;\n    if (container) {\n        formContainer = {...container};\n        removeFields(formContainer);\n    }\n    const nodes = state.entities.nodes.data;\n    const services = state.entities.services.data;\n    const cloudHosts = state.entities.hosts.cloud.data;\n    const edgeHosts = state.entities.hosts.edge.data;\n    const containers = state.entities.containers.data;\n    return {\n        isLoading,\n        error,\n        newContainerHost,\n        newContainerLocation,\n        container,\n        formContainer,\n        nodes,\n        services,\n        cloudHosts,\n        edgeHosts,\n        containers\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadContainers,\n    addContainers,\n    loadNodes,\n    loadServices,\n    addContainerRules,\n    addContainerSimulatedMetrics,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Container);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport ListItem from \"../../../../components/list/ListItem\";\nimport styles from \"../../../../components/list/ListItem.module.css\";\nimport ControlledList from \"../../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {IRuleHost} from \"../../rules/hosts/RuleHost\";\nimport {Link} from \"react-router-dom\";\nimport {IEdgeHost} from \"./EdgeHost\";\nimport {loadEdgeHostRules, loadRulesHost, removeEdgeHostRules} from \"../../../../actions\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    rules: { [key: string]: IRuleHost },\n    rulesNames: string[];\n}\n\ninterface DispatchToProps {\n    loadRulesHost: () => void;\n    loadEdgeHostRules: (hostname: string) => void;\n    removeEdgeHostRules: (hostname: string, rules: string[]) => void;\n}\n\ninterface HostRuleListProps {\n    isLoadingEdgeHost: boolean;\n    loadEdgeHostError?: string | null;\n    edgeHost: IEdgeHost | Partial<IEdgeHost> | null;\n    unsavedRules: string[];\n    onAddHostRule: (rule: string) => void;\n    onRemoveHostRules: (rule: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & HostRuleListProps;\n\ntype State = {\n    entitySaved: boolean;\n}\n\nclass EdgeHostRuleList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadRulesHost();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        const previousHostname = prevProps.edgeHost?.publicIpAddress;\n        const currentHostname = this.props.edgeHost?.publicIpAddress;\n        if (!previousHostname && currentHostname) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList isLoading={!isNew ? this.props.isLoadingEdgeHost || this.props.isLoading : undefined}\n                               error={!isNew ? this.props.loadEdgeHostError || this.props.error : undefined}\n                               emptyMessage={`Rules list is empty`}\n                               data={this.props.rulesNames}\n                               dropdown={{\n                                   id: 'rules',\n                                   title: 'Add host rule',\n                                   empty: 'No rules to add',\n                                   data: this.getSelectableRules()\n                               }}\n                               show={this.rule}\n                               onAdd={this.onAdd}\n                               onRemove={this.onRemove}\n                               onDelete={{\n                                   url: `hosts/edge/${this.props.edgeHost?.publicIpAddress}/rules`,\n                                   successCallback: this.onDeleteSuccess,\n                                   failureCallback: this.onDeleteFailure\n                               }}\n                               entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        const hostname = this.props.edgeHost?.publicIpAddress;\n        if (hostname) {\n            this.props.loadEdgeHostRules(hostname);\n        }\n    };\n\n    private isNew = () =>\n        this.props.edgeHost?.publicDnsName === undefined && this.props.edgeHost?.publicIpAddress === undefined;\n\n    private rule = (index: number, rule: string, separate: boolean, checked: boolean,\n                    handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedRules.includes(rule);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${styles.linkedItemContent}`}>\n                    <label>\n                        <input id={rule}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n               <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                 {rule}\n               </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/rules/hosts/${rule}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (rule: string): void =>\n        this.props.onAddHostRule(rule);\n\n    private onRemove = (rules: string[]) =>\n        this.props.onRemoveHostRules(rules);\n\n    private onDeleteSuccess = (rules: string[]): void => {\n        const hostname = this.props.edgeHost?.publicIpAddress;\n        if (hostname) {\n            this.props.removeEdgeHostRules(hostname, rules);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to remove rule`, 10000, reason, true);\n\n    private getSelectableRules = () => {\n        const {rules, rulesNames, unsavedRules} = this.props;\n        return Object.entries(rules)\n            .filter(([_, rule]) => !rule.generic)\n            .map(([ruleName, _]) => ruleName)\n            .filter(name => !rulesNames.includes(name) && !unsavedRules.includes(name));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: HostRuleListProps): StateToProps {\n    const hostname = ownProps.edgeHost?.publicIpAddress;\n    const host = hostname && state.entities.hosts.edge.data[hostname];\n    const rulesNames = host && host.hostRules;\n    return {\n        isLoading: state.entities.hosts.edge.isLoadingRules,\n        error: state.entities.hosts.edge.loadRulesError,\n        rules: Object.entries(state.entities.rules.hosts.data)\n            .filter(([_, rule]) => !rule.generic)\n            .map(([key, value]) => ({[key]: value}))\n            .reduce((fields, field) => {\n                for (let key in field) {\n                    fields[key] = field[key];\n                }\n                return fields;\n            }, {}),\n        rulesNames: rulesNames || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadRulesHost,\n        loadEdgeHostRules,\n        removeEdgeHostRules,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EdgeHostRuleList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport {IEdgeHost} from \"./EdgeHost\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport ListItem from \"../../../../components/list/ListItem\";\nimport styles from \"../../../../components/list/ListItem.module.css\";\nimport ControlledList from \"../../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {\n    loadEdgeHostSimulatedMetrics,\n    loadSimulatedHostMetrics,\n    removeEdgeHostSimulatedMetrics\n} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {ISimulatedHostMetric} from \"../../metrics/hosts/SimulatedHostMetric\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    simulatedMetrics: { [key: string]: ISimulatedHostMetric },\n    simulatedMetricsName: string[];\n}\n\ninterface DispatchToProps {\n    loadSimulatedHostMetrics: (name?: string) => any;\n    loadEdgeHostSimulatedMetrics: (hostname: string) => void;\n    removeEdgeHostSimulatedMetrics: (hostname: string, simulatedMetrics: string[]) => void;\n}\n\ninterface HostSimulatedMetricListProps {\n    isLoadingEdgeHost: boolean;\n    loadEdgeHostError?: string | null;\n    edgeHost: IEdgeHost | Partial<IEdgeHost> | null;\n    unsavedSimulatedMetrics: string[];\n    onAddSimulatedHostMetric: (simulatedMetric: string) => void;\n    onRemoveSimulatedHostMetrics: (simulatedMetric: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & HostSimulatedMetricListProps;\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass EdgeHostSimulatedMetricList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadSimulatedHostMetrics();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        const previousHostname = prevProps.edgeHost?.publicIpAddress;\n        const currentHostname = this.props.edgeHost?.publicIpAddress;\n        if (!previousHostname && currentHostname) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList isLoading={!isNew ? this.props.isLoadingEdgeHost || this.props.isLoading : undefined}\n                               error={!isNew ? this.props.loadEdgeHostError || this.props.error : undefined}\n                               emptyMessage={`Simulated metrics list is empty`}\n                               data={this.props.simulatedMetricsName}\n                               dropdown={{\n                                   id: 'simulatedMetrics',\n                                   title: 'Add simulated metric',\n                                   empty: 'No simulated metrics to add',\n                                   data: this.getSelectableSimulatedMetrics()\n                               }}\n                               show={this.simulatedMetric}\n                               onAdd={this.onAdd}\n                               onRemove={this.onRemove}\n                               onDelete={{\n                                   url: `hosts/edge/${this.props.edgeHost?.publicIpAddress}/simulated-metrics`,\n                                   successCallback: this.onDeleteSuccess,\n                                   failureCallback: this.onDeleteFailure\n                               }}\n                               entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        const hostname = this.props.edgeHost?.publicIpAddress;\n        if (hostname) {\n            this.props.loadEdgeHostSimulatedMetrics(hostname);\n        }\n    };\n\n    private isNew = () =>\n        this.props.edgeHost?.publicDnsName === undefined && this.props.edgeHost?.publicIpAddress === undefined;\n\n    private simulatedMetric = (index: number, simulatedMetric: string, separate: boolean, checked: boolean,\n                               handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedSimulatedMetrics.includes(simulatedMetric);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${styles.linkedItemContent}`}>\n                    <label>\n                        <input id={simulatedMetric}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                 {simulatedMetric}\n               </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/simulated-metrics/hosts/${simulatedMetric}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (simulatedMetric: string): void =>\n        this.props.onAddSimulatedHostMetric(simulatedMetric);\n\n    private onRemove = (simulatedMetrics: string[]) =>\n        this.props.onRemoveSimulatedHostMetrics(simulatedMetrics);\n\n    private onDeleteSuccess = (simulatedMetrics: string[]): void => {\n        const hostname = this.props.edgeHost?.publicIpAddress;\n        if (hostname) {\n            this.props.removeEdgeHostSimulatedMetrics(hostname, simulatedMetrics);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to delete simulated metric`, 10000, reason, true);\n\n    private getSelectableSimulatedMetrics = () => {\n        const {simulatedMetrics, simulatedMetricsName, unsavedSimulatedMetrics} = this.props;\n        return Object.keys(simulatedMetrics).filter(name => !simulatedMetricsName.includes(name) && !unsavedSimulatedMetrics.includes(name));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: HostSimulatedMetricListProps): StateToProps {\n    const hostname = ownProps.edgeHost?.publicIpAddress;\n    const host = hostname && state.entities.hosts.edge.data[hostname];\n    const simulatedMetricsName = host && host.hostSimulatedMetrics;\n    return {\n        isLoading: state.entities.hosts.edge.isLoadingSimulatedMetrics,\n        error: state.entities.hosts.edge.loadSimulatedMetricsError,\n        simulatedMetrics: Object.entries(state.entities.simulatedMetrics.hosts.data)\n            .filter(([_, simulatedMetric]) => !simulatedMetric.generic)\n            .map(([key, value]) => ({[key]: value}))\n            .reduce((fields, field) => {\n                for (let key in field) {\n                    fields[key] = field[key];\n                }\n                return fields;\n            }, {}),\n        simulatedMetricsName: simulatedMetricsName || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadSimulatedHostMetrics,\n        loadEdgeHostSimulatedMetrics,\n        removeEdgeHostSimulatedMetrics,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EdgeHostSimulatedMetricList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React, {createRef} from \"react\";\nimport {connect} from \"react-redux\";\nimport {INewSshCommand, ISshCommand} from \"../../ssh/SshCommand\";\nimport SshPanel, {ICommand, IFileTransfer} from \"../../ssh/SshPanel\";\nimport {addCommand} from \"../../../../actions\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport Field from \"../../../../components/form/Field\";\nimport Form, {IFields, requiredAndTrimmed} from \"../../../../components/form/Form\";\nimport {IReply} from \"../../../../utils/api\";\nimport {IEdgeHost} from \"./EdgeHost\";\n\nconst buildNewSshCommand = (): INewSshCommand => ({\n    background: false,\n    hostAddress: undefined,\n    command: undefined,\n});\n\ninterface EdgeHostSshCommandProps {\n    edgeHost: Partial<IEdgeHost>;\n}\n\ninterface DispatchToProps {\n    addCommand: (command: ICommand) => void;\n}\n\ntype Props = EdgeHostSshCommandProps & DispatchToProps;\n\nclass EdgeHostSshCommand extends BaseComponent<Props, {}> {\n\n    private sshPanel = createRef<any>();\n\n    private commandFilter = (command: ICommand | IFileTransfer) =>\n        command.hostAddress.publicIpAddress === this.props.edgeHost.publicIpAddress\n\n    public render() {\n        const command = buildNewSshCommand();\n        return (\n            <>\n                {/*@ts-ignore*/}\n                <Form id={'sshCommand'}\n                      fields={this.getFields()}\n                      values={command}\n                      isNew\n                      post={{\n                          textButton: 'Execute',\n                          url: `hosts/edge/${this.props.edgeHost?.publicIpAddress}/ssh`,\n                          successCallback: this.onPostSuccess,\n                          failureCallback: this.onPostFailure\n                      }}>\n                    <Field key='background'\n                           id='background'\n                           type='checkbox'\n                           checkbox={{label: 'execute in the background'}}/>\n                    <Field key='command'\n                           id='command'\n                           label='command'/>\n                </Form>\n                <SshPanel ref={this.sshPanel} filter={this.commandFilter}/>\n            </>\n        );\n    }\n\n    private onPostSuccess = (reply: IReply<ISshCommand>): void => {\n        const command = reply.data;\n        const timestampedCommand = {...command, timestamp: Date.now()};\n        this.props.addCommand(timestampedCommand);\n        this.sshPanel.current?.scrollToTop();\n    };\n\n    private onPostFailure = (reason: string): void =>\n        super.toast(`Command execution failed`, 10000, reason, true);\n\n    private getFields = (): IFields => (\n        {\n            background: {\n                id: 'background',\n                label: 'background',\n            },\n            command: {\n                id: 'command',\n                label: 'command',\n                validation: {rule: requiredAndTrimmed}\n            },\n        }\n    );\n\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    addCommand,\n};\n\nexport default connect(undefined, mapDispatchToProps)(EdgeHostSshCommand);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React, {createRef} from \"react\";\nimport {ISshFile} from \"../../ssh/SshFile\";\nimport {IEdgeHost} from \"./EdgeHost\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport Field from \"../../../../components/form/Field\";\nimport Form, {IFields, required} from \"../../../../components/form/Form\";\nimport {IReply} from \"../../../../utils/api\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {addCommand, loadScripts} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport SshPanel, {ICommand, IFileTransfer} from \"../../ssh/SshPanel\";\n\nconst buildNewSshCommand = (): Partial<ISshFile> => ({\n    hostAddress: undefined,\n    filename: undefined,\n});\n\ninterface StateToProps {\n    scripts: string[];\n}\n\ninterface DispatchToProps {\n    loadScripts: () => void;\n    addCommand: (command: IFileTransfer) => void;\n}\n\ninterface SshFileProps {\n    edgeHost: Partial<IEdgeHost>;\n}\n\ntype Props = SshFileProps & StateToProps & DispatchToProps;\n\nclass EdgeHostSshFileTransfer extends BaseComponent<Props, {}> {\n\n    private sshPanel = createRef<any>();\n\n    private commandFilter = (command: ICommand | IFileTransfer) =>\n        command.hostAddress.publicIpAddress === this.props.edgeHost.publicIpAddress\n\n    public componentDidMount(): void {\n        this.props.loadScripts();\n    };\n\n    public render() {\n        const command = buildNewSshCommand();\n        return (\n            <>\n                {/*@ts-ignore*/}\n                <Form id={'sshCommand'}\n                      fields={this.getFields()}\n                      values={command}\n                      isNew={true}\n                      post={{\n                          textButton: 'Upload',\n                          url: `hosts/edge/${this.props.edgeHost?.publicIpAddress}/sftp`,\n                          successCallback: this.onPostSuccess,\n                          failureCallback: this.onPostFailure\n                      }}>\n                    <Field key='filename'\n                           id='filename'\n                           label='filename'\n                           type='dropdown'\n                           dropdown={{\n                               defaultValue: 'Select filename',\n                               values: this.props.scripts,\n                               emptyMessage: 'No scripts available'\n                           }}/>\n                </Form>\n                <SshPanel ref={this.sshPanel} filter={this.commandFilter}/>\n            </>\n        );\n    }\n\n    private onPostSuccess = (reply: IReply<string>, args: ISshFile): void => {\n        super.toast(`<span class=\"green-text\">File uploaded</span>`);\n        const transfer = {...args, timestamp: Date.now()};\n        this.props.addCommand(transfer);\n        this.sshPanel.current?.scrollToTop();\n    };\n\n    private onPostFailure = (reason: string): void =>\n        super.toast(`Failed to upload file`, 10000, reason, true);\n\n    private getFields = (): IFields => (\n        {\n            filename: {\n                id: 'filename',\n                label: 'filename',\n                validation: {rule: required}\n            },\n        }\n    );\n\n}\n\nfunction mapStateToProps(state: ReduxState): StateToProps {\n    const scripts = state.entities.scripts.data;\n    return {\n        scripts\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadScripts,\n    addCommand,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EdgeHostSshFileTransfer);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport IDatabaseData from \"../../../../components/IDatabaseData\";\nimport {RouteComponentProps} from \"react-router\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport Form, {\n    IFields,\n    requiredAndTrimmed,\n    requiredAndTrimmedAndNotValidIpAddress\n} from \"../../../../components/form/Form\";\nimport LoadingSpinner from \"../../../../components/list/LoadingSpinner\";\nimport {Error} from \"../../../../components/errors/Error\";\nimport Field from \"../../../../components/form/Field\";\nimport Tabs, {Tab} from \"../../../../components/tabs/Tabs\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {\n    addEdgeHost,\n    addEdgeHostRules,\n    addEdgeHostSimulatedMetrics,\n    loadEdgeHosts,\n    loadRegions,\n    updateEdgeHost\n} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport React from \"react\";\nimport EdgeHostRuleList from \"./EdgeHostRuleList\";\nimport {IReply, postData} from \"../../../../utils/api\";\nimport GenericHostRuleList from \"../GenericHostRuleList\";\nimport UnsavedChanged from \"../../../../components/form/UnsavedChanges\";\nimport {isNew} from \"../../../../utils/router\";\nimport {normalize} from \"normalizr\";\nimport {Schemas} from \"../../../../middleware/api\";\nimport EdgeHostSimulatedMetricList from \"./EdgeHostSimulatedMetricList\";\nimport GenericSimulatedHostMetricList from \"../GenericSimulatedHostMetricList\";\nimport {IRegion} from \"../../regions/Region\";\nimport {IWorkerManager} from \"../../workerManagers/WorkerManager\";\nimport {ICoordinates} from \"../../../../components/map/LocationMap\";\nimport EdgeHostSshCommand from \"./EdgeHostSshCommand\";\nimport EdgeHostSshFileTransfer from \"./EdgeHostSshFileTransfer\";\n\nexport interface IEdgeHost extends IDatabaseData {\n    username: string;\n    publicIpAddress: string;\n    privateIpAddress: string;\n    publicDnsName: string;\n    region: IRegion;\n    coordinates: ICoordinates;\n    worker: IWorkerManager;\n    managedByWorker: IWorkerManager;\n    hostRules?: string[];\n    hostSimulatedMetrics?: string[];\n}\n\ninterface INewEdgeHost extends IEdgeHost {\n    password: string;\n}\n\nconst buildNewEdgeHost = (): Partial<INewEdgeHost> => ({\n    username: undefined,\n    password: undefined,\n    privateIpAddress: undefined,\n    publicIpAddress: undefined,\n    publicDnsName: undefined,\n    coordinates: undefined,\n});\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    edgeHost: Partial<IEdgeHost>;\n    formEdgeHost?: Partial<IEdgeHost>;\n    regions: { [key: string]: IRegion };\n}\n\ninterface DispatchToProps {\n    loadEdgeHosts: (hostname: string) => void;\n    addEdgeHost: (edgeHost: IEdgeHost) => void;\n    updateEdgeHost: (previousEdgeHost: IEdgeHost, currentEdgeHost: IEdgeHost) => void;\n    addEdgeHostRules: (hostname: string, rules: string[]) => void;\n    addEdgeHostSimulatedMetrics: (hostname: string, simulatedMetrics: string[]) => void;\n    loadRegions: () => void;\n}\n\ninterface MatchParams {\n    hostname: string;\n}\n\ninterface LocationState {\n    data: IEdgeHost,\n    selected: 'edgeHost' | 'rules' | 'genericRules' | 'simulatedMetrics' | 'genericSimulatedMetrics' | 'ssh' | 'sftp',\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ninterface State {\n    edgeHost?: IEdgeHost,\n    formEdgeHost?: IEdgeHost,\n    unsavedRules: string[],\n    unsavedSimulatedMetrics: string[],\n}\n\nclass EdgeHost extends BaseComponent<Props, State> {\n\n    state: State = {\n        unsavedRules: [],\n        unsavedSimulatedMetrics: [],\n    };\n    private mounted = false;\n\n    public componentDidMount(): void {\n        this.loadEdgeHost();\n        this.props.loadRegions();\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                {this.shouldShowSaveButton() && !isNew(this.props.location.search) && <UnsavedChanged/>}\n                <div className=\"container\">\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private loadEdgeHost = () => {\n        if (!isNew(this.props.location.search)) {\n            const hostname = this.props.match.params.hostname;\n            this.props.loadEdgeHosts(hostname);\n        }\n    };\n\n    private getEdgeHost = () =>\n        this.props.edgeHost || this.state.edgeHost;\n\n    private getFormEdgeHost = () =>\n        this.props.formEdgeHost || this.state.formEdgeHost;\n\n    private isNew = () =>\n        isNew(this.props.location.search);\n\n    private onPostSuccess = (reply: IReply<IEdgeHost>): void => {\n        const edgeHost = reply.data;\n        const hostname = edgeHost.publicIpAddress;\n        super.toast(`<span class=\"green-text\">Edge host ${this.mounted ? `<b class=\"white-text\">${hostname}</b>` : `<a href=/hosts/edge/${hostname}><b>${hostname}</b></a>`} saved</span>`);\n        this.props.addEdgeHost(edgeHost);\n        this.saveEntities(edgeHost);\n        if (this.mounted) {\n            this.updateEdgeHost(edgeHost);\n            this.props.history.replace(hostname);\n        }\n    };\n\n    private onPostFailure = (reason: string, edgeHost: IEdgeHost): void =>\n        super.toast(`Unable to save <b>${edgeHost.publicIpAddress}</b> edge host`, 10000, reason, true);\n\n    /*private onPutSuccess = (reply: IReply<IEdgeHost>): void => {\n        const edgeHost = reply.data;\n        const hostname = edgeHost.publicIpAddress;\n        super.toast(`<span class=\"green-text\">Changes to ${this.mounted ? `<b class=\"white-text\">${hostname}</b>` : `<a href=/hosts/edge/${hostname}><b>${hostname}</b></a>`} edge host have been saved</span>`);\n        this.saveEntities(edgeHost);\n        const previousEdgeHost = this.getEdgeHost();\n        if (previousEdgeHost.id) {\n            this.props.updateEdgeHost(previousEdgeHost as IEdgeHost, edgeHost);\n        }\n        if (this.mounted) {\n            this.updateEdgeHost(edgeHost);\n            this.props.history.replace(edgeHost.publicIpAddress);\n        }\n    };*/\n\n    /*private onPutFailure = (reason: string, edgeHost: IEdgeHost): void =>\n        super.toast(`Unable to update ${this.mounted ? `<b>${edgeHost.publicIpAddress}</b>` : `<a href=/hosts/edge/${edgeHost.publicDnsName || edgeHost.publicIpAddress}><b>${edgeHost.publicDnsName || edgeHost.publicIpAddress}</b></a>`} edge host`, 10000, reason, true);*/\n\n    private onDeleteSuccess = (edgeHost: IEdgeHost): void => {\n        super.toast(`<span class=\"green-text\">Edge host <b class=\"white-text\">${edgeHost.publicIpAddress}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.props.history.push(`/hosts/edge`)\n        }\n    };\n\n    private onDeleteFailure = (reason: string, edgeHost: IEdgeHost): void =>\n        super.toast(`Unable to delete ${this.mounted ? `<b>${edgeHost.publicIpAddress}</b>` : `<a href=/hosts/edge/${edgeHost.publicDnsName || edgeHost.publicIpAddress}><b>${edgeHost.publicDnsName || edgeHost.publicIpAddress}</b></a>`} edge host`, 10000, reason, true);\n\n    private shouldShowSaveButton = () =>\n        !!this.state.unsavedRules.length\n        || !!this.state.unsavedSimulatedMetrics.length;\n\n    private saveEntities = (edgeHost: IEdgeHost) => {\n        this.saveEdgeHostRules(edgeHost);\n        this.saveEdgeHostSimulatedMetrics(edgeHost);\n    };\n\n    private addEdgeHostRule = (rule: string): void => {\n        this.setState({\n            unsavedRules: this.state.unsavedRules.concat(rule)\n        });\n    };\n\n    private removeEdgeHostRules = (rules: string[]): void => {\n        this.setState({\n            unsavedRules: this.state.unsavedRules.filter(rule => !rules.includes(rule))\n        });\n    };\n\n    private saveEdgeHostRules = (edgeHost: IEdgeHost): void => {\n        const {unsavedRules} = this.state;\n        if (unsavedRules.length) {\n            postData(`hosts/edge/${edgeHost.publicIpAddress}/rules`, unsavedRules,\n                () => this.onSaveRulesSuccess(edgeHost),\n                (reason) => this.onSaveRulesFailure(edgeHost, reason));\n        }\n    };\n\n    private onSaveRulesSuccess = (edgeHost: IEdgeHost): void => {\n        this.props.addEdgeHostRules(edgeHost.publicIpAddress, this.state.unsavedRules);\n        if (this.mounted) {\n            this.setState({unsavedRules: []});\n        }\n    };\n\n    private onSaveRulesFailure = (edgeHost: IEdgeHost, reason: string): void =>\n        super.toast(`Unable to save rules of edge host ${this.mounted ? `<b>${edgeHost.publicIpAddress}</b>` : `<a href=/hosts/edge/${edgeHost.publicDnsName || edgeHost.publicIpAddress}><b>${edgeHost.publicDnsName || edgeHost.publicIpAddress}</b></a>`}`, 10000, reason, true);\n\n    private removeHostSimulatedMetrics = (simulatedMetrics: string[]): void => {\n        this.setState({\n            unsavedSimulatedMetrics: this.state.unsavedSimulatedMetrics.filter(metric => !simulatedMetrics.includes(metric))\n        });\n    };\n\n    private addHostSimulatedMetric = (simulatedMetric: string): void => {\n        this.setState({\n            unsavedSimulatedMetrics: this.state.unsavedSimulatedMetrics.concat(simulatedMetric)\n        });\n    };\n\n    private saveEdgeHostSimulatedMetrics = (edgeHost: IEdgeHost): void => {\n        const {unsavedSimulatedMetrics} = this.state;\n        if (unsavedSimulatedMetrics.length) {\n            postData(`hosts/edge/${edgeHost.publicIpAddress}/simulated-metrics`, unsavedSimulatedMetrics,\n                () => this.onSaveSimulatedMetricsSuccess(edgeHost),\n                (reason) => this.onSaveSimulatedMetricsFailure(edgeHost, reason));\n        }\n    };\n\n    private onSaveSimulatedMetricsSuccess = (edgeHost: IEdgeHost): void => {\n        this.props.addEdgeHostSimulatedMetrics(edgeHost.publicIpAddress, this.state.unsavedSimulatedMetrics);\n        if (this.mounted) {\n            this.setState({unsavedSimulatedMetrics: []});\n        }\n    };\n\n    private onSaveSimulatedMetricsFailure = (edgeHost: IEdgeHost, reason: string): void =>\n        super.toast(`Unable to save simulated metrics of edge host ${this.mounted ? `<b>${edgeHost.publicIpAddress}</b>` : `<a href=/hosts/edge/${edgeHost.publicDnsName || edgeHost.publicIpAddress}><b>${edgeHost.publicDnsName || edgeHost.publicIpAddress}</b></a>`}`, 10000, reason, true);\n\n    private updateEdgeHost = (edgeHost: IEdgeHost) => {\n        edgeHost = Object.values(normalize(edgeHost, Schemas.EDGE_HOST).entities.edgeHosts || {})[0];\n        const formEdgeHost = {...edgeHost};\n        removeFields(formEdgeHost);\n        this.setState({edgeHost: edgeHost, formEdgeHost: formEdgeHost});\n    };\n\n    private getFields = (edgeHost: Partial<IEdgeHost>): IFields =>\n        Object.entries(edgeHost).map(([key, _]) => {\n            return {\n                [key]: {\n                    id: key,\n                    label: key,\n                    validation:\n                        key.toLowerCase().includes('address')\n                            ? {rule: requiredAndTrimmedAndNotValidIpAddress}\n                            : {rule: requiredAndTrimmed}\n                }\n            };\n        }).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});\n\n    private managedByWorker = (worker: IWorkerManager) =>\n        worker.id.toString();\n\n    private regionOption = (region: IRegion) =>\n        region.region;\n\n    private edgeHost = () => {\n        const {isLoading, error} = this.props;\n        const edgeHost = this.getEdgeHost();\n        const formEdgeHost = this.getFormEdgeHost();\n        // @ts-ignore\n        const edgeHostKey: (keyof IEdgeHost) = formEdgeHost && Object.keys(formEdgeHost)[0];\n        const isNewEdgeHost = this.isNew();\n        console.log(formEdgeHost)\n        return (\n            <>\n                {!isNewEdgeHost && isLoading && <LoadingSpinner/>}\n                {!isNewEdgeHost && !isLoading && error && <Error message={error}/>}\n                {(isNewEdgeHost || !isLoading) && (isNewEdgeHost || !error) && formEdgeHost && (\n                    /*@ts-ignore*/\n                    <Form id={edgeHostKey}\n                          fields={this.getFields(formEdgeHost)}\n                          values={edgeHost}\n                          isNew={isNew(this.props.location.search)}\n                          showSaveButton={this.shouldShowSaveButton()}\n                          post={{\n                              url: 'hosts/edge',\n                              successCallback: this.onPostSuccess,\n                              failureCallback: this.onPostFailure\n                          }}\n                        /*put={{\n                            url: `hosts/edge/${edgeHost.publicIpAddress}`,\n                            successCallback: this.onPutSuccess,\n                            failureCallback: this.onPutFailure\n                        }}*/\n                          delete={{\n                              confirmMessage: `to delete ${edgeHost.publicIpAddress}`,\n                              url: `hosts/edge/${edgeHost.publicIpAddress}`,\n                              successCallback: this.onDeleteSuccess,\n                              failureCallback: this.onDeleteFailure\n                          }}\n                          saveEntities={this.saveEntities}>\n                        {Object.keys(formEdgeHost).map((key, index) =>\n                            key === 'password'\n                                ? <Field key={index}\n                                         id={key}\n                                         label={key}\n                                         hidden={true}/>\n                                : key === 'region'\n                                ? <Field<IRegion> key={index}\n                                                  id={key}\n                                                  type=\"dropdown\"\n                                                  label={key}\n                                                  valueToString={this.regionOption}\n                                                  dropdown={{\n                                                      defaultValue: \"Select region\",\n                                                      emptyMessage: \"No regions to select\",\n                                                      values: Object.values(this.props.regions),\n                                                      optionToString: this.regionOption\n                                                  }}/>\n                                : key === 'coordinates'\n                                    ? <Field key={index} id='coordinates' label='position' type='map'\n                                             map={{\n                                                 loading: isLoading,\n                                                 editable: this.isNew(),\n                                                 singleMarker: true,\n                                                 zoomable: true,\n                                                 labeled: true\n                                             }}/>\n                                    : key === 'managedByWorker'\n                                        ? <Field<IWorkerManager> key={index}\n                                                                 id={key}\n                                                                 label={key}\n                                                                 valueToString={this.managedByWorker}/>\n                                        : <Field key={index}\n                                                 id={key}\n                                                 label={key}/>\n                        )}\n                    </Form>\n                )}\n            </>\n        )\n    };\n\n    private rules = (): JSX.Element =>\n        <EdgeHostRuleList isLoadingEdgeHost={this.props.isLoading}\n                          loadEdgeHostError={!this.isNew() ? this.props.error : undefined}\n                          edgeHost={this.getEdgeHost()}\n                          unsavedRules={this.state.unsavedRules}\n                          onAddHostRule={this.addEdgeHostRule}\n                          onRemoveHostRules={this.removeEdgeHostRules}/>;\n\n    private genericRules = (): JSX.Element =>\n        <GenericHostRuleList/>;\n\n    private simulatedMetrics = (): JSX.Element =>\n        <EdgeHostSimulatedMetricList isLoadingEdgeHost={this.props.isLoading}\n                                     loadEdgeHostError={!this.isNew() ? this.props.error : undefined}\n                                     edgeHost={this.getEdgeHost()}\n                                     unsavedSimulatedMetrics={this.state.unsavedSimulatedMetrics}\n                                     onAddSimulatedHostMetric={this.addHostSimulatedMetric}\n                                     onRemoveSimulatedHostMetrics={this.removeHostSimulatedMetrics}/>;\n\n    private genericSimulatedMetrics = (): JSX.Element =>\n        <GenericSimulatedHostMetricList/>;\n\n    private ssh = (): JSX.Element =>\n        <EdgeHostSshCommand edgeHost={this.getEdgeHost()}/>;\n\n    private sftp = (): JSX.Element =>\n        <EdgeHostSshFileTransfer edgeHost={this.getEdgeHost()}/>;\n\n    private tabs = (): Tab[] => {\n        const tabs = [\n            {\n                title: 'Edge host',\n                id: 'edgeHost',\n                content: () => this.edgeHost(),\n                active: this.props.location.state?.selected === 'edgeHost'\n            },\n            {\n                title: 'Rules',\n                id: 'rules',\n                content: () => this.rules(),\n                active: this.props.location.state?.selected === 'rules'\n            },\n            {\n                title: 'Generic rules',\n                id: 'genericRules',\n                content: () => this.genericRules(),\n                active: this.props.location.state?.selected === 'genericRules'\n            },\n            {\n                title: 'Simulated metrics',\n                id: 'simulatedMetrics',\n                content: () => this.simulatedMetrics(),\n                active: this.props.location.state?.selected === 'simulatedMetrics'\n            },\n            {\n                title: 'Generic simulated metrics',\n                id: 'genericSimulatedMetrics',\n                content: () => this.genericSimulatedMetrics(),\n                active: this.props.location.state?.selected === 'genericSimulatedMetrics'\n            },\n        ];\n        if (!this.isNew()) {\n            tabs.push({\n                title: 'Execute command',\n                id: 'ssh',\n                content: () => this.ssh(),\n                active: this.props.location.state?.selected === 'ssh'\n            });\n            tabs.push({\n                title: 'Upload file',\n                id: 'sftp',\n                content: () => this.sftp(),\n                active: this.props.location.state?.selected === 'sftp'\n            });\n        }\n        return tabs;\n    }\n\n}\n\nfunction removeFields(edgeHost: Partial<IEdgeHost>) {\n    delete edgeHost[\"id\"];\n    delete edgeHost[\"worker\"];\n    if (!edgeHost.managedByWorker) {\n        delete edgeHost[\"managedByWorker\"];\n    }\n    delete edgeHost[\"hostRules\"];\n    delete edgeHost[\"hostSimulatedMetrics\"];\n}\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.hosts.edge.isLoadingHosts;\n    const error = state.entities.hosts.edge.loadHostsError;\n    const hostname = props.match.params.hostname;\n    const edgeHost = isNew(props.location.search) ? buildNewEdgeHost() : state.entities.hosts.edge.data[hostname];\n    let formEdgeHost;\n    if (edgeHost) {\n        formEdgeHost = {...edgeHost};\n        removeFields(formEdgeHost);\n    }\n    return {\n        isLoading,\n        error,\n        edgeHost,\n        formEdgeHost,\n        regions: state.entities.regions.data,\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadEdgeHosts,\n    addEdgeHost,\n    updateEdgeHost,\n    addEdgeHostRules,\n    addEdgeHostSimulatedMetrics,\n    loadRegions\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EdgeHost);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport React from \"react\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport listItemStyles from \"../../../components/list/ListItem.module.css\";\nimport {Link} from \"react-router-dom\";\nimport ControlledList from \"../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {loadAppServices, loadServices, removeAppServices,} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport {IApp} from \"./App\";\nimport {IService} from \"../services/Service\";\nimport Field from \"../../../components/form/Field\";\nimport {IFields, IValues, requiredAndNumberAndMinAndMax} from \"../../../components/form/Form\";\nimport IDatabaseData from \"../../../components/IDatabaseData\";\n\nexport interface IAppService extends IDatabaseData {\n    service: IService;\n    launchOrder: number;\n}\n\nexport interface IAddAppService {\n    service: { serviceName: string };\n    launchOrder: number;\n}\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    services: { [key: string]: IService };\n    appServices: IAppService[];\n}\n\ninterface DispatchToProps {\n    loadServices: () => void;\n    loadAppServices: (appName: string) => void;\n    removeAppServices: (appName: string, services: string[]) => void;\n}\n\ninterface ServiceAppListProps {\n    isLoadingApp: boolean;\n    loadAppError?: string | null;\n    app: IApp | Partial<IApp> | null;\n    unsavedServices: IAddAppService[];\n    onAddAppService: (service: IAddAppService) => void;\n    onRemoveAppServices: (services: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & ServiceAppListProps;\n\ninterface State {\n    selectedService?: string;\n    entitySaved: boolean;\n}\n\nclass AppServiceList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadServices();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.app?.id && this.props.app?.id) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList<IAppService>\n            isLoading={!isNew ? this.props.isLoadingApp || this.props.isLoading : undefined}\n            error={!isNew ? this.props.loadAppError || this.props.error : undefined}\n            emptyMessage={`Services list is empty`}\n            data={this.props.appServices}\n            dataKey={['service', 'serviceName']}\n            dropdown={{\n                id: 'appServices',\n                title: 'Add service',\n                empty: 'No services to add',\n                data: this.getSelectableServicesNames(),\n                onSelect: this.onDropdownSelect,\n                formModal: {\n                    id: 'appService',\n                    fields: this.getModalFields(),\n                    values: this.getModalValues(),\n                    content: this.addModal,\n                    position: '20%',\n                }\n            }}\n            show={this.service}\n            onAddInput={this.onAdd}\n            onRemove={this.onRemove}\n            onDelete={{\n                url: `apps/${this.props.app?.name}/services`,\n                successCallback: this.onDeleteSuccess,\n                failureCallback: this.onDeleteFailure\n            }}\n            entitySaved={this.state.entitySaved}\n            sort={(a: IAppService, b: IAppService) => a.launchOrder - b.launchOrder}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.app?.name) {\n            const {name} = this.props.app;\n            this.props.loadAppServices(name);\n        }\n    };\n\n    private isNew = () =>\n        this.props.app?.name === undefined;\n\n    private service = (index: number, service: IAppService | IAddAppService, separate: boolean, checked: boolean,\n                       handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const serviceName = service.service.serviceName;\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedServices.map(service => service.service.serviceName).includes(serviceName);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${listItemStyles.linkedItemContent}`}>\n                    <label>\n                        <input id={serviceName}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? listItemStyles.unsavedItem : undefined}>\n                {service.launchOrder}. {serviceName}\n              </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/services/${serviceName}`}\n                          className={`${listItemStyles.link} waves-effect`}>\n                        <i className={`${listItemStyles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (service: IValues): void => {\n        console.log(service)\n        this.props.onAddAppService(service as IAddAppService);\n        this.setState({selectedService: undefined});\n    };\n\n    private onRemove = (services: string[]): void => {\n        this.props.onRemoveAppServices(services);\n    };\n\n    private onDeleteSuccess = (services: string[]): void => {\n        if (this.props.app?.name) {\n            const {name} = this.props.app;\n            this.props.removeAppServices(name, services);\n        }\n    };\n\n    private onDeleteFailure = (reason: string, services?: string[]): void =>\n        super.toast(`Unable to remove ${services?.length === 1 ? services[0] : 'services'} from <b>${this.props.app?.name}</b> app`, 10000, reason, true);\n\n    private getSelectableServicesNames = () => {\n        const {appServices, services, unsavedServices} = this.props;\n        const nonSystemServices = Object.entries(services)\n            .filter(([_, value]) => value.serviceType.toLowerCase() !== 'system')\n            .map(([key, _]) => key);\n        const serviceNames = appServices.map(appService => appService.service.serviceName);\n        const unsavedServicesNames = unsavedServices.map(service => service.service.serviceName);\n        return nonSystemServices.filter(name => !serviceNames.includes(name) && !unsavedServicesNames.includes(name));\n    };\n\n    private addModal = () =>\n        <>\n            <Field key='launchOrder' id={'launchOrder'} label='launchOrder' type={'number'}\n                   number={{min: 0, max: 2147483647}}/>\n        </>;\n\n    private getModalFields = (): IFields => (\n        {\n            launchOrder: {\n                id: 'launchOrder',\n                label: 'launchOrder',\n                validation: {rule: requiredAndNumberAndMinAndMax, args: [0, 2147483647]}\n            }\n        }\n    );\n\n    private getModalValues = (): IValues => (\n        {\n            launchOrder: 0\n        }\n    );\n\n    private onDropdownSelect = (selectedService: string): void => {\n        this.setState({selectedService: selectedService});\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: ServiceAppListProps): StateToProps {\n    const appName = ownProps.app?.name;\n    const app = appName && state.entities.apps.data[appName];\n    const appServices = app && app.services;\n    return {\n        isLoading: state.entities.apps.isLoadingServices,\n        error: state.entities.apps.loadServicesError,\n        services: state.entities.services.data,\n        appServices: (appServices && Object.values(appServices)) || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadServices,\n        loadAppServices,\n        removeAppServices,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppServiceList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport LocationMap from \"../../../components/map/LocationMap\";\nimport Dialog from \"../../../components/dialogs/Dialog\";\nimport {IMarker} from \"../../../components/map/Marker\";\n\ninterface Props {\n    launchAppCallback: (position: IMarker) => void;\n}\n\ninterface State {\n    selectedPosition?: IMarker\n}\n\nexport default class LaunchAppDialog extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {};\n    }\n\n    private onSelectCoordinates = (marker: IMarker): void =>\n        this.setState({selectedPosition: marker});\n\n    private onDeselectCoordinates = (marker: IMarker): void =>\n        this.setState({selectedPosition: undefined});\n\n    private launchAppConfirm = () => {\n        if (!this.state.selectedPosition) {\n            M.toast({html: '<div class=\"red-text\">Error</div><div style=\"margin-left: 3px\"> - location not selected</div>'});\n        } else {\n            this.props.launchAppCallback(this.state.selectedPosition);\n        }\n    }\n\n    public render() {\n        const location = this.state.selectedPosition ? [this.state.selectedPosition] : [];\n        return <Dialog id={'launch-app-modal'}\n                       title={'Select location'}\n                       fullscreen={true}\n                       locked={true}\n                       confirmCallback={this.launchAppConfirm}>\n            <LocationMap onSelect={this.onSelectCoordinates} onDeselect={this.onDeselectCoordinates}\n                         locations={location}\n                         hover clickHighlight/>\n        </Dialog>;\n    }\n}","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport {IApp} from \"./App\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport styles from \"../../../components/list/ListItem.module.css\";\nimport ControlledList from \"../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {loadAppRules, loadRulesApp, removeAppRules} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport {IRuleApp} from \"../rules/apps/RuleApp\";\nimport {Link} from \"react-router-dom\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    rules: { [key: string]: IRuleApp },\n    rulesName: string[];\n}\n\ninterface DispatchToProps {\n    loadRulesApp: (name?: string) => any;\n    loadAppRules: (name: string) => void;\n    removeAppRules: (name: string, rules: string[]) => void;\n}\n\ninterface AppRuleListProps {\n    isLoadingApp: boolean;\n    loadAppError?: string | null;\n    app?: IApp | Partial<IApp> | null;\n    unsavedRules: string[];\n    onAddAppRule: (rule: string) => void;\n    onRemoveAppRules: (rule: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & AppRuleListProps;\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass AppRuleList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadRulesApp();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.app?.name && this.props.app?.name) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList isLoading={!isNew ? this.props.isLoadingApp || this.props.isLoading : undefined}\n                               error={!isNew ? this.props.loadAppError || this.props.error : undefined}\n                               emptyMessage={`Rules list is empty`}\n                               data={this.props.rulesName}\n                               dropdown={{\n                                   id: 'rules',\n                                   title: 'Add rule',\n                                   empty: 'No rules to add',\n                                   data: this.getSelectableRules()\n                               }}\n                               show={this.rule}\n                               onAdd={this.onAdd}\n                               onRemove={this.onRemove}\n                               onDelete={{\n                                   url: `apps/${this.props.app?.name}/rules`,\n                                   successCallback: this.onDeleteSuccess,\n                                   failureCallback: this.onDeleteFailure\n                               }}\n                               entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.app?.name) {\n            const {name} = this.props.app;\n            this.props.loadAppRules(name);\n        }\n    };\n\n    private isNew = () =>\n        this.props.app?.name === undefined;\n\n    private rule = (index: number, rule: string, separate: boolean, checked: boolean,\n                    handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedRules.includes(rule);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${styles.linkedItemContent}`}>\n                    <label>\n                        <input id={rule}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                 {rule}\n               </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/rules/apps/${rule}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (rule: string): void =>\n        this.props.onAddAppRule(rule);\n\n    private onRemove = (rules: string[]) =>\n        this.props.onRemoveAppRules(rules);\n\n    private onDeleteSuccess = (rules: string[]): void => {\n        if (this.props.app?.name) {\n            const {name} = this.props.app;\n            this.props.removeAppRules(name, rules);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to delete rule`, 10000, reason, true);\n\n    private getSelectableRules = () => {\n        const {rules, rulesName, unsavedRules} = this.props;\n        return Object.keys(rules).filter(name => !rulesName.includes(name) && !unsavedRules.includes(name));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: AppRuleListProps): StateToProps {\n    const name = ownProps.app?.name;\n    const app = name && state.entities.apps.data[name];\n    const rulesName = app && app.appRules;\n    return {\n        isLoading: state.entities.apps.isLoadingRules,\n        error: state.entities.apps.loadRulesError,\n        rules: Object.entries(state.entities.rules.apps.data)\n            .filter(([_, rule]) => !rule.generic)\n            .map(([key, value]) => ({[key]: value}))\n            .reduce((fields, field) => {\n                for (let key in field) {\n                    fields[key] = field[key];\n                }\n                return fields;\n            }, {}),\n        rulesName: rulesName || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadRulesApp,\n        loadAppRules,\n        removeAppRules,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppRuleList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport {IApp} from \"./App\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport styles from \"../../../components/list/ListItem.module.css\";\nimport ControlledList from \"../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {loadAppSimulatedMetrics, loadSimulatedAppMetrics, removeAppSimulatedMetrics} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {ISimulatedAppMetric} from \"../metrics/apps/SimulatedAppMetric\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    simulatedMetrics: { [key: string]: ISimulatedAppMetric },\n    simulatedMetricsName: string[];\n}\n\ninterface DispatchToProps {\n    loadSimulatedAppMetrics: (name?: string) => any;\n    loadAppSimulatedMetrics: (name: string) => void;\n    removeAppSimulatedMetrics: (name: string, simulatedMetrics: string[]) => void;\n}\n\ninterface AppSimulatedMetricListProps {\n    isLoadingApp: boolean;\n    loadAppError?: string | null;\n    app?: IApp | Partial<IApp> | null;\n    unsavedSimulatedMetrics: string[];\n    onAddSimulatedAppMetric: (simulatedMetric: string) => void;\n    onRemoveSimulatedAppMetrics: (simulatedMetric: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & AppSimulatedMetricListProps;\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass AppSimulatedMetricList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadSimulatedAppMetrics();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.app?.name && this.props.app?.name) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList isLoading={!isNew ? this.props.isLoadingApp || this.props.isLoading : undefined}\n                               error={!isNew ? this.props.loadAppError || this.props.error : undefined}\n                               emptyMessage={`Simulated metrics list is empty`}\n                               data={this.props.simulatedMetricsName}\n                               dropdown={{\n                                   id: 'simulatedMetrics',\n                                   title: 'Add simulated metric',\n                                   empty: 'No simulated metrics to add',\n                                   data: this.getSelectableSimulatedMetrics()\n                               }}\n                               show={this.simulatedMetric}\n                               onAdd={this.onAdd}\n                               onRemove={this.onRemove}\n                               onDelete={{\n                                   url: `apps/${this.props.app?.name}/simulated-metrics`,\n                                   successCallback: this.onDeleteSuccess,\n                                   failureCallback: this.onDeleteFailure\n                               }}\n                               entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.app?.name) {\n            const {name} = this.props.app;\n            this.props.loadAppSimulatedMetrics(name);\n        }\n    };\n\n    private isNew = () =>\n        this.props.app?.name === undefined;\n\n    private simulatedMetric = (index: number, simulatedMetric: string, separate: boolean, checked: boolean,\n                               handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedSimulatedMetrics.includes(simulatedMetric);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${styles.linkedItemContent}`}>\n                    <label>\n                        <input id={simulatedMetric}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                 {simulatedMetric}\n               </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/simulated-metrics/apps/${simulatedMetric}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (simulatedMetric: string): void =>\n        this.props.onAddSimulatedAppMetric(simulatedMetric);\n\n    private onRemove = (simulatedMetrics: string[]) =>\n        this.props.onRemoveSimulatedAppMetrics(simulatedMetrics);\n\n    private onDeleteSuccess = (simulatedMetrics: string[]): void => {\n        if (this.props.app?.name) {\n            const {name} = this.props.app;\n            this.props.removeAppSimulatedMetrics(name, simulatedMetrics);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to delete simulated metric`, 10000, reason, true);\n\n    private getSelectableSimulatedMetrics = () => {\n        const {simulatedMetrics, simulatedMetricsName, unsavedSimulatedMetrics} = this.props;\n        return Object.keys(simulatedMetrics).filter(name => !simulatedMetricsName.includes(name) && !unsavedSimulatedMetrics.includes(name));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: AppSimulatedMetricListProps): StateToProps {\n    const name = ownProps.app?.name;\n    const app = name && state.entities.apps.data[name];\n    const simulatedMetricsName = app && app.appSimulatedMetrics;\n    return {\n        isLoading: state.entities.apps.isLoadingSimulatedMetrics,\n        error: state.entities.apps.loadSimulatedMetricsError,\n        simulatedMetrics: Object.entries(state.entities.simulatedMetrics.apps.data)\n            .map(([key, value]) => ({[key]: value}))\n            .reduce((fields, field) => {\n                for (let key in field) {\n                    fields[key] = field[key];\n                }\n                return fields;\n            }, {}),\n        simulatedMetricsName: simulatedMetricsName || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadSimulatedAppMetrics,\n        loadAppSimulatedMetrics,\n        removeAppSimulatedMetrics,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppSimulatedMetricList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport IDatabaseData from \"../../../components/IDatabaseData\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport {RouteComponentProps} from \"react-router\";\nimport Form, {\n    ICustomButton,\n    IFields,\n    IFormLoading,\n    maxSizeAndTrimmed,\n    requiredAndTrimmed,\n} from \"../../../components/form/Form\";\nimport Field from \"../../../components/form/Field\";\nimport LoadingSpinner from \"../../../components/list/LoadingSpinner\";\nimport {Error} from \"../../../components/errors/Error\";\nimport React from \"react\";\nimport Tabs, {Tab} from \"../../../components/tabs/Tabs\";\nimport MainLayout from \"../../../views/mainLayout/MainLayout\";\nimport {ReduxState} from \"../../../reducers\";\nimport {\n    addApp,\n    addAppRules,\n    addAppServices,\n    addAppSimulatedMetrics,\n    loadApps,\n    loadRegions,\n    updateApp\n} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport AppServicesList, {IAddAppService, IAppService} from \"./AppServicesList\";\nimport {IReply, postData} from \"../../../utils/api\";\nimport UnsavedChanged from \"../../../components/form/UnsavedChanges\";\nimport {normalize} from \"normalizr\";\nimport {Schemas} from \"../../../middleware/api\";\nimport {isNew} from \"../../../utils/router\";\nimport {IRegion} from \"../regions/Region\";\nimport formStyles from \"../../../components/form/Form.module.css\";\nimport {IContainer} from \"../containers/Container\";\nimport LaunchAppDialog from \"./LaunchAppDialog\";\nimport {IMarker} from \"../../../components/map/Marker\";\nimport GenericServiceRuleList from \"../services/GenericServiceRuleList\";\nimport GenericSimulatedServiceMetricList from \"../services/GenericSimulatedServiceMetricList\";\nimport AppRuleList from \"./AppRuleList\";\nimport AppSimulatedMetricList from \"./AppSimulatedMetricList\";\n\nexport interface IApp extends IDatabaseData {\n    name: string;\n    description?: string;\n    services?: { [key: string]: IAppService }\n    appRules?: string[];\n    appSimulatedMetrics?: string[];\n}\n\nconst buildNewApp = (): Partial<IApp> => ({\n    name: undefined,\n    description: undefined,\n});\n\ninterface ILaunchApp {\n    [key: string]: IContainer[]\n}\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    app: Partial<IApp>;\n    formApp?: Partial<IApp>;\n    regions: { [key: string]: IRegion };\n}\n\ninterface DispatchToProps {\n    loadApps: (name: string) => void;\n    loadRegions: () => void;\n    addApp: (app: IApp) => void;\n    updateApp: (previousApp: IApp, currentApp: IApp) => void;\n    addAppServices: (appName: string, appServices: IAddAppService[]) => void;\n    addAppRules: (name: string, rules: string[]) => void;\n    addAppSimulatedMetrics: (name: string, simulatedMetrics: string[]) => void;\n}\n\ninterface MatchParams {\n    name: string;\n}\n\ninterface LocationState {\n    data: IApp,\n    selected: 'app' | 'services' | 'rules' | 'genericServiceRules' | 'simulatedMetrics' | 'genericSimulatedMetrics';\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ninterface State {\n    app?: IApp,\n    formApp?: IApp,\n    loading: IFormLoading,\n    unsavedServices: IAddAppService[],\n    unsavedRules: string[],\n    unsavedSimulatedMetrics: string[],\n}\n\nclass App extends BaseComponent<Props, State> {\n\n    state: State = {\n        loading: undefined,\n        unsavedServices: [],\n        unsavedRules: [],\n        unsavedSimulatedMetrics: [],\n    };\n    private mounted = false;\n\n    public componentDidMount(): void {\n        this.props.loadRegions();\n        this.loadApp();\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                {this.shouldShowSaveButton() && !isNew(this.props.location.search) && <UnsavedChanged/>}\n                <div className='container'>\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private loadApp = () => {\n        if (!isNew(this.props.location.search)) {\n            const appName = this.props.match.params.name;\n            this.props.loadApps(appName);\n        }\n    };\n\n    private getApp = () =>\n        this.props.app || this.state.app;\n\n    private getFormApp = () =>\n        this.props.formApp || this.state.formApp;\n\n    private isNew = () =>\n        isNew(this.props.location.search);\n\n    private onPostSuccess = (reply: IReply<IApp>): void => {\n        const app = reply.data;\n        super.toast(`<span class='green-text'>App ${this.mounted ? `<b class='white-text'>${app.name}</b>` : `<a href='/apps/${app.name}'><b>${app.name}</b></a>`} saved</span>`);\n        this.props.addApp(app);\n        this.saveEntities(app);\n        if (this.mounted) {\n            this.updateApp(app);\n            this.props.history.replace(app.name);\n        }\n    };\n\n    private onPostFailure = (reason: string, app: IApp): void =>\n        super.toast(`Unable to save app <b>${app.name}</b>`, 10000, reason, true);\n\n    private onPutSuccess = (reply: IReply<IApp>): void => {\n        const app = reply.data;\n        super.toast(`<span class='green-text'>Changes to ${this.mounted ? `<b class='white-text'>${app.name}</b>` : `<a href='/apps/${app.name}'><b>${app.name}</b></a>`} app have been saved</span>`);\n        this.saveEntities(app);\n        const previousApp = this.getApp();\n        if (previousApp.id) {\n            this.props.updateApp(previousApp as IApp, app);\n        }\n        if (this.mounted) {\n            this.updateApp(app);\n            this.props.history.replace(app.name);\n        }\n    };\n\n    private onPutFailure = (reason: string, app: IApp): void =>\n        super.toast(`Unable to update app ${this.mounted ? `<b class='white-text'>${app.name}</b>` : `<a href='/apps/${app.name}'><b>${app.name}</b></a>`}`, 10000, reason, true);\n\n    private onDeleteSuccess = (app: IApp): void => {\n        super.toast(`<span class='green-text'>App <b class='white-text'>${app.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.props.history.push(`/apps`);\n        }\n    };\n\n    private onDeleteFailure = (reason: string, app: IApp): void =>\n        super.toast(`Unable to delete app ${this.mounted ? `<b>${app.name}</b>` : `<a href='/apps/${app.name}'><b>${app.name}</b></a>`}`, 10000, reason, true);\n\n    private shouldShowSaveButton = () =>\n        !!this.state.unsavedServices.length\n        || !!this.state.unsavedRules.length\n        || !!this.state.unsavedSimulatedMetrics.length;\n\n    private saveEntities = (app: IApp) => {\n        this.saveAppServices(app);\n        this.saveAppRules(app);\n        this.saveAppSimulatedMetrics(app);\n    };\n\n    private addAppService = (service: IAddAppService): void => {\n        this.setState({\n            unsavedServices: this.state.unsavedServices.concat(service)\n        });\n    };\n\n    private removeAppServices = (services: string[]): void => {\n        this.setState({\n            unsavedServices: this.state.unsavedServices.filter(service => !services.includes(service.service.serviceName))\n        });\n    };\n\n    private saveAppServices = (app: IApp): void => {\n        const {unsavedServices} = this.state;\n        if (unsavedServices.length) {\n            postData(`apps/${app.name}/services`, unsavedServices,\n                () => this.onSaveServicesSuccess(app),\n                (reason) => this.onSaveServicesFailure(app, reason));\n        }\n    };\n\n    private onSaveServicesSuccess = (app: IApp): void => {\n        this.props.addAppServices(app.name, this.state.unsavedServices);\n        if (this.mounted) {\n            this.setState({unsavedServices: []});\n        }\n    };\n\n    private onSaveServicesFailure = (app: IApp, reason: string): void =>\n        super.toast(`Unable to save services of app ${this.mounted ? `<b>${app.name}</b>` : `<a href='/apps/${app.name}'><b>${app.name}</b></a>`}`, 10000, reason, true);\n\n    private addAppRule = (rule: string): void => {\n        this.setState({\n            unsavedRules: this.state.unsavedRules.concat(rule)\n        });\n    };\n\n    private removeAppRules = (rules: string[]): void => {\n        this.setState({\n            unsavedRules: this.state.unsavedRules.filter(rule => !rules.includes(rule))\n        });\n    };\n\n    private saveAppRules = (app: IApp): void => {\n        const {unsavedRules} = this.state;\n        if (unsavedRules.length) {\n            postData(`apps/${app.name}/rules`, unsavedRules,\n                () => this.onSaveRulesSuccess(app),\n                (reason) => this.onSaveRulesFailure(app, reason));\n        }\n    };\n\n    private onSaveRulesSuccess = (app: IApp): void => {\n        this.props.addAppRules(app.name, this.state.unsavedRules);\n        if (this.mounted) {\n            this.setState({unsavedRules: []});\n        }\n    };\n\n    private onSaveRulesFailure = (app: IApp, reason: string): void =>\n        super.toast(`Unable to save rules of app ${this.mounted ? `<b>${app.name}</b>` : `<a href='/apps/${app.name}'><b>${app.name}</b></a>`}`, 10000, reason, true);\n\n    private addAppSimulatedMetric = (simulatedMetric: string): void => {\n        this.setState({\n            unsavedSimulatedMetrics: this.state.unsavedSimulatedMetrics.concat(simulatedMetric)\n        });\n    };\n\n    private removeAppSimulatedMetrics = (simulatedMetrics: string[]): void => {\n        this.setState({\n            unsavedSimulatedMetrics: this.state.unsavedSimulatedMetrics.filter(metric => !simulatedMetrics.includes(metric))\n        });\n    };\n\n    private saveAppSimulatedMetrics = (app: IApp): void => {\n        const {unsavedSimulatedMetrics} = this.state;\n        if (unsavedSimulatedMetrics.length) {\n            postData(`apps/${app.name}/simulated-metrics`, unsavedSimulatedMetrics,\n                () => this.onSaveSimulatedMetricsSuccess(app),\n                (reason) => this.onSaveSimulatedMetricsFailure(app, reason));\n        }\n    };\n\n    private onSaveSimulatedMetricsSuccess = (app: IApp): void => {\n        this.props.addAppSimulatedMetrics(app.name, this.state.unsavedSimulatedMetrics);\n        if (this.mounted) {\n            this.setState({unsavedSimulatedMetrics: []});\n        }\n    };\n\n    private onSaveSimulatedMetricsFailure = (app: IApp, reason: string): void =>\n        super.toast(`Unable to save simulated metrics of app ${this.mounted ? `<b>${app.name}</b>` : `<a href='/apps/${app.name}'><b>${app.name}</b></a>`}`, 10000, reason, true);\n\n    private launchButton = (): ICustomButton[] => {\n        const buttons: ICustomButton[] = [];\n        if (!isNew(this.props.location.search)) {\n            buttons.push({\n                button:\n                    <>\n                        <button\n                            className={`modal-trigger btn-flat btn-small waves-effect waves-light blue-text ${formStyles.formButton}`}\n                            data-target={'launch-app-modal'}>\n                            Launch\n                        </button>\n                    </>\n            });\n        }\n        return buttons;\n    };\n\n    private launchApp = (position: IMarker) => {\n        const app = this.getApp();\n        const url = `apps/${app.name}/launch`;\n        this.setState({loading: {method: 'post', url: url}});\n        postData(url, position,\n            (reply: IReply<ILaunchApp>) => this.onLaunchSuccess(reply.data),\n            (reason: string) => this.onLaunchFailure(reason, app));\n    };\n\n    private onLaunchSuccess = (launchApp: ILaunchApp) => {\n        super.toast(`<span><span class='green-text'>Successfully launched services<br/>\n        </span>${Object.entries(launchApp)\n                .map(([service, containers]) => `<b>${service}</b> ${containers.map(c =>\n                    `<a href='/containers/${c.containerId}'>${c.containerId}</a>`).join(', ')}`).join('<br/>')}</span>`,\n            20000);\n        if (this.mounted) {\n            this.setState({loading: undefined});\n        }\n    };\n\n    private onLaunchFailure = (reason: string, app: Partial<IApp>) => {\n        super.toast(`Failed to launch services of \n        ${this.mounted ? `<b>${app.name}</b>` : `<a href='/apps/${app.name}'><b>${app.name}</b></a>`} app`,\n            10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: undefined});\n        }\n    };\n\n    private updateApp = (app: IApp) => {\n        app = Object.values(normalize(app, Schemas.APP).entities.apps || {})[0];\n        const formApp = {...app};\n        removeFields(formApp);\n        this.setState({app: app, formApp: formApp, loading: undefined});\n    };\n\n    private getFields = (app: Partial<IApp>): IFields =>\n        Object.entries(app).map(([key, _]) => {\n            return {\n                [key]: {\n                    id: key,\n                    label: key,\n                    validation: key === 'description'\n                        ? {rule: maxSizeAndTrimmed, args: 1024}\n                        : {rule: requiredAndTrimmed}\n                }\n            };\n        }).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});\n\n\n    private app = () => {\n        const {isLoading, error} = this.props;\n        const app = this.getApp();\n        const formApp = this.getFormApp();\n        // @ts-ignore\n        const appKey: (keyof IApp) = formApp && Object.keys(formApp)[0];\n        const isNewApp = this.isNew();\n        return (\n            <>\n                {!isNewApp && isLoading && <LoadingSpinner/>}\n                {!isNewApp && !isLoading && error && <Error message={error}/>}\n                {(isNewApp || !isLoading) && (isNewApp || !error) && formApp && (\n                    <>\n                        {/*@ts-ignore*/}\n                        <Form id={appKey}\n                              fields={this.getFields(formApp)}\n                              values={app}\n                              isNew={isNew(this.props.location.search)}\n                              showSaveButton={this.shouldShowSaveButton()}\n                              post={{\n                                  url: 'apps',\n                                  successCallback: this.onPostSuccess,\n                                  failureCallback: this.onPostFailure\n                              }}\n                              put={{\n                                  url: `apps/${app.name}`,\n                                  successCallback: this.onPutSuccess,\n                                  failureCallback: this.onPutFailure\n                              }}\n                              delete={{\n                                  url: `apps/${app.name}`,\n                                  successCallback: this.onDeleteSuccess,\n                                  failureCallback: this.onDeleteFailure\n                              }}\n                              customButtons={this.launchButton()}\n                              saveEntities={this.saveEntities}\n                              loading={this.state.loading}>\n                            {Object.keys(formApp).map((key, index) =>\n                                key === 'description'\n                                    ? <Field key={index}\n                                             id={key}\n                                             type={'multilinetext'}\n                                             label={key}/>\n                                    : <Field key={index}\n                                             id={key}\n                                             label={key}/>\n                            )}\n                        </Form>\n                        <LaunchAppDialog launchAppCallback={this.launchApp}/>\n                    </>\n                )}\n            </>\n        )\n    };\n\n    private services = (): JSX.Element =>\n        <AppServicesList isLoadingApp={this.props.isLoading}\n                         loadAppError={!this.isNew() ? this.props.error : undefined}\n                         app={this.getApp()}\n                         unsavedServices={this.state.unsavedServices}\n                         onAddAppService={this.addAppService}\n                         onRemoveAppServices={this.removeAppServices}/>;\n\n    private rules = (): JSX.Element =>\n        <AppRuleList isLoadingApp={this.props.isLoading}\n                     loadAppError={!this.isNew() ? this.props.error : undefined}\n                     app={this.getApp()}\n                     unsavedRules={this.state.unsavedRules}\n                     onAddAppRule={this.addAppRule}\n                     onRemoveAppRules={this.removeAppRules}/>;\n\n    private genericRules = (): JSX.Element =>\n        <GenericServiceRuleList/>;\n\n    private simulatedMetrics = (): JSX.Element =>\n        <AppSimulatedMetricList isLoadingApp={this.props.isLoading}\n                                loadAppError={!this.isNew() ? this.props.error : undefined}\n                                app={this.getApp()}\n                                unsavedSimulatedMetrics={this.state.unsavedSimulatedMetrics}\n                                onAddSimulatedAppMetric={this.addAppSimulatedMetric}\n                                onRemoveSimulatedAppMetrics={this.removeAppSimulatedMetrics}/>;\n\n    private genericSimulatedMetrics = (): JSX.Element =>\n        <GenericSimulatedServiceMetricList/>;\n\n    private tabs = (): Tab[] => [\n        {\n            title: 'App',\n            id: 'app',\n            content: () => this.app(),\n            active: this.props.location.state?.selected === 'app'\n        },\n        {\n            title: 'Services',\n            id: 'services',\n            content: () => this.services(),\n            active: this.props.location.state?.selected === 'services',\n        },\n        {\n            title: 'Generic rules',\n            id: 'genericAppRules',\n            content: () => this.genericRules(),\n            active: this.props.location.state?.selected === 'genericServiceRules'\n        },\n        {\n            title: 'Simulated metrics',\n            id: 'simulatedMetrics',\n            content: () => this.simulatedMetrics(),\n            active: this.props.location.state?.selected === 'simulatedMetrics'\n        },\n        {\n            title: 'Generic simulated metrics',\n            id: 'genericSimulatedMetrics',\n            content: () => this.genericSimulatedMetrics(),\n            active: this.props.location.state?.selected === 'genericSimulatedMetrics'\n        }\n    ];\n\n}\n\nfunction removeFields(app: Partial<IApp>) {\n    delete app[\"id\"];\n    delete app[\"services\"];\n    delete app[\"appRules\"];\n    delete app[\"appSimulatedMetrics\"];\n}\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.apps.isLoadingApps;\n    const error = state.entities.apps.loadAppsError;\n    const name = props.match.params.name;\n    const app = isNew(props.location.search) ? buildNewApp() : state.entities.apps.data[name];\n    let formApp;\n    if (app) {\n        formApp = {...app};\n        removeFields(formApp);\n    }\n    return {\n        isLoading,\n        error,\n        app,\n        formApp,\n        regions: state.entities.regions.data\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadApps,\n    loadRegions,\n    addApp,\n    updateApp,\n    addAppServices,\n    addAppRules,\n    addAppSimulatedMetrics,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {IRuleHost} from \"./RuleHost\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport ListItem from \"../../../../components/list/ListItem\";\nimport styles from \"../../../../components/list/ListItem.module.css\";\nimport React from \"react\";\nimport ControlledList from \"../../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {loadConditions, loadRuleHostConditions, removeRuleHostConditions} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {IRuleCondition} from \"../conditions/RuleCondition\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    ruleConditions: string[];\n    conditions: { [key: string]: IRuleCondition };\n}\n\ninterface DispatchToProps {\n    loadConditions: () => void;\n    loadRuleHostConditions: (ruleName: string) => void;\n    removeRuleHostConditions: (ruleName: string, conditions: string[]) => void;\n}\n\ninterface HostRuleConditionListProps {\n    isLoadingHostRule: boolean;\n    loadHostRuleError?: string | null;\n    ruleHost: IRuleHost | Partial<IRuleHost> | null;\n    unsavedConditions: string[];\n    onAddRuleCondition: (condition: string) => void;\n    onRemoveRuleConditions: (condition: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & HostRuleConditionListProps\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass RuleHostConditionList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadConditions();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.ruleHost?.name && this.props.ruleHost?.name) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList isLoading={!isNew ? this.props.isLoadingHostRule || this.props.isLoading : undefined}\n                               error={!isNew ? this.props.loadHostRuleError || this.props.error : undefined}\n                               emptyMessage={`Conditions list is empty`}\n                               data={this.props.ruleConditions}\n                               dropdown={{\n                                   id: 'conditions',\n                                   title: 'Add condition',\n                                   empty: 'No conditions to add',\n                                   data: this.getSelectableConditionNames()\n                               }}\n                               show={this.condition}\n                               onAdd={this.onAdd}\n                               onRemove={this.onRemove}\n                               onDelete={{\n                                   url: `rules/hosts/${this.props.ruleHost?.name}/conditions`,\n                                   successCallback: this.onDeleteSuccess,\n                                   failureCallback: this.onDeleteFailure\n                               }}\n                               entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.ruleHost?.name) {\n            const {name} = this.props.ruleHost;\n            this.props.loadRuleHostConditions(name);\n        }\n    };\n\n    private isNew = () =>\n        this.props.ruleHost?.name === undefined;\n\n    private condition = (index: number, condition: string, separate: boolean, checked: boolean,\n                         handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedConditions.includes(condition);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={styles.linkedItemContent}>\n                    <label>\n                        <input id={condition}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n               <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                 {condition}\n               </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/rules/conditions/${condition}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (condition: string): void =>\n        this.props.onAddRuleCondition(condition);\n\n    private onRemove = (conditions: string[]) =>\n        this.props.onRemoveRuleConditions(conditions);\n\n    private onDeleteSuccess = (conditions: string[]): void => {\n        if (this.props.ruleHost?.name) {\n            const {name} = this.props.ruleHost;\n            this.props.removeRuleHostConditions(name, conditions);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to remove condition`, 10000, reason, true);\n\n    private getSelectableConditionNames = () => {\n        const {conditions, ruleConditions, unsavedConditions} = this.props;\n        return Object.keys(conditions)\n            .filter(condition => !ruleConditions.includes(condition) && !unsavedConditions.includes(condition));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: HostRuleConditionListProps): StateToProps {\n    const ruleName = ownProps.ruleHost?.name;\n    const rule = ruleName && state.entities.rules.hosts.data[ruleName];\n    const ruleConditions = rule && rule.conditions;\n    return {\n        isLoading: state.entities.rules.hosts.isLoadingConditions,\n        error: state.entities.rules.hosts.loadConditionsError,\n        ruleConditions: ruleConditions || [],\n        conditions: state.entities.rules.conditions.data,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadRuleHostConditions,\n        removeRuleHostConditions,\n        loadConditions,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RuleHostConditionList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {IRuleHost} from \"./RuleHost\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport ListItem from \"../../../../components/list/ListItem\";\nimport styles from \"../../../../components/list/ListItem.module.css\";\nimport React from \"react\";\nimport ControlledList from \"../../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {loadCloudHosts, loadRuleHostCloudHosts, removeRuleHostCloudHosts,} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {ICloudHost} from \"../../hosts/cloud/CloudHost\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    ruleCloudHosts: string[];\n    cloudHosts: { [key: string]: ICloudHost };\n}\n\ninterface DispatchToProps {\n    loadCloudHosts: () => void;\n    loadRuleHostCloudHosts: (ruleName: string) => void;\n    removeRuleHostCloudHosts: (ruleName: string, cloudHosts: string[]) => void;\n}\n\ninterface HostRuleCloudHostListProps {\n    isLoadingHostRule: boolean;\n    loadHostRuleError?: string | null;\n    ruleHost: IRuleHost | Partial<IRuleHost> | null;\n    unsavedCloudHosts: string[];\n    onAddRuleCloudHost: (cloudHost: string) => void;\n    onRemoveRuleCloudHosts: (cloudHost: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & HostRuleCloudHostListProps\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass HostRuleCloudHostList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadCloudHosts();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.ruleHost?.name && this.props.ruleHost?.name) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList isLoading={!isNew ? this.props.isLoadingHostRule || this.props.isLoading : undefined}\n                               error={!isNew ? this.props.loadHostRuleError || this.props.error : undefined}\n                               emptyMessage={`Cloud hosts list is empty`}\n                               data={this.props.ruleCloudHosts}\n                               dropdown={{\n                                   id: 'cloudHosts',\n                                   title: 'Add cloud instance',\n                                   empty: 'No cloud instances to add',\n                                   data: this.getSelectableCloudHostNames()\n                               }}\n                               show={this.cloudHost}\n                               onAdd={this.onAdd}\n                               onRemove={this.onRemove}\n                               onDelete={{\n                                   url: `rules/hosts/${this.props.ruleHost?.name}/cloud-hosts`,\n                                   successCallback: this.onDeleteSuccess,\n                                   failureCallback: this.onDeleteFailure\n                               }}\n                               entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.ruleHost?.name) {\n            const {name} = this.props.ruleHost;\n            this.props.loadRuleHostCloudHosts(name);\n        }\n    };\n\n    private isNew = () =>\n        this.props.ruleHost?.name === undefined;\n\n    private cloudHost = (index: number, cloudHost: string, separate: boolean, checked: boolean,\n                         handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedCloudHosts.includes(cloudHost);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={styles.linkedItemContent}>\n                    <label>\n                        <input id={cloudHost}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n               <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                 {cloudHost}\n               </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/hosts/cloud/${cloudHost}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (cloudHost: string): void =>\n        this.props.onAddRuleCloudHost(cloudHost);\n\n    private onRemove = (cloudHosts: string[]) =>\n        this.props.onRemoveRuleCloudHosts(cloudHosts);\n\n    private onDeleteSuccess = (cloudHosts: string[]): void => {\n        if (this.props.ruleHost?.name) {\n            const {name} = this.props.ruleHost;\n            this.props.removeRuleHostCloudHosts(name, cloudHosts);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to remove cloud host`, 10000, reason, true);\n\n    private getSelectableCloudHostNames = () => {\n        const {cloudHosts, ruleCloudHosts, unsavedCloudHosts} = this.props;\n        return Object.keys(cloudHosts)\n            .filter(cloudHost => !ruleCloudHosts.includes(cloudHost) && !unsavedCloudHosts.includes(cloudHost));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: HostRuleCloudHostListProps): StateToProps {\n    const ruleName = ownProps.ruleHost?.name;\n    const rule = ruleName && state.entities.rules.hosts.data[ruleName];\n    const ruleCloudHosts = rule && rule.cloudHosts;\n    return {\n        isLoading: state.entities.rules.hosts.isLoadingCloudHosts,\n        error: state.entities.rules.hosts.loadCloudHostsError,\n        ruleCloudHosts: ruleCloudHosts || [],\n        cloudHosts: state.entities.hosts.cloud.data,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadRuleHostCloudHosts,\n        removeRuleHostCloudHosts,\n        loadCloudHosts,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HostRuleCloudHostList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {IRuleHost} from \"./RuleHost\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport ListItem from \"../../../../components/list/ListItem\";\nimport styles from \"../../../../components/list/ListItem.module.css\";\nimport React from \"react\";\nimport ControlledList from \"../../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {loadEdgeHosts, loadRuleHostEdgeHosts, removeRuleHostEdgeHosts,} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {IEdgeHost} from \"../../hosts/edge/EdgeHost\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    ruleEdgeHosts: string[];\n    edgeHosts: { [key: string]: IEdgeHost };\n}\n\ninterface DispatchToProps {\n    loadEdgeHosts: () => void;\n    loadRuleHostEdgeHosts: (ruleName: string) => void;\n    removeRuleHostEdgeHosts: (ruleName: string, edgeHosts: string[]) => void;\n}\n\ninterface HostRuleEdgeHostListProps {\n    isLoadingHostRule: boolean;\n    loadHostRuleError?: string | null;\n    ruleHost: IRuleHost | Partial<IRuleHost> | null;\n    unsavedEdgeHosts: string[];\n    onAddRuleEdgeHost: (edgeHost: string) => void;\n    onRemoveRuleEdgeHosts: (edgeHost: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & HostRuleEdgeHostListProps\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass HostRuleEdgeHostList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadEdgeHosts();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.ruleHost?.name && this.props.ruleHost?.name) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList isLoading={!isNew ? this.props.isLoadingHostRule || this.props.isLoading : undefined}\n                               error={!isNew ? this.props.loadHostRuleError || this.props.error : undefined}\n                               emptyMessage={`Edge hosts list is empty`}\n                               data={this.props.ruleEdgeHosts}\n                               dropdown={{\n                                   id: 'edgeHosts',\n                                   title: 'Add edge host',\n                                   empty: 'No edge hosts to add',\n                                   data: this.getSelectableEdgeHostNames()\n                               }}\n                               show={this.edgeHost}\n                               onAdd={this.onAdd}\n                               onRemove={this.onRemove}\n                               onDelete={{\n                                   url: `rules/hosts/${this.props.ruleHost?.name}/edge-hosts`,\n                                   successCallback: this.onDeleteSuccess,\n                                   failureCallback: this.onDeleteFailure\n                               }}\n                               entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.ruleHost?.name) {\n            const {name} = this.props.ruleHost;\n            this.props.loadRuleHostEdgeHosts(name);\n        }\n    };\n\n    private isNew = () =>\n        this.props.ruleHost?.name === undefined;\n\n    private edgeHost = (index: number, edgeHost: string, separate: boolean, checked: boolean,\n                        handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedEdgeHosts.includes(edgeHost);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={styles.linkedItemContent}>\n                    <label>\n                        <input id={edgeHost}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                {edgeHost}\n              </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/hosts/edge/${edgeHost}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (edgeHost: string): void =>\n        this.props.onAddRuleEdgeHost(edgeHost);\n\n    private onRemove = (edgeHosts: string[]) =>\n        this.props.onRemoveRuleEdgeHosts(edgeHosts);\n\n    private onDeleteSuccess = (edgeHosts: string[]): void => {\n        if (this.props.ruleHost?.name) {\n            const {name} = this.props.ruleHost;\n            this.props.removeRuleHostEdgeHosts(name, edgeHosts);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to remove edge host`, 10000, reason, true);\n\n    private getSelectableEdgeHostNames = () => {\n        const {edgeHosts, ruleEdgeHosts, unsavedEdgeHosts} = this.props;\n        return Object.keys(edgeHosts)\n            .filter(edgeHost => !ruleEdgeHosts.includes(edgeHost) && !unsavedEdgeHosts.includes(edgeHost));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: HostRuleEdgeHostListProps): StateToProps {\n    const ruleName = ownProps.ruleHost?.name;\n    const rule = ruleName && state.entities.rules.hosts.data[ruleName];\n    const ruleEdgeHosts = rule && rule.edgeHosts;\n    return {\n        isLoading: state.entities.rules.hosts.isLoadingEdgeHosts,\n        error: state.entities.rules.hosts.loadEdgeHostsError,\n        ruleEdgeHosts: ruleEdgeHosts || [],\n        edgeHosts: state.entities.hosts.edge.data,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadRuleHostEdgeHosts,\n        removeRuleHostEdgeHosts,\n        loadEdgeHosts,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HostRuleEdgeHostList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {componentTypes, IDecision, IRule} from \"../Rule\";\nimport {RouteComponentProps} from \"react-router\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport Form, {IFields, requiredAndNumberAndMinAndMax, requiredAndTrimmed} from \"../../../../components/form/Form\";\nimport LoadingSpinner from \"../../../../components/list/LoadingSpinner\";\nimport {Error} from \"../../../../components/errors/Error\";\nimport Field from \"../../../../components/form/Field\";\nimport Tabs, {Tab} from \"../../../../components/tabs/Tabs\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {connect} from \"react-redux\";\nimport React from \"react\";\nimport {\n    addRuleCloudHosts,\n    addRuleEdgeHosts,\n    addRuleHost,\n    addRuleHostConditions,\n    loadDecisions,\n    loadRulesHost,\n    updateRuleHost,\n} from \"../../../../actions\";\nimport {IReply, postData} from \"../../../../utils/api\";\nimport HostRuleConditionList from \"./RuleHostConditionList\";\nimport UnsavedChanged from \"../../../../components/form/UnsavedChanges\";\nimport HostRuleCloudHostsList from \"./RuleHostCloudHostsList\";\nimport HostRuleEdgeHostsList from \"./RuleHostEdgeHostsList\";\nimport {isNew} from \"../../../../utils/router\";\nimport {normalize} from \"normalizr\";\nimport {Schemas} from \"../../../../middleware/api\";\n\nexport interface IRuleHost extends IRule {\n    cloudHosts?: string[],\n    edgeHosts?: string[],\n}\n\nconst buildNewHostRule = (): Partial<IRuleHost> => ({\n    name: undefined,\n    priority: 0,\n    decision: undefined,\n    generic: undefined,\n});\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    ruleHost: Partial<IRuleHost>;\n    formRuleHost?: Partial<IRuleHost>,\n    decisions: { [key: string]: IDecision },\n}\n\ninterface DispatchToProps {\n    loadRulesHost: (name: string) => void;\n    addRuleHost: (ruleHost: IRuleHost) => void;\n    updateRuleHost: (previousRuleHost: IRuleHost, currentRuleHost: IRuleHost) => void;\n    loadDecisions: () => void;\n    addRuleHostConditions: (ruleName: string, conditions: string[]) => void;\n    addRuleCloudHosts: (ruleName: string, cloudHosts: string[]) => void;\n    addRuleEdgeHosts: (ruleName: string, edgeHosts: string[]) => void;\n}\n\ninterface MatchParams {\n    name: string;\n}\n\ninterface LocationState {\n    data: IRuleHost,\n    selected: 'hostRule' | 'ruleConditions' | 'cloudHosts' | 'edgeHosts'\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ntype State = {\n    ruleHost?: IRuleHost,\n    formRuleHost?: IRuleHost,\n    unsavedConditions: string[],\n    unsavedCloudHosts: string[],\n    unsavedEdgeHosts: string[],\n    isGeneric: boolean,\n}\n\nclass RuleHost extends BaseComponent<Props, State> {\n\n    state: State = {\n        unsavedConditions: [],\n        unsavedCloudHosts: [],\n        unsavedEdgeHosts: [],\n        isGeneric: this.props.ruleHost?.generic || false,\n    };\n    private mounted = false;\n\n    public componentDidMount(): void {\n        this.loadRuleHost();\n        this.props.loadDecisions();\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any) {\n        if (prevProps.ruleHost?.generic !== this.props.ruleHost?.generic) {\n            this.setState({isGeneric: this.props.ruleHost?.generic || false})\n        }\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                {this.shouldShowSaveButton() && !isNew(this.props.location.search) && <UnsavedChanged/>}\n                <div className=\"container\">\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private loadRuleHost = () => {\n        if (!isNew(this.props.location.search)) {\n            const ruleName = this.props.match.params.name;\n            this.props.loadRulesHost(ruleName);\n        }\n    };\n\n    private getRuleHost = () =>\n        this.state.ruleHost || this.props.ruleHost;\n\n    private getFormRuleHost = () =>\n        this.state.formRuleHost || this.props.formRuleHost;\n\n    private isNew = () =>\n        isNew(this.props.location.search);\n\n    private onPostSuccess = (reply: IReply<IRuleHost>): void => {\n        const ruleHost = reply.data;\n        super.toast(`<span class=\"green-text\">Host rule ${this.mounted ? `<b class=\"white-text\">${ruleHost.name}</b>` : `<a href=/rules/hosts/${ruleHost.name}><b>${ruleHost.name}</b></a>`} saved</span>`);\n        this.props.addRuleHost(ruleHost);\n        this.saveEntities(reply.data);\n        if (this.mounted) {\n            this.updateRuleHost(ruleHost);\n            this.props.history.replace(ruleHost.name);\n        }\n    };\n\n    private onPostFailure = (reason: string, ruleHost: IRuleHost): void =>\n        super.toast(`Unable to save host rule <b>${ruleHost.name}</b>`, 10000, reason, true);\n\n    private onPutSuccess = (reply: IReply<IRuleHost>): void => {\n        const ruleHost = reply.data;\n        super.toast(`<span class=\"green-text\">Changes to ${this.mounted ? `<b class=\"white-text\">${ruleHost.name}</b>` : `<a href=/rules/hosts/${ruleHost.name}><b>${ruleHost.name}</b></a>`} host rule have been saved</span>`);\n        this.saveEntities(ruleHost);\n        const previousRuleHost = this.getRuleHost();\n        if (previousRuleHost.id) {\n            this.props.updateRuleHost(previousRuleHost as IRuleHost, ruleHost);\n        }\n        if (this.mounted) {\n            this.updateRuleHost(ruleHost);\n            this.props.history.replace(ruleHost.name);\n        }\n    };\n\n    private onPutFailure = (reason: string, ruleHost: IRuleHost): void =>\n        super.toast(`Unable to update host rule ${this.mounted ? `<b>${ruleHost.name}</b>` : `<a href=/rules/hosts/${ruleHost.name}><b>${ruleHost.name}</b></a>`}`, 10000, reason, true);\n\n    private onDeleteSuccess = (ruleHost: IRuleHost): void => {\n        super.toast(`<span class=\"green-text\">Host rule <b class=\"white-text\">${ruleHost.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.props.history.push(`/rules/hosts`)\n        }\n    };\n\n    private onDeleteFailure = (reason: string, ruleHost: IRuleHost): void =>\n        super.toast(`Unable to delete host rule ${this.mounted ? `<b>${ruleHost.name}</b>` : `<a href=/rules/hosts/${ruleHost.name}><b>${ruleHost.name}</b></a>`}`, 10000, reason, true);\n\n    private shouldShowSaveButton = () =>\n        !!this.state.unsavedConditions.length\n        || !!this.state.unsavedCloudHosts.length\n        || !!this.state.unsavedEdgeHosts.length;\n\n    private saveEntities = (rule: IRuleHost) => {\n        this.saveRuleConditions(rule);\n        this.saveRuleCloudHosts(rule);\n        this.saveRuleEdgeHosts(rule);\n    };\n\n    private addRuleCondition = (condition: string): void => {\n        this.setState({\n            unsavedConditions: this.state.unsavedConditions.concat(condition)\n        });\n    };\n\n    private removeRuleConditions = (conditions: string[]): void => {\n        this.setState({\n            unsavedConditions: this.state.unsavedConditions.filter(condition => !conditions.includes(condition))\n        });\n    };\n\n    private saveRuleConditions = (rule: IRuleHost): void => {\n        const {unsavedConditions} = this.state;\n        if (unsavedConditions.length) {\n            postData(`rules/hosts/${rule.name}/conditions`, unsavedConditions,\n                () => this.onSaveConditionsSuccess(rule),\n                (reason) => this.onSaveConditionsFailure(rule, reason));\n        }\n    };\n\n    private onSaveConditionsSuccess = (rule: IRuleHost): void => {\n        this.props.addRuleHostConditions(rule.name, this.state.unsavedConditions);\n        if (this.mounted) {\n            this.setState({unsavedConditions: []});\n        }\n    };\n\n    private onSaveConditionsFailure = (ruleHost: IRuleHost, reason: string): void =>\n        super.toast(`Unable to save conditions of host rule ${this.mounted ? `<b>${ruleHost.name}</b>` : `<a href=/rules/hosts/${ruleHost.name}><b>${ruleHost.name}</b></a>`}`, 10000, reason, true);\n\n    private addRuleCloudHost = (cloudHost: string): void =>\n        this.setState({\n            unsavedCloudHosts: this.state.unsavedCloudHosts.concat(cloudHost)\n        });\n\n    private removeRuleCloudHosts = (cloudHosts: string[]): void => {\n        this.setState({\n            unsavedCloudHosts: this.state.unsavedCloudHosts.filter(cloudHost => !cloudHosts.includes(cloudHost))\n        });\n    };\n\n    private saveRuleCloudHosts = (rule: IRuleHost): void => {\n        const {unsavedCloudHosts} = this.state;\n        if (unsavedCloudHosts.length) {\n            postData(`rules/hosts/${rule.name}/cloud-hosts`, unsavedCloudHosts,\n                () => this.onSaveCloudHostsSuccess(rule),\n                (reason) => this.onSaveCloudHostsFailure(rule, reason));\n        }\n    };\n\n    private onSaveCloudHostsSuccess = (rule: IRuleHost): void => {\n        this.props.addRuleCloudHosts(rule.name, this.state.unsavedCloudHosts);\n        if (this.mounted) {\n            this.setState({unsavedCloudHosts: []});\n        }\n    };\n\n    private onSaveCloudHostsFailure = (ruleHost: IRuleHost, reason: string): void =>\n        super.toast(`Unable to save cloud hosts of host rule ${this.mounted ? `<b>${ruleHost.name}</b>` : `<a href=/rules/hosts/${ruleHost.name}><b>${ruleHost.name}</b></a>`}`, 10000, reason, true);\n\n    private addRuleEdgeHost = (edgeHost: string): void =>\n        this.setState({\n            unsavedEdgeHosts: this.state.unsavedEdgeHosts.concat(edgeHost)\n        });\n\n    private removeRuleEdgeHosts = (edgeHosts: string[]): void => {\n        this.setState({\n            unsavedEdgeHosts: this.state.unsavedEdgeHosts.filter(edgeHost => !edgeHosts.includes(edgeHost))\n        });\n    };\n\n    private saveRuleEdgeHosts = (rule: IRuleHost): void => {\n        const {unsavedEdgeHosts} = this.state;\n        if (unsavedEdgeHosts.length) {\n            postData(`rules/hosts/${rule.name}/edge-hosts`, unsavedEdgeHosts,\n                () => this.onSaveEdgeHostsSuccess(rule),\n                (reason) => this.onSaveEdgeHostsFailure(rule, reason));\n        }\n    };\n\n    private onSaveEdgeHostsSuccess = (rule: IRuleHost): void => {\n        this.props.addRuleEdgeHosts(rule.name, this.state.unsavedEdgeHosts);\n        if (this.mounted) {\n            this.setState({unsavedEdgeHosts: []});\n        }\n    };\n\n    private onSaveEdgeHostsFailure = (ruleHost: IRuleHost, reason: string): void =>\n        super.toast(`Unable to save edge hosts of host rule ${this.mounted ?\n            <b>${ruleHost.name}</b> : `<a href=/rules/hosts/${ruleHost.name}><b>${ruleHost.name}</b></a>`}`, 10000, reason, true);\n\n    private updateRuleHost = (ruleHost: IRuleHost) => {\n        ruleHost = Object.values(normalize(ruleHost, Schemas.RULE_HOST).entities.hostRules || {})[0];\n        const formRuleHost = {...ruleHost};\n        removeFields(formRuleHost);\n        this.setState({ruleHost: ruleHost, formRuleHost: formRuleHost});\n    };\n\n    private getFields = (hostRule: Partial<IRuleHost>): IFields =>\n        Object.entries(hostRule).map(([key, _]) => {\n            return {\n                [key]: {\n                    id: key,\n                    label: key,\n                    validation:\n                        key === 'priority'\n                            ? {rule: requiredAndNumberAndMinAndMax, args: [0, 2147483647]}\n                            : {rule: requiredAndTrimmed}\n                }\n            };\n        }).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});\n\n    private decisionDropdownOption = (decision: IDecision) =>\n        decision.ruleDecision;\n\n    private isGenericSelected = (generic: boolean) =>\n        this.setState({isGeneric: generic});\n\n    private getSelectableDecisions = () =>\n        Object.values(this.props.decisions).filter(decision =>\n            decision.componentType.type.toLocaleLowerCase() === componentTypes.HOST.type.toLocaleLowerCase());\n\n    private hostRule = () => {\n        const {isLoading, error} = this.props;\n        const ruleHost = this.getRuleHost();\n        const formRuleHost = this.getFormRuleHost();\n        // @ts-ignore\n        const ruleKey: (keyof IRuleHost) = formRuleHost && Object.keys(formRuleHost)[0];\n        const isNewRuleHost = this.isNew();\n        return (\n            <>\n                {!isNewRuleHost && isLoading && <LoadingSpinner/>}\n                {!isNewRuleHost && !isLoading && error && <Error message={error}/>}\n                {(isNewRuleHost || !isLoading) && (isNewRuleHost || !error) && formRuleHost && (\n                    /*@ts-ignore*/\n                    <Form id={ruleKey}\n                          fields={this.getFields(formRuleHost)}\n                          values={ruleHost}\n                          isNew={isNew(this.props.location.search)}\n                          showSaveButton={this.shouldShowSaveButton()}\n                          post={{\n                              url: 'rules/hosts',\n                              successCallback: this.onPostSuccess,\n                              failureCallback: this.onPostFailure\n                          }}\n                          put={{\n                              url: `rules/hosts/${ruleHost.name}`,\n                              successCallback: this.onPutSuccess,\n                              failureCallback: this.onPutFailure\n                          }}\n                          delete={{\n                              url: `rules/hosts/${ruleHost.name}`,\n                              successCallback: this.onDeleteSuccess,\n                              failureCallback: this.onDeleteFailure\n                          }}\n                          saveEntities={this.saveEntities}>\n                        {Object.entries(formRuleHost).map(([key, value], index) =>\n                            key === 'decision'\n                                ? <Field<IDecision> key={index}\n                                                    id={key}\n                                                    label={key}\n                                                    type=\"dropdown\"\n                                                    dropdown={{\n                                                        defaultValue: \"Choose decision\",\n                                                        values: this.getSelectableDecisions(),\n                                                        optionToString: this.decisionDropdownOption,\n                                                        emptyMessage: 'No decisions available'\n                                                    }}/>\n                                : key === 'generic'\n                                ? <Field key={index}\n                                        id={key}\n                                        type='checkbox'\n                                        checkbox={{label: 'apply to all hosts', checkCallback: this.isGenericSelected}}/>\n                                : <Field key={index}\n                                         id={key}\n                                         label={key}\n                                         type={key === 'priority' ? \"number\" : \"text\"}/>\n                        )}\n                    </Form>\n                )}\n            </>\n        )\n    };\n\n    private conditions = (): JSX.Element =>\n        <HostRuleConditionList isLoadingHostRule={this.props.isLoading}\n                               loadHostRuleError={!this.isNew() ? this.props.error : undefined}\n                               ruleHost={this.getRuleHost()}\n                               unsavedConditions={this.state.unsavedConditions}\n                               onAddRuleCondition={this.addRuleCondition}\n                               onRemoveRuleConditions={this.removeRuleConditions}/>;\n\n    private cloudHosts = (): JSX.Element =>\n        <HostRuleCloudHostsList isLoadingHostRule={this.props.isLoading}\n                                loadHostRuleError={!this.isNew() ? this.props.error : undefined}\n                                ruleHost={this.getRuleHost()}\n                                unsavedCloudHosts={this.state.unsavedCloudHosts}\n                                onAddRuleCloudHost={this.addRuleCloudHost}\n                                onRemoveRuleCloudHosts={this.removeRuleCloudHosts}/>;\n\n    private edgeHosts = (): JSX.Element =>\n        <HostRuleEdgeHostsList isLoadingHostRule={this.props.isLoading}\n                               loadHostRuleError={!this.isNew() ? this.props.error : undefined}\n                               ruleHost={this.getRuleHost()}\n                               unsavedEdgeHosts={this.state.unsavedEdgeHosts}\n                               onAddRuleEdgeHost={this.addRuleEdgeHost}\n                               onRemoveRuleEdgeHosts={this.removeRuleEdgeHosts}/>;\n\n    private tabs = (): Tab[] => [\n        {\n            title: 'Host rule',\n            id: 'hostRule',\n            content: () => this.hostRule(),\n            active: this.props.location.state?.selected === 'hostRule'\n        },\n        {\n            title: 'Conditions',\n            id: 'ruleConditions',\n            content: () => this.conditions(),\n            active: this.props.location.state?.selected === 'ruleConditions'\n        },\n        {\n            title: 'Cloud hosts',\n            id: 'cloudHosts',\n            content: () => this.cloudHosts(),\n            disabled: this.state.isGeneric,\n            active: this.props.location.state?.selected === 'cloudHosts'\n        },\n        {\n            title: 'Edge hosts',\n            id: 'edgeHosts',\n            content: () => this.edgeHosts(),\n            disabled: this.state.isGeneric,\n            active: this.props.location.state?.selected === 'edgeHosts'\n        }\n    ];\n\n}\n\nfunction removeFields(ruleHost: Partial<IRuleHost>) {\n    delete ruleHost[\"id\"];\n    delete ruleHost[\"conditions\"];\n    delete ruleHost[\"cloudHosts\"];\n    delete ruleHost[\"edgeHosts\"];\n}\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.rules.hosts.isLoadingRules;\n    const error = state.entities.rules.hosts.loadRulesError;\n    const name = props.match.params.name;\n    const ruleHost = isNew(props.location.search) ? buildNewHostRule() : state.entities.rules.hosts.data[name];\n    let formRuleHost;\n    if (ruleHost) {\n        formRuleHost = {...ruleHost};\n        removeFields(formRuleHost);\n    }\n    const decisions = state.entities.decisions.data;\n    return {\n        isLoading,\n        error,\n        ruleHost,\n        formRuleHost,\n        decisions,\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadRulesHost,\n    updateRuleHost,\n    addRuleHost,\n    loadDecisions,\n    addRuleHostConditions,\n    addRuleCloudHosts,\n    addRuleEdgeHosts\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RuleHost);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {MenuItem} from \"react-contextmenu\";\nimport React from \"react\";\n\ninterface Props<T> {\n    option: string;\n    state: T;\n    onClick: (e: React.TouchEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement>, data: T, target: HTMLElement) => void;\n    className?: string;\n}\n\nconst ActionContextMenuItem = <T extends object>({option, state, onClick, className}: Props<T>) => (\n    <MenuItem className={`${className ? className : ''}`} data={state} onClick={onClick}>\n        {option}\n    </MenuItem>\n);\n\nexport default ActionContextMenuItem;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Card from \"../../../../components/cards/Card\";\nimport CardItem from \"../../../../components/list/CardItem\";\nimport React from \"react\";\nimport {awsInstanceStates, ICloudHost} from \"./CloudHost\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport LinkedContextMenuItem from \"../../../../components/contextmenu/LinkedContextMenuItem\";\nimport {deleteData, IReply, putData} from \"../../../../utils/api\";\nimport ActionContextMenuItem from \"../../../../components/contextmenu/ActionContextMenuItem\";\nimport {deleteCloudHost, updateCloudHost} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport {normalize} from \"normalizr\";\nimport {Schemas} from \"../../../../middleware/api\";\nimport {RouteComponentProps, withRouter} from \"react-router\";\nimport {isEqual} from \"lodash\";\n\ninterface State {\n    loading: boolean;\n    cloudHost?: ICloudHost,\n}\n\ninterface CloudHostCardProps {\n    cloudHost: ICloudHost;\n}\n\ninterface DispatchToProps {\n    updateCloudHost: (previousCloudHost: ICloudHost, currentCloudHost: ICloudHost) => void;\n    deleteCloudHost: (cloudHost: ICloudHost) => void;\n}\n\ntype Props = DispatchToProps & CloudHostCardProps & RouteComponentProps;\n\nclass CloudHostCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    private getCloudHost = () =>\n        this.props.cloudHost || this.state.cloudHost;\n\n    private startCloudHost = () => {\n        const cloudHost = this.getCloudHost();\n        const url = `hosts/cloud/${cloudHost.instanceId}/start`;\n        this.setState({loading: true});\n        putData(url, undefined,\n            (reply: IReply<ICloudHost>) => this.onStartSuccess(reply.data),\n            (reason) => this.onStartFailure(reason, cloudHost));\n    };\n\n    private onStartSuccess = (cloudHost: ICloudHost) => {\n        super.toast(`<span class=\"green-text\">Successfully started ${this.mounted ? `<b class=\"white-text\">${cloudHost.instanceId}</b>` : `<a href=/hosts/cloud/${cloudHost.instanceId}><b>${cloudHost.instanceId}</b></a>`} instance</span>`, 15000);\n        const previousCloudHost = this.getCloudHost();\n        if (previousCloudHost?.id) {\n            this.props.updateCloudHost(previousCloudHost as ICloudHost, cloudHost)\n        }\n        if (this.mounted) {\n            this.updateCloudHost(cloudHost);\n        }\n    };\n\n    private onStartFailure = (reason: string, cloudHost: Partial<ICloudHost>) => {\n        super.toast(`Failed to start ${this.mounted ? `<b>${cloudHost.instanceId}</b>` : `<a href=/hosts/cloud/${cloudHost.instanceId}><b>${cloudHost.instanceId}</b></a>`} instance`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    };\n\n    private stopCloudHost = () => {\n        const cloudHost = this.getCloudHost();\n        const url = `hosts/cloud/${cloudHost.instanceId}/stop`;\n        this.setState({loading: true});\n        putData(url, undefined,\n            (reply: IReply<ICloudHost>) => this.onStopSuccess(reply.data),\n            (reason) => this.onStopFailure(reason, cloudHost));\n    };\n\n    private onStopSuccess = (cloudHost: ICloudHost) => {\n        super.toast(`<span class=\"green-text\">Successfully stopped ${this.mounted ? `<b class=\"white-text\">${cloudHost.instanceId}</b>` : `<a href=/hosts/cloud/${cloudHost.instanceId}><b>${cloudHost.instanceId}</b></a>`} instance</span>`, 15000);\n        const previousCloudHost = this.getCloudHost();\n        if (previousCloudHost?.id) {\n            this.props.updateCloudHost(previousCloudHost as ICloudHost, cloudHost)\n        }\n        if (this.mounted) {\n            this.updateCloudHost(cloudHost);\n        }\n    };\n\n    private onStopFailure = (reason: string, cloudHost: Partial<ICloudHost>) => {\n        super.toast(`Failed to stop <a href=/hosts/cloud/${cloudHost.instanceId}><b>${cloudHost.instanceId}</b></a> instance`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    };\n\n    private terminateCloudHost = () => {\n        const cloudHost = this.getCloudHost();\n        const url = `hosts/cloud/${cloudHost.instanceId}`;\n        this.setState({loading: true});\n        deleteData(url,\n            () => this.onTerminateSuccess(cloudHost),\n            (reason) => this.onTerminateFailure(reason, cloudHost));\n    };\n\n    private onTerminateSuccess = (cloudHost: ICloudHost) => {\n        super.toast(`<span class=\"green-text\">Successfully terminated <b class=\"white-text\">${cloudHost.instanceId}</b> instance</span>`, 15000);\n        if (this.mounted) {\n            this.props.deleteCloudHost(cloudHost);\n        }\n    };\n\n    private onTerminateFailure = (reason: string, cloudHost: Partial<ICloudHost>) => {\n        super.toast(`Failed to terminate <a href=/hosts/cloud/${cloudHost.instanceId}><b>${cloudHost.instanceId}</b></a> instance`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    };\n\n    private updateCloudHost = (cloudHost: ICloudHost) => {\n        cloudHost = Object.values(normalize(cloudHost, Schemas.CLOUD_HOST).entities.cloudHosts || {})[0];\n        this.setState({cloudHost: cloudHost, loading: false});\n    };\n\n    private topContextMenu = (): JSX.Element[] => {\n        const cloudHost = this.getCloudHost();\n        const menus = [];\n        if (isEqual(cloudHost.state, awsInstanceStates.STOPPED)) {\n            menus.push(<ActionContextMenuItem className='green-text' option='Start' state={cloudHost}\n                                              onClick={this.startCloudHost}/>);\n        }\n        if (isEqual(cloudHost.state, awsInstanceStates.RUNNING)) {\n            menus.push(<ActionContextMenuItem className='blue-text' option='Stop' state={cloudHost}\n                                              onClick={this.stopCloudHost}/>);\n        }\n        if (!isEqual(cloudHost.state, awsInstanceStates.TERMINATED)\n            && !isEqual(cloudHost.state, awsInstanceStates.SHUTTING_DOWN)) {\n            menus.push(<ActionContextMenuItem className='red-text' option='Terminate' state={cloudHost}\n                                              onClick={this.terminateCloudHost}/>);\n        }\n        return menus;\n    }\n\n    private bottomContextMenu = (): JSX.Element[] => {\n        const cloudHost = this.getCloudHost();\n        const id = cloudHost.instanceId;\n        return [\n            <LinkedContextMenuItem\n                option={'Modify rules'}\n                pathname={`/hosts/cloud/${id}`}\n                selected={'rules'}\n                state={cloudHost}/>,\n            <LinkedContextMenuItem\n                option={'View generic rules'}\n                pathname={`/hosts/cloud/${id}`}\n                selected={'genericContainerRules'}\n                state={cloudHost}/>,\n            <LinkedContextMenuItem\n                option={'Modify simulated metrics'}\n                pathname={`/hosts/cloud/${id}`}\n                selected={'simulatedMetrics'}\n                state={cloudHost}/>,\n            <LinkedContextMenuItem\n                option={'View generic simulated metrics'}\n                pathname={`/hosts/cloud/${id}`}\n                selected={'genericSimulatedMetrics'}\n                state={cloudHost}/>,\n            <LinkedContextMenuItem\n                option={'Execute command'}\n                pathname={`/hosts/cloud/${id}`}\n                selected={'ssh'}\n                state={cloudHost}/>,\n            <LinkedContextMenuItem\n                option={'Upload file'}\n                pathname={`/hosts/cloud/${id}`}\n                selected={'sftp'}\n                state={cloudHost}/>\n        ];\n    }\n\n    public render() {\n        const cloudHost = this.getCloudHost();\n        const {loading} = this.state;\n        const CardCloudHost = Card<ICloudHost>();\n        return <CardCloudHost id={`cloudHost-${cloudHost.publicIpAddress || cloudHost.instanceId}`}\n                              title={cloudHost.publicIpAddress || cloudHost.instanceId}\n                              link={{\n                                  to: {\n                                      pathname: `/hosts/cloud/${cloudHost.instanceId}`,\n                                      state: cloudHost\n                                  }\n                              }}\n                              height={'215px'}\n                              margin={'10px 0'}\n                              hoverable\n                              loading={loading}\n                              topContextMenuItems={this.topContextMenu()}\n                              bottomContextMenuItems={this.bottomContextMenu()}>\n            <CardItem key={'imageId'}\n                      label={'Image id'}\n                      value={`${cloudHost.imageId}`}/>\n            <CardItem key={'instanceType'}\n                      label={'Instance type'}\n                      value={`${cloudHost.instanceType}`}/>\n            <CardItem key={'state'}\n                      label={'State'}\n                      value={`${cloudHost.state.name}`}/>\n            {cloudHost.publicDnsName &&\n            <CardItem key={'publicDnsName'}\n                      label={'Public dns name'}\n                      value={`${cloudHost.publicDnsName}`}/>}\n            {cloudHost.publicIpAddress &&\n            <CardItem key={'publicIpAddress'}\n                      label={'Public ip address'}\n                      value={`${cloudHost.publicIpAddress}`}/>}\n            {cloudHost.privateIpAddress &&\n            <CardItem key={'privateIpAddress'}\n                      label={'Private ip address'}\n                      value={`${cloudHost.privateIpAddress}`}/>}\n            <CardItem key={'placement'}\n                      label={'Placement'}\n                      value={`${cloudHost.placement.availabilityZone}`}/>\n            <CardItem key={'coordinates'}\n                      label={'Coordinates'}\n                      value={`(${cloudHost.awsRegion.coordinates.latitude.toFixed(3)}, ${cloudHost.awsRegion.coordinates.longitude.toFixed(3)})`}/>\n            {cloudHost.managedByWorker &&\n            <CardItem key={'managedByWorker'}\n                      label={'Managed by worker'}\n                      value={`${cloudHost.managedByWorker.id}`}/>}\n        </CardCloudHost>;\n    }\n\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    updateCloudHost,\n    deleteCloudHost,\n};\n\nexport default withRouter(connect(null, mapDispatchToProps)(CloudHostCard));","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport {connect} from \"react-redux\";\nimport {ReduxState} from \"../../../../reducers\";\nimport CardList from \"../../../../components/list/CardList\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport {loadCloudHosts} from \"../../../../actions\";\nimport {ICloudHost} from \"./CloudHost\";\nimport CloudHostCard from \"./CloudHostCard\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    cloudHosts: ICloudHost[];\n}\n\ninterface DispatchToProps {\n    loadCloudHosts: (instanceId?: string) => any;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass CloudHostsList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadCloudHosts();\n    }\n\n    public render() {\n        return (\n            <CardList<ICloudHost>\n                isLoading={this.props.isLoading}\n                error={this.props.error}\n                emptyMessage={\"No cloud instances to display\"}\n                list={this.props.cloudHosts}\n                card={this.cloudHost}\n                predicate={this.predicate}/>\n        )\n    }\n\n    private cloudHost = (host: ICloudHost): JSX.Element =>\n        <CloudHostCard key={host.instanceId} cloudHost={host}/>;\n\n    private predicate = (host: ICloudHost, search: string): boolean =>\n        (host.publicIpAddress && host.publicIpAddress.toLowerCase().includes(search))\n        || host.instanceId.includes(search);\n\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.hosts.cloud.isLoadingHosts,\n        error: state.entities.hosts.cloud.loadHostsError,\n        cloudHosts: (state.entities.hosts.cloud.data && Object.values(state.entities.hosts.cloud.data).reverse()) || [],\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadCloudHosts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CloudHostsList);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {IReply} from \"../../../utils/api\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport Form, {IFields, required, requiredAndTrimmed} from \"../../../components/form/Form\";\nimport Field from \"../../../components/form/Field\";\nimport React from \"react\";\nimport {awsInstanceStates, ICloudHost} from \"../hosts/cloud/CloudHost\";\nimport {ReduxState} from \"../../../reducers\";\nimport {connect} from \"react-redux\";\nimport {IEdgeHost} from \"../hosts/edge/EdgeHost\";\nimport {IHostAddress} from \"../hosts/Hosts\";\nimport { isEqual } from \"lodash\";\n\nexport interface ISshCommand {\n    hostAddress: IHostAddress;\n    command: string;\n    exitStatus: number;\n    output: string[];\n    error: string[];\n}\n\nexport interface INewSshCommand {\n    background?: boolean;\n    hostAddress?: IHostAddress;\n    command?: string;\n}\n\nconst buildNewSshCommand = (): INewSshCommand => ({\n    background: false,\n    hostAddress: undefined,\n    command: undefined,\n});\n\ninterface StateToProps {\n    cloudHosts: { [key: string]: ICloudHost };\n    edgeHosts: { [key: string]: IEdgeHost };\n}\n\ninterface SshCommandProps {\n    onExecuteCommand: (command: ISshCommand) => void;\n}\n\ntype Props = SshCommandProps & StateToProps;\n\nclass SshCommand extends BaseComponent<Props, {}> {\n\n    public render() {\n        const command = buildNewSshCommand();\n        return (\n            /*@ts-ignore*/\n            <Form id={'sshCommand'}\n                  fields={this.getFields()}\n                  values={command}\n                  isNew\n                  post={{\n                      textButton: 'Execute',\n                      url: 'ssh/execute',\n                      successCallback: this.onPostSuccess,\n                      failureCallback: this.onPostFailure\n                  }}>\n                <Field key='background'\n                       id='background'\n                       type='checkbox'\n                       checkbox={{label: 'execute in the background'}}/>\n                <Field<Partial<IHostAddress>> key='sshHostAddress'\n                                              id='hostAddress'\n                                              label='hostAddress'\n                                              type='dropdown'\n                                              dropdown={{\n                                                  defaultValue: 'Select host address',\n                                                  values: this.getSelectableHosts(),\n                                                  optionToString: this.hostAddressesDropdown,\n                                                  emptyMessage: 'No hosts available'\n                                              }}/>\n                <Field key='command'\n                       id='command'\n                       label='command'/>\n            </Form>\n        );\n    }\n\n    private onPostSuccess = (reply: IReply<ISshCommand>): void => {\n        const command = reply.data;\n        this.props.onExecuteCommand(command);\n    };\n\n    private onPostFailure = (reason: string): void =>\n        super.toast(`Command execution failed`, 10000, reason, true);\n\n    private getFields = (): IFields => (\n        {\n            background: {\n                id: 'background',\n                label: 'background',\n            },\n            hostAddress: {\n                id: 'hostAddress',\n                label: 'hostAddress',\n                validation: {rule: required}\n            },\n            command: {\n                id: 'command',\n                label: 'command',\n                validation: {rule: requiredAndTrimmed}\n            },\n        }\n    );\n\n    private getSelectableHosts = (): (Partial<IHostAddress>)[] => {\n        const cloudHosts = Object.values(this.props.cloudHosts)\n            .filter(cloudHost => isEqual(cloudHost.state, awsInstanceStates.RUNNING))\n            .map(instance => ({\n                publicIpAddress: instance.publicIpAddress,\n                privateIpAddress: instance.privateIpAddress\n            }));\n        const edgeHosts = Object.values(this.props.edgeHosts)\n            .map(host => ({publicIpAddress: host.publicIpAddress, privateIpAddress: host.privateIpAddress}));\n        return [...cloudHosts, ...edgeHosts];\n    };\n\n    private hostAddressesDropdown = (hostAddress: Partial<IHostAddress>): string =>\n        hostAddress.publicIpAddress + (hostAddress.privateIpAddress ? (\"/\" + hostAddress.privateIpAddress) : '');\n\n}\n\nfunction mapStateToProps(state: ReduxState): StateToProps {\n    const cloudHosts = state.entities.hosts.cloud.data;\n    const edgeHosts = state.entities.hosts.edge.data;\n    return {\n        cloudHosts,\n        edgeHosts,\n    }\n}\n\nexport default connect(mapStateToProps)(SshCommand);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport Form, {IFields, required} from \"../../../components/form/Form\";\nimport Field from \"../../../components/form/Field\";\nimport React from \"react\";\nimport {awsInstanceStates, ICloudHost} from \"../hosts/cloud/CloudHost\";\nimport {ReduxState} from \"../../../reducers\";\nimport {loadScripts} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport {IEdgeHost} from \"../hosts/edge/EdgeHost\";\nimport {IReply} from \"../../../utils/api\";\nimport {IHostAddress} from \"../hosts/Hosts\";\nimport {isEqual} from \"lodash\";\n\nexport interface ISshFile {\n    hostAddress: IHostAddress;\n    filename: string;\n}\n\nconst buildNewSshCommand = (): Partial<ISshFile> => ({\n    hostAddress: undefined,\n    filename: undefined,\n});\n\ninterface StateToProps {\n    cloudHosts: { [key: string]: ICloudHost };\n    edgeHosts: { [key: string]: IEdgeHost };\n    scripts: string[];\n}\n\ninterface DispatchToProps {\n    loadScripts: () => void;\n}\n\ninterface SshFileProps {\n    onTransferFile: (transfer: ISshFile) => void;\n}\n\ntype Props = SshFileProps & StateToProps & DispatchToProps;\n\nclass SshFile extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadScripts();\n    };\n\n    public render() {\n        const command = buildNewSshCommand();\n        return (\n            /*@ts-ignore*/\n            <Form id={'sshCommand'}\n                  fields={this.getFields()}\n                  values={command}\n                  isNew={true}\n                  post={{\n                      textButton: 'Upload',\n                      url: 'ssh/upload',\n                      successCallback: this.onPostSuccess,\n                      failureCallback: this.onPostFailure\n                  }}>\n                <Field<Partial<IHostAddress>> key='fileHostAddress'\n                                              id='hostAddress'\n                                              label='hostAddress'\n                                              type='dropdown'\n                                              dropdown={{\n                                                  defaultValue: 'Select host address',\n                                                  values: this.getSelectableHosts(),\n                                                  optionToString: this.hostAddressesDropdown,\n                                                  emptyMessage: 'No hosts available'\n                                              }}/>\n                <Field key='filename'\n                       id='filename'\n                       label='filename'\n                       type='dropdown'\n                       dropdown={{\n                           defaultValue: 'Select filename',\n                           values: this.props.scripts,\n                           emptyMessage: 'No scripts available'\n                       }}/>\n            </Form>\n        );\n    }\n\n    private onPostSuccess = (reply: IReply<string>, args: ISshFile): void => {\n        super.toast(`<span class=\"green-text\">File uploaded</span>`);\n        this.props.onTransferFile(args);\n    };\n\n    private onPostFailure = (reason: string): void =>\n        super.toast(`Failed to upload file`, 10000, reason, true);\n\n    private getFields = (): IFields => (\n        {\n            hostAddress: {\n                id: 'hostAddress',\n                label: 'hostAddress',\n                validation: {rule: required}\n            },\n            filename: {\n                id: 'filename',\n                label: 'filename',\n                validation: {rule: required}\n            },\n        }\n    );\n\n    private getSelectableHosts = (): (Partial<IHostAddress>)[] => {\n        const cloudHosts = Object.values(this.props.cloudHosts)\n            .filter(cloudHost => isEqual(cloudHost.state, awsInstanceStates.RUNNING))\n            .map(instance => ({\n                publicIpAddress: instance.publicIpAddress,\n                privateIpAddress: instance.privateIpAddress\n            }));\n        const edgeHosts = Object.values(this.props.edgeHosts)\n            .map(host => ({publicIpAddress: host.publicIpAddress, privateIpAddress: host.privateIpAddress}));\n        return [...cloudHosts, ...edgeHosts];\n    };\n\n    private hostAddressesDropdown = (hostAddress: Partial<IHostAddress>): string =>\n        hostAddress.publicIpAddress + (hostAddress.privateIpAddress ? (\"/\" + hostAddress.privateIpAddress) : '');\n\n}\n\nfunction mapStateToProps(state: ReduxState): StateToProps {\n    const cloudHosts = state.entities.hosts.cloud.data;\n    const edgeHosts = state.entities.hosts.edge.data;\n    const scripts = state.entities.scripts.data;\n    return {\n        cloudHosts,\n        edgeHosts,\n        scripts\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadScripts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SshFile);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport MainLayout from \"../../../views/mainLayout/MainLayout\";\nimport Tabs, {Tab} from \"../../../components/tabs/Tabs\";\nimport React, {createRef} from \"react\";\nimport SshCommand, {ISshCommand} from \"./SshCommand\";\nimport SshFile, {ISshFile} from \"./SshFile\";\nimport styles from \"./Ssh.module.css\";\nimport {connect} from \"react-redux\";\nimport {addCommand, loadCloudHosts, loadEdgeHosts} from \"../../../actions\";\nimport {ICommand, IFileTransfer} from \"./SshPanel\";\nimport SshPanel from \"./SshPanel\";\n\ninterface DispatchToProps {\n    loadCloudHosts: () => void;\n    loadEdgeHosts: () => void;\n    addCommand: (command: ICommand | IFileTransfer) => void;\n}\n\ntype Props = DispatchToProps;\n\nclass Ssh extends React.Component<Props, {}> {\n\n    private sshPanel = createRef<any>();\n\n    public componentDidMount() {\n        this.props.loadEdgeHosts();\n        this.props.loadCloudHosts();\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                <div className={`container ${styles.tabsContainer}`}>\n                    <Tabs tabs={this.tabs()}/>\n                </div>\n                <SshPanel ref={this.sshPanel}/>\n            </MainLayout>\n        );\n    }\n\n    private tabs = (): Tab[] => [\n        {\n            title: 'Execute command',\n            id: 'executeCommand',\n            content: () => <SshCommand onExecuteCommand={this.addCommand}/>\n        },\n        {\n            title: 'Upload file',\n            id: 'uploadFile',\n            content: () => <SshFile onTransferFile={this.addFileTransfer}/>\n        }\n    ];\n\n    private addCommand = (sshCommand: ISshCommand) => {\n        const command = {...sshCommand, timestamp: Date.now()};\n        this.props.addCommand(command);\n        this.sshPanel.current?.scrollToTop();\n    }\n\n    private addFileTransfer = (fileTransfer: ISshFile) => {\n        const transfer = {...fileTransfer, timestamp: Date.now()};\n        this.props.addCommand(transfer);\n        this.sshPanel.current?.scrollToTop();\n    }\n\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    addCommand,\n    loadCloudHosts,\n    loadEdgeHosts,\n};\n\nexport default connect(undefined, mapDispatchToProps)(Ssh);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {IRuleContainer} from \"./RuleContainer\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport ListItem from \"../../../../components/list/ListItem\";\nimport styles from \"../../../../components/list/ListItem.module.css\";\nimport React from \"react\";\nimport ControlledList from \"../../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {loadConditions, loadRuleContainerConditions, removeRuleContainerConditions} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {IRuleCondition} from \"../conditions/RuleCondition\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    ruleConditions: string[];\n    conditions: { [key: string]: IRuleCondition };\n}\n\ninterface DispatchToProps {\n    loadConditions: () => void;\n    loadRuleContainerConditions: (ruleName: string) => void;\n    removeRuleContainerConditions: (ruleName: string, conditions: string[]) => void;\n}\n\ninterface ContainerRuleConditionListProps {\n    isLoadingRuleContainer: boolean;\n    loadRuleContainerError?: string | null;\n    ruleContainer: IRuleContainer | Partial<IRuleContainer> | null;\n    unsavedConditions: string[];\n    onAddRuleCondition: (condition: string) => void;\n    onRemoveRuleConditions: (condition: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & ContainerRuleConditionListProps\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass RuleContainerConditionList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadConditions();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.ruleContainer?.name && this.props.ruleContainer?.name) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList\n            isLoading={!isNew ? this.props.isLoadingRuleContainer || this.props.isLoading : undefined}\n            error={!isNew ? this.props.loadRuleContainerError || this.props.error : undefined}\n            emptyMessage={`Conditions list is empty`}\n            data={this.props.ruleConditions}\n            dropdown={{\n                id: 'conditions',\n                title: 'Add condition',\n                empty: 'No conditions to add',\n                data: this.getSelectableConditionNames()\n            }}\n            show={this.condition}\n            onAdd={this.onAdd}\n            onRemove={this.onRemove}\n            onDelete={{\n                url: `rules/containers/${this.props.ruleContainer?.name}/conditions`,\n                successCallback: this.onDeleteSuccess,\n                failureCallback: this.onDeleteFailure\n            }}\n            entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.ruleContainer?.name) {\n            const {name} = this.props.ruleContainer;\n            this.props.loadRuleContainerConditions(name);\n        }\n    };\n\n    private isNew = () =>\n        this.props.ruleContainer?.name === undefined;\n\n    private condition = (index: number, condition: string, separate: boolean, checked: boolean,\n                         handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedConditions.includes(condition);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={styles.linkedItemContent}>\n                    <label>\n                        <input id={condition}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                {condition}\n              </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/rules/conditions/${condition}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (condition: string): void =>\n        this.props.onAddRuleCondition(condition);\n\n    private onRemove = (conditions: string[]) =>\n        this.props.onRemoveRuleConditions(conditions);\n\n    private onDeleteSuccess = (conditions: string[]): void => {\n        if (this.props.ruleContainer?.name) {\n            const {name} = this.props.ruleContainer;\n            this.props.removeRuleContainerConditions(name, conditions);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to delete condition`, 10000, reason, true);\n\n    private getSelectableConditionNames = () => {\n        const {conditions, ruleConditions, unsavedConditions} = this.props;\n        return Object.keys(conditions)\n            .filter(condition => !ruleConditions.includes(condition) && !unsavedConditions.includes(condition));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: ContainerRuleConditionListProps): StateToProps {\n    const ruleName = ownProps.ruleContainer?.name;\n    const rule = ruleName && state.entities.rules.containers.data[ruleName];\n    const ruleConditions = rule && rule.conditions;\n    return {\n        isLoading: state.entities.rules.containers.isLoadingConditions,\n        error: state.entities.rules.containers.loadConditionsError,\n        ruleConditions: ruleConditions || [],\n        conditions: state.entities.rules.conditions.data,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadRuleContainerConditions,\n        removeRuleContainerConditions,\n        loadConditions,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RuleContainerConditionList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport ListItem from \"../../../../components/list/ListItem\";\nimport styles from \"../../../../components/list/ListItem.module.css\";\nimport React from \"react\";\nimport ControlledList from \"../../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {loadContainers, loadRuleContainers, removeRuleContainers,} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {IContainer} from \"../../containers/Container\";\nimport {IRuleContainer} from \"./RuleContainer\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    ruleContainers: string[];\n    containers: { [key: string]: IContainer };\n}\n\ninterface DispatchToProps {\n    loadContainers: () => void;\n    loadRuleContainers: (ruleName: string) => void;\n    removeRuleContainers: (ruleName: string, containers: string[]) => void;\n}\n\ninterface ContainerRuleContainersListProps {\n    isLoadingRuleContainer: boolean;\n    loadRuleContainerError?: string | null;\n    ruleContainer: IRuleContainer | Partial<IRuleContainer> | null;\n    unsavedContainersIds: string[];\n    unsavedContainers: string[];\n    onAddRuleContainer: (container: string) => void;\n    onRemoveRuleContainers: (containers: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & ContainerRuleContainersListProps\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass RuleContainerContainersList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadContainers();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.ruleContainer?.name && this.props.ruleContainer?.name) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList\n            isLoading={!isNew ? this.props.isLoadingRuleContainer || this.props.isLoading : undefined}\n            error={!isNew ? this.props.loadRuleContainerError || this.props.error : undefined}\n            emptyMessage={`Containers list is empty`}\n            data={this.props.ruleContainers}\n            dropdown={{\n                id: 'containers',\n                title: 'Add container',\n                empty: 'No containers to add',\n                data: this.getSelectableContainers()\n            }}\n            show={this.container}\n            onAdd={this.onAdd}\n            onRemove={this.onRemove}\n            onDelete={{\n                url: `rules/containers/${this.props.ruleContainer?.name}/containers`,\n                successCallback: this.onDeleteSuccess,\n                failureCallback: this.onDeleteFailure\n            }}\n            entitySaved={this.state.entitySaved}\n            invalidate={this.invalidate}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.ruleContainer?.name) {\n            const {name} = this.props.ruleContainer;\n            this.props.loadRuleContainers(name);\n        }\n    };\n\n    private isNew = () =>\n        this.props.ruleContainer?.name === undefined;\n\n    private container = (index: number, container: string, separate: boolean, checked: boolean,\n                         handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedContainersIds.includes(container);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={styles.linkedItemContent}>\n                    <label>\n                        <input id={container}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                {container}\n              </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/containers/${container}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (container: string): void =>\n        this.props.onAddRuleContainer(container);\n\n    private onRemove = (containers: string[]) =>\n        this.props.onRemoveRuleContainers(containers);\n\n    private onDeleteSuccess = (containers: string[]): void => {\n        if (this.props.ruleContainer?.name) {\n            const {name} = this.props.ruleContainer;\n            this.props.removeRuleContainers(name, containers);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to remove container`, 10000, reason, true);\n\n    private getSelectableContainers = () => {\n        const {containers, ruleContainers, unsavedContainersIds} = this.props;\n        return Object.entries(containers).filter(([containerId, _]) => !ruleContainers.includes(containerId)\n            && !unsavedContainersIds.includes(containerId))\n            .map(([_, container]) => container.names[0].replace('/', '') + \" - \" + container.containerId);\n    };\n\n    private invalidate = (data: string): string | undefined =>\n        this.props.unsavedContainers.find(container => container.split(\" - \")[1] === data)\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: ContainerRuleContainersListProps): StateToProps {\n    const ruleName = ownProps.ruleContainer?.name;\n    const rule = ruleName && state.entities.rules.containers.data[ruleName];\n    const ruleContainers = rule && rule.containers;\n    return {\n        isLoading: state.entities.rules.containers.isLoadingContainers,\n        error: state.entities.rules.containers.loadContainersError,\n        ruleContainers: ruleContainers || [],\n        containers: state.entities.containers.data,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadRuleContainers,\n        removeRuleContainers,\n        loadContainers,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RuleContainerContainersList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {componentTypes, IDecision, IRule} from \"../Rule\";\nimport {RouteComponentProps} from \"react-router\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport Form, {IFields, requiredAndNumberAndMinAndMax, requiredAndTrimmed} from \"../../../../components/form/Form\";\nimport LoadingSpinner from \"../../../../components/list/LoadingSpinner\";\nimport {Error} from \"../../../../components/errors/Error\";\nimport Field from \"../../../../components/form/Field\";\nimport Tabs, {Tab} from \"../../../../components/tabs/Tabs\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {\n    addRuleContainer,\n    addRuleContainerConditions,\n    addRuleContainers,\n    loadDecisions,\n    loadRulesContainer,\n    updateRuleContainer,\n} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport React from \"react\";\nimport {IReply, postData} from \"../../../../utils/api\";\nimport RuleContainerConditionList from \"./RuleContainerConditionList\";\nimport UnsavedChanged from \"../../../../components/form/UnsavedChanges\";\nimport RuleContainerContainersList from \"./RuleContainerContainersList\";\nimport {isNew} from \"../../../../utils/router\";\nimport {normalize} from \"normalizr\";\nimport {Schemas} from \"../../../../middleware/api\";\n\nexport interface IRuleContainer extends IRule {\n    containers?: string[]\n}\n\nconst buildNewContainerRule = (): Partial<IRuleContainer> => ({\n    name: undefined,\n    priority: 0,\n    decision: undefined,\n});\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    ruleContainer: Partial<IRuleContainer>;\n    formRuleContainer?: Partial<IRuleContainer>,\n    decisions: { [key: string]: IDecision },\n}\n\ninterface DispatchToProps {\n    loadRulesContainer: (name: string) => void;\n    addRuleContainer: (ruleContainer: IRuleContainer) => void;\n    updateRuleContainer: (previousRuleContainer: IRuleContainer, currentRuleContainer: IRuleContainer) => void;\n    loadDecisions: () => void;\n    addRuleContainerConditions: (ruleName: string, conditions: string[]) => void;\n    addRuleContainers: (ruleName: string, containers: string[]) => void;\n}\n\ninterface MatchParams {\n    name: string;\n}\n\ninterface LocationState {\n    data: IRuleContainer,\n    selected: 'containerRule' | 'ruleConditions' | 'containers'\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ntype State = {\n    ruleContainer?: IRuleContainer,\n    formRuleContainer?: IRuleContainer,\n    unsavedConditions: string[],\n    unsavedContainersIds: string[],\n    unsavedContainers: string[],\n}\n\nclass RuleContainer extends BaseComponent<Props, State> {\n\n    state: State = {\n        unsavedConditions: [],\n        unsavedContainersIds: [],\n        unsavedContainers: [],\n    };\n    private mounted = false;\n\n    public componentDidMount(): void {\n        this.loadRuleContainer();\n        this.props.loadDecisions();\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                {this.shouldShowSaveButton() && !isNew(this.props.location.search) && <UnsavedChanged/>}\n                <div className=\"container\">\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private loadRuleContainer = () => {\n        if (!isNew(this.props.location.search)) {\n            const ruleName = this.props.match.params.name;\n            this.props.loadRulesContainer(ruleName);\n        }\n    };\n\n    private getRuleContainer = () =>\n        this.state.ruleContainer || this.props.ruleContainer;\n\n    private getFormRuleContainer = () =>\n        this.state.formRuleContainer || this.props.formRuleContainer;\n\n    private isNew = () =>\n        isNew(this.props.location.search);\n\n    private onPostSuccess = (reply: IReply<IRuleContainer>): void => {\n        const ruleContainer = reply.data;\n        super.toast(`<span class=\"green-text\">Container rule ${this.mounted ? `<b class=\"white-text\">${ruleContainer.name}</b>` : `<a href=/rules/containers/${ruleContainer.name}><b>${ruleContainer.name}</b></a>`} saved</span>`);\n        this.props.addRuleContainer(ruleContainer);\n        this.saveEntities(reply.data);\n        if (this.mounted) {\n            this.updateRuleContainer(ruleContainer);\n            this.props.history.replace(ruleContainer.name);\n        }\n    };\n\n    private onPostFailure = (reason: string, ruleContainer: IRuleContainer): void =>\n        super.toast(`Unable to save container rule <b>${ruleContainer.name}</b>`, 10000, reason, true);\n\n    private onPutSuccess = (reply: IReply<IRuleContainer>): void => {\n        const ruleContainer = reply.data;\n        super.toast(`<span class=\"green-text\">Changes to ${this.mounted ? `<b class=\"white-text\">${ruleContainer.name}</b>` : `<a href=/rules/containers/${ruleContainer.name}><b>${ruleContainer.name}</b></a>`} container rule have been saved</span>`);\n        this.saveEntities(ruleContainer);\n        const previousRuleContainer = this.getRuleContainer();\n        if (previousRuleContainer?.id) {\n            this.props.updateRuleContainer(previousRuleContainer as IRuleContainer, ruleContainer)\n        }\n        if (this.mounted) {\n            this.updateRuleContainer(ruleContainer);\n            this.props.history.replace(ruleContainer.name);\n        }\n    };\n\n    private onPutFailure = (reason: string, ruleContainer: IRuleContainer): void =>\n        super.toast(`Unable to update container rule ${this.mounted ? `<b>${ruleContainer.name}</b>` : `<a href=/rules/containers/${ruleContainer.name}><b>${ruleContainer.name}</b></a>`}`, 10000, reason, true);\n\n    private onDeleteSuccess = (ruleContainer: IRuleContainer): void => {\n        super.toast(`<span class=\"green-text\">Container rule <b class=\"white-text\">${ruleContainer.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.props.history.push(`/rules/containers`);\n        }\n    };\n\n    private onDeleteFailure = (reason: string, ruleContainer: IRuleContainer): void =>\n        super.toast(`Unable to delete container rule ${this.mounted ? `<b>${ruleContainer.name}</b>` : `<a href=/rules/containers/${ruleContainer.name}><b>${ruleContainer.name}</b></a>`}`, 10000, reason, true);\n\n    private shouldShowSaveButton = () =>\n        !!this.state.unsavedConditions.length\n        || !!this.state.unsavedContainersIds.length;\n\n    private saveEntities = (rule: IRuleContainer) => {\n        this.saveRuleConditions(rule);\n        this.saveRuleContainers(rule);\n    };\n\n    private addRuleCondition = (condition: string): void => {\n        this.setState({\n            unsavedConditions: this.state.unsavedConditions.concat(condition)\n        });\n    };\n\n    private removeRuleConditions = (conditions: string[]): void => {\n        this.setState({\n            unsavedConditions: this.state.unsavedConditions.filter(condition => !conditions.includes(condition))\n        });\n    };\n\n    private saveRuleConditions = (rule: IRuleContainer): void => {\n        const {unsavedConditions} = this.state;\n        if (unsavedConditions.length) {\n            postData(`rules/containers/${rule.name}/conditions`, unsavedConditions,\n                () => this.onSaveConditionsSuccess(rule),\n                (reason) => this.onSaveConditionsFailure(rule, reason));\n        }\n    };\n\n    private onSaveConditionsSuccess = (rule: IRuleContainer): void => {\n        this.props.addRuleContainerConditions(rule.name, this.state.unsavedConditions);\n        if (this.mounted) {\n            this.setState({unsavedConditions: []});\n        }\n    };\n\n    private onSaveConditionsFailure = (ruleContainer: IRuleContainer, reason: string): void =>\n        super.toast(`Unable to save conditions of container rule ${this.mounted ? `<b>${ruleContainer.name}</b>` : `<a href=/rules/containers/${ruleContainer.name}><b>${ruleContainer.name}</b></a>`}`, 10000, reason, true);\n\n    private addRuleContainer = (container: string): void => {\n        const containerId = container.split(\" - \")[1]\n        this.setState({\n            unsavedContainersIds: this.state.unsavedContainersIds.concat(containerId),\n            unsavedContainers: this.state.unsavedContainers.concat(container)\n        });\n    };\n\n    private removeRuleContainers = (containers: string[]): void => {\n        const containersIds = containers.map(container => container.split(\" - \")[1])\n        this.setState({\n            unsavedContainersIds: this.state.unsavedContainersIds.filter(container => !containersIds.includes(container)),\n            unsavedContainers: this.state.unsavedContainers.filter(container => !containers.includes(container))\n        });\n    };\n\n    private saveRuleContainers = (rule: IRuleContainer): void => {\n        const {unsavedContainersIds} = this.state;\n        if (unsavedContainersIds.length) {\n            postData(`rules/containers/${rule.name}/containers`, unsavedContainersIds,\n                () => this.onSaveContainersSuccess(rule),\n                (reason) => this.onSaveContainersFailure(rule, reason));\n        }\n    };\n\n    private onSaveContainersSuccess = (rule: IRuleContainer): void => {\n        this.props.addRuleContainers(rule.name, this.state.unsavedContainersIds);\n        if (this.mounted) {\n            this.setState({unsavedContainersIds: []});\n        }\n    };\n\n    private onSaveContainersFailure = (ruleContainer: IRuleContainer, reason: string): void =>\n        super.toast(`Unable to save containers of container rule ${this.mounted ? `<b>${ruleContainer.name}</b>` : `<a href=/rules/containers/${ruleContainer.name}><b>${ruleContainer.name}</b></a>`}`, 10000, reason, true);\n\n    private updateRuleContainer = (ruleContainer: IRuleContainer) => {\n        ruleContainer = Object.values(normalize(ruleContainer, Schemas.RULE_CONTAINER).entities.containerRules || {})[0];\n        const formRuleContainer = {...ruleContainer};\n        removeFields(formRuleContainer);\n        this.setState({ruleContainer: ruleContainer, formRuleContainer: formRuleContainer});\n    };\n\n    private getFields = (containerRule: Partial<IRule>): IFields =>\n        Object.entries(containerRule).map(([key, _]) => {\n            return {\n                [key]: {\n                    id: key,\n                    label: key,\n                    validation:\n                        key === 'priority'\n                            ? {rule: requiredAndNumberAndMinAndMax, args: [0, 2147483647]}\n                            : {rule: requiredAndTrimmed}\n                }\n            };\n        }).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});\n\n    private decisionDropdownOption = (decision: IDecision): string =>\n        decision.ruleDecision;\n\n    private getSelectableDecisions = () =>\n        Object.values(this.props.decisions)\n            .filter(decision => decision.componentType.type.toLowerCase() === componentTypes.SERVICE.type.toLowerCase());\n\n    private containerRule = () => {\n        const {isLoading, error} = this.props;\n        const ruleContainer = this.getRuleContainer();\n        const formRuleContainer = this.getFormRuleContainer();\n        // @ts-ignore\n        const ruleKey: (keyof IRuleContainer) = formRuleContainer && Object.keys(formRuleContainer)[0];\n        const isNewRuleContainer = this.isNew();\n        return (\n            <>\n                {!isNewRuleContainer && isLoading && <LoadingSpinner/>}\n                {!isNewRuleContainer && !isLoading && error && <Error message={error}/>}\n                {(isNewRuleContainer || !isLoading) && (isNewRuleContainer || !error) && formRuleContainer && (\n                    /*@ts-ignore*/\n                    <Form id={ruleKey}\n                          fields={this.getFields(formRuleContainer)}\n                          values={ruleContainer}\n                          isNew={isNew(this.props.location.search)}\n                          showSaveButton={this.shouldShowSaveButton()}\n                          post={{\n                              url: 'rules/containers',\n                              successCallback: this.onPostSuccess,\n                              failureCallback: this.onPostFailure\n                          }}\n                          put={{\n                              url: `rules/containers/${ruleContainer.name}`,\n                              successCallback: this.onPutSuccess,\n                              failureCallback: this.onPutFailure\n                          }}\n                          delete={{\n                              url: `rules/containers/${ruleContainer.name}`,\n                              successCallback: this.onDeleteSuccess,\n                              failureCallback: this.onDeleteFailure\n                          }}\n                          saveEntities={this.saveEntities}>\n                        {Object.entries(formRuleContainer).map(([key, value], index) =>\n                            key === 'decision'\n                                ? <Field<IDecision> key={index}\n                                                    id={key}\n                                                    label={key}\n                                                    type=\"dropdown\"\n                                                    dropdown={{\n                                                        defaultValue: \"Choose decision\",\n                                                        values: this.getSelectableDecisions(),\n                                                        optionToString: this.decisionDropdownOption,\n                                                        emptyMessage: 'No decisions available'\n                                                    }}/>\n                                : <Field key={index}\n                                         id={key}\n                                         label={key}\n                                         type={key === 'priority' ? \"number\" : \"text\"}/>\n                        )}\n                    </Form>\n                )}\n            </>\n        )\n    };\n\n    private conditions = (): JSX.Element =>\n        <RuleContainerConditionList isLoadingRuleContainer={this.props.isLoading}\n                                    loadRuleContainerError={!this.isNew() ? this.props.error : undefined}\n                                    ruleContainer={this.getRuleContainer()}\n                                    unsavedConditions={this.state.unsavedConditions}\n                                    onAddRuleCondition={this.addRuleCondition}\n                                    onRemoveRuleConditions={this.removeRuleConditions}/>;\n\n    private containers = (): JSX.Element =>\n        <RuleContainerContainersList isLoadingRuleContainer={this.props.isLoading}\n                                     loadRuleContainerError={!this.isNew() ? this.props.error : undefined}\n                                     ruleContainer={this.getRuleContainer()}\n                                     unsavedContainersIds={this.state.unsavedContainersIds}\n                                     unsavedContainers={this.state.unsavedContainers}\n                                     onAddRuleContainer={this.addRuleContainer}\n                                     onRemoveRuleContainers={this.removeRuleContainers}/>;\n\n    private tabs = (): Tab[] => [\n        {\n            title: 'Container rule',\n            id: 'containerRule',\n            content: () => this.containerRule(),\n            active: this.props.location.state?.selected === 'containerRule'\n        },\n        {\n            title: 'Conditions',\n            id: 'ruleConditions',\n            content: () => this.conditions(),\n            active: this.props.location.state?.selected === 'ruleConditions'\n        },\n        {\n            title: 'Containers',\n            id: 'containers',\n            content: () => this.containers(),\n            active: this.props.location.state?.selected === 'containers'\n        }\n    ];\n\n}\n\nfunction removeFields(ruleContainer: Partial<IRuleContainer>) {\n    delete ruleContainer[\"id\"];\n    delete ruleContainer[\"conditions\"];\n    delete ruleContainer[\"containers\"];\n}\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.rules.containers.isLoadingRules;\n    const error = state.entities.rules.containers.loadRulesError;\n    const name = props.match.params.name;\n    const ruleContainer = isNew(props.location.search) ? buildNewContainerRule() : state.entities.rules.containers.data[name];\n    let formRuleContainer;\n    if (ruleContainer) {\n        formRuleContainer = {...ruleContainer};\n        removeFields(formRuleContainer);\n    }\n    const decisions = state.entities.decisions.data;\n    return {\n        isLoading,\n        error,\n        ruleContainer,\n        formRuleContainer,\n        decisions,\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadRulesContainer,\n    addRuleContainer,\n    updateRuleContainer,\n    loadDecisions,\n    addRuleContainerConditions,\n    addRuleContainers,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RuleContainer);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {IRuleService} from \"./RuleService\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport ListItem from \"../../../../components/list/ListItem\";\nimport styles from \"../../../../components/list/ListItem.module.css\";\nimport React from \"react\";\nimport ControlledList from \"../../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {loadConditions, loadRuleServiceConditions, removeRuleServiceConditions} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {IRuleCondition} from \"../conditions/RuleCondition\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    ruleConditions: string[];\n    conditions: { [key: string]: IRuleCondition };\n}\n\ninterface DispatchToProps {\n    loadConditions: () => void;\n    loadRuleServiceConditions: (ruleName: string) => void;\n    removeRuleServiceConditions: (ruleName: string, conditions: string[]) => void;\n}\n\ninterface ServiceRuleConditionListProps {\n    isLoadingRuleService: boolean;\n    loadRuleServiceError?: string | null;\n    ruleService: IRuleService | Partial<IRuleService> | null;\n    unsavedConditions: string[];\n    onAddRuleCondition: (condition: string) => void;\n    onRemoveRuleConditions: (condition: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & ServiceRuleConditionListProps\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass RuleServiceConditionList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadConditions();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.ruleService?.name && this.props.ruleService?.name) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList isLoading={!isNew ? this.props.isLoadingRuleService || this.props.isLoading : undefined}\n                               error={!isNew ? this.props.loadRuleServiceError || this.props.error : undefined}\n                               emptyMessage={`Conditions list is empty`}\n                               data={this.props.ruleConditions}\n                               dropdown={{\n                                   id: 'conditions',\n                                   title: 'Add condition',\n                                   empty: 'No conditions to add',\n                                   data: this.getSelectableConditionNames()\n                               }}\n                               show={this.condition}\n                               onAdd={this.onAdd}\n                               onRemove={this.onRemove}\n                               onDelete={{\n                                   url: `rules/services/${this.props.ruleService?.name}/conditions`,\n                                   successCallback: this.onDeleteSuccess,\n                                   failureCallback: this.onDeleteFailure\n                               }}\n                               entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.ruleService?.name) {\n            const {name} = this.props.ruleService;\n            this.props.loadRuleServiceConditions(name);\n        }\n    };\n\n    private isNew = () =>\n        this.props.ruleService?.name === undefined;\n\n    private condition = (index: number, condition: string, separate: boolean, checked: boolean,\n                         handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedConditions.includes(condition);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={styles.linkedItemContent}>\n                    <label>\n                        <input id={condition}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                {condition}\n              </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/rules/conditions/${condition}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (condition: string): void =>\n        this.props.onAddRuleCondition(condition);\n\n    private onRemove = (conditions: string[]) =>\n        this.props.onRemoveRuleConditions(conditions);\n\n    private onDeleteSuccess = (conditions: string[]): void => {\n        if (this.props.ruleService?.name) {\n            const {name} = this.props.ruleService;\n            this.props.removeRuleServiceConditions(name, conditions);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to delete condition`, 10000, reason, true);\n\n    private getSelectableConditionNames = () => {\n        const {conditions, ruleConditions, unsavedConditions} = this.props;\n        return Object.keys(conditions)\n            .filter(condition => !ruleConditions.includes(condition) && !unsavedConditions.includes(condition));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: ServiceRuleConditionListProps): StateToProps {\n    const ruleName = ownProps.ruleService?.name;\n    const rule = ruleName && state.entities.rules.services.data[ruleName];\n    const ruleConditions = rule && rule.conditions;\n    return {\n        isLoading: state.entities.rules.services.isLoadingConditions,\n        error: state.entities.rules.services.loadConditionsError,\n        ruleConditions: ruleConditions || [],\n        conditions: state.entities.rules.conditions.data,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadRuleServiceConditions,\n        removeRuleServiceConditions,\n        loadConditions,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RuleServiceConditionList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport ListItem from \"../../../../components/list/ListItem\";\nimport styles from \"../../../../components/list/ListItem.module.css\";\nimport React from \"react\";\nimport ControlledList from \"../../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {loadRuleServices, loadServices, removeRuleServices,} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {IService} from \"../../services/Service\";\nimport {IRuleService} from \"./RuleService\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    ruleServices: string[];\n    services: { [key: string]: IService };\n}\n\ninterface DispatchToProps {\n    loadServices: () => void;\n    loadRuleServices: (ruleName: string) => void;\n    removeRuleServices: (ruleName: string, services: string[]) => void;\n}\n\ninterface ServiceRuleServicesListProps {\n    isLoadingRuleService: boolean;\n    loadRuleServiceError?: string | null;\n    ruleService: IRuleService | Partial<IRuleService> | null;\n    unsavedServices: string[];\n    onAddRuleService: (service: string) => void;\n    onRemoveRuleServices: (services: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & ServiceRuleServicesListProps\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass RuleServiceServicesList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadServices();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.ruleService?.name && this.props.ruleService?.name) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList isLoading={!isNew ? this.props.isLoadingRuleService || this.props.isLoading : undefined}\n                               error={!isNew ? this.props.loadRuleServiceError || this.props.error : undefined}\n                               emptyMessage={`Services list is empty`}\n                               data={this.props.ruleServices}\n                               dropdown={{\n                                   id: 'services',\n                                   title: 'Add service',\n                                   empty: 'No services to add',\n                                   data: this.getSelectableServiceNames()\n                               }}\n                               show={this.service}\n                               onAdd={this.onAdd}\n                               onRemove={this.onRemove}\n                               onDelete={{\n                                   url: `rules/services/${this.props.ruleService?.name}/services`,\n                                   successCallback: this.onDeleteSuccess,\n                                   failureCallback: this.onDeleteFailure\n                               }}\n                               entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.ruleService?.name) {\n            const {name} = this.props.ruleService;\n            this.props.loadRuleServices(name);\n        }\n    };\n\n    private isNew = () =>\n        this.props.ruleService?.name === undefined;\n\n    private service = (index: number, service: string, separate: boolean, checked: boolean,\n                       handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedServices.includes(service);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={styles.linkedItemContent}>\n                    <label>\n                        <input id={service}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n              <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                {service}\n              </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/services/${service}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (service: string): void =>\n        this.props.onAddRuleService(service);\n\n    private onRemove = (services: string[]) =>\n        this.props.onRemoveRuleServices(services);\n\n    private onDeleteSuccess = (services: string[]): void => {\n        if (this.props.ruleService?.name) {\n            const {name} = this.props.ruleService;\n            this.props.removeRuleServices(name, services);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to remove service`, 10000, reason, true);\n\n    private getSelectableServiceNames = () => {\n        const {services, ruleServices, unsavedServices} = this.props;\n        return Object.keys(services)\n            .filter(service => !ruleServices.includes(service) && !unsavedServices.includes(service));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: ServiceRuleServicesListProps): StateToProps {\n    const ruleName = ownProps.ruleService?.name;\n    const rule = ruleName && state.entities.rules.services.data[ruleName];\n    const ruleServices = rule && rule.services;\n    return {\n        isLoading: state.entities.rules.services.isLoadingServices,\n        error: state.entities.rules.services.loadServicesError,\n        ruleServices: ruleServices || [],\n        services: state.entities.services.data,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadRuleServices,\n        removeRuleServices,\n        loadServices,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RuleServiceServicesList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {componentTypes, IDecision, IRule} from \"../Rule\";\nimport {RouteComponentProps} from \"react-router\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport Form, {IFields, requiredAndNumberAndMinAndMax, requiredAndTrimmed} from \"../../../../components/form/Form\";\nimport LoadingSpinner from \"../../../../components/list/LoadingSpinner\";\nimport {Error} from \"../../../../components/errors/Error\";\nimport Field from \"../../../../components/form/Field\";\nimport Tabs, {Tab} from \"../../../../components/tabs/Tabs\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {\n    addRuleService,\n    addRuleServiceConditions,\n    addRuleServices,\n    loadDecisions,\n    loadRulesService,\n    updateRuleService,\n} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport React from \"react\";\nimport {IReply, postData} from \"../../../../utils/api\";\nimport RuleServiceConditionList from \"./RuleServiceConditionList\";\nimport UnsavedChanged from \"../../../../components/form/UnsavedChanges\";\nimport RuleServiceServicesList from \"./RuleServiceServicesList\";\nimport {isNew} from \"../../../../utils/router\";\nimport {normalize} from \"normalizr\";\nimport {Schemas} from \"../../../../middleware/api\";\n\nexport interface IRuleService extends IRule {\n    services?: string[]\n}\n\nconst buildNewServiceRule = (): Partial<IRuleService> => ({\n    name: undefined,\n    priority: 0,\n    decision: undefined,\n    generic: undefined,\n});\n\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    ruleService: Partial<IRuleService>;\n    formRuleService?: Partial<IRuleService>,\n    decisions: { [key: string]: IDecision },\n}\n\ninterface DispatchToProps {\n    loadRulesService: (name: string) => void;\n    addRuleService: (ruleService: IRuleService) => void;\n    updateRuleService: (previousRuleService: IRuleService, currentRuleService: IRuleService) => void;\n    loadDecisions: () => void;\n    addRuleServiceConditions: (ruleName: string, conditions: string[]) => void;\n    addRuleServices: (ruleName: string, services: string[]) => void;\n}\n\ninterface MatchParams {\n    name: string;\n}\n\ninterface LocationState {\n    data: IRuleService,\n    selected: 'serviceRule' | 'ruleConditions' | 'services'\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ntype State = {\n    ruleService?: IRuleService,\n    formRuleService?: IRuleService,\n    unsavedConditions: string[],\n    unsavedServices: string[],\n    isGeneric: boolean,\n}\n\nclass RuleService extends BaseComponent<Props, State> {\n\n    state: State = {\n        unsavedConditions: [],\n        unsavedServices: [],\n        isGeneric: this.props.ruleService?.generic || false,\n    };\n    private mounted = false;\n\n    public componentDidMount(): void {\n        this.loadRuleService();\n        this.props.loadDecisions();\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any) {\n        if (prevProps.ruleService?.generic !== this.props.ruleService?.generic) {\n            this.setState({isGeneric: this.props.ruleService?.generic || false})\n        }\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                {this.shouldShowSaveButton() && !isNew(this.props.location.search) && <UnsavedChanged/>}\n                <div className=\"container\">\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private loadRuleService = () => {\n        if (!isNew(this.props.location.search)) {\n            const ruleName = this.props.match.params.name;\n            this.props.loadRulesService(ruleName);\n        }\n    };\n\n    private getRuleService = () =>\n        this.state.ruleService || this.props.ruleService;\n\n    private getFormRuleService = () =>\n        this.state.formRuleService || this.props.formRuleService;\n\n    private isNew = () =>\n        isNew(this.props.location.search);\n\n    private onPostSuccess = (reply: IReply<IRuleService>): void => {\n        const ruleService = reply.data;\n        super.toast(`<span class=\"green-text\">Service rule ${this.mounted ? `<b class=\"white-text\">${ruleService.name}</b>` : `<a href=/rules/services/${ruleService.name}><b>${ruleService.name}</b></a>`} saved</span>`);\n        this.props.addRuleService(ruleService);\n        this.saveEntities(reply.data);\n        if (this.mounted) {\n            this.updateRuleService(ruleService);\n            this.props.history.replace(ruleService.name);\n        }\n    };\n\n    private onPostFailure = (reason: string, ruleService: IRuleService): void =>\n        super.toast(`Unable to save service rule<b>${ruleService.name}</b>`, 10000, reason, true);\n\n    private onPutSuccess = (reply: IReply<IRuleService>): void => {\n        const ruleService = reply.data;\n        super.toast(`<span class=\"green-text\">Changes to ${this.mounted ? `<b class=\"white-text\">${ruleService.name}</b>` : `<a href=/rules/services/${ruleService.name}><b>${ruleService.name}</b></a>`} service rule have been saved</span>`);\n        this.saveEntities(ruleService);\n        const previousRuleService = this.getRuleService();\n        if (previousRuleService?.id) {\n            this.props.updateRuleService(previousRuleService as IRuleService, ruleService);\n        }\n        if (this.mounted) {\n            this.updateRuleService(ruleService);\n            this.props.history.replace(ruleService.name);\n        }\n    };\n\n    private onPutFailure = (reason: string, ruleService: IRuleService): void =>\n        super.toast(`Unable to update service rule ${this.mounted ? `<b>${ruleService.name}</b>` : `<a href=/rules/services/${ruleService.name}><b>${ruleService.name}</b></a>`}`, 10000, reason, true);\n\n    private onDeleteSuccess = (ruleService: IRuleService): void => {\n        super.toast(`<span class=\"green-text\">Service rule <b class=\"white-text\">${ruleService.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.props.history.push(`/rules/services`);\n        }\n    };\n\n    private onDeleteFailure = (reason: string, ruleService: IRuleService): void =>\n        super.toast(`Unable to delete service rule ${this.mounted ? `<b>${ruleService.name}</b>` : `<a href=/rules/services/${ruleService.name}><b>${ruleService.name}</b></a>`}`, 10000, reason, true);\n\n    private shouldShowSaveButton = () =>\n        !!this.state.unsavedConditions.length\n        || !!this.state.unsavedServices.length;\n\n    private saveEntities = (rule: IRuleService) => {\n        this.saveRuleConditions(rule);\n        this.saveRuleServices(rule);\n    };\n\n    private addRuleCondition = (condition: string): void => {\n        this.setState({\n            unsavedConditions: this.state.unsavedConditions.concat(condition)\n        });\n    };\n\n    private removeRuleConditions = (conditions: string[]): void => {\n        this.setState({\n            unsavedConditions: this.state.unsavedConditions.filter(condition => !conditions.includes(condition))\n        });\n    };\n\n    private saveRuleConditions = (rule: IRuleService): void => {\n        const {unsavedConditions} = this.state;\n        if (unsavedConditions.length) {\n            postData(`rules/services/${rule.name}/conditions`, unsavedConditions,\n                () => this.onSaveConditionsSuccess(rule),\n                (reason) => this.onSaveConditionsFailure(rule, reason));\n        }\n    };\n\n    private onSaveConditionsSuccess = (rule: IRuleService): void => {\n        this.props.addRuleServiceConditions(rule.name, this.state.unsavedConditions);\n        if (this.mounted) {\n            this.setState({unsavedConditions: []});\n        }\n    };\n\n    private onSaveConditionsFailure = (ruleService: IRuleService, reason: string): void =>\n        super.toast(`Unable to save conditions of service rule ${this.mounted ? `<b>${ruleService.name}</b>` : `<a href=/rules/services/${ruleService.name}><b>${ruleService.name}</b></a>`}`, 10000, reason, true);\n\n    private addRuleService = (service: string): void =>\n        this.setState({\n            unsavedServices: this.state.unsavedServices.concat(service)\n        });\n\n    private removeRuleServices = (services: string[]): void => {\n        this.setState({\n            unsavedServices: this.state.unsavedServices.filter(service => !services.includes(service))\n        });\n    };\n\n    private saveRuleServices = (rule: IRuleService): void => {\n        const {unsavedServices} = this.state;\n        if (unsavedServices.length) {\n            postData(`rules/services/${rule.name}/services`, unsavedServices,\n                () => this.onSaveServicesSuccess(rule),\n                (reason) => this.onSaveServicesFailure(rule, reason));\n        }\n    };\n\n    private onSaveServicesSuccess = (rule: IRuleService): void => {\n        this.props.addRuleServices(rule.name, this.state.unsavedServices);\n        if (this.mounted) {\n            this.setState({unsavedServices: []});\n        }\n    };\n\n    private onSaveServicesFailure = (ruleService: IRuleService, reason: string): void =>\n        super.toast(`Unable to save services of service rule ${this.mounted ? `<b>${ruleService.name}</b>` : `<a href=/rules/services/${ruleService.name}><b>${ruleService.name}</b></a>`}`, 10000, reason, true);\n\n    private updateRuleService = (ruleService: IRuleService) => {\n        ruleService = Object.values(normalize(ruleService, Schemas.RULE_SERVICE).entities.serviceRules || {})[0];\n        const formRuleService = {...ruleService};\n        removeFields(formRuleService);\n        this.setState({ruleService: ruleService, formRuleService: formRuleService});\n    };\n\n    private getFields = (serviceRule: Partial<IRule>): IFields =>\n        Object.entries(serviceRule).map(([key, _]) => {\n            return {\n                [key]: {\n                    id: key,\n                    label: key,\n                    validation:\n                        key === 'priority'\n                            ? {rule: requiredAndNumberAndMinAndMax, args: [0, 2147483647]}\n                            : {rule: requiredAndTrimmed}\n                }\n            };\n        }).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});\n\n    private decisionDropdownOption = (decision: IDecision): string =>\n        decision.ruleDecision;\n\n    private isGenericSelected = (generic: boolean) =>\n        this.setState({isGeneric: generic});\n\n    private getSelectableDecisions = () =>\n        Object.values(this.props.decisions).filter(decision =>\n            decision.componentType.type.toLocaleLowerCase() === componentTypes.SERVICE.type.toLocaleLowerCase());\n\n    private serviceRule = () => {\n        const {isLoading, error} = this.props;\n        const ruleService = this.getRuleService();\n        const formRuleService = this.getFormRuleService();\n        // @ts-ignore\n        const ruleKey: (keyof IRuleService) = formRuleService && Object.keys(formRuleService)[0];\n        const isNewRuleService = this.isNew();\n        return (\n            <>\n                {!isNewRuleService && isLoading && <LoadingSpinner/>}\n                {!isNewRuleService && !isLoading && error && <Error message={error}/>}\n                {(isNewRuleService || !isLoading) && (isNewRuleService || !error) && formRuleService && (\n                    /*@ts-ignore*/\n                    <Form id={ruleKey}\n                          fields={this.getFields(formRuleService)}\n                          values={ruleService}\n                          isNew={isNew(this.props.location.search)}\n                          showSaveButton={this.shouldShowSaveButton()}\n                          post={{\n                              url: 'rules/services',\n                              successCallback: this.onPostSuccess,\n                              failureCallback: this.onPostFailure\n                          }}\n                          put={{\n                              url: `rules/services/${ruleService.name}`,\n                              successCallback: this.onPutSuccess,\n                              failureCallback: this.onPutFailure\n                          }}\n                          delete={{\n                              url: `rules/services/${ruleService.name}`,\n                              successCallback: this.onDeleteSuccess,\n                              failureCallback: this.onDeleteFailure\n                          }}\n                          saveEntities={this.saveEntities}>\n                        {Object.entries(formRuleService).map(([key, value], index) =>\n                            key === 'decision'\n                                ? <Field<IDecision> key={index}\n                                                    id={key}\n                                                    label={key}\n                                                    type=\"dropdown\"\n                                                    dropdown={{\n                                                        defaultValue: \"Choose decision\",\n                                                        values: this.getSelectableDecisions(),\n                                                        optionToString: this.decisionDropdownOption,\n                                                        emptyMessage: 'No decisions available'\n                                                    }}/>\n                                : key === 'generic'\n                                ? <Field key={index}\n                                         id={key}\n                                         type='checkbox'\n                                         checkbox={{label: 'apply to all services', checkCallback: this.isGenericSelected}}/>\n                                : <Field key={index}\n                                         id={key}\n                                         label={key}\n                                         type={key === 'priority' ? \"number\" : \"text\"}/>\n                        )}\n                    </Form>\n                )}\n            </>\n        )\n    };\n\n    private conditions = (): JSX.Element =>\n        <RuleServiceConditionList isLoadingRuleService={this.props.isLoading}\n                                  loadRuleServiceError={!this.isNew() ? this.props.error : undefined}\n                                  ruleService={this.getRuleService()}\n                                  unsavedConditions={this.state.unsavedConditions}\n                                  onAddRuleCondition={this.addRuleCondition}\n                                  onRemoveRuleConditions={this.removeRuleConditions}/>;\n\n    private services = (): JSX.Element =>\n        <RuleServiceServicesList isLoadingRuleService={this.props.isLoading}\n                                 loadRuleServiceError={!this.isNew() ? this.props.error : undefined}\n                                 ruleService={this.getRuleService()}\n                                 unsavedServices={this.state.unsavedServices}\n                                 onAddRuleService={this.addRuleService}\n                                 onRemoveRuleServices={this.removeRuleServices}/>;\n\n    private tabs = (): Tab[] => [\n        {\n            title: 'Service rule',\n            id: 'serviceRule',\n            content: () => this.serviceRule(),\n            active: this.props.location.state?.selected === 'serviceRule'\n        },\n        {\n            title: 'Conditions',\n            id: 'ruleConditions',\n            content: () => this.conditions(),\n            active: this.props.location.state?.selected === 'ruleConditions'\n        },\n        {\n            title: 'Services',\n            id: 'services',\n            content: () => this.services(),\n            disabled: this.state.isGeneric,\n            active: this.props.location.state?.selected === 'services'\n        }\n    ];\n\n}\n\nfunction removeFields(ruleService: Partial<IRuleService>) {\n    delete ruleService[\"id\"];\n    delete ruleService[\"conditions\"];\n    delete ruleService[\"services\"];\n}\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.rules.services.isLoadingRules;\n    const error = state.entities.rules.services.loadRulesError;\n    const name = props.match.params.name;\n    const ruleService = isNew(props.location.search) ? buildNewServiceRule() : state.entities.rules.services.data[name];\n    let formRuleService;\n    if (ruleService) {\n        formRuleService = {...ruleService};\n        removeFields(formRuleService);\n    }\n    const decisions = state.entities.decisions.data;\n    return {\n        isLoading,\n        error,\n        ruleService,\n        formRuleService,\n        decisions,\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadRulesService,\n    addRuleService,\n    updateRuleService,\n    loadDecisions,\n    addRuleServiceConditions,\n    addRuleServices,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RuleService);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport ListItem from \"../../../../components/list/ListItem\";\nimport styles from \"../../../../components/list/ListItem.module.css\";\nimport ControlledList from \"../../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {\n    loadCloudHosts,\n    loadSimulatedHostMetricCloudHosts,\n    removeSimulatedHostMetricCloudHosts,\n} from \"../../../../actions\";\nimport {ICloudHost} from \"../../hosts/cloud/CloudHost\";\nimport {ISimulatedHostMetric} from \"./SimulatedHostMetric\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    cloudHosts: { [key: string]: ICloudHost },\n    simulatedMetricCloudHosts: string[];\n}\n\ninterface DispatchToProps {\n    loadCloudHosts: () => void;\n    loadSimulatedHostMetricCloudHosts: (name: string) => void;\n    removeSimulatedHostMetricCloudHosts: (name: string, cloudHosts: string[]) => void;\n}\n\ninterface SimulatedHostMetricCloudHostListProps {\n    isLoadingSimulatedHostMetric: boolean;\n    loadSimulatedHostMetricError?: string | null;\n    simulatedHostMetric: ISimulatedHostMetric | Partial<ISimulatedHostMetric> | null;\n    unsavedCloudHosts: string[];\n    onAddCloudHost: (cloudHost: string) => void;\n    onRemoveCloudHosts: (cloudHost: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & SimulatedHostMetricCloudHostListProps;\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass SimulatedHostMetricCloudHostList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.simulatedHostMetric?.name && this.props.simulatedHostMetric?.name) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList\n            isLoading={!isNew ? this.props.isLoadingSimulatedHostMetric || this.props.isLoading : undefined}\n            error={!isNew ? this.props.loadSimulatedHostMetricError || this.props.error : undefined}\n            emptyMessage={`Cloud hosts list is empty`}\n            data={this.props.simulatedMetricCloudHosts}\n            dropdown={{\n                id: 'cloudHosts',\n                title: 'Add cloud host',\n                empty: 'No cloud hosts to add',\n                data: this.getSelectableCloudHosts()\n            }}\n            show={this.cloudHost}\n            onAdd={this.onAdd}\n            onRemove={this.onRemove}\n            onDelete={{\n                url: `simulated-metrics/hosts/${this.props.simulatedHostMetric?.name}/cloud-hosts`,\n                successCallback: this.onDeleteSuccess,\n                failureCallback: this.onDeleteFailure\n            }}\n            entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        this.props.loadCloudHosts();\n        if (this.props.simulatedHostMetric?.name) {\n            const {name} = this.props.simulatedHostMetric;\n            this.props.loadSimulatedHostMetricCloudHosts(name);\n        }\n    };\n\n    private isNew = () =>\n        this.props.simulatedHostMetric?.name === undefined;\n\n    private cloudHost = (index: number, cloudHost: string, separate: boolean, checked: boolean,\n                         handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedCloudHosts.includes(cloudHost);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${styles.linkedItemContent}`}>\n                    <label>\n                        <input id={cloudHost}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n               <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                 {cloudHost}\n               </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/hosts/cloud/${cloudHost}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (cloudHost: string): void =>\n        this.props.onAddCloudHost(cloudHost);\n\n    private onRemove = (cloudHost: string[]) =>\n        this.props.onRemoveCloudHosts(cloudHost);\n\n    private onDeleteSuccess = (cloudHost: string[]): void => {\n        if (this.props.simulatedHostMetric?.name) {\n            const {name} = this.props.simulatedHostMetric;\n            this.props.removeSimulatedHostMetricCloudHosts(name, cloudHost);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to remove cloud host`, 10000, reason, true);\n\n    private getSelectableCloudHosts = () => {\n        const {cloudHosts, simulatedMetricCloudHosts, unsavedCloudHosts} = this.props;\n        return Object.keys(cloudHosts).filter(cloudHost => !simulatedMetricCloudHosts.includes(cloudHost) && !unsavedCloudHosts.includes(cloudHost));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: SimulatedHostMetricCloudHostListProps): StateToProps {\n    const name = ownProps.simulatedHostMetric?.name;\n    const simulatedMetric = name && state.entities.simulatedMetrics.hosts.data[name];\n    const simulatedMetricCloudHosts = simulatedMetric && simulatedMetric.cloudHosts;\n    return {\n        isLoading: state.entities.simulatedMetrics.hosts.isLoadingCloudHosts,\n        error: state.entities.simulatedMetrics.hosts.loadCloudHostsError,\n        cloudHosts: state.entities.hosts.cloud.data,\n        simulatedMetricCloudHosts: simulatedMetricCloudHosts || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadCloudHosts,\n        loadSimulatedHostMetricCloudHosts,\n        removeSimulatedHostMetricCloudHosts,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimulatedHostMetricCloudHostList);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport ListItem from \"../../../../components/list/ListItem\";\nimport styles from \"../../../../components/list/ListItem.module.css\";\nimport ControlledList from \"../../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {\n    loadEdgeHosts,\n    loadSimulatedHostMetricEdgeHosts,\n    removeSimulatedHostMetricEdgeHosts,\n} from \"../../../../actions\";\nimport {IEdgeHost} from \"../../hosts/edge/EdgeHost\";\nimport {ISimulatedHostMetric} from \"./SimulatedHostMetric\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    edgeHosts: { [key: string]: IEdgeHost },\n    simulatedMetricEdgeHosts: string[];\n}\n\ninterface DispatchToProps {\n    loadEdgeHosts: () => void;\n    loadSimulatedHostMetricEdgeHosts: (name: string) => void;\n    removeSimulatedHostMetricEdgeHosts: (name: string, edgeHosts: string[]) => void;\n}\n\ninterface SimulatedHostMetricEdgeHostListProps {\n    isLoadingSimulatedHostMetric: boolean;\n    loadSimulatedHostMetricError?: string | null;\n    simulatedHostMetric: ISimulatedHostMetric | Partial<ISimulatedHostMetric> | null;\n    unsavedEdgeHosts: string[];\n    onAddEdgeHost: (edgeHost: string) => void;\n    onRemoveEdgeHosts: (edgeHost: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & SimulatedHostMetricEdgeHostListProps;\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass SimulatedHostMetricEdgeHostList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.simulatedHostMetric?.name && this.props.simulatedHostMetric?.name) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList\n            isLoading={!isNew ? this.props.isLoadingSimulatedHostMetric || this.props.isLoading : undefined}\n            error={!isNew ? this.props.loadSimulatedHostMetricError || this.props.error : undefined}\n            emptyMessage={`Edge hosts list is empty`}\n            data={this.props.simulatedMetricEdgeHosts}\n            dropdown={{\n                id: 'edgeHosts',\n                title: 'Add edge host',\n                empty: 'No edge hosts to add',\n                data: this.getSelectableEdgeHosts()\n            }}\n            show={this.edgeHost}\n            onAdd={this.onAdd}\n            onRemove={this.onRemove}\n            onDelete={{\n                url: `simulated-metrics/hosts/${this.props.simulatedHostMetric?.name}/edge-hosts`,\n                successCallback: this.onDeleteSuccess,\n                failureCallback: this.onDeleteFailure\n            }}\n            entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        this.props.loadEdgeHosts();\n        if (this.props.simulatedHostMetric?.name) {\n            const {name} = this.props.simulatedHostMetric;\n            this.props.loadSimulatedHostMetricEdgeHosts(name);\n        }\n    };\n\n    private isNew = () =>\n        this.props.simulatedHostMetric?.name === undefined;\n\n    private edgeHost = (index: number, edgeHost: string, separate: boolean, checked: boolean,\n                        handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedEdgeHosts.includes(edgeHost);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${styles.linkedItemContent}`}>\n                    <label>\n                        <input id={edgeHost}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n               <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                 {edgeHost}\n               </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/hosts/edge/${edgeHost}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (edgeHost: string): void =>\n        this.props.onAddEdgeHost(edgeHost);\n\n    private onRemove = (edgeHost: string[]) =>\n        this.props.onRemoveEdgeHosts(edgeHost);\n\n    private onDeleteSuccess = (edgeHost: string[]): void => {\n        if (this.props.simulatedHostMetric?.name) {\n            const {name} = this.props.simulatedHostMetric;\n            this.props.removeSimulatedHostMetricEdgeHosts(name, edgeHost);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to remove edge host`, 10000, reason, true);\n\n    private getSelectableEdgeHosts = () => {\n        const {edgeHosts, simulatedMetricEdgeHosts, unsavedEdgeHosts} = this.props;\n        return Object.keys(edgeHosts).filter(edgeHost => !simulatedMetricEdgeHosts.includes(edgeHost)\n            && !unsavedEdgeHosts.includes(edgeHost));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: SimulatedHostMetricEdgeHostListProps): StateToProps {\n    const name = ownProps.simulatedHostMetric?.name;\n    const simulatedMetric = name && state.entities.simulatedMetrics.hosts.data[name];\n    const simulatedMetricEdgeHosts = simulatedMetric && simulatedMetric.edgeHosts;\n    return {\n        isLoading: state.entities.simulatedMetrics.hosts.isLoadingEdgeHosts,\n        error: state.entities.simulatedMetrics.hosts.loadEdgeHostsError,\n        edgeHosts: state.entities.hosts.edge.data,\n        simulatedMetricEdgeHosts: simulatedMetricEdgeHosts || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadEdgeHosts,\n        loadSimulatedHostMetricEdgeHosts,\n        removeSimulatedHostMetricEdgeHosts,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimulatedHostMetricEdgeHostList);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport IDatabaseData from \"../../../../components/IDatabaseData\";\nimport {RouteComponentProps} from \"react-router\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport Form, {IFields, requiredAndTrimmed} from \"../../../../components/form/Form\";\nimport LoadingSpinner from \"../../../../components/list/LoadingSpinner\";\nimport {Error} from \"../../../../components/errors/Error\";\nimport Field from \"../../../../components/form/Field\";\nimport Tabs, {Tab} from \"../../../../components/tabs/Tabs\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {\n    addSimulatedHostMetric,\n    addSimulatedHostMetricCloudHosts,\n    addSimulatedHostMetricEdgeHosts,\n    loadFields,\n    loadSimulatedHostMetrics,\n    updateSimulatedHostMetric\n} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport React from \"react\";\nimport {IReply, postData} from \"../../../../utils/api\";\nimport UnsavedChanged from \"../../../../components/form/UnsavedChanges\";\nimport {isNew} from \"../../../../utils/router\";\nimport {normalize} from \"normalizr\";\nimport {Schemas} from \"../../../../middleware/api\";\nimport {IField} from \"../../rules/Rule\";\nimport SimulatedHostMetricCloudHostList from \"./SimulatedHostMetricCloudHostList\";\nimport SimulatedHostMetricEdgeHostList from \"./SimulatedHostMetricEdgeHostList\";\n\nexport interface ISimulatedHostMetric extends IDatabaseData {\n    name: string;\n    field: IField;\n    minimumValue: number;\n    maximumValue: number;\n    override: boolean;\n    generic: boolean;\n    active: boolean;\n    cloudHosts?: string[];\n    edgeHosts?: string[];\n}\n\nconst buildNewSimulatedHostMetric = (): Partial<ISimulatedHostMetric> => ({\n    name: undefined,\n    field: undefined,\n    minimumValue: undefined,\n    maximumValue: undefined,\n    generic: undefined,\n    override: true,\n    active: true,\n});\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    simulatedHostMetric: Partial<ISimulatedHostMetric>;\n    formSimulatedHostMetric?: Partial<ISimulatedHostMetric>;\n    fields: { [key: string]: IField };\n}\n\ninterface DispatchToProps {\n    loadSimulatedHostMetrics: (name: string) => void;\n    addSimulatedHostMetric: (simulatedHostMetric: ISimulatedHostMetric) => void;\n    updateSimulatedHostMetric: (previousSimulatedHostMetric: ISimulatedHostMetric,\n                                currentSimulatedHostMetric: ISimulatedHostMetric) => void;\n    loadFields: () => void;\n    addSimulatedHostMetricCloudHosts: (name: string, cloudHosts: string[]) => void;\n    addSimulatedHostMetricEdgeHosts: (name: string, edgeHosts: string[]) => void;\n}\n\ninterface MatchParams {\n    name: string;\n}\n\ninterface LocationState {\n    data: ISimulatedHostMetric,\n    selected: 'simulatedHostMetric' | 'cloudHosts' | 'edgeHosts',\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ninterface State {\n    simulatedHostMetric?: ISimulatedHostMetric,\n    formSimulatedHostMetric?: ISimulatedHostMetric,\n    unsavedCloudHosts: string[],\n    unsavedEdgeHosts: string[],\n    isGeneric: boolean,\n}\n\nclass SimulatedHostMetric extends BaseComponent<Props, State> {\n\n    state: State = {\n        unsavedEdgeHosts: [],\n        unsavedCloudHosts: [],\n        isGeneric: this.props.simulatedHostMetric?.generic || false,\n    };\n    private mounted = false;\n\n    public componentDidMount(): void {\n        this.loadSimulatedHostMetric();\n        this.props.loadFields();\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                {this.shouldShowSaveButton() && !isNew(this.props.location.search) && <UnsavedChanged/>}\n                <div className=\"container\">\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private loadSimulatedHostMetric = () => {\n        if (!this.isNew()) {\n            const name = this.props.match.params.name;\n            this.props.loadSimulatedHostMetrics(name);\n        }\n    };\n\n    private getSimulatedHostMetric = () =>\n        this.props.simulatedHostMetric || this.state.simulatedHostMetric;\n\n    private getFormSimulatedHostMetric = () =>\n        this.props.formSimulatedHostMetric || this.state.formSimulatedHostMetric;\n\n    private isNew = () =>\n        isNew(this.props.location.search);\n\n    private onPostSuccess = (reply: IReply<ISimulatedHostMetric>): void => {\n        const simulatedMetric = reply.data;\n        super.toast(`<span class=\"green-text\">Simulated host metric ${this.mounted ? `<b class=\"white-text\">${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/hosts/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`} saved</span>`);\n        this.props.addSimulatedHostMetric(simulatedMetric);\n        this.saveEntities(simulatedMetric);\n        if (this.mounted) {\n            this.updateSimulatedHostMetric(simulatedMetric);\n            this.props.history.replace(simulatedMetric.name);\n        }\n    };\n\n    private onPostFailure = (reason: string, simulatedHostMetric: ISimulatedHostMetric): void =>\n        super.toast(`Unable to save simulated host metric <b>${simulatedHostMetric.name}</b>`, 10000, reason, true);\n\n    private onPutSuccess = (reply: IReply<ISimulatedHostMetric>): void => {\n        const simulatedMetric = reply.data;\n        super.toast(`<span class=\"green-text\">Changes to ${this.mounted ? `<b class=\"white-text\">${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/hosts/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`} simulated host metric have been saved</span>`);\n        this.saveEntities(simulatedMetric);\n        const previousSimulatedHostMetric = this.getSimulatedHostMetric();\n        if (previousSimulatedHostMetric.id) {\n            this.props.updateSimulatedHostMetric(previousSimulatedHostMetric as ISimulatedHostMetric, simulatedMetric);\n        }\n        if (this.mounted) {\n            this.updateSimulatedHostMetric(simulatedMetric);\n            this.props.history.replace(simulatedMetric.name);\n        }\n    };\n\n    private onPutFailure = (reason: string, simulatedMetric: ISimulatedHostMetric): void =>\n        super.toast(`Unable to update simulated host metric ${this.mounted ? `<b>${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/hosts/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`}`, 10000, reason, true);\n\n    private onDeleteSuccess = (simulatedMetric: ISimulatedHostMetric): void => {\n        super.toast(`<span class=\"green-text\">Simulated host metric <b class=\"white-text\">${simulatedMetric.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.props.history.push(`/simulated-metrics/hosts`);\n        }\n    };\n\n    private onDeleteFailure = (reason: string, simulatedMetric: ISimulatedHostMetric): void =>\n        super.toast(`Unable to delete simulated host metric ${this.mounted ? `<b>${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/hosts/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`}`, 10000, reason, true);\n\n    private shouldShowSaveButton = () =>\n        !!this.state.unsavedCloudHosts.length\n        || !!this.state.unsavedEdgeHosts.length;\n\n    private saveEntities = (simulatedMetric: ISimulatedHostMetric) => {\n        this.saveSimulatedHostMetricCloudHosts(simulatedMetric);\n        this.saveSimulatedHostMetricEdgeHosts(simulatedMetric);\n    };\n\n    private addSimulatedHostMetricCloudHost = (cloudHost: string): void => {\n        this.setState({\n            unsavedCloudHosts: this.state.unsavedCloudHosts.concat(cloudHost)\n        });\n    };\n\n    private removeSimulatedHostMetricCloudHosts = (cloudHosts: string[]): void => {\n        this.setState({\n            unsavedCloudHosts: this.state.unsavedCloudHosts.filter(cloudHost => !cloudHosts.includes(cloudHost))\n        });\n    };\n\n    private saveSimulatedHostMetricCloudHosts = (simulatedMetric: ISimulatedHostMetric): void => {\n        const {unsavedCloudHosts} = this.state;\n        if (unsavedCloudHosts.length) {\n            postData(`simulated-metrics/hosts/${simulatedMetric.name}/cloud-hosts`, unsavedCloudHosts,\n                () => this.onSaveCloudHostsSuccess(simulatedMetric),\n                (reason) => this.onSaveCloudHostsFailure(simulatedMetric, reason));\n        }\n    };\n\n    private onSaveCloudHostsSuccess = (simulatedMetric: ISimulatedHostMetric): void => {\n        this.props.addSimulatedHostMetricCloudHosts(simulatedMetric.name, this.state.unsavedCloudHosts);\n        if (this.mounted) {\n            this.setState({unsavedCloudHosts: []});\n        }\n    };\n\n    private onSaveCloudHostsFailure = (simulatedMetric: ISimulatedHostMetric, reason: string): void =>\n        super.toast(`Unable to save cloud hosts of simulated host metric ${this.mounted ? `<b>${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/hosts/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`}`, 10000, reason, true);\n\n    private addSimulatedHostMetricEdgeHost = (edgeHost: string): void => {\n        this.setState({\n            unsavedEdgeHosts: this.state.unsavedEdgeHosts.concat(edgeHost)\n        });\n    };\n\n    private removeSimulatedHostMetricEdgeHosts = (edgeHosts: string[]): void => {\n        this.setState({\n            unsavedEdgeHosts: this.state.unsavedEdgeHosts.filter(edgeHost => !edgeHosts.includes(edgeHost))\n        });\n    };\n\n    private saveSimulatedHostMetricEdgeHosts = (simulatedMetric: ISimulatedHostMetric): void => {\n        const {unsavedEdgeHosts} = this.state;\n        if (unsavedEdgeHosts.length) {\n            postData(`simulated-metrics/hosts/${simulatedMetric.name}/edge-hosts`, unsavedEdgeHosts,\n                () => this.onSaveEdgeHostsSuccess(simulatedMetric),\n                (reason) => this.onSaveEdgeHostsFailure(simulatedMetric, reason));\n        }\n    };\n\n    private onSaveEdgeHostsSuccess = (simulatedMetric: ISimulatedHostMetric): void => {\n        this.props.addSimulatedHostMetricEdgeHosts(simulatedMetric.name, this.state.unsavedEdgeHosts);\n        if (this.mounted) {\n            this.setState({unsavedEdgeHosts: []});\n        }\n    };\n\n    private onSaveEdgeHostsFailure = (simulatedMetric: ISimulatedHostMetric, reason: string): void =>\n        super.toast(`Unable to save edge hosts of simulated host metric ${this.mounted ? `<b>${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/hosts/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`} simulated host metric`, 10000, reason, true);\n\n    private updateSimulatedHostMetric = (simulatedHostMetric: ISimulatedHostMetric) => {\n        simulatedHostMetric = Object.values(normalize(simulatedHostMetric, Schemas.SIMULATED_HOST_METRIC).entities.simulatedHostMetrics || {})[0];\n        const formSimulatedHostMetric = {...simulatedHostMetric};\n        removeFields(formSimulatedHostMetric);\n        this.setState({\n            simulatedHostMetric: {...this.getSimulatedHostMetric(), ...simulatedHostMetric},\n            formSimulatedHostMetric: formSimulatedHostMetric\n        });\n    };\n\n    private getFields = (simulatedHostMetric: Partial<ISimulatedHostMetric>): IFields =>\n        Object.entries(simulatedHostMetric).map(([key, _]) => {\n            return {\n                [key]: {\n                    id: key,\n                    label: key,\n                    validation: {rule: requiredAndTrimmed}\n                }\n            };\n        }).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});\n\n    private fieldOption = (field: IField): string =>\n        field.name;\n\n    private isGenericSelected = (generic: boolean) =>\n        this.setState({isGeneric: generic});\n\n    private simulatedHostMetric = () => {\n        const {isLoading, error} = this.props;\n        const simulatedHostMetric = this.getSimulatedHostMetric();\n        const formSimulatedHostMetric = this.getFormSimulatedHostMetric();\n        // @ts-ignore\n        const simulatedHostMetricKey: (keyof ISimulatedHostMetric) = formSimulatedHostMetric && Object.keys(formSimulatedHostMetric)[0];\n        const isNewSimulatedHostMetric = this.isNew();\n        return (\n            <>\n                {!isNewSimulatedHostMetric && isLoading && <LoadingSpinner/>}\n                {!isNewSimulatedHostMetric && !isLoading && error && <Error message={error}/>}\n                {(isNewSimulatedHostMetric || !isLoading) && (isNewSimulatedHostMetric || !error) && formSimulatedHostMetric && (\n                    /*@ts-ignore*/\n                    <Form id={simulatedHostMetricKey}\n                          fields={this.getFields(formSimulatedHostMetric)}\n                          values={simulatedHostMetric}\n                          isNew={isNewSimulatedHostMetric}\n                          showSaveButton={this.shouldShowSaveButton()}\n                          post={{\n                              url: 'simulated-metrics/hosts',\n                              successCallback: this.onPostSuccess,\n                              failureCallback: this.onPostFailure\n                          }}\n                          put={{\n                              url: `simulated-metrics/hosts/${simulatedHostMetric.name}`,\n                              successCallback: this.onPutSuccess,\n                              failureCallback: this.onPutFailure\n                          }}\n                          delete={{\n                              url: `simulated-metrics/hosts/${simulatedHostMetric.name}`,\n                              successCallback: this.onDeleteSuccess,\n                              failureCallback: this.onDeleteFailure\n                          }}\n                          saveEntities={this.saveEntities}>\n                        {Object.keys(formSimulatedHostMetric).map((key, index) =>\n                            key === 'field'\n                                ? <Field<IField> key='fields'\n                                                 id='field'\n                                                 label='field'\n                                                 type='dropdown'\n                                                 dropdown={{\n                                                     defaultValue: \"Select field\",\n                                                     values: Object.values(this.props.fields),\n                                                     optionToString: this.fieldOption,\n                                                     emptyMessage: 'No fields available'\n                                                 }}/>\n                                : key === 'minimumValue' || key === 'maximumValue'\n                                ? <Field key={index}\n                                         id={key}\n                                         label={key}\n                                         type={'number'}/>\n                                : key === 'override'\n                                    ? <Field key={index}\n                                             id={key}\n                                             type='checkbox'\n                                             checkbox={{label: 'override real metrics'}}/>\n                                    : key === 'generic'\n                                        ? <Field key={index}\n                                                 id={key}\n                                                 type='checkbox'\n                                                 checkbox={{label: 'apply to all hosts', checkCallback: this.isGenericSelected}}/>\n                                        : key === 'active'\n                                            ? <Field key={index}\n                                                     id={key}\n                                                     type='checkbox'\n                                                     checkbox={{label: 'active'}}/>\n                                            : <Field key={index}\n                                                     id={key}\n                                                     label={key}/>\n                        )}\n                    </Form>\n                )}\n            </>\n        )\n    };\n\n    private cloudHosts = (): JSX.Element =>\n        <SimulatedHostMetricCloudHostList isLoadingSimulatedHostMetric={this.props.isLoading}\n                                          loadSimulatedHostMetricError={!this.isNew() ? this.props.error : undefined}\n                                          simulatedHostMetric={this.getSimulatedHostMetric()}\n                                          unsavedCloudHosts={this.state.unsavedCloudHosts}\n                                          onAddCloudHost={this.addSimulatedHostMetricCloudHost}\n                                          onRemoveCloudHosts={this.removeSimulatedHostMetricCloudHosts}/>;\n\n    private edgeHosts = (): JSX.Element =>\n        <SimulatedHostMetricEdgeHostList isLoadingSimulatedHostMetric={this.props.isLoading}\n                                         loadSimulatedHostMetricError={!this.isNew() ? this.props.error : undefined}\n                                         simulatedHostMetric={this.getSimulatedHostMetric()}\n                                         unsavedEdgeHosts={this.state.unsavedEdgeHosts}\n                                         onAddEdgeHost={this.addSimulatedHostMetricEdgeHost}\n                                         onRemoveEdgeHosts={this.removeSimulatedHostMetricEdgeHosts}/>;\n\n    private tabs = (): Tab[] => [\n        {\n            title: 'Simulated metric',\n            id: 'simulatedHostMetric',\n            content: () => this.simulatedHostMetric(),\n            active: this.props.location.state?.selected === 'simulatedHostMetric'\n        },\n        {\n            title: 'Cloud hosts',\n            id: 'cloudHosts',\n            content: () => this.cloudHosts(),\n            disabled: this.state.isGeneric,\n            active: this.props.location.state?.selected === 'cloudHosts'\n        },\n        {\n            title: 'Edge hosts',\n            id: 'edgeHosts',\n            content: () => this.edgeHosts(),\n            disabled: this.state.isGeneric,\n            active: this.props.location.state?.selected === 'edgeHosts'\n        },\n    ];\n\n}\n\nfunction removeFields(simulatedHostMetric: Partial<ISimulatedHostMetric>) {\n    delete simulatedHostMetric[\"id\"];\n    delete simulatedHostMetric[\"cloudHosts\"];\n    delete simulatedHostMetric[\"edgeHosts\"];\n}\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.simulatedMetrics.hosts.isLoadingSimulatedHostMetrics;\n    const error = state.entities.simulatedMetrics.hosts.loadSimulatedHostMetricsError;\n    const name = props.match.params.name;\n    const simulatedHostMetric = isNew(props.location.search) ? buildNewSimulatedHostMetric() : state.entities.simulatedMetrics.hosts.data[name];\n    let formSimulatedHostMetric;\n    if (simulatedHostMetric) {\n        formSimulatedHostMetric = {...simulatedHostMetric};\n        removeFields(formSimulatedHostMetric);\n    }\n    const fields = state.entities.fields.data;\n    return {\n        isLoading,\n        error,\n        simulatedHostMetric,\n        formSimulatedHostMetric,\n        fields\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadSimulatedHostMetrics,\n    addSimulatedHostMetric,\n    updateSimulatedHostMetric,\n    loadFields,\n    addSimulatedHostMetricCloudHosts,\n    addSimulatedHostMetricEdgeHosts\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimulatedHostMetric);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport CardItem from \"../../../components/list/CardItem\";\nimport Card from \"../../../components/cards/Card\";\nimport {ILoadBalancer} from \"./LoadBalancer\";\nimport {IContainer} from \"../containers/Container\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport LinkedContextMenuItem from \"../../../components/contextmenu/LinkedContextMenuItem\";\nimport {deleteContainer, deleteLoadBalancer} from \"../../../actions\";\nimport {connect} from \"react-redux\";\n\ninterface State {\n    loading: boolean;\n}\n\ninterface LoadBalancerCardProps {\n    loadBalancer: ILoadBalancer;\n}\n\ninterface DispatchToProps {\n    deleteLoadBalancer: (loadBalancer: ILoadBalancer) => void;\n}\n\ntype Props = DispatchToProps & LoadBalancerCardProps;\n\nclass LoadBalancerCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    private onStopSuccess = (loadBalancer: ILoadBalancer): void => {\n        super.toast(`<span class=\"green-text\">Load-balancer <b class=\"white-text\">${loadBalancer.containerId}</b> successfully stopped</span>`);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.deleteLoadBalancer(loadBalancer) //TODO\n    }\n\n    private onStopFailure = (reason: string, loadBalancer: ILoadBalancer): void => {\n        super.toast(`Unable to stop load-balancer <a href=/load-balancers/${loadBalancer.containerId}><b>${loadBalancer.containerId}</b></a>`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    }\n\n    private contextMenu = (): JSX.Element[] => {\n        const {loadBalancer} = this.props;\n        return [\n            <LinkedContextMenuItem\n                option={'View ports'}\n                pathname={`/containers/${loadBalancer.containerId}`}\n                selected={'ports'}\n                state={loadBalancer}/>,\n            <LinkedContextMenuItem\n                option={'View labels'}\n                pathname={`/containers/${loadBalancer.containerId}`}\n                selected={'labels'}\n                state={loadBalancer}/>,\n            <LinkedContextMenuItem\n                option={'Check logs'}\n                pathname={`/containers/${loadBalancer.containerId}`}\n                selected={'logs'}\n                state={loadBalancer}/>,\n            <LinkedContextMenuItem\n                option={'Modify rules'}\n                pathname={`/containers/${loadBalancer.containerId}`}\n                selected={'rules'}\n                state={loadBalancer}/>,\n            <LinkedContextMenuItem\n                option={'View generic rules'}\n                pathname={`/containers/${loadBalancer.containerId}`}\n                selected={'genericContainerRules'}\n                state={loadBalancer}/>,\n            <LinkedContextMenuItem\n                option={'Modify simulated metrics'}\n                pathname={`/containers/${loadBalancer.containerId}`}\n                selected={'simulatedMetrics'}\n                state={loadBalancer}/>,\n            <LinkedContextMenuItem\n                option={'View generic simulated metrics'}\n                pathname={`/containers/${loadBalancer.containerId}`}\n                selected={'genericSimulatedMetrics'}\n                state={loadBalancer}/>\n        ];\n    }\n\n    public render() {\n        const {loadBalancer} = this.props;\n        const {loading} = this.state;\n        const CardLoadBalancer = Card<IContainer>();\n        return <CardLoadBalancer id={`load-balancer-${loadBalancer.id}`}\n                                 title={loadBalancer.containerId.toString()}\n                                 link={{\n                                     to: {\n                                         pathname: `/load-balancers/${loadBalancer.containerId}`,\n                                         state: loadBalancer\n                                     }\n                                 }}\n                                 height={'85px'}\n                                 margin={'10px 0'}\n                                 hoverable\n                                 delete={{\n                                     textButton: 'Stop',\n                                     url: `containers/${loadBalancer.containerId}`,\n                                     successCallback: this.onStopSuccess,\n                                     failureCallback: this.onStopFailure,\n                                 }}\n                                 loading={loading}\n                                 bottomContextMenuItems={this.contextMenu()}>\n            <CardItem key={'host'}\n                      label={'Host'}\n                      value={loadBalancer.publicIpAddress}/>\n            <CardItem key={'ports'}\n                      label={'Ports'}\n                      value={`${loadBalancer.ports.map(p => `${p.privatePort}:${p.publicPort}`).join('/')}`}/>\n        </CardLoadBalancer>\n    }\n\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    deleteLoadBalancer\n};\n\nexport default connect(null, mapDispatchToProps)(LoadBalancerCard);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport {connect} from \"react-redux\";\nimport {ILoadBalancer} from \"./LoadBalancer\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport CardList from \"../../../components/list/CardList\";\nimport {ReduxState} from \"../../../reducers\";\nimport {loadLoadBalancers} from \"../../../actions\";\nimport LoadBalancerCard from \"./LoadBalancerCard\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    loadBalancers: ILoadBalancer[];\n}\n\ninterface DispatchToProps {\n    loadLoadBalancers: () => void;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass LoadBalancersList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadLoadBalancers();\n    }\n\n    public render() {\n        return (\n            <CardList<ILoadBalancer>\n                isLoading={this.props.isLoading}\n                error={this.props.error}\n                emptyMessage={\"No load-balancers to display\"}\n                list={this.props.loadBalancers}\n                card={this.loadBalancer}\n                predicate={this.predicate}/>\n        );\n    }\n\n    private loadBalancer = (loadBalancer: ILoadBalancer): JSX.Element =>\n        <LoadBalancerCard key={loadBalancer.containerId} loadBalancer={loadBalancer}/>;\n\n    private predicate = (loadBalancer: ILoadBalancer, search: string): boolean =>\n        loadBalancer.publicIpAddress.toLowerCase().includes(search);\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.loadBalancers.isLoadingLoadBalancers,\n        error: state.entities.loadBalancers.loadLoadBalancersError,\n        loadBalancers: (state.entities.loadBalancers.data && Object.values(state.entities.loadBalancers.data).reverse()) || [],\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadLoadBalancers,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoadBalancersList);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport MainLayout from \"../../../views/mainLayout/MainLayout\";\nimport AddButton from \"../../../components/form/AddButton\";\nimport styles from \"./LoadBalancers.module.css\";\nimport LoadBalancersList from \"./LoadBalancersList\";\n\nconst LoadBalancers: React.FC = () =>\n    <MainLayout>\n        <AddButton tooltip={{text: 'Launch load-balancer', position: 'left'}}\n                   pathname={'/load-balancers/launch?new'}/>\n        <div className={`${styles.container}`}>\n            <LoadBalancersList/>\n        </div>\n    </MainLayout>;\n\nexport default LoadBalancers;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport CardItem from \"../../../components/list/CardItem\";\nimport Card from \"../../../components/cards/Card\";\nimport {IRegistrationServer} from \"./RegistrationServer\";\nimport {IContainer} from \"../containers/Container\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport LinkedContextMenuItem from \"../../../components/contextmenu/LinkedContextMenuItem\";\nimport {deleteRegistrationServer} from \"../../../actions\";\nimport {connect} from \"react-redux\";\n\ninterface State {\n    loading: boolean;\n}\n\ninterface RegistrationServerCardProps {\n    registrationServer: IRegistrationServer;\n}\n\ninterface DispatchToProps {\n    deleteRegistrationServer: (registrationServer: IRegistrationServer) => void;\n}\n\ntype Props = DispatchToProps & RegistrationServerCardProps;\n\nclass RegistrationServerCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    private onStopSuccess = (registrationServer: IRegistrationServer): void => {\n        super.toast(`<span class=\"green-text\">Registration server <b class=\"white-text\">${registrationServer.containerId}</b> successfully stopped</span>`);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.deleteRegistrationServer(registrationServer)\n    }\n\n    private onStopFailure = (reason: string, registrationServer: IRegistrationServer): void => {\n        super.toast(`Unable to stop registration-server <a href=/registration-servers/${registrationServer.containerId}><b>${registrationServer.containerId}</b></a>`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    }\n\n    private contextMenu = (): JSX.Element[] => {\n        const {registrationServer} = this.props;\n        return [\n            <LinkedContextMenuItem\n                option={'View ports'}\n                pathname={`/containers/${registrationServer.containerId}`}\n                selected={'ports'}\n                state={registrationServer}/>,\n            <LinkedContextMenuItem\n                option={'View labels'}\n                pathname={`/containers/${registrationServer.containerId}`}\n                selected={'labels'}\n                state={registrationServer}/>,\n            <LinkedContextMenuItem\n                option={'Check logs'}\n                pathname={`/containers/${registrationServer.containerId}`}\n                selected={'logs'}\n                state={registrationServer}/>,\n            <LinkedContextMenuItem\n                option={'Modify rules'}\n                pathname={`/containers/${registrationServer.containerId}`}\n                selected={'rules'}\n                state={registrationServer}/>,\n            <LinkedContextMenuItem\n                option={'View generic rules'}\n                pathname={`/containers/${registrationServer.containerId}`}\n                selected={'genericContainerRules'}\n                state={registrationServer}/>,\n            <LinkedContextMenuItem\n                option={'Modify simulated metrics'}\n                pathname={`/containers/${registrationServer.containerId}`}\n                selected={'simulatedMetrics'}\n                state={registrationServer}/>,\n            <LinkedContextMenuItem\n                option={'View generic simulated metrics'}\n                pathname={`/containers/${registrationServer.containerId}`}\n                selected={'genericSimulatedMetrics'}\n                state={registrationServer}/>\n        ];\n    }\n\n    public render() {\n        const {registrationServer} = this.props;\n        const {loading} = this.state;\n        const CardRegistrationServer = Card<IContainer>();\n        return <CardRegistrationServer id={`registrationServer-${registrationServer.containerId}`}\n                                       title={registrationServer.containerId.toString()}\n                                       link={{\n                                           to: {\n                                               pathname: `/registration-servers/${registrationServer.containerId}`,\n                                               state: registrationServer\n                                           }\n                                       }}\n                                       height={'85px'}\n                                       margin={'10px 0'}\n                                       hoverable\n                                       delete={{\n                                           textButton: 'Stop',\n                                           url: `containers/${registrationServer.containerId}`,\n                                           successCallback: this.onStopSuccess,\n                                           failureCallback: this.onStopFailure,\n                                       }}\n                                       loading={loading}\n                                       bottomContextMenuItems={this.contextMenu()}>\n            <CardItem key={'host'}\n                      label={'Host'}\n                      value={registrationServer.publicIpAddress}/>\n            <CardItem key={'ports'}\n                      label={'Ports'}\n                      value={`${registrationServer.ports.map(p => `${p.privatePort}:${p.publicPort}`).join('/')}`}/>\n        </CardRegistrationServer>\n    }\n\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    deleteRegistrationServer\n};\n\nexport default connect(null, mapDispatchToProps)(RegistrationServerCard);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport {connect} from \"react-redux\";\nimport {IRegistrationServer} from \"./RegistrationServer\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport CardList from \"../../../components/list/CardList\";\nimport {ReduxState} from \"../../../reducers\";\nimport {loadRegistrationServers} from \"../../../actions\";\nimport RegistrationServerCard from \"./RegistrationServerCard\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    registrationServers: IRegistrationServer[];\n}\n\ninterface DispatchToProps {\n    loadRegistrationServers: () => void;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass RegistrationServersList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadRegistrationServers();\n    }\n\n    public render() {\n        return (\n            <CardList<IRegistrationServer>\n                isLoading={this.props.isLoading}\n                error={this.props.error}\n                emptyMessage={\"No registration servers to display\"}\n                list={this.props.registrationServers}\n                card={this.registrationServer}\n                predicate={this.predicate}/>\n        );\n    }\n\n    private registrationServer = (registrationServer: IRegistrationServer): JSX.Element =>\n        <RegistrationServerCard key={registrationServer.containerId} registrationServer={registrationServer}/>;\n\n    private predicate = (registrationServer: IRegistrationServer, search: string): boolean =>\n        registrationServer.publicIpAddress.toLowerCase().includes(search);\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.registrationServers.isLoadingRegistrationServers,\n        error: state.entities.registrationServers.loadRegistrationServersError,\n        registrationServers: (state.entities.registrationServers.data && Object.values(state.entities.registrationServers.data).reverse()) || [],\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadRegistrationServers,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationServersList);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport MainLayout from \"../../../views/mainLayout/MainLayout\";\nimport AddButton from \"../../../components/form/AddButton\";\nimport styles from \"./RegistrationServers.module.css\";\nimport RegistrationServersList from \"./RegistrationServersList\";\n\nconst RegistrationServers: React.FC = () =>\n    <MainLayout>\n        <AddButton tooltip={{text: 'Launch registration server', position: 'left'}}\n                   pathname={'/registration-servers/launch?new'}/>\n        <div className={`${styles.container}`}>\n            <RegistrationServersList/>\n        </div>\n    </MainLayout>;\n\nexport default RegistrationServers;","/*\n * MIT License\n *  \n * Copyright (c) 2020 manager\n *  \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *  \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {MenuItem, SubMenu} from \"react-contextmenu\";\nimport React from \"react\";\nimport DividerContextMenuItem from \"./DividerContextMenuItem\";\n\ninterface Props<T, V> {\n    menu: string,\n    state: T;\n    className?: string;\n    header: string,\n    emptyMessage: string,\n    submenus: V[],\n    menuToString: (menu: V) => string,\n    onClick: (event: React.MouseEvent, data: { state: T, submenu: V }) => void,\n    error?: string | null,\n}\n\nexport default class ContextSubMenuItem<T, V> extends React.Component<Props<T, V>, {}> {\n\n    public render() {\n        const {menu, state, className, header, emptyMessage, submenus, menuToString, onClick, error} = this.props;\n        return <>\n            <SubMenu title={menu} hoverDelay={250} preventCloseOnClick>\n                {error &&\n                <MenuItem className={'react-contextmenu-item--disabled red-text'} disabled>{error}</MenuItem>}\n                {!error && submenus.length === 0 &&\n                <MenuItem className={'react-contextmenu-item--disabled'} disabled>{emptyMessage}</MenuItem>}\n                {!error && submenus.length > 0 &&\n                <>\n                    <MenuItem className={'react-contextmenu-item--disabled'} disabled>{header}</MenuItem>\n                    <DividerContextMenuItem/>\n                    <DividerContextMenuItem/>\n                </>}\n                {!error && submenus.map((submenu, index) =>\n                    <>\n                        <MenuItem key={index} data={{state: state, submenu: submenu}}\n                                  onClick={onClick}>{menuToString(submenu)}</MenuItem>\n                        {index !== submenus.length - 1 && <DividerContextMenuItem/>}\n                    </>\n                )}\n            </SubMenu>\n        </>;\n    }\n}","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Card from \"../../../components/cards/Card\";\nimport CardItem from \"../../../components/list/CardItem\";\nimport React from \"react\";\nimport {IContainer} from \"./Container\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport LinkedContextMenuItem from \"../../../components/contextmenu/LinkedContextMenuItem\";\nimport {addContainers, deleteContainer} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport ContextSubMenuItem from \"../../../components/contextmenu/ContextSubMenuItem\";\nimport {INode} from \"../nodes/Node\";\nimport {IReply, postData} from \"../../../utils/api\";\n\ninterface State {\n    loading: boolean;\n    container?: IContainer,\n}\n\ninterface ContainerCardProps {\n    container: IContainer;\n    nodes: { data: INode[], isLoading: boolean, error?: string | null },\n}\n\ninterface DispatchToProps {\n    deleteContainer: (container: IContainer) => void;\n    addContainers: (containers: IContainer[]) => void;\n}\n\ntype Props = DispatchToProps & ContainerCardProps;\n\nclass ContainerCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    private getContainer = () =>\n        this.props.container || this.state.container;\n\n    private onDeleteSuccess = (container: IContainer): void => {\n        super.toast(`<span class=\"green-text\">Container <b class=\"white-text\">${container.containerId}</b> successfully stopped</span>`);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.deleteContainer(container);\n    }\n\n    private onDeleteFailure = (reason: string, container: IContainer): void => {\n        super.toast(`Unable to stop container <a href=/containers/${container.containerId}><b>${container.containerId}</b></a>`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    }\n\n    private topContextMenu = (): JSX.Element[] => {\n        const container = this.getContainer();\n        const menus = [];\n        if (container?.type !== 'SINGLETON') {\n            menus.push(\n                <ContextSubMenuItem<IContainer, INode> className={'blue-text'}\n                                                       menu={'Replicate'}\n                                                       state={container}\n                                                       header={'Choose host address'}\n                                                       emptyMessage={'No hosts to select'}\n                                                       submenus={Object.values(this.props.nodes.data)}\n                                                       error={this.props.nodes.error}\n                                                       menuToString={(option: INode) => `${option.publicIpAddress + (option.labels['privateIpAddress'] ? \" (\" + option.labels['privateIpAddress'] + \")\" : '')}`}\n                                                       onClick={this.migrate}/>,\n                <ContextSubMenuItem<IContainer, INode> className={'blue-text'}\n                                                       menu={'Migrate'}\n                                                       state={container}\n                                                       header={'Choose host address'}\n                                                       emptyMessage={'No hosts to select'}\n                                                       submenus={Object.entries(this.props.nodes.data)\n                                                           .filter(([_, node]) => node.publicIpAddress !== container.publicIpAddress && node.labels['privateIpAddress'] !== container.privateIpAddress)\n                                                           .map(([_, node]) => node)}\n                                                       error={this.props.nodes.error}\n                                                       menuToString={(option: INode) => `${option.publicIpAddress + (option.labels['privateIpAddress'] ? \" (\" + option.labels['privateIpAddress'] + \")\" : '')}`}\n                                                       onClick={this.replicate}/>\n            );\n        }\n        return menus;\n    }\n\n    private replicate = (event: React.MouseEvent, data: { state: IContainer, submenu: INode }) => {\n        const container = data.state;\n        const node = data.submenu;\n        const publicIpAddress = node.publicIpAddress;\n        const privateIpAddress = node.labels['privateIpAddress'];\n        const url = `containers/${container?.containerId}/replicate`;\n        this.setState({loading: true});\n        postData(url, {publicIpAddress: publicIpAddress, privateIpAddress: privateIpAddress},\n            (reply: IReply<IContainer>) => this.onReplicateSuccess(reply.data),\n            (reason: string) => this.onReplicateFailure(reason, container));\n    }\n\n    private onReplicateSuccess = (container: IContainer) => {\n        super.toast(`<span class=\"green-text\">Replicated ${container.image.split('/').splice(1)} to container </span><a href=/containers/${container.containerId}><b>${container.containerId}</b></a>`, 15000);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.addContainers(Array(container));\n    };\n\n    private onReplicateFailure = (reason: string, container?: IContainer) => {\n        super.toast(`Unable to replicate container ${this.mounted ? `<b>${container?.containerId}</b>` : `<a href=/containers/${container?.containerId}><b>${container?.containerId}</b></a>`}`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    };\n\n    private migrate = (event: React.MouseEvent, data: { state: IContainer, submenu: INode }) => {\n        const container = data.state;\n        const node = data.submenu;\n        const publicIpAddress = node.publicIpAddress;\n        const privateIpAddress = node.labels['privateIpAddress'];\n        const url = `containers/${container?.containerId}/migrate`;\n        this.setState({loading: true});\n        postData(url, {publicIpAddress: publicIpAddress, privateIpAddress: privateIpAddress},\n            (reply: IReply<IContainer>) => this.onMigrateSuccess(reply.data),\n            (reason) => this.onMigrateFailure(reason, container));\n    }\n\n    private onMigrateSuccess = (container: IContainer) => {\n        const parentContainer = this.getContainer();\n        super.toast(`<span class=\"green-text\">Migrated ${this.mounted ? parentContainer?.containerId : `<a href=/containers/${parentContainer?.containerId}>${parentContainer?.containerId}</a>`} to container </span><a href=/containers/${container.containerId}>${container.containerId}</a>`, 15000);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.addContainers(Array(container));\n    };\n\n    private onMigrateFailure = (reason: string, container?: IContainer) => {\n        super.toast(`Unable to migrate container ${this.mounted ? `<b>${container?.containerId}</b>` : `<a href=/containers/${container?.containerId}><b>${container?.containerId}</b></a>`}`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    };\n\n    private bottomContextMenu = (): JSX.Element[] => {\n        const container = this.getContainer();\n        return [\n            <LinkedContextMenuItem\n                option={'View ports'}\n                pathname={`/containers/${container.containerId}`}\n                selected={'ports'}\n                state={container}/>,\n            <LinkedContextMenuItem\n                option={'View labels'}\n                pathname={`/containers/${container.containerId}`}\n                selected={'containerLabels'}\n                state={container}/>,\n            <LinkedContextMenuItem\n                option={'Check logs'}\n                pathname={`/containers/${container.containerId}`}\n                selected={'logs'}\n                state={container}/>,\n            <LinkedContextMenuItem\n                option={'Modify rules'}\n                pathname={`/containers/${container.containerId}`}\n                selected={'rules'}\n                state={container}/>,\n            <LinkedContextMenuItem\n                option={'View generic rules'}\n                pathname={`/containers/${container.containerId}`}\n                selected={'genericServiceRules'}\n                state={container}/>,\n            <LinkedContextMenuItem\n                option={'Modify simulated metrics'}\n                pathname={`/containers/${container.containerId}`}\n                selected={'simulatedMetrics'}\n                state={container}/>,\n            <LinkedContextMenuItem\n                option={'View generic simulated metrics'}\n                pathname={`/containers/${container.containerId}`}\n                selected={'genericSimulatedMetrics'}\n                state={container}/>\n        ];\n    }\n\n    public render() {\n        const container = this.getContainer();\n        const {loading} = this.state;\n        const CardContainer = Card<IContainer>();\n        return <CardContainer id={`container-${container.containerId}`}\n                              title={container.containerId.toString()}\n                              link={{to: {pathname: `/containers/${container.containerId}`, state: container}}}\n                              height={'215px'}\n                              margin={'10px 0'}\n                              hoverable\n                              delete={{\n                                  textButton: 'Stop',\n                                  confirmMessage: `to stop container ${container.containerId}`,\n                                  url: `containers/${container.containerId}`,\n                                  successCallback: this.onDeleteSuccess,\n                                  failureCallback: this.onDeleteFailure\n                              }}\n                              loading={loading}\n                              topContextMenuItems={this.topContextMenu()}\n                              bottomContextMenuItems={this.bottomContextMenu()}>\n            <CardItem key={'type'}\n                      label={'Type'}\n                      value={`${container.type}`}/>\n            <CardItem key={'names'}\n                      label={container.names.length == 1 ? 'Name' : 'Names'}\n                      value={container.names.join(', ')}/>\n            <CardItem key={'image'}\n                      label={'Image'}\n                      value={container.image}/>\n            <CardItem key={'hostname'}\n                      label={'Hostname'}\n                      value={container.publicIpAddress}/>\n            <CardItem key={'ports'}\n                      label={'Ports'}\n                      value={`${container.ports.map(p => `${p.publicPort}:${p.privatePort}`).join('/')}`}/>\n            <CardItem key={'region'}\n                      label={'Region'}\n                      value={`${container.region.region}`}/>\n            <CardItem key={'coordinates'}\n                      label={'Coordinates'}\n                      value={`(${container.coordinates.latitude.toFixed(3)}, ${container.coordinates.longitude.toFixed(3)})`}/>\n            <CardItem key={'serviceType'}\n                      label={'Service type'}\n                      value={`${container.labels['serviceType']}`}/>\n        </CardContainer>\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    deleteContainer,\n    addContainers,\n};\n\nexport default connect(null, mapDispatchToProps)(ContainerCard);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport MainLayout from '../../../views/mainLayout/MainLayout';\nimport ContainerCard from './ContainerCard';\nimport AddButton from \"../../../components/form/AddButton\";\nimport {connect} from \"react-redux\";\nimport {ReduxState} from \"../../../reducers\";\nimport CardList from \"../../../components/list/CardList\";\nimport {IContainer} from \"./Container\";\nimport styles from './Containers.module.css'\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport {loadContainers, loadNodes, reloadContainers} from \"../../../actions\";\nimport ActionButton from \"../../../components/list/ActionButton\";\nimport {INode} from \"../nodes/Node\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    containers: IContainer[];\n    isLoadingNodes: boolean;\n    loadNodesError?: string | null;\n    nodes: { [key: string]: INode };\n}\n\ninterface DispatchToProps {\n    loadContainers: () => void;\n    reloadContainers: () => void;\n    loadNodes: () => void;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass Containers extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadContainers();\n        this.props.loadNodes();\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                <AddButton tooltip={{text: 'Start container', position: 'left'}}\n                           pathname={'/containers/start_container?new'}\n                           offset={1}/>\n                <ActionButton icon={'sync'}\n                              tooltip={{text: 'Sync containers', position: 'bottom'}}\n                              clickCallback={this.reloadContainers}\n                              offset={0}/>\n                <div className={`${styles.container}`}>\n                    <CardList<IContainer>\n                        isLoading={this.props.isLoading}\n                        error={this.props.error}\n                        emptyMessage={\"No containers to display\"}\n                        list={this.props.containers}\n                        card={this.container}\n                        predicate={this.predicate}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private container = (container: IContainer): JSX.Element =>\n        <ContainerCard key={container.containerId} container={container}\n                       nodes={{\n                           data: Object.values(this.props.nodes),\n                           isLoading: this.props.isLoadingNodes,\n                           error: this.props.loadNodesError\n                       }}/>;\n\n    private predicate = (container: IContainer, search: string): boolean =>\n        container.containerId.toString().toLowerCase().includes(search)\n        || container.type.toLowerCase().includes(search)\n        || container.names.filter(name => name.includes(search)).length > 0\n        || container.publicIpAddress.toLowerCase().includes(search)\n        || container.labels['serviceType'].toLowerCase().includes(search);\n\n    private reloadContainers = () => {\n        this.props.reloadContainers();\n    };\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.containers.isLoadingContainers,\n        error: state.entities.containers.loadContainersError,\n        containers: (state.entities.containers.data && Object.values(state.entities.containers.data).reverse()) || [],\n        nodes: state.entities.nodes.data,\n        isLoadingNodes: state.entities.nodes.isLoadingNodes,\n        loadNodesError: state.entities.nodes.loadNodesError,\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadContainers,\n    reloadContainers,\n    loadNodes,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Containers);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Card from \"../../../../components/cards/Card\";\nimport CardItem from \"../../../../components/list/CardItem\";\nimport React from \"react\";\nimport {deleteAppRule} from \"../../../../actions\";\nimport {IRuleApp} from \"./RuleApp\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport LinkedContextMenuItem from \"../../../../components/contextmenu/LinkedContextMenuItem\";\nimport {connect} from \"react-redux\";\n\ninterface State {\n    loading: boolean;\n}\n\ninterface AppCardProps {\n    rule: IRuleApp;\n}\n\ninterface DispatchToProps {\n    deleteAppRule: (appRule: IRuleApp) => void;\n}\n\ntype Props = DispatchToProps & AppCardProps;\n\nclass RuleAppCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    private onDeleteSuccess = (ruleApp: IRuleApp): void => {\n        super.toast(`<span class=\"green-text\">App rule <b class=\"white-text\">${ruleApp.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.deleteAppRule(ruleApp);\n    }\n\n    private onDeleteFailure = (reason: string, ruleApp: IRuleApp): void => {\n        super.toast(`Unable to delete app rule <a href=/rules/apps/${ruleApp.name}><b>${ruleApp.name}</b></a>`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    }\n\n    private contextMenu = (): JSX.Element[] => {\n        const {rule} = this.props;\n        return [\n            <LinkedContextMenuItem\n                option={'Modify conditions'}\n                pathname={`/rules/apps/${rule.name}`}\n                selected={'ruleConditions'}\n                state={rule}/>,\n            <LinkedContextMenuItem\n                option={'Modify apps'}\n                pathname={`/rules/apps/${rule.name}`}\n                selected={'apps'}\n                state={rule}/>\n        ];\n    }\n\n    public render() {\n        const {rule} = this.props;\n        const {loading} = this.state;\n        const CardRuleApp = Card<IRuleApp>();\n        return <CardRuleApp id={`app-rule-${rule.id}`}\n                            title={rule.name}\n                            link={{to: {pathname: `/rules/apps/${rule.name}`, state: rule}}}\n                            height={'85px'}\n                            margin={'10px 0'}\n                            hoverable\n                            delete={{\n                                url: `rules/apps/${rule.name}`,\n                                successCallback: this.onDeleteSuccess,\n                                failureCallback: this.onDeleteFailure,\n                            }}\n                            loading={loading}\n                            bottomContextMenuItems={this.contextMenu()}>\n            <CardItem key={'priority'}\n                      label={'Priority'}\n                      value={`${rule.priority}`}/>\n            <CardItem key={'decision'}\n                      label={'Decision'}\n                      value={`${rule.decision.ruleDecision}`}/>\n        </CardRuleApp>\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    deleteAppRule,\n};\n\nexport default connect(null, mapDispatchToProps)(RuleAppCard);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {IRuleApp} from \"./RuleApp\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport React from \"react\";\nimport RuleAppCard from \"./RuleAppCard\";\nimport CardList from \"../../../../components/list/CardList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {connect} from \"react-redux\";\nimport {loadRulesApp} from \"../../../../actions\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    appRules: IRuleApp[];\n}\n\ninterface DispatchToProps {\n    loadRulesApp: () => any;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass RulesAppList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadRulesApp();\n    }\n\n    public render() {\n        return (\n            <CardList<IRuleApp>\n                isLoading={this.props.isLoading}\n                error={this.props.error}\n                emptyMessage={\"No app rules to display\"}\n                list={this.props.appRules}\n                card={this.rule}\n                predicate={this.predicate}/>\n        );\n    }\n\n    private rule = (rule: IRuleApp): JSX.Element =>\n        <RuleAppCard key={rule.id} rule={rule}/>;\n\n    private predicate = (rule: IRuleApp, search: string): boolean =>\n        rule.name.toLowerCase().includes(search);\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.rules.apps.isLoadingRules,\n        error: state.entities.rules.apps.loadRulesError,\n        appRules: (state.entities.rules.apps.data && Object.values(state.entities.rules.apps.data).reverse()) || []\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadRulesApp,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RulesAppList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following containerRules:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Card from \"../../../../components/cards/Card\";\nimport CardItem from \"../../../../components/list/CardItem\";\nimport React from \"react\";\nimport {deleteContainerRule} from \"../../../../actions\";\nimport {IRuleContainer} from \"./RuleContainer\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport LinkedContextMenuItem from \"../../../../components/contextmenu/LinkedContextMenuItem\";\nimport {connect} from \"react-redux\";\n\ninterface State {\n    loading: boolean;\n}\n\ninterface ContainerCardProps {\n    rule: IRuleContainer;\n}\n\ninterface DispatchToProps {\n    deleteContainerRule: (containerRule: IRuleContainer) => void;\n}\n\ntype Props = DispatchToProps & ContainerCardProps;\n\nclass RuleContainerCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    private onDeleteSuccess = (ruleContainer: IRuleContainer): void => {\n        super.toast(`<span class=\"green-text\">Container rule <b class=\"white-text\">${ruleContainer.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.deleteContainerRule(ruleContainer);\n    }\n\n    private onDeleteFailure = (reason: string, ruleContainer: IRuleContainer): void => {\n        super.toast(`Unable to delete container rule <a href=/rules/containers/${ruleContainer.name}><b>${ruleContainer.name}</b></a>`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    }\n\n    private contextMenu = (): JSX.Element[] => {\n        const {rule} = this.props;\n        return [\n            <LinkedContextMenuItem\n                option={'Modify conditions'}\n                pathname={`/rules/containers/${rule.name}`}\n                selected={'ruleConditions'}\n                state={rule}/>,\n            <LinkedContextMenuItem\n                option={'Modify containers'}\n                pathname={`/rules/containers/${rule.name}`}\n                selected={'containers'}\n                state={rule}/>\n        ];\n    }\n\n    public render() {\n        const {rule} = this.props;\n        const {loading} = this.state;\n        const CardRuleContainer = Card<IRuleContainer>();\n        return <CardRuleContainer id={`container-rule-${rule.id}`}\n                                  title={rule.name}\n                                  link={{to: {pathname: `/rules/containers/${rule.name}`, state: rule}}}\n                                  height={'85px'}\n                                  margin={'10px 0'}\n                                  hoverable\n                                  delete={{\n                                      url: `rules/containers/${rule.name}`,\n                                      successCallback: this.onDeleteSuccess,\n                                      failureCallback: this.onDeleteFailure,\n                                  }}\n                                  loading={loading}\n                                  bottomContextMenuItems={this.contextMenu()}>\n            <CardItem key={'priority'}\n                      label={'Priority'}\n                      value={`${rule.priority}`}/>\n            <CardItem key={'decision'}\n                      label={'Decision'}\n                      value={`${rule.decision.ruleDecision}`}/>\n        </CardRuleContainer>\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    deleteContainerRule,\n};\n\nexport default connect(null, mapDispatchToProps)(RuleContainerCard);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {IRuleContainer} from \"./RuleContainer\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport React from \"react\";\nimport RuleContainerCard from \"./RuleContainerCard\";\nimport CardList from \"../../../../components/list/CardList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {connect} from \"react-redux\";\nimport {loadRulesContainer} from \"../../../../actions\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    containerRules: IRuleContainer[];\n}\n\ninterface DispatchToProps {\n    loadRulesContainer: () => any;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass RulesContainerList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadRulesContainer();\n    }\n\n    public render() {\n        return (\n            <CardList<IRuleContainer>\n                isLoading={this.props.isLoading}\n                error={this.props.error}\n                emptyMessage={\"No container rules to display\"}\n                list={this.props.containerRules}\n                card={this.rule}\n                predicate={this.predicate}/>\n        );\n    }\n\n    private rule = (rule: IRuleContainer): JSX.Element =>\n        <RuleContainerCard key={rule.id} rule={rule}/>;\n\n    private predicate = (rule: IRuleContainer, search: string): boolean =>\n        rule.name.toLowerCase().includes(search);\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.rules.containers.isLoadingRules,\n        error: state.entities.rules.containers.loadRulesError,\n        containerRules: (state.entities.rules.containers.data && Object.values(state.entities.rules.containers.data).reverse()) || []\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadRulesContainer,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RulesContainerList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\nimport Card from \"../../../components/cards/Card\";\nimport React from \"react\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport {connect} from \"react-redux\";\nimport {IRegion} from \"./Region\";\nimport CardItem from \"../../../components/list/CardItem\";\n\ninterface State {\n    loading: boolean;\n}\n\ninterface RegionCardProps {\n    region: IRegion;\n}\n\ninterface DispatchToProps {\n    /*deleteRegion: (region: IRegion) => EntitiesAction;*/\n}\n\ntype Props = DispatchToProps & RegionCardProps;\n\nclass RegionCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    /*private onDeleteSuccess = (region: IRegion): void => {\n        super.toast(`<span class=\"green-text\">Region <b class=\"white-text\">${region.region}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.deleteRegion(region);\n    }*/\n\n    /*private onDeleteFailure = (reason: string, region: IRegion): void => {\n        super.toast(`Unable to delete region <a href=/regions/${region.region}><b>${region.region}</b></a>`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    }*/\n\n    public render() {\n        const {region} = this.props;\n        const {loading} = this.state;\n        const CardRegion = Card<IRegion>();\n        return <CardRegion id={`region-${region.region}`}\n                           title={region.region}\n                           link={{to: {pathname: `/regions/${region.region}`, state: region}}}\n                           height={'85px'}\n                           margin={'10px 0'}\n                           hoverable\n            /*delete={{\n                url: `regions/${region.region}`,\n                successCallback: this.onDeleteSuccess,\n                failureCallback: this.onDeleteFailure\n            }}*/\n                           loading={loading}>\n            <CardItem key={'name'}\n                      label={'Name'}\n                      value={`${region.region}`}/>\n            {/*<CardItem key={'active'}\n                      label={'Active'}\n                      value={`${region.active}`}/>*/}\n            <CardItem key={'coordinates'}\n                      label={'Coordinates'}\n                      value={`(${region.coordinates.latitude.toFixed(3)}, ${region.coordinates.longitude.toFixed(3)})`}/>\n        </CardRegion>\n    }\n\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    /*deleteRegion*/\n};\n\nexport default connect(null, mapDispatchToProps)(RegionCard);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport {IRegion} from \"./Region\";\nimport MainLayout from \"../../../views/mainLayout/MainLayout\";\nimport React from \"react\";\nimport styles from \"./Regions.module.css\";\nimport CardList from \"../../../components/list/CardList\";\nimport RegionCard from \"./RegionCard\";\nimport {ReduxState} from \"../../../reducers\";\nimport {loadRegions} from \"../../../actions\";\nimport {connect} from \"react-redux\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    regions: IRegion[];\n}\n\ninterface DispatchToProps {\n    loadRegions: (name?: string) => any;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass Regions extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadRegions();\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                {/*<AddButton tooltip={{text: 'Add region', position: 'left'}}\n                           pathname={'/regions/new_region?new'}/>*/}\n                <div className={`${styles.container}`}>\n                    <CardList<IRegion>\n                        isLoading={this.props.isLoading}\n                        error={this.props.error}\n                        emptyMessage={\"No regions to display\"}\n                        list={this.props.regions}\n                        card={this.region}\n                        predicate={this.predicate}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private region = (region: IRegion): JSX.Element =>\n        <RegionCard key={region.region} region={region}/>;\n\n    private predicate = (region: IRegion, search: string): boolean =>\n        region.region.toLowerCase().includes(search);\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.regions.isLoadingRegions,\n        error: state.entities.regions.loadRegionsError,\n        regions: (state.entities.regions.data && Object.values(state.entities.regions.data).reverse()) || [],\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadRegions,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Regions);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Card from \"../../../../components/cards/Card\";\nimport CardItem from \"../../../../components/list/CardItem\";\nimport React from \"react\";\nimport {IEdgeHost} from \"./EdgeHost\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport LinkedContextMenuItem from \"../../../../components/contextmenu/LinkedContextMenuItem\";\nimport {deleteEdgeHost} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\n\ninterface State {\n    loading: boolean;\n}\n\ninterface EdgeHostCardProps {\n    edgeHost: IEdgeHost;\n}\n\ninterface DispatchToProps {\n    deleteEdgeHost: (edgeHost: IEdgeHost) => void;\n}\n\ntype Props = DispatchToProps & EdgeHostCardProps;\n\nclass EdgeHostCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    private onDeleteSuccess = (edgeHost: IEdgeHost): void => {\n        super.toast(`<span class=\"green-text\">Edge host <b class=\"white-text\">${edgeHost.publicIpAddress}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.deleteEdgeHost(edgeHost);\n    }\n\n    private onDeleteFailure = (reason: string, edgeHost: IEdgeHost): void => {\n        super.toast(`Unable to delete edge host <a href=/hosts/edge/${edgeHost.publicDnsName || edgeHost.publicIpAddress}><b>${edgeHost.publicDnsName || edgeHost.publicIpAddress}</b></a>`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    }\n\n    private contextMenu = (): JSX.Element[] => {\n        const {edgeHost} = this.props;\n        const publicIpAddress = edgeHost.publicIpAddress;\n        return [\n            <LinkedContextMenuItem\n                option={'Modify rules'}\n                pathname={`/hosts/edge/${publicIpAddress}`}\n                selected={'rules'}\n                state={edgeHost}/>,\n            <LinkedContextMenuItem\n                option={'View generic rules'}\n                pathname={`/hosts/edge/${publicIpAddress}`}\n                selected={'genericRules'}\n                state={edgeHost}/>,\n            <LinkedContextMenuItem\n                option={'Modify simulated metrics'}\n                pathname={`/hosts/edge/${publicIpAddress}`}\n                selected={'simulatedMetrics'}\n                state={edgeHost}/>,\n            <LinkedContextMenuItem\n                option={'View generic simulated metrics'}\n                pathname={`/hosts/edge/${publicIpAddress}`}\n                selected={'genericSimulatedMetrics'}\n                state={edgeHost}/>,\n            <LinkedContextMenuItem\n                option={'Execute command'}\n                pathname={`/hosts/edge/${publicIpAddress}`}\n                selected={'ssh'}\n                state={edgeHost}/>,\n            <LinkedContextMenuItem\n                option={'Upload file'}\n                pathname={`/hosts/edge/${publicIpAddress}`}\n                selected={'sftp'}\n                state={edgeHost}/>\n        ];\n    }\n\n    public render() {\n        const {edgeHost} = this.props;\n        const {loading} = this.state;\n        const CardEdgeHost = Card<IEdgeHost>();\n        return <CardEdgeHost id={`edgeHost-${edgeHost.id}`}\n                             title={edgeHost.publicIpAddress}\n                             link={{\n                                 to: {\n                                     pathname: `/hosts/edge/${edgeHost.publicIpAddress}`,\n                                     state: edgeHost\n                                 }\n                             }}\n                             height={'213px'}\n                             margin={'10px 0'}\n                             hoverable\n                             delete={{\n                                 confirmMessage: `to delete edge host ${edgeHost.publicIpAddress}`,\n                                 url: `hosts/edge/${edgeHost.publicIpAddress}`,\n                                 successCallback: this.onDeleteSuccess,\n                                 failureCallback: this.onDeleteFailure,\n                             }}\n                             loading={loading}\n                             bottomContextMenuItems={this.contextMenu()}>\n            <CardItem key={'username'}\n                      label={'Username'}\n                      value={`${edgeHost.username}`}/>\n            <CardItem key={'publicIpAddress'}\n                      label={'Public ip address'}\n                      value={`${edgeHost.publicIpAddress}`}/>\n            <CardItem key={'privateIpAddress'}\n                      label={'Private ip address'}\n                      value={`${edgeHost.privateIpAddress}`}/>\n            <CardItem key={'publicDnsName'}\n                      label={'Public dns name'}\n                      value={`${edgeHost.publicDnsName}`}/>\n            <CardItem key={'region'}\n                      label={'Region'}\n                      value={`${edgeHost.region.region}`}/>\n            <CardItem key={'coordinates'}\n                      label={'Coordinates'}\n                      value={`(${edgeHost.coordinates.latitude.toFixed(3)}, ${edgeHost.coordinates.longitude.toFixed(3)})`}/>\n            {edgeHost.managedByWorker &&\n            <CardItem key={'managedByWorker'}\n                      label={'managedByWorker'}\n                      value={`${edgeHost.managedByWorker.id}`}/>}\n        </CardEdgeHost>\n    }\n\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    deleteEdgeHost,\n};\n\nexport default connect(null, mapDispatchToProps)(EdgeHostCard);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport {connect} from \"react-redux\";\nimport {ReduxState} from \"../../../../reducers\";\nimport CardList from \"../../../../components/list/CardList\";\nimport {IEdgeHost} from \"./EdgeHost\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport {loadEdgeHosts} from \"../../../../actions\";\nimport EdgeHostCard from \"./EdgeHostCard\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    edgeHosts: IEdgeHost[];\n}\n\ninterface DispatchToProps {\n    loadEdgeHosts: (hostname?: string) => any;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass EdgeHostsList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadEdgeHosts();\n    }\n\n    public render() {\n        return (\n            <CardList<IEdgeHost>\n                isLoading={this.props.isLoading}\n                error={this.props.error}\n                emptyMessage={\"No edge hosts to display\"}\n                list={this.props.edgeHosts}\n                card={this.edgeHost}\n                predicate={this.predicate}/>\n        );\n    }\n\n    private edgeHost = (host: IEdgeHost): JSX.Element =>\n        <EdgeHostCard key={host.id} edgeHost={host}/>;\n\n    private predicate = (host: IEdgeHost, search: string): boolean =>\n        (!!host.publicDnsName && host.publicDnsName.toLowerCase().includes(search))\n        || (!!host.publicIpAddress && host.publicIpAddress.toLowerCase().includes(search));\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.hosts.edge.isLoadingHosts,\n        error: state.entities.hosts.edge.loadHostsError,\n        edgeHosts: (state.entities.hosts.edge.data && Object.values(state.entities.hosts.edge.data).reverse()) || [],\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadEdgeHosts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EdgeHostsList);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\nimport {updateSearch} from \"../../actions\";\nimport {ReduxState} from \"../../reducers\";\nimport styles from './SearchBar.module.css';\n\ninterface StateToProps {\n    search: string;\n}\n\ninterface DispatchToProps {\n    updateSearch: (search: string) => void;\n}\n\ntype Props = DispatchToProps & StateToProps;\n\nclass SearchBar extends React.Component<Props, {}> {\n\n    public render() {\n        return (\n            <form className=\"col l2 xl3 hide-on-med-and-down\" noValidate autoComplete=\"off\">\n                <div className={`input-field ${styles.searchBar}`}>\n                    <input id=\"search\" type=\"search\" placeholder=\"Filter\" value={this.props.search}\n                           onChange={this.setValue}/>\n                    <label className=\"label-icon\" htmlFor=\"search\">\n                        <i className=\"material-icons\">search</i>\n                    </label>\n                </div>\n            </form>\n        );\n    }\n\n    private setValue = ({target: {value}}: any) =>\n        this.props.updateSearch(value);\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        search: state.ui.search\n    }\n);\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({updateSearch}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport {Link, RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {FaDocker, GoMarkGithub} from \"react-icons/all\";\nimport SearchBar from \"./SearchBar\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\nimport {changeComponent, showSidenavByUser} from \"../../actions\";\nimport './Navbar.css';\nimport {ReduxState} from \"../../reducers\";\nimport {components, IComponent, managementAuthenticatedRoutes} from \"../../containers/Root.dev\";\nimport {getLoggedInUser, logout} from \"../../utils/auth\";\nimport {Dropdown} from \"../../components/form/Dropdown\";\n\nconst logo = require(\"../../resources/images/logo.png\");\n\ninterface StateToProps {\n    sidenav: { user: boolean, width: boolean },\n    component: IComponent,\n}\n\ninterface DispatchToProps {\n    showSidenavByUser: (value: boolean) => void;\n    changeComponent: (component: IComponent) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps;\n\ninterface State {\n    animate: boolean;\n}\n\nclass Navbar extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            animate: false,\n        }\n    }\n\n    componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any) {\n        const prevSidenavVisibility = prevProps.sidenav.user && prevProps.sidenav.width;\n        const currentSidenavVisibility = this.props.sidenav.user && this.props.sidenav.width;\n        const prevLoggingIn = this.loggingIn(prevProps.location.pathname);\n        const loggingIn = this.loggingIn(this.props.location.pathname);\n        if (this.state.animate && prevLoggingIn && !loggingIn) {\n            // coming from login, dont animate\n            this.setState({animate: false});\n        }\n        if (!this.state.animate && prevSidenavVisibility !== currentSidenavVisibility) {\n            this.setState({animate: true});\n        }\n    }\n\n    public render() {\n        const {pathname} = this.props.location;\n        const {user: sidenavUser, width: sidenavWidth} = this.props.sidenav;\n        const loggingIn = this.loggingIn(pathname);\n        const showSidenav = sidenavUser && sidenavWidth;\n        const route = managementAuthenticatedRoutes[pathname];\n        const showSearchbar = route && managementAuthenticatedRoutes[pathname].search;\n        let loggedInUser = getLoggedInUser();\n        let logoStyle;\n        if (showSidenav && !loggingIn) {\n            logoStyle = {\n                paddingLeft: '200px', marginLeft: '-74px', marginRight: \"24px\"\n            };\n            if (this.state.animate) {\n                logoStyle = {...logoStyle, transition: \"padding-left .25s, margin-left .25s\"}\n            }\n        } else {\n            logoStyle = {\n                marginRight: \"0\"\n            }\n            if (this.state.animate) {\n                logoStyle = {...logoStyle, transition: \"padding-left .25s margin-right .25s\"}\n            }\n        }\n        return (\n            <header role=\"navigation\">\n                <div className=\"navbar-fixed\">\n                    <nav className=\"no-shadows\">\n                        <div className=\"nav-wrapper row\">\n                            {!loggingIn &&\n                            <a className=\"sidenav-trigger transparent btn-floating btn-flat btn-small waves-effect waves-light\"\n                               data-target=\"slide-out\"\n                               onClick={this.handleSidenav}>\n                                <i className=\"material-icons\">menu</i>\n                            </a>}\n                            <ul className=\"left\">\n                                <li style={logoStyle} className={'hide-on-med-and-down'}>\n                                    <Link className=\"transparent brand-logo\" to={\"/home\"}>\n                                        <img src={logo} alt=\"\"/>\n                                        Manager hub\n                                    </Link>\n                                </li>\n                            </ul>\n                            {showSearchbar && <SearchBar/>}\n                            <ul className=\"right\">\n                                {!loggingIn && <li className=\"components\">\n                                    <Dropdown<IComponent>\n                                        id={'components'}\n                                        name={'components'}\n                                        value={this.props.component}\n                                        onChange={this.changeComponent}\n                                        dropdown={{\n                                            defaultValue: 'Component',\n                                            values: components,\n                                            optionToString: this.componentOption\n                                        }}>\n                                    </Dropdown>\n                                </li>}\n                                <li className=\"username\">\n                                    {loggedInUser}\n                                </li>\n                                <li>\n                                    <a className=\"tooltipped\" data-tooltip=\"GitHub\" data-position=\"bottom\"\n                                       href=\"https://github.com/usmanager/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                        <i className=\"material-icons\"><GoMarkGithub/></i>\n                                    </a>\n                                </li>\n                                <li>\n                                    <a className=\"tooltipped\" data-tooltip=\"DockerHub\" data-position=\"bottom\"\n                                       href=\"https://hub.docker.com/orgs/usmanager\" target=\"_blank\"\n                                       rel=\"noopener noreferrer\">\n                                        <i className=\"material-icons\"><FaDocker/></i>\n                                    </a>\n                                </li>\n                                {!loggingIn && <li>\n                                    <a className=\"red-text text-darken-4\" onClick={this.handleLogout}>\n                                        <i className=\"material-icons right\">logout</i> Logout\n                                    </a>\n                                </li>}\n                            </ul>\n                        </div>\n                    </nav>\n                </div>\n            </header>\n        )\n    }\n\n    private handleSidenav = () => {\n        let {user, width} = this.props.sidenav;\n        user = !width || !user;\n        this.props.showSidenavByUser(user);\n    };\n\n    private handleLogout = () => {\n        logout();\n        this.setState({animate: true}, () => this.props.history.push(\"/\"));\n    };\n\n    private loggingIn = (pathname: string): boolean =>\n        pathname === '/' || pathname === '/login';\n\n    private componentOption = (option: IComponent): string =>\n        option.toString();\n\n    private changeComponent = (e: React.FormEvent<HTMLSelectElement>) => {\n        const selectedComponent = e.currentTarget.value as IComponent;\n        this.props.changeComponent(selectedComponent);\n        this.props.history.push('/home');\n    }\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        sidenav: state.ui.sidenav,\n        component: state.ui.component\n    }\n);\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({showSidenavByUser, changeComponent}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Navbar));","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Card from \"../../../../components/cards/Card\";\nimport CardItem from \"../../../../components/list/CardItem\";\nimport React from \"react\";\nimport {deleteSimulatedServiceMetric} from \"../../../../actions\";\nimport {ISimulatedServiceMetric} from \"./SimulatedServiceMetric\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport LinkedContextMenuItem from \"../../../../components/contextmenu/LinkedContextMenuItem\";\nimport {connect} from \"react-redux\";\n\ninterface State {\n    loading: boolean;\n}\n\ninterface SimulatedServiceMetricCardProps {\n    simulatedServiceMetric: ISimulatedServiceMetric;\n}\n\ninterface DispatchToProps {\n    deleteSimulatedServiceMetric: (simulatedServiceMetric: ISimulatedServiceMetric) => void;\n}\n\ntype Props = DispatchToProps & SimulatedServiceMetricCardProps;\n\nclass SimulatedServiceMetricCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    private onDeleteSuccess = (simulatedMetric: ISimulatedServiceMetric): void => {\n        super.toast(`<span class=\"green-text\">Simulated service metric <b class=\"white-text\">${simulatedMetric.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.deleteSimulatedServiceMetric(simulatedMetric);\n    }\n\n    private onDeleteFailure = (reason: string, simulatedMetric: ISimulatedServiceMetric): void => {\n        super.toast(`Unable to delete simulated service metric <a href=/simulated-metrics/Services/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    }\n\n    private contextMenu = (): JSX.Element[] => {\n        const {simulatedServiceMetric} = this.props;\n        return [\n            <LinkedContextMenuItem\n                option={'Modify services'}\n                pathname={`/simulated-metrics/services/${simulatedServiceMetric.name}`}\n                selected={'services'}\n                state={simulatedServiceMetric}/>,\n        ];\n    }\n\n    public render() {\n        const {simulatedServiceMetric} = this.props;\n        const {loading} = this.state;\n        const CardSimulatedServiceMetric = Card<ISimulatedServiceMetric>();\n        return <CardSimulatedServiceMetric id={`simulated-service-metric-${simulatedServiceMetric.id}`}\n                                           title={simulatedServiceMetric.name}\n                                           link={{\n                                               to: {\n                                                   pathname: `/simulated-metrics/services/${simulatedServiceMetric.name}`,\n                                                   state: simulatedServiceMetric\n                                               }\n                                           }}\n                                           height={'212px'}\n                                           margin={'10px 0'}\n                                           hoverable\n                                           delete={{\n                                               url: `simulated-metrics/services/${simulatedServiceMetric.name}`,\n                                               successCallback: this.onDeleteSuccess,\n                                               failureCallback: this.onDeleteFailure,\n                                           }}\n                                           loading={loading}\n                                           bottomContextMenuItems={this.contextMenu()}>\n            <CardItem key={'Field'}\n                      label={'Field'}\n                      value={`${simulatedServiceMetric.field.name}`}/>\n            <CardItem key={'MinimumValue'}\n                      label='Minimum value'\n                      value={`${simulatedServiceMetric.minimumValue}`}/>\n            <CardItem key={'MaximumValue'}\n                      label='Maximum value'\n                      value={`${simulatedServiceMetric.maximumValue}`}/>\n            <CardItem key={'Override'}\n                      label='Override'\n                      value={`${simulatedServiceMetric.override}`}/>\n            <CardItem key={'Generic'}\n                      label='Generic'\n                      value={`${simulatedServiceMetric.generic}`}/>\n            <CardItem key={'Active'}\n                      label='Active'\n                      value={`${simulatedServiceMetric.active}`}/>\n        </CardSimulatedServiceMetric>\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    deleteSimulatedServiceMetric,\n};\n\nexport default connect(null, mapDispatchToProps)(SimulatedServiceMetricCard);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport {connect} from \"react-redux\";\nimport {ReduxState} from \"../../../../reducers\";\nimport CardList from \"../../../../components/list/CardList\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport {ISimulatedServiceMetric} from \"./SimulatedServiceMetric\";\nimport SimulatedServiceMetricCard from \"./SimulatedServiceMetricCard\";\nimport {loadSimulatedServiceMetrics} from \"../../../../actions\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    simulatedServiceMetrics: ISimulatedServiceMetric[];\n}\n\ninterface DispatchToProps {\n    loadSimulatedServiceMetrics: () => void;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass SimulatedServiceMetricsList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadSimulatedServiceMetrics();\n    }\n\n    public render() {\n        return (\n            <CardList<ISimulatedServiceMetric>\n                isLoading={this.props.isLoading}\n                error={this.props.error}\n                emptyMessage={\"No simulated service metrics to display\"}\n                list={this.props.simulatedServiceMetrics}\n                card={this.simulatedServiceMetric}\n                predicate={this.predicate}/>\n        );\n    }\n\n    private simulatedServiceMetric = (simulatedMetric: ISimulatedServiceMetric): JSX.Element =>\n        <SimulatedServiceMetricCard key={simulatedMetric.id} simulatedServiceMetric={simulatedMetric}/>;\n\n    private predicate = (simulatedMetric: ISimulatedServiceMetric, search: string): boolean =>\n        simulatedMetric.name.toLowerCase().includes(search);\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.simulatedMetrics.services.isLoadingSimulatedServiceMetrics,\n        error: state.entities.simulatedMetrics.services.loadSimulatedServiceMetricsError,\n        simulatedServiceMetrics: (state.entities.simulatedMetrics.services.data\n            && Object.values(state.entities.simulatedMetrics.services.data).reverse()) || [],\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadSimulatedServiceMetrics,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimulatedServiceMetricsList);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Card from \"../../../../components/cards/Card\";\nimport CardItem from \"../../../../components/list/CardItem\";\nimport React from \"react\";\nimport {deleteServiceRule} from \"../../../../actions\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport LinkedContextMenuItem from \"../../../../components/contextmenu/LinkedContextMenuItem\";\nimport {connect} from \"react-redux\";\nimport {IRuleService} from \"./RuleService\";\n\ninterface State {\n    loading: boolean;\n}\n\ninterface ServiceCardProps {\n    rule: IRuleService;\n}\n\ninterface DispatchToProps {\n    deleteServiceRule: (serviceRule: IRuleService) => void;\n}\n\ntype Props = DispatchToProps & ServiceCardProps;\n\nclass RuleServiceCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    private onDeleteSuccess = (ruleService: IRuleService): void => {\n        super.toast(`<span class=\"green-text\">Service rule <b class=\"white-text\">${ruleService.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.deleteServiceRule(ruleService);\n    }\n\n    private onDeleteFailure = (reason: string, ruleService: IRuleService): void => {\n        super.toast(`Unable to delete <a href=/rules/services/${ruleService.name}><b>${ruleService.name}</b></a> service rule`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    }\n\n    private contextMenu = (): JSX.Element[] => {\n        const {rule} = this.props;\n        const menuItems = [\n            <LinkedContextMenuItem\n                option={'Modify conditions'}\n                pathname={`/rules/services/${rule.name}`}\n                selected={'ruleConditions'}\n                state={rule}/>\n        ];\n        if (!rule.generic) {\n            menuItems.push(\n                <LinkedContextMenuItem\n                    option={'Modify services'}\n                    pathname={`/rules/services/${rule.name}`}\n                    selected={'services'}\n                    state={rule}/>\n            );\n        }\n        return menuItems;\n    }\n\n    public render() {\n        const {rule} = this.props;\n        const {loading} = this.state;\n        const CardRuleService = Card<IRuleService>();\n        return <CardRuleService id={`service-rule-${rule.id}`}\n                                title={rule.name}\n                                link={{to: {pathname: `/rules/services/${rule.name}`, state: rule}}}\n                                height={'120px'}\n                                margin={'10px 0'}\n                                hoverable\n                                delete={{\n                                    url: `rules/hosts/${rule.name}`,\n                                    successCallback: this.onDeleteSuccess,\n                                    failureCallback: this.onDeleteFailure,\n                                }}\n                                loading={loading}\n                                bottomContextMenuItems={this.contextMenu()}>\n            <CardItem key={'priority'}\n                      label={'Priority'}\n                      value={`${rule.priority}`}/>\n            <CardItem key={'decision'}\n                      label={'Decision'}\n                      value={`${rule.decision.ruleDecision}`}/>\n            <CardItem key={'generic'}\n                      label={'Generic'}\n                      value={`${rule.generic}`}/>\n        </CardRuleService>\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    deleteServiceRule,\n};\n\nexport default connect(null, mapDispatchToProps)(RuleServiceCard);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {IRuleService} from \"./RuleService\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport React from \"react\";\nimport RuleServiceCard from \"./RuleServiceCard\";\nimport CardList from \"../../../../components/list/CardList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {connect} from \"react-redux\";\nimport {loadRulesService} from \"../../../../actions\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    serviceRules: IRuleService[];\n}\n\ninterface DispatchToProps {\n    loadRulesService: () => any;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass RulesServiceList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadRulesService();\n    }\n\n    public render() {\n        return (\n            <CardList<IRuleService>\n                isLoading={this.props.isLoading}\n                error={this.props.error}\n                emptyMessage={\"No service rules to display\"}\n                list={this.props.serviceRules}\n                card={this.rule}\n                predicate={this.predicate}/>\n        );\n    }\n\n    private rule = (rule: IRuleService): JSX.Element =>\n        <RuleServiceCard key={rule.id} rule={rule}/>;\n\n    private predicate = (rule: IRuleService, search: string): boolean =>\n        rule.name.toLowerCase().includes(search);\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.rules.services.isLoadingRules,\n        error: state.entities.rules.services.loadRulesError,\n        serviceRules: (state.entities.rules.services.data && Object.values(state.entities.rules.services.data).reverse()) || []\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadRulesService,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RulesServiceList);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Card from \"../../../../components/cards/Card\";\nimport CardItem from \"../../../../components/list/CardItem\";\nimport React from \"react\";\nimport {ISimulatedHostMetric} from \"./SimulatedHostMetric\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport LinkedContextMenuItem from \"../../../../components/contextmenu/LinkedContextMenuItem\";\nimport {deleteSimulatedHostMetric} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\n\ninterface State {\n    loading: boolean;\n}\n\ninterface SimulatedHostMetricCardProps {\n    simulatedHostMetric: ISimulatedHostMetric;\n}\n\ninterface DispatchToProps {\n    deleteSimulatedHostMetric: (simulatedHostMetric: ISimulatedHostMetric) => void;\n}\n\ntype Props = DispatchToProps & SimulatedHostMetricCardProps;\n\nclass SimulatedHostMetricCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    private onDeleteSuccess = (simulatedMetric: ISimulatedHostMetric): void => {\n        super.toast(`<span class=\"green-text\">Simulated host metric <b class=\"white-text\">${simulatedMetric.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.deleteSimulatedHostMetric(simulatedMetric);\n    }\n\n    private onDeleteFailure = (reason: string, simulatedMetric: ISimulatedHostMetric): void => {\n        super.toast(`Unable to delete simulated host metric <a href=/simulated-metrics/hosts/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    }\n\n    private contextMenu = (): JSX.Element[] => {\n        const {simulatedHostMetric} = this.props;\n        return [\n            <LinkedContextMenuItem\n                option={'Modify cloud hosts'}\n                pathname={`/simulated-metrics/hosts/${simulatedHostMetric.name}`}\n                selected={'cloudHosts'}\n                state={simulatedHostMetric}/>,\n            <LinkedContextMenuItem\n                option={'Modify edge hosts'}\n                pathname={`/simulated-metrics/hosts/${simulatedHostMetric.name}`}\n                selected={'edgeHosts'}\n                state={simulatedHostMetric}/>,\n        ];\n    }\n\n    public render() {\n        const {simulatedHostMetric} = this.props;\n        const {loading} = this.state;\n        const CardSimulatedHostMetric = Card<ISimulatedHostMetric>();\n        return <CardSimulatedHostMetric id={`simulated-host-metric-${simulatedHostMetric.id}`}\n                                        title={simulatedHostMetric.name}\n                                        link={{\n                                            to: {\n                                                pathname: `/simulated-metrics/hosts/${simulatedHostMetric.name}`,\n                                                state: simulatedHostMetric\n                                            }\n                                        }}\n                                        height={'212px'}\n                                        margin={'10px 0'}\n                                        hoverable\n                                        delete={{\n                                            url: `simulated-metrics/hosts/${simulatedHostMetric.name}`,\n                                            successCallback: this.onDeleteSuccess,\n                                            failureCallback: this.onDeleteFailure,\n                                        }}\n                                        loading={loading}\n                                        bottomContextMenuItems={this.contextMenu()}>\n            <CardItem key={'Field'}\n                      label={'Field'}\n                      value={`${simulatedHostMetric.field.name}`}/>\n            <CardItem key={'MinimumValue'}\n                      label='Minimum value'\n                      value={`${simulatedHostMetric.minimumValue}`}/>\n            <CardItem key={'MaximumValue'}\n                      label='Maximum value'\n                      value={`${simulatedHostMetric.maximumValue}`}/>\n            <CardItem key={'Override'}\n                      label='Override'\n                      value={`${simulatedHostMetric.override}`}/>\n            <CardItem key={'Generic'}\n                      label='Generic'\n                      value={`${simulatedHostMetric.generic}`}/>\n            <CardItem key={'Active'}\n                      label='Active'\n                      value={`${simulatedHostMetric.active}`}/>\n        </CardSimulatedHostMetric>\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    deleteSimulatedHostMetric,\n};\n\nexport default connect(null, mapDispatchToProps)(SimulatedHostMetricCard);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport {connect} from \"react-redux\";\nimport {ReduxState} from \"../../../../reducers\";\nimport CardList from \"../../../../components/list/CardList\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport {loadSimulatedHostMetrics} from \"../../../../actions\";\nimport {ISimulatedHostMetric} from \"./SimulatedHostMetric\";\nimport SimulatedHostMetricCard from \"./SimulatedHostMetricCard\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    simulatedHostMetrics: ISimulatedHostMetric[];\n}\n\ninterface DispatchToProps {\n    loadSimulatedHostMetrics: () => void;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass SimulatedHostMetricsList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadSimulatedHostMetrics();\n    }\n\n    public render() {\n        return (\n            <CardList<ISimulatedHostMetric>\n                isLoading={this.props.isLoading}\n                error={this.props.error}\n                emptyMessage={\"No simulated host metrics to display\"}\n                list={this.props.simulatedHostMetrics}\n                card={this.simulatedHostMetric}\n                predicate={this.predicate}/>\n        );\n    }\n\n    private simulatedHostMetric = (simulatedMetric: ISimulatedHostMetric): JSX.Element =>\n        <SimulatedHostMetricCard key={simulatedMetric.id} simulatedHostMetric={simulatedMetric}/>;\n\n    private predicate = (simulatedMetric: ISimulatedHostMetric, search: string): boolean =>\n        simulatedMetric.name.toLowerCase().includes(search);\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.simulatedMetrics.hosts.isLoadingSimulatedHostMetrics,\n        error: state.entities.simulatedMetrics.hosts.loadSimulatedHostMetricsError,\n        simulatedHostMetrics: (state.entities.simulatedMetrics.hosts.data\n            && Object.values(state.entities.simulatedMetrics.hosts.data).reverse()) || [],\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadSimulatedHostMetrics,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimulatedHostMetricsList);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Card from \"../../../../components/cards/Card\";\nimport CardItem from \"../../../../components/list/CardItem\";\nimport React from \"react\";\nimport {deleteHostRule} from \"../../../../actions\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport LinkedContextMenuItem from \"../../../../components/contextmenu/LinkedContextMenuItem\";\nimport {connect} from \"react-redux\";\nimport {IRuleHost} from \"./RuleHost\";\n\ninterface State {\n    loading: boolean;\n}\n\ninterface HostCardProps {\n    rule: IRuleHost;\n}\n\ninterface DispatchToProps {\n    deleteHostRule: (hostRule: IRuleHost) => void;\n}\n\ntype Props = DispatchToProps & HostCardProps;\n\nclass RuleHostCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    private onDeleteSuccess = (ruleHost: IRuleHost): void => {\n        super.toast(`<span class=\"green-text\">Host rule <b class=\"white-text\">${ruleHost.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.deleteHostRule(ruleHost);\n    }\n\n    private onDeleteFailure = (reason: string, ruleHost: IRuleHost): void => {\n        super.toast(`Unable to delete <a href=/rules/hosts/${ruleHost.name}><b>${ruleHost.name}</b></a> host rule`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    }\n\n    private contextMenu = (): JSX.Element[] => {\n        const {rule} = this.props;\n        const menuItems = [\n            <LinkedContextMenuItem\n                option={'Modify conditions'}\n                pathname={`/rules/hosts/${rule.name}`}\n                selected={'ruleConditions'}\n                state={rule}/>\n        ];\n        if (!rule.generic) {\n            menuItems.push(\n                <LinkedContextMenuItem\n                    option={'Modify cloud hosts'}\n                    pathname={`/rules/hosts/${rule.name}`}\n                    selected={'cloudHosts'}\n                    state={rule}/>,\n                <LinkedContextMenuItem\n                    option={'Modify edge hosts'}\n                    pathname={`/rules/hosts/${rule.name}`}\n                    selected={'edgeHosts'}\n                    state={rule}/>\n            );\n        }\n        return menuItems;\n    }\n\n    public render() {\n        const {rule} = this.props;\n        const {loading} = this.state;\n        const CardRuleHost = Card<IRuleHost>();\n        return <CardRuleHost id={`host-rule-${rule.id}`}\n                             title={rule.name}\n                             link={{to: {pathname: `/rules/hosts/${rule.name}`, state: rule}}}\n                             height={'120px'}\n                             margin={'10px 0'}\n                             hoverable\n                             delete={{\n                                 url: `rules/hosts/${rule.name}`,\n                                 successCallback: this.onDeleteSuccess,\n                                 failureCallback: this.onDeleteFailure,\n                             }}\n                             loading={loading}\n                             bottomContextMenuItems={this.contextMenu()}>\n            <CardItem key={'priority'}\n                      label={'Priority'}\n                      value={`${rule.priority}`}/>\n            <CardItem key={'decision'}\n                      label={'Decision'}\n                      value={`${rule.decision.ruleDecision}`}/>\n            <CardItem key={'generic'}\n                      label={'Generic'}\n                      value={`${rule.generic}`}/>\n        </CardRuleHost>\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    deleteHostRule,\n};\n\nexport default connect(null, mapDispatchToProps)(RuleHostCard);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {IRuleHost} from \"./RuleHost\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport React from \"react\";\nimport RuleHostCard from \"./RuleHostCard\";\nimport CardList from \"../../../../components/list/CardList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {connect} from \"react-redux\";\nimport {loadRulesHost} from \"../../../../actions\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    hostRules: IRuleHost[];\n}\n\ninterface DispatchToProps {\n    loadRulesHost: () => any;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass RulesHostList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadRulesHost();\n    }\n\n    public render() {\n        return (\n            <CardList<IRuleHost>\n                isLoading={this.props.isLoading}\n                error={this.props.error}\n                emptyMessage={\"No cloud host rules to display\"}\n                list={this.props.hostRules}\n                card={this.rule}\n                predicate={this.predicate}/>\n        );\n    }\n\n    private rule = (rule: IRuleHost): JSX.Element =>\n        <RuleHostCard key={rule.id} rule={rule}/>;\n\n    private predicate = (rule: IRuleHost, search: string): boolean =>\n        rule.name.toLowerCase().includes(search);\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.rules.hosts.isLoadingRules,\n        error: state.entities.rules.hosts.loadRulesError,\n        hostRules: (state.entities.rules.hosts.data && Object.values(state.entities.rules.hosts.data).reverse()) || []\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadRulesHost,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RulesHostList);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Card from \"../../../components/cards/Card\";\nimport React from \"react\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport LinkedContextMenuItem from \"../../../components/contextmenu/LinkedContextMenuItem\";\nimport {EntitiesAction} from \"../../../reducers/entities\";\nimport {connect} from \"react-redux\";\nimport {INode} from \"./Node\";\nimport CardItem from \"../../../components/list/CardItem\";\nimport {deleteNode} from \"../../../actions\";\n\ninterface State {\n    loading: boolean;\n}\n\ninterface NodeCardProps {\n    node: INode;\n}\n\ninterface DispatchToProps {\n    deleteNode: (node: INode) => EntitiesAction;\n}\n\ntype Props = DispatchToProps & NodeCardProps;\n\nclass NodeCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    private onDeleteSuccess = (node: INode): void => {\n        super.toast(`<span class=\"green-text\">Node <b class=\"white-text\">${node.publicIpAddress}</b> ${node.state === 'down' ? 'successfully removed from the swarm' : 'left the swarm.'}</span>`);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.deleteNode(node);\n    }\n\n    private onDeleteFailure = (reason: string, node: INode): void => {\n        if (node.state === 'active') {\n            super.toast(`Node <a href=/nodes/${node.id}><b>${node.id}</b></a> was unable to leave the swarm`, 10000, reason, true);\n        } else if (node.state === 'down') {\n            super.toast(`Unable to remove node <a href=/nodes/${node.id}><b>${node.id}</b></a> from the swarm`, 10000, reason, true);\n        }\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    }\n\n    private contextMenu = (): JSX.Element[] => {\n        const {node} = this.props;\n        return [\n            <LinkedContextMenuItem\n                option={'View labels'}\n                pathname={`/nodes/${node.id}`}\n                selected={'nodeLabels'}\n                state={node}/>,\n        ];\n    }\n\n    public render() {\n        const {node} = this.props;\n        const {loading} = this.state;\n        const CardNode = Card<INode>();\n        return <CardNode id={`node-${node.id}`}\n                         title={node.id.toString()}\n                         link={{to: {pathname: `/nodes/${node.id}`, state: node}}}\n                         height={'150px'}\n                         margin={'10px 0'}\n                         hoverable\n                         delete={{\n                             textButton: (node as INode).state === 'down' ? 'Remove from swarm' : 'Leave swarm',\n                             url: (node as INode).state === 'down' ? `nodes/${(node as INode).id}` : `nodes/${(node as INode).publicIpAddress}/leave`,\n                             confirmMessage: (node as INode).state === 'down' ? `to remove ${node.id} from the swarm` : `${node.id} to leave the swarm`,\n                             successCallback: this.onDeleteSuccess,\n                             failureCallback: this.onDeleteFailure\n                         }}\n                         loading={loading}\n                         bottomContextMenuItems={this.contextMenu()}>\n            <CardItem key={'hostName'}\n                      label={'Hostname'}\n                      value={node.publicIpAddress}/>\n            <CardItem key={'state'}\n                      label={'State'}\n                      value={node.state}/>\n            <CardItem key={'availability'}\n                      label={'Availability'}\n                      value={node.availability}/>\n            <CardItem key={'role'}\n                      label={'Role'}\n                      value={node.role}/>\n        </CardNode>\n    }\n\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    deleteNode\n};\n\nexport default connect(null, mapDispatchToProps)(NodeCard);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport MainLayout from '../../../views/mainLayout/MainLayout';\nimport NodeCard from './NodeCard';\nimport AddButton from \"../../../components/form/AddButton\";\nimport {connect} from \"react-redux\";\nimport {ReduxState} from \"../../../reducers\";\nimport CardList from \"../../../components/list/CardList\";\nimport {INode} from \"./Node\";\nimport styles from './Nodes.module.css'\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport {loadNodes} from \"../../../actions\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    nodes: INode[];\n}\n\ninterface DispatchToProps {\n    loadNodes: (id?: string) => any;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass Nodes extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadNodes();\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                <AddButton tooltip={{text: 'Add node', position: 'left'}}\n                           pathname={'/nodes/new_node?new'}/>\n                <div className={`${styles.container}`}>\n                    <CardList<INode>\n                        isLoading={this.props.isLoading}\n                        error={this.props.error}\n                        emptyMessage={\"No nodes to display\"}\n                        list={this.props.nodes}\n                        card={this.node}\n                        predicate={this.predicate}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private node = (node: INode): JSX.Element =>\n        <NodeCard key={node.id} node={node}/>;\n\n    private predicate = (node: INode, search: string): boolean =>\n        node.id.toString().toLowerCase().includes(search)\n        || node.publicIpAddress.toLowerCase().includes(search)\n        || node.state.toLowerCase().includes(search)\n        || node.role.toLowerCase().includes(search);\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.nodes.isLoadingNodes,\n        error: state.entities.nodes.loadNodesError,\n        nodes: (state.entities.nodes.data && Object.values(state.entities.nodes.data).reverse()) || [],\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadNodes,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Nodes);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Card from \"../../../../components/cards/Card\";\nimport CardItem from \"../../../../components/list/CardItem\";\nimport React from \"react\";\nimport {ISimulatedAppMetric} from \"./SimulatedAppMetric\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport LinkedContextMenuItem from \"../../../../components/contextmenu/LinkedContextMenuItem\";\nimport {deleteSimulatedAppMetric} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\n\ninterface State {\n    loading: boolean;\n}\n\ninterface SimulatedAppMetricCardProps {\n    simulatedAppMetric: ISimulatedAppMetric;\n}\n\ninterface DispatchToProps {\n    deleteSimulatedAppMetric: (simulatedAppMetric: ISimulatedAppMetric) => void;\n}\n\ntype Props = DispatchToProps & SimulatedAppMetricCardProps;\n\nclass SimulatedAppMetricCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    private onDeleteSuccess = (simulatedMetric: ISimulatedAppMetric): void => {\n        super.toast(`<span class=\"green-text\">Simulated app metric <b class=\"white-text\">${simulatedMetric.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.deleteSimulatedAppMetric(simulatedMetric);\n    }\n\n    private onDeleteFailure = (reason: string, simulatedMetric: ISimulatedAppMetric): void => {\n        super.toast(`Unable to delete simulated app metric <a href=/simulated-metrics/Apps/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    }\n\n    private contextMenu = (): JSX.Element[] => {\n        const {simulatedAppMetric} = this.props;\n        return [\n            <LinkedContextMenuItem\n                option={'Modify apps'}\n                pathname={`/simulated-metrics/apps/${simulatedAppMetric.name}`}\n                selected={'apps'}\n                state={simulatedAppMetric}/>,\n        ];\n    }\n\n    public render() {\n        const {simulatedAppMetric} = this.props;\n        const {loading} = this.state;\n        const CardSimulatedAppMetric = Card<ISimulatedAppMetric>();\n        return <CardSimulatedAppMetric id={`simulated-app-metric-${simulatedAppMetric.id}`}\n                                       title={simulatedAppMetric.name}\n                                       link={{\n                                           to: {\n                                               pathname: `/simulated-metrics/apps/${simulatedAppMetric.name}`,\n                                               state: simulatedAppMetric\n                                           }\n                                       }}\n                                       height={'185px'}\n                                       margin={'10px 0'}\n                                       hoverable\n                                       delete={{\n                                           url: `simulated-metrics/apps/${simulatedAppMetric.name}`,\n                                           successCallback: this.onDeleteSuccess,\n                                           failureCallback: this.onDeleteFailure,\n                                       }}\n                                       loading={loading}\n                                       bottomContextMenuItems={this.contextMenu()}>\n            <CardItem key={'Field'}\n                      label={'Field'}\n                      value={`${simulatedAppMetric.field.name}`}/>\n            <CardItem key={'MinimumValue'}\n                      label='Minimum value'\n                      value={`${simulatedAppMetric.minimumValue}`}/>\n            <CardItem key={'MaximumValue'}\n                      label='Maximum value'\n                      value={`${simulatedAppMetric.maximumValue}`}/>\n            <CardItem key={'Override'}\n                      label='Override'\n                      value={`${simulatedAppMetric.override}`}/>\n            <CardItem key={'Active'}\n                      label='Active'\n                      value={`${simulatedAppMetric.active}`}/>\n        </CardSimulatedAppMetric>;\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    deleteSimulatedAppMetric,\n};\n\nexport default connect(null, mapDispatchToProps)(SimulatedAppMetricCard);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport {connect} from \"react-redux\";\nimport {ReduxState} from \"../../../../reducers\";\nimport CardList from \"../../../../components/list/CardList\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport {ISimulatedAppMetric} from \"./SimulatedAppMetric\";\nimport SimulatedAppMetricCard from \"./SimulatedAppMetricCard\";\nimport {loadSimulatedAppMetrics} from \"../../../../actions\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    simulatedAppMetrics: ISimulatedAppMetric[];\n}\n\ninterface DispatchToProps {\n    loadSimulatedAppMetrics: () => void;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass SimulatedAppMetricsList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadSimulatedAppMetrics();\n    }\n\n    public render() {\n        return (\n            <CardList<ISimulatedAppMetric>\n                isLoading={this.props.isLoading}\n                error={this.props.error}\n                emptyMessage={\"No simulated app metrics to display\"}\n                list={this.props.simulatedAppMetrics}\n                card={this.simulatedAppMetric}\n                predicate={this.predicate}/>\n        );\n    }\n\n    private simulatedAppMetric = (simulatedMetric: ISimulatedAppMetric): JSX.Element =>\n        <SimulatedAppMetricCard key={simulatedMetric.id} simulatedAppMetric={simulatedMetric}/>;\n\n    private predicate = (simulatedMetric: ISimulatedAppMetric, search: string): boolean =>\n        simulatedMetric.name.toLowerCase().includes(search);\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.simulatedMetrics.apps.isLoadingSimulatedAppMetrics,\n        error: state.entities.simulatedMetrics.apps.loadSimulatedAppMetricsError,\n        simulatedAppMetrics: (state.entities.simulatedMetrics.apps.data\n            && Object.values(state.entities.simulatedMetrics.apps.data).reverse()) || [],\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadSimulatedAppMetrics,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimulatedAppMetricsList);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Card from \"../../../../components/cards/Card\";\nimport CardItem from \"../../../../components/list/CardItem\";\nimport React from \"react\";\nimport {ISimulatedContainerMetric} from \"./SimulatedContainerMetric\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport LinkedContextMenuItem from \"../../../../components/contextmenu/LinkedContextMenuItem\";\nimport {deleteSimulatedContainerMetric} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\n\ninterface State {\n    loading: boolean;\n}\n\ninterface SimulatedContainerMetricCardProps {\n    simulatedContainerMetric: ISimulatedContainerMetric;\n}\n\ninterface DispatchToProps {\n    deleteSimulatedContainerMetric: (simulatedContainerMetric: ISimulatedContainerMetric) => void;\n}\n\ntype Props = DispatchToProps & SimulatedContainerMetricCardProps;\n\nclass SimulatedContainerMetricCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    private onDeleteSuccess = (simulatedMetric: ISimulatedContainerMetric): void => {\n        super.toast(`<span class=\"green-text\">Simulated container metric <b class=\"white-text\">${simulatedMetric.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.deleteSimulatedContainerMetric(simulatedMetric);\n    }\n\n    private onDeleteFailure = (reason: string, simulatedMetric: ISimulatedContainerMetric): void => {\n        super.toast(`Unable to delete simulated container metric <a href=/simulated-metrics/Containers/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    }\n\n    private contextMenu = (): JSX.Element[] => {\n        const {simulatedContainerMetric} = this.props;\n        return [\n            <LinkedContextMenuItem\n                option={'Modify containers'}\n                pathname={`/simulated-metrics/containers/${simulatedContainerMetric.name}`}\n                selected={'containers'}\n                state={simulatedContainerMetric}/>,\n        ];\n    }\n\n    public render() {\n        const {simulatedContainerMetric} = this.props;\n        const {loading} = this.state;\n        const CardSimulatedContainerMetric = Card<ISimulatedContainerMetric>();\n        return <CardSimulatedContainerMetric id={`simulated-container-metric-${simulatedContainerMetric.id}`}\n                                             title={simulatedContainerMetric.name}\n                                             link={{\n                                                 to: {\n                                                     pathname: `/simulated-metrics/containers/${simulatedContainerMetric.name}`,\n                                                     state: simulatedContainerMetric\n                                                 }\n                                             }}\n                                             height={'185px'}\n                                             margin={'10px 0'}\n                                             hoverable\n                                             delete={{\n                                                 url: `simulated-metrics/containers/${simulatedContainerMetric.name}`,\n                                                 successCallback: this.onDeleteSuccess,\n                                                 failureCallback: this.onDeleteFailure,\n                                             }}\n                                             loading={loading}\n                                             bottomContextMenuItems={this.contextMenu()}>\n            <CardItem key={'Field'}\n                      label={'Field'}\n                      value={`${simulatedContainerMetric.field.name}`}/>\n            <CardItem key={'MinimumValue'}\n                      label='Minimum value'\n                      value={`${simulatedContainerMetric.minimumValue}`}/>\n            <CardItem key={'MaximumValue'}\n                      label='Maximum value'\n                      value={`${simulatedContainerMetric.maximumValue}`}/>\n            <CardItem key={'Override'}\n                      label='Override'\n                      value={`${simulatedContainerMetric.override}`}/>\n            <CardItem key={'Active'}\n                      label='Active'\n                      value={`${simulatedContainerMetric.active}`}/>\n        </CardSimulatedContainerMetric>;\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    deleteSimulatedContainerMetric,\n};\n\nexport default connect(null, mapDispatchToProps)(SimulatedContainerMetricCard);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport {connect} from \"react-redux\";\nimport {ReduxState} from \"../../../../reducers\";\nimport CardList from \"../../../../components/list/CardList\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport {ISimulatedContainerMetric} from \"./SimulatedContainerMetric\";\nimport SimulatedContainerMetricCard from \"./SimulatedContainerMetricCard\";\nimport {loadSimulatedContainerMetrics} from \"../../../../actions\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    simulatedContainerMetrics: ISimulatedContainerMetric[];\n}\n\ninterface DispatchToProps {\n    loadSimulatedContainerMetrics: () => void;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass SimulatedContainerMetricsList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadSimulatedContainerMetrics();\n    }\n\n    public render() {\n        return (\n            <CardList<ISimulatedContainerMetric>\n                isLoading={this.props.isLoading}\n                error={this.props.error}\n                emptyMessage={\"No simulated container metrics to display\"}\n                list={this.props.simulatedContainerMetrics}\n                card={this.simulatedContainerMetric}\n                predicate={this.predicate}/>\n        );\n    }\n\n    private simulatedContainerMetric = (simulatedMetric: ISimulatedContainerMetric): JSX.Element =>\n        <SimulatedContainerMetricCard key={simulatedMetric.id} simulatedContainerMetric={simulatedMetric}/>;\n\n    private predicate = (simulatedMetric: ISimulatedContainerMetric, search: string): boolean =>\n        simulatedMetric.name.toLowerCase().includes(search);\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.simulatedMetrics.containers.isLoadingSimulatedContainerMetrics,\n        error: state.entities.simulatedMetrics.containers.loadSimulatedContainerMetricsError,\n        simulatedContainerMetrics: (state.entities.simulatedMetrics.containers.data\n            && Object.values(state.entities.simulatedMetrics.containers.data).reverse()) || [],\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadSimulatedContainerMetrics,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimulatedContainerMetricsList);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Card from \"../../../components/cards/Card\";\nimport React from \"react\";\nimport {IApp} from \"./App\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport LinkedContextMenuItem from \"../../../components/contextmenu/LinkedContextMenuItem\";\nimport {EntitiesAction} from \"../../../reducers/entities\";\nimport {deleteApp} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport CardItem from \"../../../components/list/CardItem\";\n\ninterface State {\n    loading: boolean;\n}\n\ninterface AppCardProps {\n    app: IApp;\n}\n\ninterface DispatchToProps {\n    deleteApp: (app: IApp) => EntitiesAction;\n}\n\ntype Props = DispatchToProps & AppCardProps;\n\nclass AppCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    private onDeleteSuccess = (app: IApp): void => {\n        super.toast(`<span class='green-text'>App <b class='white-text'>${app.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.deleteApp(app);\n    }\n\n    private onDeleteFailure = (reason: string, app: IApp): void => {\n        super.toast(`Unable to delete <a href='/apps/${app.name}'><b>${app.name}</b></a> app`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    }\n\n    private contextMenu = (): JSX.Element[] => {\n        const {app} = this.props;\n        return [\n            <LinkedContextMenuItem\n                option={'Modify services'}\n                pathname={`/apps/${app.name}`}\n                selected={'services'}\n                state={app}/>,\n            <LinkedContextMenuItem\n                option={'Modify rules'}\n                pathname={`/apps/${app.name}`}\n                selected={'rules'}\n                state={app}/>,\n            <LinkedContextMenuItem\n                option={'View generic rules'}\n                pathname={`/apps/${app.name}`}\n                selected={'genericServiceRules'}\n                state={app}/>,\n            <LinkedContextMenuItem\n                option={'Modify simulated metrics'}\n                pathname={`/apps/${app.name}`}\n                selected={'simulatedMetrics'}\n                state={app}/>,\n            <LinkedContextMenuItem\n                option={'View generic simulated metrics'}\n                pathname={`/apps/${app.name}`}\n                selected={'genericSimulatedMetrics'}\n                state={app}/>\n        ];\n    }\n\n    public render() {\n        const {app} = this.props;\n        const {loading} = this.state;\n        const CardApp = Card<IApp>();\n        let description = app.description || 'No description available';\n        if (!description.endsWith('.')) {\n            description += '.';\n        }\n        return <CardApp id={`app-${app.name}`}\n                        title={app.name}\n                        link={{to: {pathname: `/apps/${app.name}`, state: app}}}\n                        height={'175px'}\n                        margin={'10px 0'}\n                        hoverable\n                        delete={{\n                            url: `apps/${app.name}`,\n                            successCallback: this.onDeleteSuccess,\n                            failureCallback: this.onDeleteFailure\n                        }}\n                        loading={loading}\n                        bottomContextMenuItems={this.contextMenu()}>\n            <CardItem key={'app'}\n                      value={description}/>\n        </CardApp>\n    }\n\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    deleteApp\n};\n\nexport default connect(null, mapDispatchToProps)(AppCard);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport MainLayout from '../../../views/mainLayout/MainLayout';\nimport AddButton from \"../../../components/form/AddButton\";\nimport {connect} from \"react-redux\";\nimport {ReduxState} from \"../../../reducers\";\nimport CardList from \"../../../components/list/CardList\";\nimport styles from './Apps.module.css'\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport {loadApps} from \"../../../actions\";\nimport {IApp} from \"./App\";\nimport AppCard from \"./AppCard\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    apps: IApp[];\n}\n\ninterface DispatchToProps {\n    loadApps: (name?: string) => any;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass Apps extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadApps();\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                <AddButton tooltip={{text: 'Add app', position: 'left'}}\n                           pathname={'/apps/new_app?new'}/>\n                <div className={`${styles.container}`}>\n                    <CardList<IApp>\n                        isLoading={this.props.isLoading}\n                        error={this.props.error}\n                        emptyMessage={\"No apps to display\"}\n                        list={this.props.apps}\n                        card={this.app}\n                        predicate={this.predicate}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private app = (app: IApp): JSX.Element =>\n        <AppCard key={app.name} app={app}/>;\n\n    private predicate = (app: IApp, search: string): boolean =>\n        app.name.toString().toLowerCase().includes(search);\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.apps.isLoadingApps,\n        error: state.entities.apps.loadAppsError,\n        apps: (state.entities.apps.data && Object.values(state.entities.apps.data).reverse()) || [],\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadApps,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Apps);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport styles from \"../../../components/list/ListItem.module.css\";\nimport List from \"../../../components/list/List\";\nimport React from \"react\";\nimport {INode} from \"./Node\";\n\ninterface PortsListProps {\n    isLoadingNode: boolean;\n    loadNodeError?: string | null;\n    node?: INode | null;\n}\n\ntype Props = PortsListProps;\n\nexport default class NodeLabelsList extends BaseComponent<Props, {}> {\n\n    public render() {\n        const LabelsList = List<string>();\n        return (\n            <LabelsList isLoading={this.props.isLoadingNode}\n                        error={this.props.loadNodeError}\n                        emptyMessage={`No labels associated`}\n                        list={this.labels()}\n                        show={this.label}/>\n        );\n    }\n\n    private labels = (): string[] =>\n        Object.entries(this.props.node?.labels || []).map(([key, value]) => `${key} = ${value}`);\n\n    private label = (label: string, index: number): JSX.Element =>\n        <ListItem key={index} separate={index !== this.labels().length - 1}>\n            <div className={`${styles.listItemContent}`}>\n                <span>{label}</span>\n            </div>\n        </ListItem>;\n\n}","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {RouteComponentProps} from \"react-router\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport Form, {\n    ICustomButton,\n    IFields,\n    IFormLoading,\n    required,\n    requireGreaterOrEqualSize\n} from \"../../../components/form/Form\";\nimport LoadingSpinner from \"../../../components/list/LoadingSpinner\";\nimport {Error} from \"../../../components/errors/Error\";\nimport Field from \"../../../components/form/Field\";\nimport Tabs, {Tab} from \"../../../components/tabs/Tabs\";\nimport MainLayout from \"../../../views/mainLayout/MainLayout\";\nimport {ReduxState} from \"../../../reducers\";\nimport {addNodes, loadCloudHosts, loadEdgeHosts, loadNodes, loadRegions, updateNode} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport React from \"react\";\nimport {IRegion} from \"../regions/Region\";\nimport {IEdgeHost} from \"../hosts/edge/EdgeHost\";\nimport {IReply, postData} from \"../../../utils/api\";\nimport {isNew} from \"../../../utils/router\";\nimport {normalize} from \"normalizr\";\nimport {Schemas} from \"../../../middleware/api\";\nimport {ICloudHost} from \"../hosts/cloud/CloudHost\";\nimport NodeLabelsList from \"./NodeLabelList\";\nimport formStyles from \"../../../components/form/Form.module.css\";\nimport IDatabaseData from \"../../../components/IDatabaseData\";\nimport {Point} from \"react-simple-maps\";\nimport {ICoordinates} from \"../../../components/map/LocationMap\";\nimport {IMarker} from \"../../../components/map/Marker\";\n\nexport interface INode extends IDatabaseData {\n    publicIpAddress: string;\n    state: string;\n    availability: string;\n    role: string;\n    version: number;\n    labels: INodeLabel;\n}\n\nexport interface INodeLabel {\n    [key: string]: string\n}\n\ninterface INewNodeHost {\n    role?: string;\n    host?: string;\n}\n\ninterface INewNodeLocation {\n    role?: string;\n    coordinates?: Point[];\n}\n\nconst buildNewNodeLocation = (): INewNodeLocation => ({\n    role: undefined,\n    coordinates: undefined,\n});\n\nconst buildNewNodeHost = (): INewNodeHost => ({\n    role: undefined,\n    host: undefined,\n});\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    newNodeHost?: INewNodeHost;\n    newNodeLocation?: INewNodeLocation;\n    node?: INode;\n    formNode?: Partial<INode> & { coordinates?: ICoordinates };\n    cloudHosts: { [key: string]: ICloudHost };\n    edgeHosts: { [key: string]: IEdgeHost };\n    regions: { [key: string]: IRegion };\n    nodes: { [key: string]: INode };\n}\n\ninterface DispatchToProps {\n    loadNodes: (nodeId?: string) => void;\n    addNodes: (nodes: INode[]) => void;\n    updateNode: (previousNode: INode, currentNode: INode) => void;\n    loadEdgeHosts: () => void;\n    loadCloudHosts: () => void;\n    loadRegions: () => void;\n}\n\ninterface MatchParams {\n    id: string;\n}\n\ninterface LocationState {\n    data: INode,\n    selected: 'node' | 'nodeLabels'\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ninterface State {\n    node?: INode,\n    formNode?: INode,\n    loading: IFormLoading,\n    currentForm: 'On host' | 'On location',\n    locations: Point[],\n}\n\nclass Node extends BaseComponent<Props, State> {\n\n    state: State = {\n        loading: undefined,\n        currentForm: 'On host',\n        locations: []\n    };\n\n    private mounted = false;\n\n    public componentDidMount(): void {\n        this.loadNode();\n        this.props.loadNodes();\n        this.props.loadEdgeHosts();\n        this.props.loadCloudHosts();\n        this.props.loadRegions();\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                <div className=\"container\">\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private loadNode = () => {\n        if (!isNew(this.props.location.search)) {\n            const nodeId = this.props.match.params.id;\n            this.props.loadNodes(nodeId);\n        }\n    };\n\n    private getNode = () =>\n        this.props.node || this.state.node;\n\n    private getFormNode = () =>\n        this.props.formNode || this.state.formNode;\n\n    private isNew = () =>\n        isNew(this.props.location.search);\n\n    private onPostSuccess = (reply: IReply<INode[]>): void => {\n        const nodes = reply.data;\n        if (nodes.length === 1) {\n            const node = nodes[0];\n            super.toast(`<span class=\"green-text\">Node ${this.mounted ? `<b class=\"white-text\">${node.id}</b>` : `<a href=/nodes/${node.id}><b>${node.id}</b></a>`} at ${node.publicIpAddress} has joined the swarm</span>`);\n            if (this.mounted) {\n                this.updateNode(node);\n                this.props.history.replace(node.id.toString());\n            }\n        } else {\n            super.toast(`<span class=\"green-text\">Nodes <b class=\"white-text\">${nodes.map(node => `${node.publicIpAddress} => ${node.id}`)}</b> have joined the swarm</span>`);\n            this.props.history.push(\"/nodes\");\n        }\n        this.props.addNodes(nodes);\n    };\n\n    private onPostFailure = (reason: string, node: INewNodeHost | INewNodeLocation): void => {\n        let message;\n        if (\"host\" in node && node.host) {\n            message = `Unable to start node at ${node.host}`;\n        } else if (\"coordinates\" in node) {\n            message = `Unable to start node at ${node.coordinates}`;\n        } else {\n            message = `Unable to start node`;\n        }\n        super.toast(message, 10000, reason, true);\n    };\n\n    private onPutSuccess = (reply: IReply<INode>): void => {\n        const node = reply.data;\n        const previousNode = this.getNode();\n        const previousAvailability = previousNode?.availability;\n        const previousRole = previousNode?.role;\n        if (node.availability !== previousAvailability) {\n            super.toast(`<span class=\"green-text\">Node ${this.mounted ? `<b class=\"white-text\">${node.id}</b>` : `<a href=/nodes/${node.id}><b>${node.id}</b></a>`} availability has been changed to ${node.availability}</span>`);\n        } else if (node.role !== previousRole) {\n            super.toast(`<span class=\"green-text\">Node ${this.mounted ? `<b class=\"white-text\">${node.id}</b>` : `<a href=/nodes/${node.id}><b>${node.id}</b></a>`} has been ${previousRole === 'MANAGER' ? 'demoted' : 'promoted'} to ${node.role}</span>`);\n        } else {\n            super.toast(`<span class=\"green-text\">Changes to node ${this.mounted ? `<b class=\"white-text\">${node.id}</b>` : `<a href=/nodes/${node.id}><b>${node.id}</b></a>`} have been saved</span>`);\n        }\n        if (previousNode?.id) {\n            this.props.updateNode(previousNode as INode, node)\n        }\n        if (this.mounted) {\n            this.updateNode(node);\n            this.props.history.replace(node.id.toString());\n        }\n    };\n\n    private onPutFailure = (reason: string, node: INode): void =>\n        super.toast(`Unable to change role of node ${this.mounted ? `<b>${node.id}</b>` : `<a href=/nodes/${node.id}><b>${node.id}</b></a>`}`, 10000, reason, true);\n\n    private onDeleteSuccess = (node: INode): void => {\n        super.toast(`<span class=\"green-text\">Host <b class=\"white-text\">${node.publicIpAddress}</b> ${node.state === 'down' ? 'successfully removed from the swarm' : 'left the swarm.'}</span>`);\n        if (this.mounted) {\n            this.props.history.push(`/nodes`);\n        }\n    };\n\n    private onDeleteFailure = (reason: string, node: INode): void => {\n        if (node.state === 'active') {\n            super.toast(`Node ${this.mounted ? `<b>${node.id}</b>` : `<a href=/nodes/${node.id}><b>${node.id}</b></a>`} was unable to leave the swarm`, 10000, reason, true);\n        } else if (node.state === 'down') {\n            super.toast(`Unable to remove node ${this.mounted ? `<b>${node.id}</b>` : `<a href=/nodes/${node.id}><b>${node.id}</b></a>`} from the swarm`, 10000, reason, true);\n        }\n    }\n\n    private rejoinSwarmButton = (): ICustomButton[] => {\n        const buttons: ICustomButton[] = [];\n        buttons.push({\n            button:\n                <button className={`btn-flat btn-small waves-effect waves-light green-text ${formStyles.formButton}`}\n                        onClick={this.rejoinSwarm}>\n                    Rejoin swarm\n                </button>\n        });\n        return buttons;\n    };\n\n    private rejoinSwarm = () => {\n        const node = this.getNode();\n        const url = `nodes/${node?.id}/join`;\n        this.setState({loading: {method: 'post', url: url}});\n        postData(url, {},\n            (reply: IReply<INode>) => this.onRejoinSwarmSuccess(reply.data),\n            (reason: string) => this.onRejoinSwarmFailure(reason, node));\n    };\n\n    private onRejoinSwarmSuccess = (node: INode) => {\n        super.toast(`<span class=\"green-text\">Host</span> <b>${node?.publicIpAddress}</b> <span class=\"green-text\">successfully rejoined the swarm as node</span> ${this.mounted ? `<b>${node?.id}</b>` : `<a href=/nodes/${node?.id}><b>${node?.id}</b></a>`}`);\n        if (this.mounted) {\n            this.setState({loading: undefined});\n            this.updateNode(node);\n            this.props.history.replace(node.id.toString());\n        }\n    };\n\n    private onRejoinSwarmFailure = (reason: string, node?: INode) => {\n        super.toast(`Node ${this.mounted ? `<b>${node?.id}</b>` : `<a href=/nodes/${node?.id}><b>${node?.id}</b></a>`} failed to rejoin the swarm`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: undefined});\n        }\n    };\n\n    private updateNode = (node: INode) => {\n        node = Object.values(normalize(node, Schemas.NODE).entities.nodes || {})[0];\n        const formNode = {...node};\n        removeFields(formNode);\n        this.setState({node: node, formNode: formNode});\n    };\n\n    private getFields = (node: INewNodeHost | INewNodeLocation | INode): IFields =>\n        Object.keys(node).map(key => {\n            return {\n                [key]: {\n                    id: key,\n                    label: key,\n                    validation: key === 'coordinates'\n                        ? {rule: requireGreaterOrEqualSize, args: 1}\n                        : {rule: required}\n                }\n            };\n        }).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});\n\n    private getSelectableHosts = () => {\n        const nodesHostname = Object.values(this.props.nodes).map(node => node.publicIpAddress);\n        const cloudHosts = Object.values(this.props.cloudHosts)\n            .filter(instance => !nodesHostname.includes(instance.publicIpAddress))\n            .filter(instance => instance.state.name === 'running' || instance.state.name === 'stopped')\n            .map(instance => instance.publicIpAddress || instance.instanceId);\n        const edgeHosts = Object.entries(this.props.edgeHosts)\n            .filter(([_, edgeHost]) => !nodesHostname.includes(edgeHost.publicIpAddress))\n            .map(([hostname, _]) => hostname);\n        return cloudHosts.concat(edgeHosts);\n    };\n\n    private getNodesMarkers = (): IMarker[] => {\n        const nodes: INode[] = Object.values(this.props.nodes);\n        const markers = new Map<string, IMarker>();\n        nodes.forEach(node => {\n                const id = node.id.toString();\n                const markerId = node.labels['coordinates'];\n                const coordinates = JSON.parse(node.labels['coordinates']) as ICoordinates;\n                const marker = markers.get(markerId) || {title: '', label: '', latitude: 0, longitude: 0};\n                if (marker.title === '') {\n                    marker.title += coordinates.label + '<br/>';\n                }\n                marker.title += id + ' - ' + node.publicIpAddress + '/' + node.labels['privateIpAddress'] + '<br/>';\n                marker.label = id;\n                marker.latitude = coordinates.latitude;\n                marker.longitude = coordinates.longitude;\n                marker.color = 'green';\n                markers.set(markerId, marker);\n            });\n        return Array.from(markers.values());\n    }\n\n    private hostLink = (publicIpAddress: string) => {\n        const cloudHost = Object.values(this.props.cloudHosts).filter(c => c.publicIpAddress === publicIpAddress)[0];\n        if (cloudHost) {\n            return '/hosts/cloud/' + cloudHost.instanceId;\n        }\n        const edgeHost = Object.values(this.props.edgeHosts).filter(e => e.publicIpAddress === publicIpAddress)[0];\n        if (edgeHost) {\n            return '/hosts/edge/' + edgeHost.publicIpAddress;\n        }\n        return null;\n    }\n\n    private formFields = (isNew: boolean, formNode?: Partial<INode>, node?: INode | INewNodeHost | INewNodeLocation) => {\n        const {currentForm} = this.state;\n        return (\n            isNew ?\n                currentForm === 'On host'\n                    ?\n                    <>\n                        <Field key={'role'}\n                               id={'role'}\n                               label={'role'}\n                               type=\"dropdown\"\n                               dropdown={{\n                                   defaultValue: \"Select role\",\n                                   values: ['MANAGER', 'WORKER']\n                               }}/>\n                        <Field<string> key={'host'}\n                                       id={'host'}\n                                       label={'host'}\n                                       type=\"dropdown\"\n                                       dropdown={{\n                                           defaultValue: \"Select host\",\n                                           values: this.getSelectableHosts(),\n                                           emptyMessage: 'No hosts to select'\n                                       }}/>\n                    </>\n                    :\n                    <>\n                        <Field key={'role'}\n                               id={'role'}\n                               label={'role'}\n                               type=\"dropdown\"\n                               dropdown={{\n                                   defaultValue: \"Select role\",\n                                   values: ['MANAGER', 'WORKER']\n                               }}/>\n                        <Field key='coordinates' id='coordinates' label='select position(s)' type='map'\n                               map={{\n                                   loading: this.props.isLoading,\n                                   editable: true,\n                                   labeled: false,\n                                   markers: this.getNodesMarkers()\n                               }}/>\n                    </>\n                :\n                formNode && Object.entries(formNode).map(([key, value], index) =>\n                    key === 'availability'\n                        ? <Field key={'availability'}\n                                 id={'availability'}\n                                 label={'availability'}\n                                 type=\"dropdown\"\n                                 dropdown={{\n                                     defaultValue: \"Select availability\",\n                                     values: ['ACTIVE', 'PAUSE', 'DRAIN']\n                                 }}/>\n                        : key === 'role' && formNode.state !== 'down'\n                        ? <Field key={'role'}\n                                 id={'role'}\n                                 label={'role'}\n                                 type=\"dropdown\"\n                                 dropdown={{\n                                     defaultValue: \"Select role\",\n                                     values: ['MANAGER', 'WORKER']\n                                 }}\n                                 disabled={Object.values(this.props.nodes).filter(node => node.role === 'MANAGER').length === 1 && formNode.role === 'MANAGER'\n                                 || (node && 'labels' in node && (node as INode).labels?.['masterManager'] === 'true')}/>\n                        : key === 'publicIpAddress'\n                            ? <Field key={index}\n                                     id={key}\n                                     label={key}\n                                     icon={{linkedTo: this.hostLink}}\n                                     disabled={true}/>\n                            : key === 'coordinates'\n                                ? <Field key={index} id='coordinates' label='location' type='map'\n                                         map={{\n                                             loading: this.props.isLoading,\n                                             editable: false,\n                                             zoomable: true,\n                                             labeled: true\n                                         }}/>\n                            : <Field key={index}\n                                     id={key}\n                                     label={key}\n                                     disabled={true}/>)\n        );\n    };\n\n    private switchForm = (formId: 'On host' | 'On location') =>\n        this.setState({currentForm: formId});\n\n    private showRejoinSwarmButton = (node: INode): boolean =>\n        !this.isNew()\n        && node.state === 'down'\n        && Object.values(this.props.cloudHosts)\n            .filter(instance => instance.state.name === 'running')\n            .map(instance => instance.publicIpAddress)\n            .includes(node.publicIpAddress);\n\n    private node = () => {\n        const {isLoading, error, newNodeHost, newNodeLocation} = this.props;\n        const {currentForm, loading} = this.state;\n        const isNewNode = this.isNew();\n        const node = isNewNode ? (currentForm === 'On host' ? newNodeHost : newNodeLocation) : this.getNode();\n        const formNode = this.getFormNode();\n        // @ts-ignore\n        const nodeKey: (keyof INode) = node && Object.keys(node)[0];\n        return (\n            <>\n                {!isNewNode && isLoading && <LoadingSpinner/>}\n                {!isNewNode && !isLoading && error && <Error message={error}/>}\n                {(isNewNode || !isLoading) && (isNewNode || !error) && node && (\n                    <>\n                        {/*@ts-ignore*/}\n                        <Form id={nodeKey}\n                              fields={this.getFields(node)}\n                              values={node}\n                              isNew={isNewNode}\n                              loading={loading}\n                              post={{\n                                  textButton: isNewNode ? 'Join swarm' : 'Save',\n                                  url: 'nodes',\n                                  successCallback: this.onPostSuccess,\n                                  failureCallback: this.onPostFailure\n                              }}\n                            // modify button is never present on new nodes, so a type cast is safe\n                              put={{\n                                  url: `nodes/${(node as INode).id}`,\n                                  successCallback: this.onPutSuccess,\n                                  failureCallback: this.onPutFailure\n                              }}\n                            // delete button is never present on new nodes, so a type cast is safe\n                              delete={Object.values(this.props.nodes).filter(node => node.role === 'MANAGER').length === 1 && node.role === 'MANAGER'\n                              || (node as INode).labels?.['masterManager'] === 'true'\n                                  ? undefined\n                                  : {\n                                      textButton: (node as INode).state === 'down' ? 'Remove from swarm' : 'Leave swarm',\n                                      confirmMessage: (node as INode).state === 'down' ? `to remove ${(node as INode).id} from the swarm` : `${(node as INode).id} to leave the swarm`,\n                                      url: (node as INode).state === 'down' ? `nodes/${(node as INode).id}` : `nodes/${(node as INode).publicIpAddress}/leave`,\n                                      successCallback: this.onDeleteSuccess,\n                                      failureCallback: this.onDeleteFailure\n                                  }}\n                              switchDropdown={isNewNode ? {\n                                  options: currentForm === 'On host' ? ['On location'] : ['On host'],\n                                  onSwitch: this.switchForm\n                              } : undefined}\n                              customButtons={this.showRejoinSwarmButton(node as INode) ? this.rejoinSwarmButton() : undefined}>\n                            {this.formFields(isNewNode, formNode, node)}\n                        </Form>\n                    </>\n                )}\n            </>\n        )\n    };\n\n    private labels = (): JSX.Element =>\n        <NodeLabelsList isLoadingNode={this.props.isLoading}\n                        loadNodeError={!this.isNew() ? this.props.error : undefined}\n                        node={this.getNode()}/>;\n\n    private tabs = (): Tab[] => ([\n        {\n            title: 'Node',\n            id: 'node',\n            content: () => this.node(),\n            active: this.props.location.state?.selected === 'node'\n        },\n        {\n            title: 'Labels',\n            id: 'nodeLabels',\n            content: () => this.labels(),\n            hidden: this.isNew(),\n            active: this.props.location.state?.selected === 'nodeLabels'\n        }\n    ]);\n\n}\n\n\nfunction removeFields(node: Partial<INode>) {\n    delete node[\"labels\"];\n}\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.nodes.isLoadingNodes;\n    const error = state.entities.nodes.loadNodesError;\n    const id = props.match.params.id.split('#')[0];\n    const newNodeHost = isNew(props.location.search) ? buildNewNodeHost() : undefined;\n    const newNodeLocation = isNew(props.location.search) ? buildNewNodeLocation() : undefined;\n    let node: INode & { coordinates?: ICoordinates } | undefined = !isNew(props.location.search) ? state.entities.nodes.data[id] : undefined;\n    let formNode;\n    if (node) {\n        if (node.labels['coordinates']) {\n            node = {...node, coordinates: JSON.parse(node.labels['coordinates'])};\n        }\n        formNode = {...node};\n        removeFields(formNode);\n    }\n    const nodes = state.entities.nodes.data;\n    const cloudHosts = state.entities.hosts.cloud.data;\n    const edgeHosts = state.entities.hosts.edge.data;\n    const regions = state.entities.regions.data;\n    return {\n        isLoading,\n        error,\n        newNodeHost,\n        newNodeLocation,\n        node,\n        formNode,\n        nodes,\n        cloudHosts,\n        edgeHosts,\n        regions\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadNodes,\n    addNodes,\n    updateNode,\n    loadCloudHosts,\n    loadEdgeHosts,\n    loadRegions,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Node);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport ListItem from \"../../../../components/list/ListItem\";\nimport styles from \"../../../../components/list/ListItem.module.css\";\nimport ControlledList from \"../../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {\n    loadServices,\n    loadSimulatedServiceMetricServices,\n    removeSimulatedServiceMetricServices,\n} from \"../../../../actions\";\nimport {IService} from \"../../services/Service\";\nimport {ISimulatedServiceMetric} from \"./SimulatedServiceMetric\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    services: { [key: string]: IService },\n    simulatedMetricServices: string[];\n}\n\ninterface DispatchToProps {\n    loadServices: () => void;\n    loadSimulatedServiceMetricServices: (name: string) => void;\n    removeSimulatedServiceMetricServices: (name: string, services: string[]) => void;\n}\n\ninterface SimulatedServiceMetricServiceListProps {\n    isLoadingSimulatedServiceMetric: boolean;\n    loadSimulatedServiceMetricError?: string | null;\n    simulatedServiceMetric: ISimulatedServiceMetric | Partial<ISimulatedServiceMetric> | null;\n    unsavedServices: string[];\n    onAddService: (service: string) => void;\n    onRemoveServices: (service: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & SimulatedServiceMetricServiceListProps;\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass SimulatedServiceMetricServiceList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadServices();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.simulatedServiceMetric?.name && this.props.simulatedServiceMetric?.name) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList\n            isLoading={!isNew ? this.props.isLoadingSimulatedServiceMetric || this.props.isLoading : undefined}\n            error={!isNew ? this.props.loadSimulatedServiceMetricError || this.props.error : undefined}\n            emptyMessage={`Services list is empty`}\n            data={this.props.simulatedMetricServices}\n            dropdown={{\n                id: 'services',\n                title: 'Add service',\n                empty: 'No services to add',\n                data: this.getSelectableServices()\n            }}\n            show={this.service}\n            onAdd={this.onAdd}\n            onRemove={this.onRemove}\n            onDelete={{\n                url: `simulated-metrics/services/${this.props.simulatedServiceMetric?.name}/services`,\n                successCallback: this.onDeleteSuccess,\n                failureCallback: this.onDeleteFailure\n            }}\n            entitySaved={this.state.entitySaved}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.simulatedServiceMetric?.name) {\n            const {name} = this.props.simulatedServiceMetric;\n            this.props.loadSimulatedServiceMetricServices(name);\n        }\n    };\n\n    private isNew = () =>\n        this.props.simulatedServiceMetric?.name === undefined;\n\n    private service = (index: number, service: string, separate: boolean, checked: boolean,\n                       handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedServices.includes(service);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${styles.linkedItemContent}`}>\n                    <label>\n                        <input id={service}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n               <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                 {service}\n               </div>\n            </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/services/${service}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (service: string): void =>\n        this.props.onAddService(service);\n\n    private onRemove = (service: string[]) =>\n        this.props.onRemoveServices(service);\n\n    private onDeleteSuccess = (service: string[]): void => {\n        if (this.props.simulatedServiceMetric?.name) {\n            const {name} = this.props.simulatedServiceMetric;\n            this.props.removeSimulatedServiceMetricServices(name, service);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to remove service`, 10000, reason, true);\n\n    private getSelectableServices = () => {\n        const {services, simulatedMetricServices, unsavedServices} = this.props;\n        return Object.keys(services).filter(service => !simulatedMetricServices.includes(service)\n            && !unsavedServices.includes(service));\n    };\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: SimulatedServiceMetricServiceListProps): StateToProps {\n    const name = ownProps.simulatedServiceMetric?.name;\n    const simulatedMetric = name && state.entities.simulatedMetrics.services.data[name];\n    const simulatedMetricServices = simulatedMetric && simulatedMetric.services;\n    return {\n        isLoading: state.entities.simulatedMetrics.services.isLoadingServices,\n        error: state.entities.simulatedMetrics.services.loadServicesError,\n        services: state.entities.services.data,\n        simulatedMetricServices: simulatedMetricServices || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadServices,\n        loadSimulatedServiceMetricServices,\n        removeSimulatedServiceMetricServices,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimulatedServiceMetricServiceList);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport IDatabaseData from \"../../../../components/IDatabaseData\";\nimport {RouteComponentProps} from \"react-router\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport Form, {IFields, requiredAndTrimmed} from \"../../../../components/form/Form\";\nimport LoadingSpinner from \"../../../../components/list/LoadingSpinner\";\nimport {Error} from \"../../../../components/errors/Error\";\nimport Field from \"../../../../components/form/Field\";\nimport Tabs, {Tab} from \"../../../../components/tabs/Tabs\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {\n    addSimulatedServiceMetric,\n    addSimulatedServiceMetricServices,\n    loadFields,\n    loadSimulatedServiceMetrics,\n    updateSimulatedServiceMetric\n} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport React from \"react\";\nimport {IReply, postData} from \"../../../../utils/api\";\nimport UnsavedChanged from \"../../../../components/form/UnsavedChanges\";\nimport {isNew} from \"../../../../utils/router\";\nimport {normalize} from \"normalizr\";\nimport {Schemas} from \"../../../../middleware/api\";\nimport {IField} from \"../../rules/Rule\";\nimport SimulatedServiceMetricServiceList from \"./SimulatedServiceMetricServiceList\";\n\nexport interface ISimulatedServiceMetric extends IDatabaseData {\n    name: string;\n    field: IField;\n    minimumValue: number;\n    maximumValue: number;\n    override: boolean;\n    generic: boolean;\n    active: boolean;\n    services?: string[];\n}\n\nconst buildNewSimulatedServiceMetric = (): Partial<ISimulatedServiceMetric> => ({\n    name: undefined,\n    field: undefined,\n    minimumValue: undefined,\n    maximumValue: undefined,\n    generic: undefined,\n    override: true,\n    active: true,\n});\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    simulatedServiceMetric: Partial<ISimulatedServiceMetric>;\n    formSimulatedServiceMetric?: Partial<ISimulatedServiceMetric>;\n    fields: { [key: string]: IField };\n}\n\ninterface DispatchToProps {\n    loadSimulatedServiceMetrics: (name: string) => void;\n    addSimulatedServiceMetric: (simulatedServiceMetric: ISimulatedServiceMetric) => void;\n    updateSimulatedServiceMetric: (previousSimulatedServiceMetric: ISimulatedServiceMetric,\n                                   currentSimulatedServiceMetric: ISimulatedServiceMetric) => void;\n    loadFields: () => void;\n    addSimulatedServiceMetricServices: (name: string, services: string[]) => void;\n}\n\ninterface MatchParams {\n    name: string;\n}\n\ninterface LocationState {\n    data: ISimulatedServiceMetric,\n    selected: 'simulatedServiceMetric' | 'services',\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ninterface State {\n    simulatedServiceMetric?: ISimulatedServiceMetric,\n    formSimulatedServiceMetric?: ISimulatedServiceMetric,\n    unsavedServices: string[],\n    isGeneric: boolean,\n}\n\nclass SimulatedServiceMetric extends BaseComponent<Props, State> {\n\n    state: State = {\n        unsavedServices: [],\n        isGeneric: this.props.simulatedServiceMetric?.generic || false,\n    };\n    private mounted = false;\n\n    public componentDidMount(): void {\n        this.loadSimulatedServiceMetric();\n        this.props.loadFields();\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                {this.shouldShowSaveButton() && !isNew(this.props.location.search) && <UnsavedChanged/>}\n                <div className=\"container\">\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private loadSimulatedServiceMetric = () => {\n        if (!isNew(this.props.location.search)) {\n            const name = this.props.match.params.name;\n            this.props.loadSimulatedServiceMetrics(name);\n        }\n    };\n\n    private getSimulatedServiceMetric = () =>\n        this.props.simulatedServiceMetric || this.state.simulatedServiceMetric;\n\n    private getFormSimulatedServiceMetric = () =>\n        this.props.formSimulatedServiceMetric || this.state.formSimulatedServiceMetric;\n\n    private isNew = () =>\n        isNew(this.props.location.search);\n\n    private onPostSuccess = (reply: IReply<ISimulatedServiceMetric>): void => {\n        const simulatedMetric = reply.data;\n        super.toast(`<span class=\"green-text\">Simulated service metric ${this.mounted ? `<b class=\"white-text\">${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/Services/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`} saved</span>`);\n        this.props.addSimulatedServiceMetric(simulatedMetric);\n        this.saveEntities(simulatedMetric);\n        if (this.mounted) {\n            this.updateSimulatedServiceMetric(simulatedMetric);\n            this.props.history.replace(simulatedMetric.name);\n        }\n    };\n\n    private onPostFailure = (reason: string, simulatedServiceMetric: ISimulatedServiceMetric): void =>\n        super.toast(`Unable to save simulated service metric <b>${simulatedServiceMetric.name}</b>`, 10000, reason, true);\n\n    private onPutSuccess = (reply: IReply<ISimulatedServiceMetric>): void => {\n        const simulatedMetric = reply.data;\n        super.toast(`<span class=\"green-text\">Changes to ${this.mounted ? `<b class=\"white-text\">${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/Services/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`} simulated service metric have been saved</span>`);\n        this.saveEntities(simulatedMetric);\n        const previousSimulatedServiceMetric = this.getSimulatedServiceMetric();\n        if (previousSimulatedServiceMetric.id) {\n            this.props.updateSimulatedServiceMetric(previousSimulatedServiceMetric as ISimulatedServiceMetric, simulatedMetric);\n        }\n        if (this.mounted) {\n            this.updateSimulatedServiceMetric(simulatedMetric);\n            this.props.history.replace(simulatedMetric.name);\n        }\n    };\n\n    private onPutFailure = (reason: string, simulatedMetric: ISimulatedServiceMetric): void =>\n        super.toast(`Unable to update simulated service metric ${this.mounted ? `<b>${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/Services/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`}`, 10000, reason, true);\n\n    private onDeleteSuccess = (simulatedMetric: ISimulatedServiceMetric): void => {\n        super.toast(`<span class=\"green-text\">Simulated service metric <b class=\"white-text\">${simulatedMetric.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.props.history.push(`/simulated-metrics/Services`);\n        }\n    };\n\n    private onDeleteFailure = (reason: string, simulatedMetric: ISimulatedServiceMetric): void =>\n        super.toast(`Unable to delete simulated service metric ${this.mounted ? `<b>${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/Services/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`}`, 10000, reason, true);\n\n    private shouldShowSaveButton = () =>\n        !!this.state.unsavedServices.length;\n\n    private saveEntities = (simulatedMetric: ISimulatedServiceMetric) => {\n        this.saveSimulatedServiceMetricServices(simulatedMetric);\n    };\n\n    private addSimulatedServiceMetricService = (service: string): void => {\n        this.setState({\n            unsavedServices: this.state.unsavedServices.concat(service)\n        });\n    };\n\n    private removeSimulatedServiceMetricServices = (services: string[]): void => {\n        this.setState({\n            unsavedServices: this.state.unsavedServices.filter(service => !services.includes(service))\n        });\n    };\n\n    private saveSimulatedServiceMetricServices = (simulatedMetric: ISimulatedServiceMetric): void => {\n        const {unsavedServices} = this.state;\n        if (unsavedServices.length) {\n            postData(`simulated-metrics/services/${simulatedMetric.name}/services`, unsavedServices,\n                () => this.onSaveServicesSuccess(simulatedMetric),\n                (reason) => this.onSaveServicesFailure(simulatedMetric, reason));\n        }\n    };\n\n    private onSaveServicesSuccess = (simulatedMetric: ISimulatedServiceMetric): void => {\n        this.props.addSimulatedServiceMetricServices(simulatedMetric.name, this.state.unsavedServices);\n        if (this.mounted) {\n            this.setState({unsavedServices: []});\n        }\n    };\n\n    private onSaveServicesFailure = (simulatedMetric: ISimulatedServiceMetric, reason: string): void =>\n        super.toast(`Unable to save services of simulated service metric ${this.mounted ? `<b>${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/services/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`}`, 10000, reason, true);\n\n    private updateSimulatedServiceMetric = (simulatedServiceMetric: ISimulatedServiceMetric) => {\n        simulatedServiceMetric = Object.values(normalize(simulatedServiceMetric, Schemas.SIMULATED_SERVICE_METRIC).entities.simulatedServiceMetrics || {})[0];\n        const formSimulatedServiceMetric = {...simulatedServiceMetric};\n        removeFields(formSimulatedServiceMetric);\n        this.setState({\n            simulatedServiceMetric: simulatedServiceMetric,\n            formSimulatedServiceMetric: formSimulatedServiceMetric\n        });\n    };\n\n    private getFields = (simulatedServiceMetric: Partial<ISimulatedServiceMetric>): IFields =>\n        Object.entries(simulatedServiceMetric).map(([key, _]) => {\n            return {\n                [key]: {\n                    id: key,\n                    label: key,\n                    validation: {rule: requiredAndTrimmed}\n                }\n            };\n        }).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});\n\n    private fieldOption = (field: IField): string =>\n        field.name;\n\n    private isGenericSelected = (generic: boolean) =>\n        this.setState({isGeneric: generic});\n\n    private simulatedServiceMetric = () => {\n        const {isLoading, error} = this.props;\n        const simulatedServiceMetric = this.getSimulatedServiceMetric();\n        const formSimulatedServiceMetric = this.getFormSimulatedServiceMetric();\n        // @ts-ignore\n        const simulatedServiceMetricKey: (keyof ISimulatedServiceMetric) = formSimulatedServiceMetric && Object.keys(formSimulatedServiceMetric)[0];\n        const isNewSimulatedServiceMetric = this.isNew();\n        return (\n            <>\n                {!isNewSimulatedServiceMetric && isLoading && <LoadingSpinner/>}\n                {!isNewSimulatedServiceMetric && !isLoading && error && <Error message={error}/>}\n                {(isNewSimulatedServiceMetric || !isLoading) && (isNewSimulatedServiceMetric || !error) && formSimulatedServiceMetric && (\n                    /*@ts-ignore*/\n                    <Form id={simulatedServiceMetricKey}\n                          fields={this.getFields(formSimulatedServiceMetric)}\n                          values={simulatedServiceMetric}\n                          isNew={isNew(this.props.location.search)}\n                          showSaveButton={this.shouldShowSaveButton()}\n                          post={{\n                              url: 'simulated-metrics/services',\n                              successCallback: this.onPostSuccess,\n                              failureCallback: this.onPostFailure\n                          }}\n                          put={{\n                              url: `simulated-metrics/services/${simulatedServiceMetric.name}`,\n                              successCallback: this.onPutSuccess,\n                              failureCallback: this.onPutFailure\n                          }}\n                          delete={{\n                              url: `simulated-metrics/services/${simulatedServiceMetric.name}`,\n                              successCallback: this.onDeleteSuccess,\n                              failureCallback: this.onDeleteFailure\n                          }}\n                          saveEntities={this.saveEntities}>\n                        {Object.keys(formSimulatedServiceMetric).map((key, index) =>\n                            key === 'field'\n                                ? <Field<IField> key='fields'\n                                                 id='field'\n                                                 label='field'\n                                                 type='dropdown'\n                                                 dropdown={{\n                                                     defaultValue: \"Select field\",\n                                                     values: Object.values(this.props.fields),\n                                                     optionToString: this.fieldOption,\n                                                     emptyMessage: 'No fields available'\n                                                 }}/>\n                                : key === 'minimumValue' || key === 'maximumValue'\n                                ? <Field key={index}\n                                         id={key}\n                                         label={key}\n                                         type={'number'}/>\n                                : key === 'override'\n                                    ? <Field key={index}\n                                             id={key}\n                                             type='checkbox'\n                                             checkbox={{label: 'override real metrics'}}/>\n                                    : key === 'generic'\n                                        ? <Field key={index}\n                                                 id={key}\n                                                 type='checkbox'\n                                                 checkbox={{label: 'apply to all services', checkCallback: this.isGenericSelected}}/>\n                                        : key === 'active'\n                                            ? <Field key={index}\n                                                     id={key}\n                                                     type='checkbox'\n                                                     checkbox={{label: 'active'}}/>\n                                            : <Field key={index}\n                                                     id={key}\n                                                     label={key}/>\n                        )}\n                    </Form>\n                )}\n            </>\n        )\n    };\n\n    private services = (): JSX.Element =>\n        <SimulatedServiceMetricServiceList isLoadingSimulatedServiceMetric={this.props.isLoading}\n                                           loadSimulatedServiceMetricError={!this.isNew() ? this.props.error : undefined}\n                                           simulatedServiceMetric={this.getSimulatedServiceMetric()}\n                                           unsavedServices={this.state.unsavedServices}\n                                           onAddService={this.addSimulatedServiceMetricService}\n                                           onRemoveServices={this.removeSimulatedServiceMetricServices}/>;\n\n    private tabs = (): Tab[] => [\n        {\n            title: 'Simulated metric',\n            id: 'simulatedServiceMetric',\n            content: () => this.simulatedServiceMetric(),\n            active: this.props.location.state?.selected === 'simulatedServiceMetric'\n        },\n        {\n            title: 'Services',\n            id: 'services',\n            content: () => this.services(),\n            disabled: this.state.isGeneric,\n            active: this.props.location.state?.selected === 'services'\n        },\n    ];\n\n}\n\nfunction removeFields(simulatedServiceMetric: Partial<ISimulatedServiceMetric>) {\n    delete simulatedServiceMetric[\"id\"];\n    delete simulatedServiceMetric[\"services\"];\n}\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.simulatedMetrics.services.isLoadingSimulatedServiceMetrics;\n    const error = state.entities.simulatedMetrics.services.loadSimulatedServiceMetricsError;\n    const name = props.match.params.name;\n    const simulatedServiceMetric = isNew(props.location.search) ? buildNewSimulatedServiceMetric() : state.entities.simulatedMetrics.services.data[name];\n    let formSimulatedServiceMetric;\n    if (simulatedServiceMetric) {\n        formSimulatedServiceMetric = {...simulatedServiceMetric};\n        removeFields(formSimulatedServiceMetric);\n    }\n    const fields = state.entities.fields.data;\n    return {\n        isLoading,\n        error,\n        simulatedServiceMetric,\n        formSimulatedServiceMetric,\n        fields\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadSimulatedServiceMetrics,\n    addSimulatedServiceMetric,\n    updateSimulatedServiceMetric,\n    loadFields,\n    addSimulatedServiceMetricServices,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimulatedServiceMetric);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport ListItem from \"../../../../components/list/ListItem\";\nimport styles from \"../../../../components/list/ListItem.module.css\";\nimport ControlledList from \"../../../../components/list/ControlledList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {\n    loadContainers,\n    loadSimulatedContainerMetricContainers,\n    removeSimulatedContainerMetricContainers,\n} from \"../../../../actions\";\nimport {IContainer} from \"../../containers/Container\";\nimport {ISimulatedContainerMetric} from \"./SimulatedContainerMetric\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    containers: { [key: string]: IContainer },\n    simulatedMetricContainers: string[];\n}\n\ninterface DispatchToProps {\n    loadContainers: () => void;\n    loadSimulatedContainerMetricContainers: (name: string) => void;\n    removeSimulatedContainerMetricContainers: (name: string, containers: string[]) => void;\n}\n\ninterface SimulatedContainerMetricContainerListProps {\n    isLoadingSimulatedContainerMetric: boolean;\n    loadSimulatedContainerMetricError?: string | null;\n    simulatedContainerMetric: ISimulatedContainerMetric | Partial<ISimulatedContainerMetric> | null;\n    unsavedContainersIds: string[];\n    unsavedContainers: string[];\n    onAddContainer: (container: string) => void;\n    onRemoveContainers: (container: string[]) => void;\n}\n\ntype Props = StateToProps & DispatchToProps & SimulatedContainerMetricContainerListProps;\n\ninterface State {\n    entitySaved: boolean;\n}\n\nclass SimulatedContainerMetricContainerList extends BaseComponent<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {entitySaved: !this.isNew()};\n    }\n\n    public componentDidMount(): void {\n        this.props.loadContainers();\n        this.loadEntities();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (!prevProps.simulatedContainerMetric?.name && this.props.simulatedContainerMetric?.name) {\n            this.setState({entitySaved: true});\n        }\n    }\n\n    public render() {\n        const isNew = this.isNew();\n        return <ControlledList\n            isLoading={!isNew ? this.props.isLoadingSimulatedContainerMetric || this.props.isLoading : undefined}\n            error={!isNew ? this.props.loadSimulatedContainerMetricError || this.props.error : undefined}\n            emptyMessage={`Containers list is empty`}\n            data={this.props.simulatedMetricContainers}\n            dropdown={{\n                id: 'containers',\n                title: 'Add container',\n                empty: 'No containers to add',\n                data: this.getSelectableContainers()\n            }}\n            show={this.container}\n            onAdd={this.onAdd}\n            onRemove={this.onRemove}\n            onDelete={{\n                url: `simulated-metrics/containers/${this.props.simulatedContainerMetric?.name}/containers`,\n                successCallback: this.onDeleteSuccess,\n                failureCallback: this.onDeleteFailure\n            }}\n            entitySaved={this.state.entitySaved}\n            invalidate={this.invalidate}/>;\n    }\n\n    private loadEntities = () => {\n        if (this.props.simulatedContainerMetric?.name) {\n            const {name} = this.props.simulatedContainerMetric;\n            this.props.loadSimulatedContainerMetricContainers(name);\n        }\n    };\n\n    private isNew = () =>\n        this.props.simulatedContainerMetric?.name === undefined;\n\n    private container = (index: number, container: string, separate: boolean, checked: boolean,\n                         handleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void): JSX.Element => {\n        const isNew = this.isNew();\n        const unsaved = this.props.unsavedContainersIds.includes(container);\n        return (\n            <ListItem key={index} separate={separate}>\n                <div className={`${styles.linkedItemContent}`}>\n                    <label>\n                        <input id={container}\n                               type=\"checkbox\"\n                               onChange={handleCheckbox}\n                               checked={checked}/>\n                        <span id={'checkbox'}>\n                            <div className={!isNew && unsaved ? styles.unsavedItem : undefined}>\n                                {container}\n                            </div>\n                        </span>\n                    </label>\n                </div>\n                {!isNew && (\n                    <Link to={`/containers/${container}`}\n                          className={`${styles.link} waves-effect`}>\n                        <i className={`${styles.linkIcon} material-icons right`}>link</i>\n                    </Link>\n                )}\n            </ListItem>\n        );\n    };\n\n    private onAdd = (container: string): void =>\n        this.props.onAddContainer(container);\n\n    private onRemove = (container: string[]) =>\n        this.props.onRemoveContainers(container);\n\n    private onDeleteSuccess = (container: string[]): void => {\n        if (this.props.simulatedContainerMetric?.name) {\n            const {name} = this.props.simulatedContainerMetric;\n            this.props.removeSimulatedContainerMetricContainers(name, container);\n        }\n    };\n\n    private onDeleteFailure = (reason: string): void =>\n        super.toast(`Unable to remove container`, 10000, reason, true);\n\n    private getSelectableContainers = () => {\n        const {containers, simulatedMetricContainers, unsavedContainersIds} = this.props;\n        return Object.entries(containers).filter(([containerId, _]) => !simulatedMetricContainers.includes(containerId)\n            && !unsavedContainersIds.includes(containerId))\n            .map(([_, container]) => container.names[0].replace('/', '') + \" - \" + container.containerId);\n    };\n\n    private invalidate = (data: string): string | undefined =>\n        this.props.unsavedContainers.find(container => container.split(\" - \")[1] === data)\n\n}\n\nfunction mapStateToProps(state: ReduxState, ownProps: SimulatedContainerMetricContainerListProps): StateToProps {\n    const name = ownProps.simulatedContainerMetric?.name;\n    const simulatedMetric = name && state.entities.simulatedMetrics.containers.data[name];\n    const simulatedMetricContainers = simulatedMetric && simulatedMetric.containers;\n    return {\n        isLoading: state.entities.simulatedMetrics.containers.isLoadingContainers,\n        error: state.entities.simulatedMetrics.containers.loadContainersError,\n        containers: state.entities.containers.data,\n        simulatedMetricContainers: simulatedMetricContainers || [],\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): DispatchToProps =>\n    bindActionCreators({\n        loadContainers,\n        loadSimulatedContainerMetricContainers,\n        removeSimulatedContainerMetricContainers,\n    }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimulatedContainerMetricContainerList);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport IDatabaseData from \"../../../../components/IDatabaseData\";\nimport {RouteComponentProps} from \"react-router\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport Form, {IFields, requiredAndTrimmed} from \"../../../../components/form/Form\";\nimport LoadingSpinner from \"../../../../components/list/LoadingSpinner\";\nimport {Error} from \"../../../../components/errors/Error\";\nimport Field from \"../../../../components/form/Field\";\nimport Tabs, {Tab} from \"../../../../components/tabs/Tabs\";\nimport MainLayout from \"../../../../views/mainLayout/MainLayout\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {\n    addSimulatedContainerMetric,\n    addSimulatedContainerMetricContainers,\n    loadFields,\n    loadSimulatedContainerMetrics,\n    updateSimulatedContainerMetric\n} from \"../../../../actions\";\nimport {connect} from \"react-redux\";\nimport React from \"react\";\nimport {IReply, postData} from \"../../../../utils/api\";\nimport UnsavedChanged from \"../../../../components/form/UnsavedChanges\";\nimport {isNew} from \"../../../../utils/router\";\nimport {normalize} from \"normalizr\";\nimport {Schemas} from \"../../../../middleware/api\";\nimport {IField} from \"../../rules/Rule\";\nimport SimulatedContainerMetricContainerList from \"./SimulatedContainerMetricContainerList\";\n\nexport interface ISimulatedContainerMetric extends IDatabaseData {\n    name: string;\n    field: IField;\n    minimumValue: number;\n    maximumValue: number;\n    override: boolean;\n    active: boolean;\n    containers?: string[];\n}\n\nconst buildNewSimulatedContainerMetric = (): Partial<ISimulatedContainerMetric> => ({\n    name: undefined,\n    field: undefined,\n    minimumValue: undefined,\n    maximumValue: undefined,\n    override: true,\n    active: true,\n});\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    simulatedContainerMetric: Partial<ISimulatedContainerMetric>;\n    formSimulatedContainerMetric?: Partial<ISimulatedContainerMetric>;\n    fields: { [key: string]: IField };\n}\n\ninterface DispatchToProps {\n    loadSimulatedContainerMetrics: (name: string) => void;\n    addSimulatedContainerMetric: (simulatedContainerMetric: ISimulatedContainerMetric) => void;\n    updateSimulatedContainerMetric: (previousSimulatedContainerMetric: ISimulatedContainerMetric,\n                                     currentSimulatedContainerMetric: ISimulatedContainerMetric) => void;\n    loadFields: () => void;\n    addSimulatedContainerMetricContainers: (name: string, containers: string[]) => void;\n}\n\ninterface MatchParams {\n    name: string;\n}\n\ninterface LocationState {\n    data: ISimulatedContainerMetric,\n    selected: 'simulatedContainerMetric' | 'containers',\n}\n\ntype Props = StateToProps & DispatchToProps & RouteComponentProps<MatchParams, {}, LocationState>;\n\ninterface State {\n    simulatedContainerMetric?: ISimulatedContainerMetric,\n    formSimulatedContainerMetric?: ISimulatedContainerMetric,\n    unsavedContainersIds: string[],\n    unsavedContainers: string[],\n}\n\nclass SimulatedContainerMetric extends BaseComponent<Props, State> {\n\n    state: State = {\n        unsavedContainersIds: [],\n        unsavedContainers: [],\n    };\n    private mounted = false;\n\n    public componentDidMount(): void {\n        this.loadSimulatedContainerMetric();\n        this.props.loadFields();\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    public render() {\n        return (\n            <MainLayout>\n                {this.shouldShowSaveButton() && !isNew(this.props.location.search) && <UnsavedChanged/>}\n                <div className=\"container\">\n                    <Tabs {...this.props} tabs={this.tabs()}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private loadSimulatedContainerMetric = () => {\n        if (!isNew(this.props.location.search)) {\n            const name = this.props.match.params.name;\n            this.props.loadSimulatedContainerMetrics(name);\n        }\n    };\n\n    private getSimulatedContainerMetric = () =>\n        this.props.simulatedContainerMetric || this.state.simulatedContainerMetric;\n\n    private getFormSimulatedContainerMetric = () =>\n        this.props.formSimulatedContainerMetric || this.state.formSimulatedContainerMetric;\n\n    private isNew = () =>\n        isNew(this.props.location.search);\n\n    private onPostSuccess = (reply: IReply<ISimulatedContainerMetric>): void => {\n        const simulatedMetric = reply.data;\n        console.log(simulatedMetric)\n        super.toast(`<span class=\"green-text\">Simulated container metric ${this.mounted ? `<b class=\"white-text\">${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/Containers/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`} saved</span>`);\n        this.props.addSimulatedContainerMetric(simulatedMetric);\n        this.saveEntities(simulatedMetric);\n        if (this.mounted) {\n            this.updateSimulatedContainerMetric(simulatedMetric);\n            this.props.history.replace(simulatedMetric.name);\n        }\n    };\n\n    private onPostFailure = (reason: string, simulatedContainerMetric: ISimulatedContainerMetric): void =>\n        super.toast(`Unable to save simulated container metric <b>${simulatedContainerMetric.name}</b>`, 10000, reason, true);\n\n    private onPutSuccess = (reply: IReply<ISimulatedContainerMetric>): void => {\n        const simulatedMetric = reply.data;\n        super.toast(`<span class=\"green-text\">Changes to ${this.mounted ? `<b class=\"white-text\">${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/Containers/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`} simulated container metric have been saved</span>`);\n        this.saveEntities(simulatedMetric);\n        const previousSimulatedContainerMetric = this.getSimulatedContainerMetric();\n        if (previousSimulatedContainerMetric.id) {\n            this.props.updateSimulatedContainerMetric(previousSimulatedContainerMetric as ISimulatedContainerMetric, simulatedMetric);\n        }\n        if (this.mounted) {\n            this.updateSimulatedContainerMetric(simulatedMetric);\n            this.props.history.replace(simulatedMetric.name);\n        }\n    };\n\n    private onPutFailure = (reason: string, simulatedMetric: ISimulatedContainerMetric): void =>\n        super.toast(`Unable to update ${this.mounted ? `<b>${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/Containers/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`} simulated container metric`, 10000, reason, true);\n\n    private onDeleteSuccess = (simulatedMetric: ISimulatedContainerMetric): void => {\n        super.toast(`<span class=\"green-text\">Simulated container metric <b class=\"white-text\">${simulatedMetric.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.props.history.push(`/simulated-metrics/Containers`);\n        }\n    };\n\n    private onDeleteFailure = (reason: string, simulatedMetric: ISimulatedContainerMetric): void =>\n        super.toast(`Unable to delete ${this.mounted ? `<b>${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/Containers/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`} simulated container metric`, 10000, reason, true);\n\n    private shouldShowSaveButton = () =>\n        !!this.state.unsavedContainersIds.length;\n\n    private saveEntities = (simulatedMetric: ISimulatedContainerMetric) => {\n        this.saveSimulatedContainerMetricContainers(simulatedMetric);\n    };\n\n    private addSimulatedContainerMetricContainer = (container: string): void => {\n        const containerId = container.split(\" - \")[1]\n        this.setState({\n            unsavedContainersIds: this.state.unsavedContainersIds.concat(containerId),\n            unsavedContainers: this.state.unsavedContainers.concat(container)\n        });\n    };\n\n    private removeSimulatedContainerMetricContainers = (containers: string[]): void => {\n        const containersIds = containers.map(container => container.split(\" - \")[1])\n        this.setState({\n            unsavedContainersIds: this.state.unsavedContainersIds.filter(container => !containersIds.includes(container)),\n            unsavedContainers: this.state.unsavedContainers.filter(container => !containers.includes(container))\n        });\n    };\n\n    private saveSimulatedContainerMetricContainers = (simulatedMetric: ISimulatedContainerMetric): void => {\n        const {unsavedContainersIds} = this.state;\n        if (unsavedContainersIds.length) {\n            postData(`simulated-metrics/containers/${simulatedMetric.name}/containers`, unsavedContainersIds,\n                () => this.onSaveContainersSuccess(simulatedMetric),\n                (reason) => this.onSaveContainersFailure(simulatedMetric, reason));\n        }\n    };\n\n    private onSaveContainersSuccess = (simulatedMetric: ISimulatedContainerMetric): void => {\n        this.props.addSimulatedContainerMetricContainers(simulatedMetric.name, this.state.unsavedContainersIds);\n        if (this.mounted) {\n            this.setState({unsavedContainersIds: []});\n        }\n    };\n\n    private onSaveContainersFailure = (simulatedMetric: ISimulatedContainerMetric, reason: string): void =>\n        super.toast(`Unable to save containers of simulated container metric ${this.mounted ? `<b>${simulatedMetric.name}</b>` : `<a href=/simulated-metrics/containers/${simulatedMetric.name}><b>${simulatedMetric.name}</b></a>`}`, 10000, reason, true);\n\n    private updateSimulatedContainerMetric = (simulatedContainerMetric: ISimulatedContainerMetric) => {\n        simulatedContainerMetric = Object.values(normalize(simulatedContainerMetric, Schemas.SIMULATED_CONTAINER_METRIC).entities.simulatedContainerMetrics || {})[0];\n        const formSimulatedContainerMetric = {...simulatedContainerMetric};\n        removeFields(formSimulatedContainerMetric);\n        this.setState({\n            simulatedContainerMetric: simulatedContainerMetric,\n            formSimulatedContainerMetric: formSimulatedContainerMetric\n        });\n    };\n\n    private getFields = (simulatedContainerMetric: Partial<ISimulatedContainerMetric>): IFields =>\n        Object.entries(simulatedContainerMetric).map(([key, _]) => {\n            return {\n                [key]: {\n                    id: key,\n                    label: key,\n                    validation: {rule: requiredAndTrimmed}\n                }\n            };\n        }).reduce((fields, field) => {\n            for (let key in field) {\n                fields[key] = field[key];\n            }\n            return fields;\n        }, {});\n\n    private fieldOption = (field: IField): string =>\n        field.name;\n\n    private simulatedContainerMetric = () => {\n        const {isLoading, error} = this.props;\n        const simulatedContainerMetric = this.getSimulatedContainerMetric();\n        const formSimulatedContainerMetric = this.getFormSimulatedContainerMetric();\n        // @ts-ignore\n        const simulatedContainerMetricKey: (keyof ISimulatedContainerMetric) = formSimulatedContainerMetric && Object.keys(formSimulatedContainerMetric)[0];\n        const isNewSimulatedContainerMetric = this.isNew();\n        return (\n            <>\n                {!isNewSimulatedContainerMetric && isLoading && <LoadingSpinner/>}\n                {!isNewSimulatedContainerMetric && !isLoading && error && <Error message={error}/>}\n                {(isNewSimulatedContainerMetric || !isLoading) && (isNewSimulatedContainerMetric || !error) && formSimulatedContainerMetric && (\n                    /*@ts-ignore*/\n                    <Form id={simulatedContainerMetricKey}\n                          fields={this.getFields(formSimulatedContainerMetric)}\n                          values={simulatedContainerMetric}\n                          isNew={isNew(this.props.location.search)}\n                          showSaveButton={this.shouldShowSaveButton()}\n                          post={{\n                              url: 'simulated-metrics/containers',\n                              successCallback: this.onPostSuccess,\n                              failureCallback: this.onPostFailure\n                          }}\n                          put={{\n                              url: `simulated-metrics/containers/${simulatedContainerMetric.name}`,\n                              successCallback: this.onPutSuccess,\n                              failureCallback: this.onPutFailure\n                          }}\n                          delete={{\n                              url: `simulated-metrics/containers/${simulatedContainerMetric.name}`,\n                              successCallback: this.onDeleteSuccess,\n                              failureCallback: this.onDeleteFailure\n                          }}\n                          saveEntities={this.saveEntities}>\n                        {Object.keys(formSimulatedContainerMetric).map((key, index) =>\n                            key === 'field'\n                                ? <Field<IField> key='fields'\n                                                 id='field'\n                                                 label='field'\n                                                 type='dropdown'\n                                                 dropdown={{\n                                                     defaultValue: \"Select field\",\n                                                     values: Object.values(this.props.fields),\n                                                     optionToString: this.fieldOption,\n                                                     emptyMessage: 'No fields available'\n                                                 }}/>\n                                : key === 'override'\n                                ? <Field key={index}\n                                       id={key}\n                                       label={key}\n                                       type='checkbox'\n                                       checkbox={{label: 'override true metrics'}}/>\n                                : key === 'active'\n                                    ? <Field key={index}\n                                             id={key}\n                                             type='checkbox'\n                                             checkbox={{label: 'active'}}/>\n                                    : key === 'minimumValue' || key === 'maximumValue'\n                                        ? <Field key={index}\n                                                 id={key}\n                                                 label={key}\n                                                 type={'number'}/>\n                                        : <Field key={index}\n                                                 id={key}\n                                                 label={key}/>\n                        )}\n                    </Form>\n                )}\n            </>\n        )\n    };\n\n    private containers = (): JSX.Element =>\n        <SimulatedContainerMetricContainerList isLoadingSimulatedContainerMetric={this.props.isLoading}\n                                               loadSimulatedContainerMetricError={!this.isNew() ? this.props.error : undefined}\n                                               simulatedContainerMetric={this.getSimulatedContainerMetric()}\n                                               unsavedContainersIds={this.state.unsavedContainersIds}\n                                               unsavedContainers={this.state.unsavedContainers}\n                                               onAddContainer={this.addSimulatedContainerMetricContainer}\n                                               onRemoveContainers={this.removeSimulatedContainerMetricContainers}/>;\n\n    private tabs = (): Tab[] => [\n        {\n            title: 'Simulated metric',\n            id: 'simulatedContainerMetric',\n            content: () => this.simulatedContainerMetric(),\n            active: this.props.location.state?.selected === 'simulatedContainerMetric'\n        },\n        {\n            title: 'Containers',\n            id: 'containers',\n            content: () => this.containers(),\n            active: this.props.location.state?.selected === 'containers'\n        },\n    ];\n\n}\n\nfunction removeFields(simulatedContainerMetric: Partial<ISimulatedContainerMetric>) {\n    delete simulatedContainerMetric[\"id\"];\n    delete simulatedContainerMetric[\"containers\"];\n}\n\nfunction mapStateToProps(state: ReduxState, props: Props): StateToProps {\n    const isLoading = state.entities.simulatedMetrics.containers.isLoadingSimulatedContainerMetrics;\n    const error = state.entities.simulatedMetrics.containers.loadSimulatedContainerMetricsError;\n    const name = props.match.params.name;\n    const simulatedContainerMetric = isNew(props.location.search) ? buildNewSimulatedContainerMetric() : state.entities.simulatedMetrics.containers.data[name];\n    let formSimulatedContainerMetric;\n    if (simulatedContainerMetric) {\n        formSimulatedContainerMetric = {...simulatedContainerMetric};\n        removeFields(formSimulatedContainerMetric);\n    }\n    const fields = state.entities.fields.data;\n    return {\n        isLoading,\n        error,\n        simulatedContainerMetric,\n        formSimulatedContainerMetric,\n        fields\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadSimulatedContainerMetrics,\n    addSimulatedContainerMetric,\n    updateSimulatedContainerMetric,\n    loadFields,\n    addSimulatedContainerMetricContainers,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimulatedContainerMetric);","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Card from \"../../../components/cards/Card\";\nimport React from \"react\";\nimport {IService} from \"./Service\";\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport LinkedContextMenuItem from \"../../../components/contextmenu/LinkedContextMenuItem\";\nimport {EntitiesAction} from \"../../../reducers/entities\";\nimport {deleteService} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport CardItem from \"../../../components/list/CardItem\";\n\ninterface State {\n    loading: boolean;\n}\n\ninterface ServiceCardProps {\n    service: IService;\n}\n\ninterface DispatchToProps {\n    deleteService: (service: IService) => EntitiesAction;\n}\n\ntype Props = DispatchToProps & ServiceCardProps;\n\nclass ServiceCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    private onDeleteSuccess = (service: IService): void => {\n        super.toast(`<span class=\"green-text\">Service <b class=\"white-text\">${service.serviceName}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.deleteService(service);\n    }\n\n    private onDeleteFailure = (reason: string, service: IService): void => {\n        super.toast(`Unable to delete <a href=/services/${service.serviceName}><b>${service.serviceName}</b></a> service`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    }\n\n    private contextMenu = (): JSX.Element[] => {\n        const {service} = this.props;\n        return [\n            <LinkedContextMenuItem\n                option={'Modify apps'}\n                pathname={`/services/${service.serviceName}`}\n                selected={'apps'}\n                state={service}/>,\n            <LinkedContextMenuItem\n                option={'Modify dependencies'}\n                pathname={`/services/${service.serviceName}`}\n                selected={'dependencies'}\n                state={service}/>,\n            <LinkedContextMenuItem\n                option={'View dependents'}\n                pathname={`/services/${service.serviceName}`}\n                selected={'dependents'}\n                state={service}/>,\n            <LinkedContextMenuItem\n                option={'Modify predictions'}\n                pathname={`/services/${service.serviceName}`}\n                selected={'predictions'}\n                state={service}/>,\n            <LinkedContextMenuItem\n                option={'Modify rules'}\n                pathname={`/services/${service.serviceName}`}\n                selected={'serviceRules'}\n                state={service}/>,\n            <LinkedContextMenuItem\n                option={'View generic rules'}\n                pathname={`/services/${service.serviceName}`}\n                selected={'genericRules'}\n                state={service}/>,\n            <LinkedContextMenuItem\n                option={'Modify simulated metrics'}\n                pathname={`/services/${service.serviceName}`}\n                selected={'simulatedMetrics'}\n                state={service}/>,\n            <LinkedContextMenuItem\n                option={'View generic simulated metrics'}\n                pathname={`/services/${service.serviceName}`}\n                selected={'genericSimulatedMetrics'}\n                state={service}/>\n        ];\n    }\n\n    private getReplicasMessage = (minimumReplicas: number, maximumReplicas: number): string | null => {\n        if (minimumReplicas === maximumReplicas) {\n            return minimumReplicas > 0 ? `${minimumReplicas}` : null;\n        } else if (maximumReplicas === 0 || maximumReplicas == null) {\n            return `At least ${minimumReplicas}`\n        } else {\n            return `At least ${minimumReplicas} up to ${maximumReplicas}`;\n        }\n    };\n\n    public render() {\n        const {service} = this.props;\n        const {loading} = this.state;\n        const CardService = Card<IService>();\n        const replicasMessage = this.getReplicasMessage(service.minimumReplicas, service.maximumReplicas);\n        return <CardService id={`service-${service.id}`}\n                            title={service.serviceName}\n                            link={{to: {pathname: `/services/${service.serviceName}`, state: service}}}\n                            height={'200px'}\n                            margin={'10px 0'}\n                            hoverable\n                            delete={{\n                                confirmMessage: `to delete service ${service.serviceName}`,\n                                url: `services/${service.serviceName}`,\n                                successCallback: this.onDeleteSuccess,\n                                failureCallback: this.onDeleteFailure\n                            }}\n                            loading={loading}\n                            bottomContextMenuItems={this.contextMenu()}>\n            <CardItem key={'serviceType'}\n                      label={'Service type'}\n                      value={`${service.serviceType}`}/>\n            {replicasMessage &&\n            <CardItem key={'replicas'}\n                      label={'Replicas'}\n                      value={replicasMessage}/>}\n            <CardItem key={'ports'}\n                      label={'Ports'}\n                      value={`${service.defaultExternalPort}:${service.defaultInternalPort}`}/>\n            {service.launchCommand &&\n            <CardItem key={'launchCommand'}\n                      label={'Launch command'}\n                      value={service.launchCommand}/>}\n            {service.outputLabel &&\n            <CardItem key={'outputLabel'}\n                      label={'Output label'}\n                      value={`${service.outputLabel}`}/>}\n            {service.defaultDb &&\n            <CardItem key={'database'}\n                      label={'Database'}\n                      value={service.defaultDb}/>}\n            <CardItem key={'memory'}\n                      label={'Memory usage'}\n                      value={service.expectedMemoryConsumption > 0 ? `${service.expectedMemoryConsumption} bytes` : 'Unknown'}/>\n        </CardService>\n    }\n\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    deleteService\n};\n\nexport default connect(null, mapDispatchToProps)(ServiceCard);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport MainLayout from '../../../views/mainLayout/MainLayout';\nimport ServiceCard from './ServiceCard';\nimport AddButton from \"../../../components/form/AddButton\";\nimport {connect} from \"react-redux\";\nimport {loadApps, loadAppServices, loadServices} from \"../../../actions\";\nimport {ReduxState} from \"../../../reducers\";\nimport CardList from \"../../../components/list/CardList\";\nimport {IService} from \"./Service\";\nimport styles from './Services.module.css'\nimport BaseComponent from \"../../../components/BaseComponent\";\nimport {Dropdown} from \"../../../components/form/Dropdown\";\nimport {IApp} from \"../apps/App\";\nimport { isEqual } from 'lodash';\nimport {Link} from \"react-router-dom\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    services: IService[];\n    apps: { [key: string]: IApp };\n}\n\ninterface DispatchToProps {\n    loadServices: (name?: string) => any;\n    loadApps: () => void;\n    loadAppServices: (app: string) => void;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\ninterface State {\n    selectedApp?: string,\n}\n\nclass Services extends BaseComponent<Props, State> {\n\n    private loadedServices = false;\n\n    state = {\n        selectedApp: undefined\n    }\n\n    public componentDidMount(): void {\n        this.props.loadServices();\n        this.props.loadApps();\n    }\n\n    componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any) {\n        if (this.props.apps && !this.loadedServices) {\n            Object.keys(this.props.apps).forEach(app => this.props.loadAppServices(app));\n            this.loadedServices = true;\n        }\n    }\n\n    private onChangeServicesFilter = (e: React.FormEvent<HTMLSelectElement>) => {\n        const selectedApp = e.currentTarget.value;\n        this.setState(_ => ({selectedApp}))\n    }\n\n    private filteredServices = () => {\n        const {selectedApp} = this.state;\n        const {services, apps} = this.props;\n        return !selectedApp\n            ? services\n            // @ts-ignore\n            : services.filter(service => !selectedApp || Object.keys(apps[selectedApp].services)?.includes(service.serviceName))\n    }\n\n    private clearFilter = () =>\n        this.setState(_ => ({selectedApp: undefined}))\n\n    public render() {\n        const {selectedApp} = this.state;\n        return (\n            <MainLayout>\n                <AddButton tooltip={{text: 'Add service', position: 'bottom'}}\n                           pathname={'/services/new_service?new'}/>\n                {Object.keys(this.props.apps).length > 0 &&\n                <div className={styles.filterDropdown}>\n                    <a className={`btn-flat red-text ${styles.clearButton}`} onClick={this.clearFilter}>\n                        <i className={`material-icons ${styles.clearButtonIcon}`}>clear</i>\n                    </a>\n                    <Dropdown<string>\n                        id={'pageSize'}\n                        name={'pageSize'}\n                        value={this.state.selectedApp}\n                        onChange={this.onChangeServicesFilter}\n                        dropdown={{\n                            defaultValue: 'Filter by app',\n                            emptyMessage: 'No services to filter',\n                            values: Object.keys(this.props.apps),\n                        }}>\n                    </Dropdown>\n                </div>}\n                <div className={`${styles.container}`}>\n                    <CardList<IService>\n                        isLoading={this.props.isLoading}\n                        error={this.props.error}\n                        emptyMessage={selectedApp? `No services to display for ${selectedApp}` : \"No services to display\"}\n                        list={this.filteredServices()}\n                        card={this.service}\n                        predicate={this.predicate}/>\n                </div>\n            </MainLayout>\n        );\n    }\n\n    private service = (service: IService): JSX.Element =>\n        <ServiceCard key={service.id} service={service}/>;\n\n    private predicate = (service: IService, search: string): boolean =>\n        service.serviceName.toLowerCase().includes(search);\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.services.isLoadingServices,\n        error: state.entities.services.loadServicesError,\n        services: (state.entities.services.data && Object.values(state.entities.services.data).reverse()) || [],\n        apps: (state.entities.apps.data && state.entities.apps.data) || {},\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadServices,\n    loadApps,\n    loadAppServices,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Services);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport List from \"../../../components/list/List\";\nimport React from \"react\";\nimport {ReduxState} from \"../../../reducers\";\nimport {loadLogs} from \"../../../actions\";\nimport {connect} from \"react-redux\";\nimport {ILogs} from \"./ManagementLogs\";\nimport ListItem from \"../../../components/list/ListItem\";\nimport styles from './LogsList.module.css';\nimport ActionButton from \"../../../components/list/ActionButton\";\nimport {capitalize} from \"../../../utils/text\";\n\ninterface StateToProps {\n    isLoading: boolean;\n    error?: string | null;\n    logs: ILogs[];\n}\n\ninterface DispatchToProps {\n    loadLogs: () => void;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass LogsList extends React.Component<Props, {}> {\n\n    private reloadLogs: NodeJS.Timeout | null = null;\n\n    public componentDidMount(): void {\n        this.props.loadLogs();\n    };\n\n    public componentWillUnmount(): void {\n        if (this.reloadLogs) {\n            clearTimeout(this.reloadLogs);\n            this.reloadLogs = null;\n        }\n    }\n\n    public render() {\n        const {error, logs} = this.props;\n        let isLoading = this.props.isLoading;\n        const LogsList = List<ILogs>();\n        return (\n            <>\n                <ActionButton icon={'cached'}\n                              tooltip={{\n                                  activatedText: 'Deactivate automatic reload',\n                                  deactivatedText: 'Activate automatic reload',\n                                  position: 'bottom'\n                              }}\n                              clickCallback={this.onReloadClick}\n                              automatic/>\n                <div className={`${styles.container} ${!isLoading && !error ? styles.list : undefined}`}>\n                    <LogsList\n                        isLoading={!this.reloadLogs && isLoading}\n                        error={error}\n                        emptyMessage={'No logs to show'}\n                        list={logs}\n                        show={this.log}\n                        paginate={{\n                            pagesize: {initial: 25, options: [5, 10, 25, 50, 100, 'Everything']},\n                            page: {last: true},\n                            position: 'top-bottom'\n                        }}\n                        predicate={this.predicate}\n                        header={this.header}/>\n                </div>\n            </>\n        );\n    }\n\n    private predicate = (logs: ILogs, search: string): boolean =>\n        logs.formattedMessage.toLowerCase().includes(search)\n        || logs.levelString.toLowerCase().includes(search);\n\n    private getLevelColor = (levelString: string) => {\n        switch (levelString.toLowerCase()) {\n            case 'trace':\n                return 'grey-text';\n            case 'debug':\n                return 'green-text';\n            case 'info':\n                return 'blue-text';\n            case 'warn':\n                return 'yellow-text';\n            case 'error':\n                return 'red-text';\n        }\n    };\n\n    private header = (): JSX.Element =>\n        <ListItem>\n            <div className={`${styles.headerItem}`}>\n        <span className={`${styles.timestampColumn}`}>\n          timestamp\n        </span>\n                <span className={`${styles.levelColumn}`}>\n          level\n        </span>\n                <span className={`${styles.infoColumn}`}>\n          message\n        </span>\n            </div>\n        </ListItem>;\n\n    private log = (log: ILogs, index: number, last: boolean): JSX.Element =>\n        <ListItem>\n            <div className={`${last ? styles.lastItem : styles.item}`}>\n        <span className={`${styles.column}`}>\n          {new Date(log.timestmp).toLocaleString()}\n        </span>\n                <span className={`${styles.column} ${this.getLevelColor(log.levelString)}`}>\n          {capitalize(log.levelString.toLowerCase())}\n        </span>\n                <span className={`${styles.column}`}>\n          {log.formattedMessage}\n        </span>\n            </div>\n        </ListItem>;\n\n    private onReloadClick = (): void => {\n        if (this.reloadLogs) {\n            clearTimeout(this.reloadLogs);\n            this.reloadLogs = null;\n        } else {\n            this.reloadLogs = setInterval(this.props.loadLogs, 5000);\n        }\n    };\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.logs.isLoadingLogs,\n        error: state.entities.logs.loadLogsError,\n        logs: (state.entities.logs && Object.values(state.entities.logs.data)) || [],\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadLogs\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogsList)","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport MainLayout from \"../../../views/mainLayout/MainLayout\";\nimport LogsList from \"./LogsList\";\n\nexport interface ILogs {\n    // Names come from dbappender plugin of logback. DON'T CHANGE THEM\n    timestmp: number;\n    formattedMessage: string;\n    loggerName: string;\n    levelString: string;\n    threadName: string;\n    referenceFlag: number;\n    arg0: string;\n    arg1: string;\n    arg2: string;\n    arg3: string;\n    callerFilename: string;\n    callerClass: string;\n    callerMethod: string;\n    callerLine: string;\n    eventId: number;\n}\n\nconst ManagementLogs = () => (\n    <MainLayout>\n        <LogsList/>\n    </MainLayout>\n);\n\nexport default ManagementLogs;\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport Card from \"../../../../components/cards/Card\";\nimport CardItem from \"../../../../components/list/CardItem\";\nimport React from \"react\";\nimport {deleteCondition} from \"../../../../actions\";\nimport {IRuleCondition} from \"./RuleCondition\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport {connect} from \"react-redux\";\n\ninterface State {\n    loading: boolean;\n}\n\ninterface ConditionCardProps {\n    condition: IRuleCondition;\n}\n\ninterface DispatchToProps {\n    deleteCondition: (condition: IRuleCondition) => void;\n}\n\ntype Props = DispatchToProps & ConditionCardProps;\n\nclass RuleConditionCard extends BaseComponent<Props, State> {\n\n    private mounted = false;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false\n        }\n    }\n\n    public componentDidMount(): void {\n        this.mounted = true;\n    };\n\n    public componentWillUnmount(): void {\n        this.mounted = false;\n    }\n\n    private onDeleteSuccess = (condition: IRuleCondition): void => {\n        super.toast(`<span class=\"green-text\">Condition <b class=\"white-text\">${condition.name}</b> successfully removed</span>`);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n        this.props.deleteCondition(condition);\n    }\n\n    private onDeleteFailure = (reason: string, condition: IRuleCondition): void => {\n        super.toast(`Unable to delete condition <a href=/rules/conditions/${condition.name}><b>${condition.name}</b></a>`, 10000, reason, true);\n        if (this.mounted) {\n            this.setState({loading: false});\n        }\n    }\n\n    public render() {\n        const {condition} = this.props;\n        const {loading} = this.state;\n        const CardRuleCondition = Card<IRuleCondition>();\n        return <CardRuleCondition id={`condition-${condition.id}`}\n                                  title={condition.name.toString()}\n                                  link={{to: {pathname: `/rules/conditions/${condition.name}`, state: condition}}}\n                                  height={'150px'}\n                                  margin={'10px 0'}\n                                  hoverable\n                                  delete={{\n                                      url: `simulated-metrics/services/${condition.name}`,\n                                      successCallback: this.onDeleteSuccess,\n                                      failureCallback: this.onDeleteFailure,\n                                  }}\n                                  loading={loading}>\n            <CardItem key={'valueMode'}\n                      label={'Value mode'}\n                      value={condition.valueMode.name}/>\n            <CardItem key={'field'}\n                      label={'Field'}\n                      value={condition.field.name}/>\n            <CardItem key={'operator'}\n                      label={'Operator'}\n                      value={condition.operator.symbol}/>\n            <CardItem key={'value'}\n                      label={'Value'}\n                      value={condition.value.toString()}/>\n        </CardRuleCondition>\n    }\n}\n\nconst mapDispatchToProps: DispatchToProps = {\n    deleteCondition,\n};\n\nexport default connect(null, mapDispatchToProps)(RuleConditionCard);\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport {IRuleCondition} from \"./RuleCondition\";\nimport BaseComponent from \"../../../../components/BaseComponent\";\nimport CardList from \"../../../../components/list/CardList\";\nimport {ReduxState} from \"../../../../reducers\";\nimport {connect} from \"react-redux\";\nimport RuleConditionCard from \"./RuleConditionCard\";\nimport {loadConditions} from \"../../../../actions\";\n\ninterface StateToProps {\n    isLoading: boolean\n    error?: string | null;\n    conditions: IRuleCondition[];\n}\n\ninterface DispatchToProps {\n    loadConditions: (id?: string) => any;\n}\n\ntype Props = StateToProps & DispatchToProps;\n\nclass RuleConditionsList extends BaseComponent<Props, {}> {\n\n    public componentDidMount(): void {\n        this.props.loadConditions();\n    }\n\n    public render() {\n        return (\n            <CardList<IRuleCondition>\n                isLoading={this.props.isLoading}\n                error={this.props.error}\n                emptyMessage={\"No conditions to display\"}\n                list={this.props.conditions}\n                card={this.condition}\n                predicate={this.predicate}/>\n        )\n    }\n\n    private condition = (condition: IRuleCondition): JSX.Element =>\n        <RuleConditionCard key={condition.id} condition={condition}/>;\n\n    private predicate = (condition: IRuleCondition, search: string): boolean =>\n        condition.name.toString().toLowerCase().includes(search);\n\n}\n\nconst mapStateToProps = (state: ReduxState): StateToProps => (\n    {\n        isLoading: state.entities.rules.conditions.isLoadingConditions,\n        error: state.entities.rules.conditions.loadConditionsError,\n        conditions: (state.entities.rules.conditions.data && Object.values(state.entities.rules.conditions.data).reverse()) || [],\n    }\n);\n\nconst mapDispatchToProps: DispatchToProps = {\n    loadConditions,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RuleConditionsList);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Breadcrumbs_container__LrHP5\",\"breadcrumb\":\"Breadcrumbs_breadcrumb__12rwX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Landing_container__cGaWm\",\"buttons\":\"Landing_buttons__3AI79\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Error_container__IBn8w\",\"icon\":\"Error_icon__2C_Td\",\"message\":\"Error_message__1pQUz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardItem\":\"CardItem_cardItem__2ry1H\",\"cardValue\":\"CardItem_cardValue__GF7aY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdown\":\"AddButton_dropdown__1VZOk\",\"disabled\":\"AddButton_disabled__LRQ-h\",\"dropdownEmpty\":\"AddButton_dropdownEmpty__1Z7Q0\",\"nolabelCheckbox\":\"AddButton_nolabelCheckbox__1pvcq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Empty_container__1xHRH\",\"icon\":\"Empty_icon__2Y0Q4\",\"message\":\"Empty_message__2H4Nf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hideSection\":\"ConfirmDialog_hideSection__2xxdp\",\"hideMessage\":\"ConfirmDialog_hideMessage__2aGLM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listWrapper\":\"SimpleList_listWrapper__3l91k\",\"itemListWrapper\":\"SimpleList_itemListWrapper__34C3R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"threeDotsIcon\":\"Pagination_threeDotsIcon__25Glb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Checkbox_checkbox__2QZEn\",\"formCheckbox\":\"Checkbox_formCheckbox__3IVsF\",\"lever\":\"Checkbox_lever__3eWJk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UnsavedChanges_container__27qf3\",\"message\":\"UnsavedChanges_message__2ie9z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItemContent\":\"ContainerLogsList_listItemContent__3_uhv\",\"logsListContainer\":\"ContainerLogsList_logsListContainer__23E6r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBar\":\"SearchBar_searchBar__2dgNE\"};","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {ComposableMap, Geographies, Geography, Marker, Point, ZoomableGroup} from \"react-simple-maps\";\nimport React, {createRef, memo} from \"react\";\nimport * as d3Geo from \"d3-geo\";\nimport {IMarker} from \"./Marker\";\n\nconst {geoPath} = d3Geo\n\ntype Props = {\n    setTooltipContent: (tooltip: string) => void;\n    onClick?: (marker: IMarker) => void;\n    markers?: { coordinates: Point, marker: JSX.Element }[];\n    hover?: boolean;\n    clickHighlight?: boolean;\n    zoomable?: boolean;\n    position?: { coordinates: Point, zoom: number },\n    center?: boolean;\n    onZoom?: (position: { coordinates: Point, zoom: number }) => void;\n}\n\ntype State = {\n    scale: number;\n    position: { coordinates: Point, zoom: number };\n}\n\nclass MapChart extends React.Component<Props, State> {\n\n    private MAP_MAX_WIDTH = window.innerWidth;\n    private MAP_MAX_HEIGHT = window.innerHeight - 125;\n    private map = createRef<HTMLDivElement>();\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {scale: 1.0, position: {coordinates: [0, 0], zoom: 1}};\n    }\n\n    public componentDidMount() {\n        if (global.window) {\n            this.handleResize()\n            global.window.addEventListener('resize', this.handleResize);\n        }\n        this.setState({scale: 1.0});\n    }\n\n    componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any) {\n        this.calculateScale();\n        if (this.props.center !== undefined && prevProps.center !== this.props.center) {\n            this.setState({position: {coordinates: [0, 0], zoom: 1}});\n        }\n        if (prevProps.zoomable !== this.props.zoomable) {\n            this.setState({position: {coordinates: this.props.position?.coordinates || [0, 0], zoom: 1}});\n        }\n    }\n\n    public componentWillUnmount() {\n        if (global.window) {\n            global.window.removeEventListener('resize', this.handleResize);\n        }\n    }\n\n    private handleResize = () =>\n        this.calculateScale();\n\n    private calculateScale = () => {\n        const map = this.map.current;\n        if (map) {\n            const {width} = map.getBoundingClientRect();\n            const newScale = width / this.MAP_MAX_WIDTH;\n            if (newScale !== this.state.scale) {\n                this.setState({scale: newScale});\n            }\n        }\n    }\n\n    private onGeographyClick = (geography: any, projection: any) => (evt: any) => {\n        const gp = geoPath().projection(projection);\n        const dim = evt.target.getBoundingClientRect();\n        const cx = evt.clientX - dim.left;\n        const cy = evt.clientY - dim.top;\n        const [orgX, orgY] = gp.bounds(geography)[0];\n        const {scale} = this.state;\n        const coordinates = projection.invert([orgX + cx / scale, orgY + cy / scale]);\n        this.props.onClick?.({\n            label: geography.properties.NAME,\n            title: geography.properties.NAME,\n            longitude: coordinates[0],\n            latitude: coordinates[1]\n        });\n    }\n\n    private handleMoveEnd = (position: { coordinates: Point, zoom: number }) => {\n        this.setState({position: position});\n        this.props.onZoom?.(position);\n    }\n\n    public render() {\n        const {setTooltipContent, hover, clickHighlight, markers, zoomable} = this.props;\n        const {position} = this.state;\n        const geoUrl = \"/resources/world-110m.json\";\n        return (\n            <div style={{width: '100%', maxWidth: this.MAP_MAX_WIDTH, margin: '0 auto'}} ref={this.map}>\n                <ComposableMap data-tip=\"\" projectionConfig={{scale: 315, rotate: [-11, 0, 0]}}\n                               width={this.MAP_MAX_WIDTH} height={this.MAP_MAX_HEIGHT}\n                               style={{width: '100%', height: 'auto'}}>\n                    <ZoomableGroup zoom={position.zoom} maxZoom={!zoomable ? 1 : 5} center={position.coordinates}\n                                   onMoveEnd={this.handleMoveEnd}>\n                        <Geographies geography={geoUrl}>\n                            {({geographies, projection}) =>\n                                geographies.map(geo => (\n                                    <Geography\n                                        key={geo.rsmKey}\n                                        geography={geo}\n                                        onClick={this.onGeographyClick(geo, projection)}\n                                        onMouseEnter={() => {\n                                            const {NAME} = geo.properties;\n                                            setTooltipContent(`${NAME}`);\n                                        }}\n                                        onMouseLeave={() => {\n                                            setTooltipContent(\"\");\n                                        }}\n                                        style={{\n                                            default: {\n                                                fill: \"#D6D6DA\",\n                                                outline: \"none\"\n                                            },\n                                            hover: {\n                                                fill: hover ? \"#F53\" : \"#D6D6DA\",\n                                                outline: \"none\"\n                                            },\n                                            pressed: {\n                                                fill: clickHighlight ? \"#E42\" : \"#D6D6DA\",\n                                                outline: \"none\"\n                                            }\n                                        }}\n                                    />\n                                ))\n                            }\n                        </Geographies>\n                        {markers?.map((marker, index) =>\n                            <Marker key={index} coordinates={marker.coordinates}>\n                                {marker.marker}\n                            </Marker>)}\n                    </ZoomableGroup>\n                </ComposableMap>\n            </div>\n        );\n    }\n\n}\n\nexport default memo(MapChart);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardTitle\":\"CardTitle_cardTitle__S4Wm6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ActionLoadingSpinner_container__2YL5o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LoadingSpinner_container__1g1C2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appServiceItem\":\"ServiceAppList_appServiceItem__19E6x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Regions_container__3T065\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Nodes_container__3kG6J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Containers_container__1ymCz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Apps_container__2myAo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"RulesHost_container__1eqoX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"RulesService_container__k-CzP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"RuleConditions_container__eGRNp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LoadBalancers_container__tJTuM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"RegistrationServers_container__3Qwk4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SimulatedHostMetrics_container__3ds3o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SimulatedServiceMetrics_container__28oB-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"RulesContainer_container__rz1En\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SimulatedContainerMetrics_container__eqPys\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"WorkerManagers_container__1njLr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"RulesApp_container__6vCSe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SimulatedAppMetrics_container__Iw_--\"};","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from \"react\";\nimport M from \"materialize-css\";\nimport {Route, Switch} from \"react-router-dom\";\nimport LoadingBar from \"react-redux-loading-bar\";\nimport Navbar from \"../views/navbar/Navbar\";\nimport ManagementLanding from \"../routes/management/landing/Landing\";\nimport MonitoringLanding from \"../routes/monitoring/landing/Landing\";\nimport DataManagementLanding from \"../routes/dataManagement/landing/Landing\";\nimport Services from \"../routes/management/services/Services\";\nimport Service from \"../routes/management/services/Service\";\nimport {connect, Provider} from \"react-redux\";\nimport Login from \"../views/login/Login\";\nimport AuthenticatedRoute from \"../components/AuthenticatedRoute\";\nimport ManagementLogs from \"../routes/management/logs/ManagementLogs\";\nimport Region from \"../routes/management/regions/Region\";\nimport Regions from \"../routes/management/regions/Regions\";\nimport Nodes from \"../routes/management/nodes/Nodes\";\nimport Node from \"../routes/management/nodes/Node\";\nimport CloudHost from \"../routes/management/hosts/cloud/CloudHost\";\nimport EdgeHost from \"../routes/management/hosts/edge/EdgeHost\";\nimport Hosts from \"../routes/management/hosts/Hosts\";\nimport CloudHosts from \"../routes/management/hosts/cloud/CloudHosts\";\nimport EdgeHosts from \"../routes/management/hosts/edge/EdgeHosts\";\nimport Containers from \"../routes/management/containers/Containers\";\nimport Container from \"../routes/management/containers/Container\";\nimport Apps from \"../routes/management/apps/Apps\";\nimport App from \"../routes/management/apps/App\";\nimport RulesHost from \"../routes/management/rules/hosts/RulesHost\";\nimport RulesService from \"../routes/management/rules/services/RulesService\";\nimport Rules from \"../routes/management/rules/Rules\";\nimport RuleConditions from \"../routes/management/rules/conditions/RuleConditions\";\nimport Condition from \"../routes/management/rules/conditions/RuleCondition\";\nimport LoadBalancers from \"../routes/management/loadBalancers/LoadBalancers\";\nimport LoadBalancer from \"../routes/management/loadBalancers/LoadBalancer\";\nimport RegistrationServers from \"../routes/management/registrationServers/RegistrationServers\";\nimport RegistrationServer from \"../routes/management/registrationServers/RegistrationServer\";\nimport SimulatedMetrics from \"../routes/management/metrics/SimulatedMetrics\";\nimport SimulatedServiceMetric from \"../routes/management/metrics/services/SimulatedServiceMetric\";\nimport SimulatedHostMetric from \"../routes/management/metrics/hosts/SimulatedHostMetric\";\nimport SimulatedHostMetrics from \"../routes/management/metrics/hosts/SimulatedHostMetrics\";\nimport SimulatedServiceMetrics from \"../routes/management/metrics/services/SimulatedServiceMetrics\";\nimport {PageNotFound} from \"../components/PageNotFound\";\nimport {Footer} from \"../views/footer/Footer\";\nimport RulesContainer from \"../routes/management/rules/containers/RulesContainer\";\nimport RuleService from \"../routes/management/rules/services/RuleService\";\nimport RuleHost from \"../routes/management/rules/hosts/RuleHost\";\nimport RuleContainer from \"../routes/management/rules/containers/RuleContainer\";\nimport SimulatedContainerMetrics from \"../routes/management/metrics/containers/SimulatedContainerMetrics\";\nimport SimulatedContainerMetric from \"../routes/management/metrics/containers/SimulatedContainerMetric\";\nimport Ssh from \"../routes/management/ssh/Ssh\";\nimport {ReduxState} from \"../reducers\";\nimport Settings from \"../routes/management/settings/Settings\";\nimport MonitoringSettings from \"../routes/monitoring/settings/Settings\";\nimport DataManagementSettings from \"../routes/dataManagement/settings/Settings\";\n\ninterface RootContainerProps {\n    store: any;\n}\n\ninterface StateToProps {\n    component: IComponent;\n}\n\ntype Props = StateToProps & RootContainerProps;\n\nexport const managementAuthenticatedRoutes: { [path: string]: { title?: string, component: any, search?: boolean } } = {\n    \"/home\": {title: 'Microservices dynamic system management', component: ManagementLanding},\n    \"/apps\": {component: Apps, search: true},\n    \"/apps/:name\": {component: App},\n    \"/services\": {component: Services, search: true},\n    \"/services/:name\": {component: Service},\n    \"/services/service\": {component: Service},\n    \"/containers\": {component: Containers, search: true},\n    \"/containers/:id\": {component: Container},\n    \"/hosts\": {component: Hosts, search: true},\n    \"/hosts/cloud\": {component: CloudHosts},\n    \"/hosts/cloud/:instanceId\": {component: CloudHost},\n    \"/hosts/edge\": {component: EdgeHosts},\n    \"/hosts/edge/:hostname\": {component: EdgeHost},\n    \"/nodes\": {component: Nodes, search: true},\n    \"/nodes/:id\": {component: Node},\n    \"/rules\": {component: Rules, search: true},\n    \"/rules/hosts\": {component: RulesHost, search: true},\n    \"/rules/hosts/:name\": {component: RuleHost},\n    \"/rules/services\": {component: RulesService, search: true},\n    \"/rules/services/:name\": {component: RuleService},\n    \"/rules/containers\": {component: RulesContainer, search: true},\n    \"/rules/containers/:name\": {component: RuleContainer},\n    \"/rules/conditions\": {component: RuleConditions, search: true},\n    \"/rules/conditions/:name\": {component: Condition},\n    \"/simulated-metrics\": {component: SimulatedMetrics, search: true},\n    \"/simulated-metrics/services\": {component: SimulatedServiceMetrics, search: true},\n    \"/simulated-metrics/services/:name\": {component: SimulatedServiceMetric},\n    \"/simulated-metrics/containers\": {component: SimulatedContainerMetrics, search: true},\n    \"/simulated-metrics/containers/:name\": {component: SimulatedContainerMetric},\n    \"/simulated-metrics/hosts\": {component: SimulatedHostMetrics, search: true},\n    \"/simulated-metrics/hosts/:name\": {component: SimulatedHostMetric},\n    \"/regions\": {component: Regions, search: true},\n    \"/regions/:name\": {component: Region},\n    \"/load-balancers\": {component: LoadBalancers, search: true},\n    \"/load-balancers/:id\": {component: LoadBalancer},\n    \"/registration-servers\": {component: RegistrationServers, search: true},\n    \"/registration-servers/:id\": {component: RegistrationServer},\n    \"/ssh\": {component: Ssh},\n    \"/settings\": {component: Settings},\n    \"/logs\": {component: ManagementLogs, search: true},\n    \"/*\": {title: \"404 - Not found\", component: PageNotFound},\n};\n\nexport const monitoringAuthenticatedRoutes: { [path: string]: { title?: string, component: any, search?: boolean } } = {\n    \"/home\": {title: 'Microservices dynamic system monitoring', component: MonitoringLanding},\n    \"/settings\": {component: MonitoringSettings},\n    \"/*\": {title: \"404 - Not found\", component: PageNotFound},\n};\n\nexport const dataAuthenticatedRoutes: { [path: string]: { title?: string, component: any, search?: boolean } } = {\n    \"/home\": {title: 'Microservices dynamic system data management', component: DataManagementLanding},\n    \"/settings\": {component: DataManagementSettings},\n    \"/*\": {title: \"404 - Not found\", component: PageNotFound},\n};\n\nexport type IComponent = 'Management' | 'Monitoring' | 'Data';\n\nexport const components: IComponent[] = [\n    'Management', 'Monitoring', 'Data'\n];\n\nclass Root extends React.Component<Props, {}> {\n\n    public componentDidMount(): void {\n        M.AutoInit();\n    }\n\n    public render() {\n        let routes = (function (component) {\n            switch (component) {\n                case \"Management\":\n                    return managementAuthenticatedRoutes;\n                case \"Monitoring\":\n                    return monitoringAuthenticatedRoutes;\n                case \"Data\":\n                    return dataAuthenticatedRoutes;\n            }\n        })(this.props.component);\n        return (\n            <main>\n                <Provider store={this.props.store}>\n                    <LoadingBar showFastActions className=\"loading-bar\"/>\n                    <Navbar/>\n                    <div className='main-content'>\n                        <Switch>\n                            <Route path=\"/\" exact component={Login}/>\n                            <Route path=\"/login\" exact component={Login}/>\n                            {Object.entries(routes).map(([path, {title, component}], index) =>\n                                <AuthenticatedRoute key={index} exact path={path} title={title}\n                                                    component={component}/>)}\n                        </Switch>\n                    </div>\n                </Provider>\n                <Footer/>\n            </main>\n        );\n    }\n\n}\n\nfunction mapStateToProps(state: ReduxState): StateToProps {\n    return {\n        component: state.ui.component\n    }\n}\n\nexport default connect(mapStateToProps, undefined)(Root);","module.exports = __webpack_public_path__ + \"static/media/logo.747bba5b.png\";","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {\n    ADD_APP,\n    ADD_APP_RULES,\n    ADD_APP_SERVICES,\n    ADD_APP_SIMULATED_METRICS,\n    ADD_CLOUD_HOST,\n    ADD_CLOUD_HOST_RULE,\n    ADD_CLOUD_HOST_SIMULATED_METRICS,\n    ADD_COMMANDS,\n    ADD_CONDITION,\n    ADD_CONTAINERS,\n    ADD_CONTAINER_RULES,\n    ADD_CONTAINER_SIMULATED_METRICS,\n    ADD_EDGE_HOST,\n    ADD_EDGE_HOST_RULES,\n    ADD_EDGE_HOST_SIMULATED_METRICS,\n    ADD_LOAD_BALANCERS,\n    ADD_NODES,\n    ADD_REGISTRATION_SERVERS,\n    ADD_RULE_APP,\n    ADD_RULE_APP_APPS,\n    ADD_RULE_APP_CONDITIONS,\n    ADD_RULE_CONTAINER,\n    ADD_RULE_CONTAINER_CONDITIONS,\n    ADD_RULE_CONTAINER_CONTAINERS,\n    ADD_RULE_HOST,\n    ADD_RULE_HOST_CLOUD_HOSTS,\n    ADD_RULE_HOST_CONDITIONS,\n    ADD_RULE_HOST_EDGE_HOSTS,\n    ADD_RULE_SERVICE,\n    ADD_RULE_SERVICE_CONDITIONS,\n    ADD_RULE_SERVICE_SERVICES,\n    ADD_SERVICE,\n    ADD_SERVICE_APPS,\n    ADD_SERVICE_DEPENDENCIES,\n    ADD_SERVICE_PREDICTIONS,\n    ADD_SERVICE_RULES,\n    ADD_SERVICE_SIMULATED_METRICS,\n    ADD_SIMULATED_APP_METRIC,\n    ADD_SIMULATED_APP_METRIC_APPS,\n    ADD_SIMULATED_CONTAINER_METRIC,\n    ADD_SIMULATED_CONTAINER_METRIC_CONTAINERS,\n    ADD_SIMULATED_HOST_METRIC,\n    ADD_SIMULATED_HOST_METRIC_CLOUD_HOSTS,\n    ADD_SIMULATED_HOST_METRIC_EDGE_HOSTS,\n    ADD_SIMULATED_SERVICE_METRIC,\n    ADD_SIMULATED_SERVICE_METRIC_SERVICES,\n    ADD_WORKER_MANAGERS,\n    APP_FAILURE,\n    APP_REQUEST,\n    APP_RULES_FAILURE,\n    APP_RULES_REQUEST,\n    APP_RULES_SUCCESS,\n    APP_SERVICES_FAILURE,\n    APP_SERVICES_REQUEST,\n    APP_SERVICES_SUCCESS,\n    APP_SIMULATED_METRICS_FAILURE,\n    APP_SIMULATED_METRICS_REQUEST,\n    APP_SIMULATED_METRICS_SUCCESS,\n    APP_SUCCESS,\n    APPS_FAILURE,\n    APPS_REQUEST,\n    APPS_SUCCESS,\n    ASSIGN_WORKER_MANAGER_MACHINES,\n    CLEAR_COMMANDS,\n    CLOUD_HOST_FAILURE,\n    CLOUD_HOST_REQUEST,\n    CLOUD_HOST_RULES_FAILURE,\n    CLOUD_HOST_RULES_REQUEST,\n    CLOUD_HOST_RULES_SUCCESS,\n    CLOUD_HOST_SIMULATED_METRICS_FAILURE,\n    CLOUD_HOST_SIMULATED_METRICS_REQUEST,\n    CLOUD_HOST_SIMULATED_METRICS_SUCCESS,\n    CLOUD_HOST_SUCCESS,\n    CLOUD_HOSTS_FAILURE,\n    CLOUD_HOSTS_REQUEST,\n    CLOUD_HOSTS_SUCCESS,\n    CLOUD_REGIONS_FAILURE,\n    CLOUD_REGIONS_REQUEST,\n    CLOUD_REGIONS_SUCCESS,\n    CONDITION_FAILURE,\n    CONDITION_REQUEST,\n    CONDITION_SUCCESS,\n    CONDITIONS_FAILURE,\n    CONDITIONS_REQUEST,\n    CONDITIONS_SUCCESS,\n    CONTAINER_FAILURE,\n    CONTAINER_LOGS_FAILURE,\n    CONTAINER_LOGS_REQUEST,\n    CONTAINER_LOGS_SUCCESS,\n    CONTAINER_REQUEST,\n    CONTAINER_RULES_FAILURE,\n    CONTAINER_RULES_REQUEST,\n    CONTAINER_RULES_SUCCESS,\n    CONTAINER_SIMULATED_METRICS_FAILURE,\n    CONTAINER_SIMULATED_METRICS_REQUEST,\n    CONTAINER_SIMULATED_METRICS_SUCCESS,\n    CONTAINER_SUCCESS,\n    CONTAINERS_FAILURE,\n    CONTAINERS_REQUEST,\n    CONTAINERS_SUCCESS,\n    DECISION_FAILURE,\n    DECISION_REQUEST,\n    DECISION_SUCCESS,\n    DECISIONS_FAILURE,\n    DECISIONS_REQUEST,\n    DECISIONS_SUCCESS,\n    DELETE_APP,\n    DELETE_CLOUD_HOST,\n    DELETE_CONDITION,\n    DELETE_CONTAINER,\n    DELETE_EDGE_HOST, DELETE_LOAD_BALANCER,\n    DELETE_NODE,\n    DELETE_RULE_APP,\n    DELETE_RULE_CONTAINER,\n    DELETE_RULE_HOST,\n    DELETE_RULE_SERVICE,\n    DELETE_SERVICE,\n    DELETE_SIMULATED_APP_METRIC,\n    DELETE_SIMULATED_CONTAINER_METRIC,\n    DELETE_SIMULATED_HOST_METRIC,\n    DELETE_SIMULATED_SERVICE_METRIC,\n    DELETE_WORKER_MANAGER,\n    EDGE_HOST_FAILURE,\n    EDGE_HOST_REQUEST,\n    EDGE_HOST_RULES_FAILURE,\n    EDGE_HOST_RULES_REQUEST,\n    EDGE_HOST_RULES_SUCCESS,\n    EDGE_HOST_SIMULATED_METRICS_FAILURE,\n    EDGE_HOST_SIMULATED_METRICS_REQUEST,\n    EDGE_HOST_SIMULATED_METRICS_SUCCESS,\n    EDGE_HOST_SUCCESS,\n    EDGE_HOSTS_FAILURE,\n    EDGE_HOSTS_REQUEST,\n    EDGE_HOSTS_SUCCESS,\n    FIELDS_FAILURE,\n    FIELDS_REQUEST,\n    FIELDS_SUCCESS,\n    LOAD_BALANCER_FAILURE,\n    LOAD_BALANCER_REQUEST,\n    LOAD_BALANCER_SUCCESS,\n    LOAD_BALANCERS_FAILURE,\n    LOAD_BALANCERS_REQUEST,\n    LOAD_BALANCERS_SUCCESS,\n    LOGS_FAILURE,\n    LOGS_REQUEST,\n    LOGS_SUCCESS,\n    NODE_FAILURE,\n    NODE_REQUEST,\n    NODE_SUCCESS,\n    NODES_FAILURE,\n    NODES_REQUEST,\n    NODES_SUCCESS,\n    OPERATORS_FAILURE,\n    OPERATORS_REQUEST,\n    OPERATORS_SUCCESS,\n    REGION_FAILURE,\n    REGION_REQUEST,\n    REGION_SUCCESS,\n    REGIONS_FAILURE,\n    REGIONS_REQUEST,\n    REGIONS_SUCCESS,\n    REGISTRATION_SERVER_FAILURE,\n    REGISTRATION_SERVER_REQUEST,\n    REGISTRATION_SERVER_SUCCESS,\n    REGISTRATION_SERVERS_FAILURE,\n    REGISTRATION_SERVERS_REQUEST,\n    REGISTRATION_SERVERS_SUCCESS,\n    REMOVE_APP_RULES,\n    REMOVE_APP_SERVICES,\n    REMOVE_APP_SIMULATED_METRICS,\n    REMOVE_CLOUD_HOST_RULES,\n    REMOVE_CLOUD_HOST_SIMULATED_METRICS,\n    REMOVE_CONTAINER_RULES,\n    REMOVE_CONTAINER_SIMULATED_METRICS,\n    REMOVE_EDGE_HOST_RULES,\n    REMOVE_EDGE_HOST_SIMULATED_METRICS,\n    REMOVE_RULE_APP_APPS,\n    REMOVE_RULE_APP_CONDITIONS,\n    REMOVE_RULE_CONTAINER_CONDITIONS,\n    REMOVE_RULE_CONTAINER_CONTAINERS,\n    REMOVE_RULE_HOST_CLOUD_HOSTS,\n    REMOVE_RULE_HOST_CONDITIONS,\n    REMOVE_RULE_HOST_EDGE_HOSTS,\n    REMOVE_RULE_SERVICE_CONDITIONS,\n    REMOVE_RULE_SERVICE_SERVICES,\n    REMOVE_SERVICE_APPS,\n    REMOVE_SERVICE_DEPENDENCIES,\n    REMOVE_SERVICE_PREDICTIONS,\n    REMOVE_SERVICE_RULES,\n    REMOVE_SERVICE_SIMULATED_METRICS,\n    REMOVE_SIMULATED_APP_METRIC_APPS,\n    REMOVE_SIMULATED_CONTAINER_METRIC_CONTAINERS,\n    REMOVE_SIMULATED_HOST_METRIC_CLOUD_HOSTS,\n    REMOVE_SIMULATED_HOST_METRIC_EDGE_HOSTS,\n    REMOVE_SIMULATED_SERVICE_METRIC_SERVICES,\n    RULE_APP_APPS_FAILURE,\n    RULE_APP_APPS_REQUEST,\n    RULE_APP_APPS_SUCCESS,\n    RULE_APP_CONDITIONS_FAILURE,\n    RULE_APP_CONDITIONS_REQUEST,\n    RULE_APP_CONDITIONS_SUCCESS,\n    RULE_APP_FAILURE,\n    RULE_APP_REQUEST,\n    RULE_APP_SUCCESS,\n    RULE_CONTAINER_CONDITIONS_FAILURE,\n    RULE_CONTAINER_CONDITIONS_REQUEST,\n    RULE_CONTAINER_CONDITIONS_SUCCESS,\n    RULE_CONTAINER_CONTAINERS_FAILURE,\n    RULE_CONTAINER_CONTAINERS_REQUEST,\n    RULE_CONTAINER_CONTAINERS_SUCCESS,\n    RULE_CONTAINER_FAILURE,\n    RULE_CONTAINER_REQUEST,\n    RULE_CONTAINER_SUCCESS,\n    RULE_HOST_CLOUD_HOSTS_FAILURE,\n    RULE_HOST_CLOUD_HOSTS_REQUEST,\n    RULE_HOST_CLOUD_HOSTS_SUCCESS,\n    RULE_HOST_CONDITIONS_FAILURE,\n    RULE_HOST_CONDITIONS_REQUEST,\n    RULE_HOST_CONDITIONS_SUCCESS,\n    RULE_HOST_EDGE_HOSTS_FAILURE,\n    RULE_HOST_EDGE_HOSTS_REQUEST,\n    RULE_HOST_EDGE_HOSTS_SUCCESS,\n    RULE_HOST_FAILURE,\n    RULE_HOST_REQUEST,\n    RULE_HOST_SUCCESS,\n    RULE_SERVICE_CONDITIONS_FAILURE,\n    RULE_SERVICE_CONDITIONS_REQUEST,\n    RULE_SERVICE_CONDITIONS_SUCCESS,\n    RULE_SERVICE_FAILURE,\n    RULE_SERVICE_REQUEST,\n    RULE_SERVICE_SERVICES_FAILURE,\n    RULE_SERVICE_SERVICES_REQUEST,\n    RULE_SERVICE_SERVICES_SUCCESS,\n    RULE_SERVICE_SUCCESS,\n    RULES_APP_FAILURE,\n    RULES_APP_REQUEST,\n    RULES_APP_SUCCESS,\n    RULES_CONTAINER_FAILURE,\n    RULES_CONTAINER_REQUEST,\n    RULES_CONTAINER_SUCCESS,\n    RULES_HOST_FAILURE,\n    RULES_HOST_REQUEST,\n    RULES_HOST_SUCCESS,\n    RULES_SERVICE_FAILURE,\n    RULES_SERVICE_REQUEST,\n    RULES_SERVICE_SUCCESS,\n    SCRIPTS_FAILURE,\n    SCRIPTS_REQUEST,\n    SCRIPTS_SUCCESS,\n    SERVICE_APPS_FAILURE,\n    SERVICE_APPS_REQUEST,\n    SERVICE_APPS_SUCCESS,\n    SERVICE_DEPENDENCIES_FAILURE,\n    SERVICE_DEPENDENCIES_REQUEST,\n    SERVICE_DEPENDENCIES_SUCCESS,\n    SERVICE_DEPENDENTS_FAILURE,\n    SERVICE_DEPENDENTS_REQUEST,\n    SERVICE_DEPENDENTS_SUCCESS,\n    SERVICE_FAILURE,\n    SERVICE_PREDICTIONS_FAILURE,\n    SERVICE_PREDICTIONS_REQUEST,\n    SERVICE_PREDICTIONS_SUCCESS,\n    SERVICE_REQUEST,\n    SERVICE_RULES_FAILURE,\n    SERVICE_RULES_REQUEST,\n    SERVICE_RULES_SUCCESS,\n    SERVICE_SIMULATED_METRICS_FAILURE,\n    SERVICE_SIMULATED_METRICS_REQUEST,\n    SERVICE_SIMULATED_METRICS_SUCCESS,\n    SERVICE_SUCCESS,\n    SERVICES_FAILURE,\n    SERVICES_REQUEST,\n    SERVICES_SUCCESS,\n    SIMULATED_APP_METRIC_APPS_FAILURE,\n    SIMULATED_APP_METRIC_APPS_REQUEST,\n    SIMULATED_APP_METRIC_APPS_SUCCESS,\n    SIMULATED_APP_METRIC_FAILURE,\n    SIMULATED_APP_METRIC_REQUEST,\n    SIMULATED_APP_METRIC_SUCCESS,\n    SIMULATED_APP_METRICS_FAILURE,\n    SIMULATED_APP_METRICS_REQUEST,\n    SIMULATED_APP_METRICS_SUCCESS,\n    SIMULATED_CONTAINER_METRIC_CONTAINERS_FAILURE,\n    SIMULATED_CONTAINER_METRIC_CONTAINERS_REQUEST,\n    SIMULATED_CONTAINER_METRIC_CONTAINERS_SUCCESS,\n    SIMULATED_CONTAINER_METRIC_FAILURE,\n    SIMULATED_CONTAINER_METRIC_REQUEST,\n    SIMULATED_CONTAINER_METRIC_SUCCESS,\n    SIMULATED_CONTAINER_METRICS_FAILURE,\n    SIMULATED_CONTAINER_METRICS_REQUEST,\n    SIMULATED_CONTAINER_METRICS_SUCCESS,\n    SIMULATED_HOST_METRIC_CLOUD_HOSTS_FAILURE,\n    SIMULATED_HOST_METRIC_CLOUD_HOSTS_REQUEST,\n    SIMULATED_HOST_METRIC_CLOUD_HOSTS_SUCCESS,\n    SIMULATED_HOST_METRIC_EDGE_HOSTS_FAILURE,\n    SIMULATED_HOST_METRIC_EDGE_HOSTS_REQUEST,\n    SIMULATED_HOST_METRIC_EDGE_HOSTS_SUCCESS,\n    SIMULATED_HOST_METRIC_FAILURE,\n    SIMULATED_HOST_METRIC_REQUEST,\n    SIMULATED_HOST_METRIC_SUCCESS,\n    SIMULATED_HOST_METRICS_FAILURE,\n    SIMULATED_HOST_METRICS_REQUEST,\n    SIMULATED_HOST_METRICS_SUCCESS,\n    SIMULATED_SERVICE_METRIC_FAILURE,\n    SIMULATED_SERVICE_METRIC_REQUEST,\n    SIMULATED_SERVICE_METRIC_SERVICES_FAILURE,\n    SIMULATED_SERVICE_METRIC_SERVICES_REQUEST,\n    SIMULATED_SERVICE_METRIC_SERVICES_SUCCESS,\n    SIMULATED_SERVICE_METRIC_SUCCESS,\n    SIMULATED_SERVICE_METRICS_FAILURE,\n    SIMULATED_SERVICE_METRICS_REQUEST,\n    SIMULATED_SERVICE_METRICS_SUCCESS,\n    UNASSIGN_WORKER_MANAGER_MACHINES,\n    UPDATE_APP,\n    UPDATE_CLOUD_HOST,\n    UPDATE_CONDITION,\n    UPDATE_EDGE_HOST,\n    UPDATE_NODE,\n    UPDATE_RULE_APP,\n    UPDATE_RULE_CONTAINER,\n    UPDATE_RULE_HOST,\n    UPDATE_RULE_SERVICE,\n    UPDATE_SERVICE,\n    UPDATE_SIMULATED_APP_METRIC,\n    UPDATE_SIMULATED_CONTAINER_METRIC,\n    UPDATE_SIMULATED_HOST_METRIC,\n    UPDATE_SIMULATED_SERVICE_METRIC,\n    VALUE_MODES_FAILURE,\n    VALUE_MODES_REQUEST,\n    VALUE_MODES_SUCCESS,\n    WORKER_MANAGER_FAILURE,\n    WORKER_MANAGER_HOSTS_FAILURE,\n    WORKER_MANAGER_HOSTS_REQUEST,\n    WORKER_MANAGER_HOSTS_SUCCESS,\n    WORKER_MANAGER_REQUEST,\n    WORKER_MANAGER_SUCCESS,\n    WORKER_MANAGERS_FAILURE,\n    WORKER_MANAGERS_REQUEST,\n    WORKER_MANAGERS_SUCCESS,\n    DELETE_REGISTRATION_SERVER,\n} from \"../actions\";\nimport {Schemas} from \"../middleware/api\";\nimport {normalize} from \"normalizr\";\nimport {keys, merge, pick} from 'lodash';\nimport {IApp} from \"../routes/management/apps/App\";\nimport {IAddAppService, IAppService} from \"../routes/management/apps/AppServicesList\";\nimport {IService} from \"../routes/management/services/Service\";\nimport {IDependent} from \"../routes/management/services/ServiceDependentList\";\nimport {IPrediction} from \"../routes/management/services/ServicePredictionList\";\nimport {IRuleService} from \"../routes/management/rules/services/RuleService\";\nimport {IContainer} from \"../routes/management/containers/Container\";\nimport {IAwsRegion, ICloudHost} from \"../routes/management/hosts/cloud/CloudHost\";\nimport {IEdgeHost} from \"../routes/management/hosts/edge/EdgeHost\";\nimport {INode} from \"../routes/management/nodes/Node\";\nimport {IRuleHost} from \"../routes/management/rules/hosts/RuleHost\";\nimport {IDecision, IField, IOperator, IValueMode} from \"../routes/management/rules/Rule\";\nimport {IRuleCondition} from \"../routes/management/rules/conditions/RuleCondition\";\nimport {ISimulatedHostMetric} from \"../routes/management/metrics/hosts/SimulatedHostMetric\";\nimport {ISimulatedServiceMetric} from \"../routes/management/metrics/services/SimulatedServiceMetric\";\nimport {IRegion} from \"../routes/management/regions/Region\";\nimport {ILoadBalancer} from \"../routes/management/loadBalancers/LoadBalancer\";\nimport {IRegistrationServer} from \"../routes/management/registrationServers/RegistrationServer\";\nimport {ILogs} from \"../routes/management/logs/ManagementLogs\";\nimport {IRuleContainer} from \"../routes/management/rules/containers/RuleContainer\";\nimport {ISimulatedContainerMetric} from \"../routes/management/metrics/containers/SimulatedContainerMetric\";\nimport {IWorkerManager} from \"../routes/management/workerManagers/WorkerManager\";\nimport {IRuleApp} from \"../routes/management/rules/apps/RuleApp\";\nimport {ISimulatedAppMetric} from \"../routes/management/metrics/apps/SimulatedAppMetric\";\nimport {ISshCommand} from \"../routes/management/ssh/SshCommand\";\nimport {ICommand, IFileTransfer} from \"../routes/management/ssh/SshPanel\";\n\nexport type EntitiesState = {\n    apps: {\n        data: { [key: string]: IApp },\n        isLoadingApps: boolean,\n        loadAppsError: string | null,\n        isLoadingServices: boolean,\n        loadServicesError: string | null,\n        isLoadingRules: boolean,\n        loadRulesError?: string | null,\n        isLoadingSimulatedMetrics: boolean,\n        loadSimulatedMetricsError?: string | null,\n    },\n    services: {\n        data: { [key: string]: IService },\n        isLoadingServices: boolean,\n        loadServicesError: string | null,\n        isLoadingApps: boolean,\n        loadAppsError: string | null,\n        isLoadingDependencies: boolean,\n        loadDependenciesError: string | null,\n        isLoadingDependents: boolean,\n        loadDependentsError: string | null,\n        isLoadingPredictions: boolean,\n        loadPredictionsError: string | null,\n        isLoadingRules: boolean,\n        loadRulesError?: string | null,\n        isLoadingSimulatedMetrics: boolean,\n        loadSimulatedMetricsError?: string | null,\n    },\n    containers: {\n        data: { [key: string]: IContainer },\n        isLoadingContainers: boolean,\n        loadContainersError: string | null,\n        isLoadingLogs: boolean,\n        loadLogsError: string | null,\n        isLoadingRules: boolean,\n        loadRulesError: string | null,\n        isLoadingSimulatedMetrics: boolean,\n        loadSimulatedMetricsError?: string | null,\n    },\n    hosts: {\n        cloud: {\n            data: { [key: string]: ICloudHost },\n            isLoadingHosts: boolean,\n            loadHostsError: string | null,\n            isLoadingRules: false,\n            loadRulesError: null,\n            isLoadingSimulatedMetrics: boolean,\n            loadSimulatedMetricsError?: string | null,\n            regions: {\n                data: IAwsRegion[],\n                isLoadingRegions: boolean,\n                loadRegionsError?: string | null,\n            }\n        },\n        edge: {\n            data: { [key: string]: IEdgeHost },\n            isLoadingHosts: boolean,\n            loadHostsError: string | null,\n            isLoadingRules: false,\n            loadRulesError: null,\n            isLoadingSimulatedMetrics: boolean,\n            loadSimulatedMetricsError?: string | null,\n        }\n    },\n    nodes: {\n        data: { [key: string]: INode },\n        isLoadingNodes: boolean,\n        loadNodesError: string | null,\n    },\n    rules: {\n        hosts: {\n            data: { [key: string]: IRuleHost },\n            isLoadingRules: boolean,\n            loadRulesError: string | null,\n            isLoadingConditions: boolean,\n            loadConditionsError: string | null,\n            isLoadingCloudHosts: boolean,\n            loadCloudHostsError: string | null,\n            isLoadingEdgeHosts: boolean,\n            loadEdgeHostsError: string | null,\n        },\n        apps: {\n            data: { [key: string]: IRuleApp },\n            isLoadingRules: boolean,\n            loadRulesError: string | null,\n            isLoadingConditions: boolean,\n            loadConditionsError: string | null,\n            isLoadingApps: boolean,\n            loadAppsError: string | null,\n        },\n        services: {\n            data: { [key: string]: IRuleService },\n            isLoadingRules: boolean,\n            loadRulesError: string | null,\n            isLoadingConditions: boolean,\n            loadConditionsError: string | null,\n            isLoadingServices: boolean,\n            loadServicesError: string | null,\n        },\n        containers: {\n            data: { [key: string]: IRuleContainer },\n            isLoadingRules: boolean,\n            loadRulesError: string | null,\n            isLoadingConditions: boolean,\n            loadConditionsError: string | null,\n            isLoadingContainers: boolean,\n            loadContainersError: string | null,\n        },\n        conditions: {\n            data: { [key: string]: IRuleCondition },\n            isLoadingConditions: boolean,\n            loadConditionsError: string | null,\n        }\n    }\n    valueModes: {\n        data: { [key: string]: IValueMode },\n        isLoadingValueModes: boolean,\n        loadValueModesError: string | null,\n    },\n    fields: {\n        data: { [key: string]: IField },\n        isLoadingFields: boolean,\n        loadFieldsError: string | null,\n    },\n    operators: {\n        data: { [key: string]: IOperator },\n        isLoadingOperators: boolean,\n        loadOperatorsError: string | null,\n    }\n    decisions: {\n        data: { [key: string]: IDecision },\n        isLoadingDecisions: boolean,\n        loadDecisionsError: string | null,\n    },\n    simulatedMetrics: {\n        hosts: {\n            data: { [key: string]: ISimulatedHostMetric },\n            isLoadingSimulatedHostMetrics: boolean,\n            loadSimulatedHostMetricsError: string | null,\n            isLoadingCloudHosts: boolean,\n            loadCloudHostsError: string | null,\n            isLoadingEdgeHosts: boolean,\n            loadEdgeHostsError: string | null,\n        },\n        apps: {\n            data: { [key: string]: ISimulatedAppMetric },\n            isLoadingSimulatedAppMetrics: boolean,\n            loadSimulatedAppMetricsError: string | null,\n            isLoadingApps: boolean,\n            loadAppsError: string | null,\n        }\n        services: {\n            data: { [key: string]: ISimulatedServiceMetric },\n            isLoadingSimulatedServiceMetrics: boolean,\n            loadSimulatedServiceMetricsError: string | null,\n            isLoadingServices: boolean,\n            loadServicesError: string | null,\n        },\n        containers: {\n            data: { [key: string]: ISimulatedContainerMetric },\n            isLoadingSimulatedContainerMetrics: boolean,\n            loadSimulatedContainerMetricsError: string | null,\n            isLoadingContainers: boolean,\n            loadContainersError: string | null,\n        }\n    },\n    regions: {\n        data: { [key: string]: IRegion },\n        isLoadingRegions: boolean,\n        loadRegionsError: string | null,\n    },\n    loadBalancers: {\n        data: { [key: string]: ILoadBalancer },\n        isLoadingLoadBalancers: boolean,\n        loadLoadBalancersError: string | null,\n    },\n    registrationServers: {\n        data: { [key: string]: IRegistrationServer },\n        isLoadingRegistrationServers: boolean,\n        loadRegistrationServersError: string | null,\n    },\n    workerManagers: {\n        data: { [key: string]: IWorkerManager },\n        isLoadingWorkerManagers: boolean,\n        loadWorkerManagersError: string | null,\n        isLoadingAssignedHosts: boolean,\n        loadAssignedHostsError: string | null,\n    },\n    logs: {\n        data: { [key: number]: ILogs },\n        isLoadingLogs: boolean,\n        loadLogsError: string | null,\n    },\n    scripts: {\n        data: string[],\n        isLoadingScripts: boolean,\n        loadScriptsError: string | null,\n    },\n    commands: (ICommand | IFileTransfer)[],\n}\n\nexport type EntitiesAction = {\n    type: string,\n    entity?: string | number,\n    isLoading?: {},\n    error?: string,\n    data?: {\n        apps?: IApp[],\n        appsNames?: string[],\n        appServices?: IAppService[],\n        addAppServices?: IAddAppService[],\n        services?: IService[],\n        serviceNames?: string[]\n        dependencies?: IService[],\n        dependenciesNames?: string[],\n        dependents?: IDependent[],\n        predictions?: IPrediction[],\n        predictionsNames?: string[],\n        containers?: IContainer[],\n        containerIds?: string[],\n        cloudHosts?: ICloudHost[],\n        cloudHostsId?: string[],\n        edgeHosts?: IEdgeHost[],\n        edgeHostsHostname?: string[],\n        nodes?: INode[],\n        regions?: IRegion[],\n        hostRules?: IRuleHost[],\n        appRules?: IRuleApp[],\n        serviceRules?: IRuleService[],\n        containerRules?: IRuleContainer[],\n        rulesNames?: string[],\n        valueModes?: IValueMode[],\n        fields?: IField[],\n        operators?: IOperator[],\n        conditions?: IRuleCondition[],\n        conditionsNames?: string[],\n        decisions?: IDecision[],\n        simulatedHostMetrics?: ISimulatedHostMetric[],\n        simulatedAppMetrics?: ISimulatedAppMetric[],\n        simulatedServiceMetrics?: ISimulatedServiceMetric[],\n        simulatedContainerMetrics?: ISimulatedContainerMetric[],\n        simulatedMetricNames?: string[],\n        loadBalancers?: ILoadBalancer[],\n        registrationServers?: ILoadBalancer[],\n        workerManagers?: IWorkerManager[],\n        assignedHosts?: string[],\n        logs?: ILogs[],\n        commands?: ISshCommand[],\n    },\n};\n\nconst entities = (state: EntitiesState = {\n                      apps: {\n                          data: {},\n                          isLoadingApps: false,\n                          loadAppsError: null,\n                          isLoadingServices: false,\n                          loadServicesError: null,\n                          isLoadingRules: false,\n                          loadRulesError: null,\n                          isLoadingSimulatedMetrics: false,\n                          loadSimulatedMetricsError: null,\n                      },\n                      services: {\n                          data: {},\n                          isLoadingServices: false,\n                          loadServicesError: null,\n                          isLoadingApps: false,\n                          loadAppsError: null,\n                          isLoadingDependencies: false,\n                          loadDependenciesError: null,\n                          isLoadingDependents: false,\n                          loadDependentsError: null,\n                          isLoadingPredictions: false,\n                          loadPredictionsError: null,\n                          isLoadingRules: false,\n                          loadRulesError: null,\n                          isLoadingSimulatedMetrics: false,\n                          loadSimulatedMetricsError: null,\n                      },\n                      containers: {\n                          data: {},\n                          isLoadingContainers: false,\n                          loadContainersError: null,\n                          isLoadingLogs: false,\n                          loadLogsError: null,\n                          isLoadingRules: false,\n                          loadRulesError: null,\n                          isLoadingSimulatedMetrics: false,\n                          loadSimulatedMetricsError: null,\n                      },\n                      hosts: {\n                          cloud: {\n                              data: {},\n                              isLoadingHosts: false,\n                              loadHostsError: null,\n                              isLoadingRules: false,\n                              loadRulesError: null,\n                              isLoadingSimulatedMetrics: false,\n                              loadSimulatedMetricsError: null,\n                              regions: {\n                                  data: [],\n                                  isLoadingRegions: false,\n                                  loadRegionsError: null,\n                              }\n                          },\n                          edge: {\n                              data: {},\n                              isLoadingHosts: false,\n                              loadHostsError: null,\n                              isLoadingRules: false,\n                              loadRulesError: null,\n                              isLoadingSimulatedMetrics: false,\n                              loadSimulatedMetricsError: null,\n                          },\n                      },\n                      nodes: {\n                          data: {},\n                          isLoadingNodes: false,\n                          loadNodesError: null\n                      },\n                      rules: {\n                          hosts: {\n                              data: {},\n                              isLoadingRules: false,\n                              loadRulesError: null,\n                              isLoadingConditions: false,\n                              loadConditionsError: null,\n                              isLoadingCloudHosts: false,\n                              loadCloudHostsError: null,\n                              isLoadingEdgeHosts: false,\n                              loadEdgeHostsError: null,\n                          },\n                          apps: {\n                              data: {},\n                              isLoadingRules: false,\n                              loadRulesError: null,\n                              isLoadingConditions: false,\n                              loadConditionsError: null,\n                              isLoadingApps: false,\n                              loadAppsError: null,\n                          },\n                          services: {\n                              data: {},\n                              isLoadingRules: false,\n                              loadRulesError: null,\n                              isLoadingConditions: false,\n                              loadConditionsError: null,\n                              isLoadingServices: false,\n                              loadServicesError: null,\n                          },\n                          containers: {\n                              data: {},\n                              isLoadingRules: false,\n                              loadRulesError: null,\n                              isLoadingConditions: false,\n                              loadConditionsError: null,\n                              isLoadingContainers: false,\n                              loadContainersError: null,\n                          },\n                          conditions: {\n                              data: {},\n                              isLoadingConditions: false,\n                              loadConditionsError: null\n                          },\n                      },\n                      valueModes: {\n                          data: {},\n                          isLoadingValueModes: false,\n                          loadValueModesError: null\n                      },\n                      fields: {\n                          data: {},\n                          isLoadingFields: false,\n                          loadFieldsError: null\n                      },\n                      operators: {\n                          data: {},\n                          isLoadingOperators: false,\n                          loadOperatorsError: null\n                      },\n                      decisions: {\n                          data: {},\n                          isLoadingDecisions: false,\n                          loadDecisionsError: null\n                      },\n                      simulatedMetrics: {\n                          hosts: {\n                              data: {},\n                              isLoadingSimulatedHostMetrics: false,\n                              loadSimulatedHostMetricsError: null,\n                              isLoadingCloudHosts: false,\n                              loadCloudHostsError: null,\n                              isLoadingEdgeHosts: false,\n                              loadEdgeHostsError: null,\n                          },\n                          apps: {\n                              data: {},\n                              isLoadingSimulatedAppMetrics: false,\n                              loadSimulatedAppMetricsError: null,\n                              isLoadingApps: false,\n                              loadAppsError: null,\n                          },\n                          services: {\n                              data: {},\n                              isLoadingSimulatedServiceMetrics: false,\n                              loadSimulatedServiceMetricsError: null,\n                              isLoadingServices: false,\n                              loadServicesError: null,\n                          },\n                          containers: {\n                              data: {},\n                              isLoadingSimulatedContainerMetrics: false,\n                              loadSimulatedContainerMetricsError: null,\n                              isLoadingContainers: false,\n                              loadContainersError: null,\n                          },\n                      },\n                      regions: {\n                          data: {},\n                          isLoadingRegions: false,\n                          loadRegionsError: null\n                      },\n                      loadBalancers: {\n                          data: {},\n                          isLoadingLoadBalancers: false,\n                          loadLoadBalancersError: null\n                      },\n                      registrationServers: {\n                          data: {},\n                          isLoadingRegistrationServers: false,\n                          loadRegistrationServersError: null\n                      },\n                      workerManagers: {\n                          data: {},\n                          isLoadingWorkerManagers: false,\n                          loadWorkerManagersError: null,\n                          isLoadingAssignedHosts: false,\n                          loadAssignedHostsError: null,\n                      },\n                      logs: {\n                          data: {},\n                          isLoadingLogs: false,\n                          loadLogsError: null\n                      },\n                      scripts: {\n                          data: [],\n                          isLoadingScripts: false,\n                          loadScriptsError: null\n                      },\n                      commands: [],\n                  },\n                  action: EntitiesAction\n): EntitiesState => {\n    const {type, error, entity, data} = action;\n    switch (type) {\n        case APPS_REQUEST:\n        case APP_REQUEST:\n            return merge({}, state, {apps: {isLoadingApps: true, loadAppsError: null}});\n        case APP_FAILURE:\n        case APPS_FAILURE:\n            return merge({}, state, {apps: {isLoadingApps: false, loadAppsError: error}});\n        case APPS_SUCCESS:\n            return {\n                ...state,\n                apps: {\n                    ...state.apps,\n                    data: merge({}, pick(state.apps.data, keys(data?.apps)), data?.apps),\n                    isLoadingApps: false,\n                    loadAppsError: null,\n                }\n            };\n        case APP_SUCCESS:\n            return {\n                ...state,\n                apps: {\n                    ...state.apps,\n                    data: merge({}, state.apps.data, data?.apps),\n                    isLoadingApps: false,\n                    loadAppsError: null,\n                }\n            };\n        case ADD_APP:\n            if (data?.apps?.length) {\n                const apps = normalize(data?.apps, Schemas.APP_ARRAY).entities.apps;\n                return merge({}, state, {apps: {data: apps, isLoadingApps: false, loadAppsError: null}});\n            }\n            break;\n        case UPDATE_APP:\n            if (data?.apps && data.apps?.length > 1) {\n                const previousApp = data.apps[0];\n                const filteredApps = Object.values(state.apps.data).filter(app => app.id !== previousApp.id);\n                const currentApp = {...previousApp, ...data.apps[1]};\n                filteredApps.push(currentApp);\n                const apps = normalize(filteredApps, Schemas.APP_ARRAY).entities.apps || {};\n                return {\n                    ...state,\n                    apps: {\n                        ...state.apps,\n                        data: apps,\n                    }\n                };\n            }\n            break;\n        case DELETE_APP:\n            if (data?.apps?.length) {\n                const appToDelete = data.apps[0];\n                const filteredApps = Object.values(state.apps.data).filter(app => app.id !== appToDelete.id);\n                const apps = normalize(filteredApps, Schemas.APP_ARRAY).entities.apps || {};\n                return {\n                    ...state,\n                    apps: {\n                        ...state.apps,\n                        data: apps,\n                    }\n                }\n            }\n            break;\n        case APP_SERVICES_REQUEST:\n            return merge({}, state, {apps: {isLoadingServices: true, loadServicesError: null}});\n        case APP_SERVICES_SUCCESS:\n            const app = entity && state.apps.data[entity];\n            const services = {services: data?.services || []};\n            const appWithServices = Object.assign(app ? app : [entity], services);\n            const normalizedApp = normalize(appWithServices, Schemas.APP).entities.apps;\n            return merge({}, state, {\n                apps: {\n                    data: normalizedApp,\n                    isLoadingServices: false,\n                    loadServicesError: null\n                }\n            });\n        case APP_SERVICES_FAILURE:\n            return merge({}, state, {apps: {isLoadingServices: false, loadServicesError: error}});\n        case ADD_APP_SERVICES:\n            if (entity) {\n                const app = state.apps.data[entity];\n                if (data?.addAppServices?.length) {\n                    const addAppService = data?.addAppServices[0];\n                    const serviceName = addAppService.service.serviceName;\n                    const service = state.services.data[serviceName];\n                    const launchOrder = addAppService.launchOrder;\n                    const appService = {id: 0, service, launchOrder};\n                    if (service) {\n                        app.services = {...app.services, [serviceName]: appService};\n                        return merge({}, state, {apps: {data: {[app.name]: {...app}}}});\n                    }\n                }\n            }\n            break;\n        case REMOVE_APP_SERVICES:\n            if (entity) {\n                const app = state.apps.data[entity];\n                const filteredServices = (app.services &&\n                    Object.values(app.services)\n                        .filter(appService => !data?.serviceNames?.includes(appService.service.serviceName))) || [];\n                const normalizedServices = normalize(filteredServices, Schemas.APP_SERVICE_ARRAY).entities;\n                const appWithServices = Object.assign(app, !Object.keys(normalizedServices).length ? {services: {}} : normalizedServices);\n                const normalizedApp = normalize(appWithServices, Schemas.APP).entities;\n                return merge({}, state, {\n                    apps: {\n                        ...state.apps,\n                        data: normalizedApp.apps,\n                    }\n                });\n            }\n            break;\n        case APP_RULES_REQUEST:\n            return merge({}, state, {apps: {isLoadingRules: true, loadRulesError: null}});\n        case APP_RULES_FAILURE:\n            return merge({}, state, {apps: {isLoadingRules: false, loadRulesError: error}});\n        case APP_RULES_SUCCESS: {\n            const app = entity && state.apps.data[entity];\n            const rules = {appRules: data?.appRules || []};\n            const appWithRules = Object.assign(app ? app : [entity], rules);\n            const normalizedApp = normalize(appWithRules, Schemas.APP).entities;\n            return merge({}, state, {\n                apps: {\n                    data: normalizedApp.apps,\n                    isLoadingRules: false,\n                    loadRulesError: null\n                }\n            });\n        }\n        case ADD_APP_RULES:\n            if (entity) {\n                const app = state.apps.data[entity];\n                if (data?.rulesNames?.length) {\n                    if (app.appRules) {\n                        app.appRules.unshift(...data.rulesNames);\n                    } else {\n                        app.appRules = data.rulesNames;\n                    }\n                    return merge({}, state, {apps: {data: {[app.name]: {...app}}}});\n                }\n            }\n            break;\n        case REMOVE_APP_RULES:\n            if (entity) {\n                const app = state.apps.data[entity];\n                const filteredRules = app.appRules?.filter(rule => !data?.rulesNames?.includes(rule));\n                const appWithRules = Object.assign(app, {rules: filteredRules});\n                const normalizeApp = normalize(appWithRules, Schemas.APP).entities;\n                return merge({}, state, {\n                    apps: {\n                        ...state.apps,\n                        data: normalizeApp.apps,\n                    }\n                });\n            }\n            break;\n        case APP_SIMULATED_METRICS_REQUEST:\n            return merge({}, state, {apps: {isLoadingSimulatedMetrics: true, loadSimulatedMetricsError: null}});\n        case APP_SIMULATED_METRICS_FAILURE:\n            return merge({}, state, {apps: {isLoadingSimulatedMetrics: false, loadSimulatedMetricsError: error}});\n        case APP_SIMULATED_METRICS_SUCCESS: {\n            const app = entity && state.apps.data[entity];\n            const simulatedMetrics = {appSimulatedMetrics: data?.simulatedAppMetrics || []};\n            const appWithSimulatedMetrics = Object.assign(app ? app : [entity], simulatedMetrics);\n            const normalizedApp = normalize(appWithSimulatedMetrics, Schemas.APP).entities;\n            return merge({}, state, {\n                apps: {\n                    data: normalizedApp.apps,\n                    isLoadingSimulatedMetrics: false,\n                    loadSimulatedMetricsError: null\n                }\n            });\n        }\n        case ADD_APP_SIMULATED_METRICS:\n            if (entity) {\n                const app = state.apps.data[entity];\n                if (data?.simulatedMetricNames?.length) {\n                    if (app.appSimulatedMetrics) {\n                        app.appSimulatedMetrics.unshift(...data.simulatedMetricNames);\n                    } else {\n                        app.appSimulatedMetrics = data.simulatedMetricNames;\n                    }\n                    return merge({}, state, {apps: {data: {[app.name]: {...app}}}});\n                }\n            }\n            break;\n        case REMOVE_APP_SIMULATED_METRICS:\n            if (entity) {\n                const app = state.apps.data[entity];\n                const filteredSimulatedMetrics = app.appSimulatedMetrics?.filter(simulatedMetric => !data?.simulatedMetricNames?.includes(simulatedMetric));\n                const appWithSimulatedMetrics = Object.assign(app, {appSimulatedMetrics: filteredSimulatedMetrics});\n                const normalizeApp = normalize(appWithSimulatedMetrics, Schemas.APP).entities;\n                return merge({}, state, {\n                    apps: {\n                        ...state.apps,\n                        data: normalizeApp.apps,\n                    }\n                });\n            }\n            break;\n        case SERVICES_REQUEST:\n        case SERVICE_REQUEST:\n            return merge({}, state, {services: {isLoadingServices: true, loadServicesError: null}});\n        case SERVICE_FAILURE:\n        case SERVICES_FAILURE:\n            return merge({}, state, {services: {isLoadingServices: false, loadServicesError: error}});\n        case SERVICES_SUCCESS:\n            return {\n                ...state,\n                services: {\n                    ...state.services,\n                    data: merge({}, pick(state.services.data, keys(data?.services)), data?.services),\n                    isLoadingServices: false,\n                    loadServicesError: null,\n                }\n            };\n        case SERVICE_SUCCESS:\n            return {\n                ...state,\n                services: {\n                    ...state.services,\n                    data: merge({}, state.services.data, data?.services),\n                    isLoadingServices: false,\n                    loadServicesError: null,\n                }\n            };\n        case ADD_SERVICE:\n            if (data?.services?.length) {\n                const services = normalize(data?.services, Schemas.SERVICE_ARRAY).entities.services;\n                return merge({}, state, {\n                    services: {\n                        data: services,\n                        isLoadingServices: false,\n                        loadServicesError: null\n                    }\n                });\n            }\n            break;\n        case UPDATE_SERVICE:\n            if (data?.services && data.services?.length > 1) {\n                const previousService = data.services[0];\n                const filteredServices = Object.values(state.services.data).filter(service => service.id !== previousService.id);\n                const currentService = {...previousService, ...data.services[1]};\n                filteredServices.push(currentService);\n                const services = normalize(filteredServices, Schemas.SERVICE_ARRAY).entities.services || {};\n                return {\n                    ...state,\n                    services: {\n                        ...state.services,\n                        data: services,\n                    }\n                };\n            }\n            break;\n        case DELETE_SERVICE:\n            if (data?.services?.length) {\n                const servicesToDelete = data.services[0];\n                const filteredServices = Object.values(state.services.data).filter(service => service.id !== servicesToDelete.id);\n                const services = normalize(filteredServices, Schemas.SERVICE_ARRAY).entities.services || {};\n                return {\n                    ...state,\n                    services: {\n                        ...state.services,\n                        data: services,\n                    }\n                }\n            }\n            break;\n        case SERVICE_APPS_REQUEST:\n            return merge({}, state, {services: {isLoadingApps: true, loadAppsError: null}});\n        case SERVICE_APPS_FAILURE:\n            return merge({}, state, {services: {isLoadingApps: false, loadAppsError: error}});\n        case SERVICE_APPS_SUCCESS: {\n            const service = entity && state.services.data[entity];\n            const apps = {apps: data?.apps || []};\n            const serviceWithApps = Object.assign(service ? service : [entity], apps);\n            const normalizedService = normalize(serviceWithApps, Schemas.SERVICE).entities;\n            return merge({}, state, {\n                services: {\n                    data: normalizedService.services,\n                    isLoadingApps: false,\n                    loadAppsError: null\n                }\n            });\n        }\n        case ADD_SERVICE_APPS:\n            if (entity) {\n                const service = state.services.data[entity];\n                if (data?.appsNames?.length) {\n                    if (service.apps) {\n                        service.apps.unshift(...data.appsNames);\n                    } else {\n                        service.apps = data.appsNames;\n                    }\n                    return merge({}, state, {services: {data: {[service.serviceName]: {...service}}}});\n                }\n            }\n            break;\n        case REMOVE_SERVICE_APPS:\n            if (entity) {\n                const service = state.services.data[entity];\n                const filteredApps = service.apps?.filter(app => !data?.appsNames?.includes(app));\n                const serviceWithApps = Object.assign(service, {apps: filteredApps});\n                const normalizeService = normalize(serviceWithApps, Schemas.SERVICE).entities;\n                return merge({}, state, {\n                    services: {\n                        ...state.services,\n                        data: normalizeService.services,\n                    }\n                });\n            }\n            break;\n        case SERVICE_DEPENDENCIES_REQUEST:\n            return merge({}, state, {services: {isLoadingDependencies: true, loadDependenciesError: null}});\n        case SERVICE_DEPENDENCIES_FAILURE:\n            return merge({}, state, {services: {isLoadingDependencies: false, loadDependenciesError: error}});\n        case SERVICE_DEPENDENCIES_SUCCESS: {\n            const service = entity && state.services.data[entity];\n            const dependencies = {dependencies: data?.dependencies || []};\n            const serviceWithDependencies = Object.assign(service ? service : [entity], dependencies);\n            const normalizedService = normalize(serviceWithDependencies, Schemas.SERVICE).entities;\n            return merge({}, state, {\n                services: {\n                    data: normalizedService.services,\n                    isLoadingDependencies: false,\n                    loadDependenciesError: null\n                }\n            });\n        }\n        case ADD_SERVICE_DEPENDENCIES:\n            if (entity) {\n                const service = state.services.data[entity];\n                if (data?.dependenciesNames?.length) {\n                    if (service.dependencies) {\n                        service.dependencies.unshift(...data.dependenciesNames);\n                    } else {\n                        service.dependencies = data.dependenciesNames;\n                    }\n                    return merge({}, state, {services: {data: {[service.serviceName]: {...service}}}});\n                }\n            }\n            break;\n        case REMOVE_SERVICE_DEPENDENCIES:\n            if (entity) {\n                const service = state.services.data[entity];\n                const filteredDependencies = service.dependencies?.filter(dependency => !data?.dependenciesNames?.includes(dependency));\n                const serviceWithDependencies = Object.assign(service, {dependencies: filteredDependencies});\n                const normalizeService = normalize(serviceWithDependencies, Schemas.SERVICE).entities;\n                return merge({}, state, {\n                    services: {\n                        ...state.services,\n                        data: normalizeService.services,\n                    }\n                });\n            }\n            break;\n        case SERVICE_DEPENDENTS_REQUEST:\n            return merge({}, state, {services: {isLoadingDependents: true, loadDependentsError: null}});\n        case SERVICE_DEPENDENTS_FAILURE:\n            return merge({}, state, {services: {isLoadingDependents: false, loadDependentsError: error}});\n        case SERVICE_DEPENDENTS_SUCCESS: {\n            const service = entity && state.services.data[entity];\n            const dependents = {dependents: data?.dependents || []};\n            const serviceWithDependents = Object.assign(service ? service : [entity], dependents);\n            const normalizedService = normalize(serviceWithDependents, Schemas.SERVICE).entities;\n            return merge({}, state, {\n                services: {\n                    data: normalizedService.services,\n                    isLoadingDependents: false,\n                    loadDependentsError: null\n                }\n            });\n        }\n        case SERVICE_PREDICTIONS_REQUEST:\n            return merge({}, state, {services: {isLoadingPredictions: true, loadPredictionsError: null}});\n        case SERVICE_PREDICTIONS_FAILURE:\n            return merge({}, state, {services: {isLoadingPredictions: false, loadPredictionsError: error}});\n        case SERVICE_PREDICTIONS_SUCCESS: {\n            const service = entity && state.services.data[entity];\n            const predictions = {predictions: data?.predictions || []};\n            const serviceWithPredictions = Object.assign(service ? service : [entity], predictions);\n            const normalizedService = normalize(serviceWithPredictions, Schemas.SERVICE).entities;\n            return merge({}, state, {\n                services: {\n                    data: normalizedService.services,\n                    isLoadingPredictions: false,\n                    loadPredictionsError: null\n                }\n            });\n        }\n        case ADD_SERVICE_PREDICTIONS:\n            if (entity) {\n                const service = state.services.data[entity];\n                if (data?.predictions?.length) {\n                    //FIXME saved entity has id = 0, might be a problem later if updating the entity\n                    const newPredictions = data?.predictions.map(prediction => ({\n                        [prediction.name]: {\n                            ...prediction,\n                            id: 0\n                        }\n                    }));\n                    service.predictions = merge({}, service.predictions, ...newPredictions);\n                    return merge({}, state, {services: {data: {[service.serviceName]: {...service}}}});\n                }\n            }\n            break;\n        case REMOVE_SERVICE_PREDICTIONS:\n            if (entity) {\n                const service = state.services.data[entity];\n                const filteredPredictions = Object.values(service.predictions || [])\n                    .filter(prediction => !data?.predictionsNames?.includes(prediction.name));\n                const normalizedPredictions = normalize(filteredPredictions, Schemas.SERVICE_PREDICTION_ARRAY).entities;\n                const serviceWithPredictions = Object.assign(service, !Object.keys(normalizedPredictions).length ? {predictions: {}} : normalizedPredictions);\n                const normalizeService = normalize(serviceWithPredictions, Schemas.SERVICE).entities;\n                return merge({}, state, {\n                    services: {\n                        ...state.services,\n                        data: normalizeService.services,\n                    }\n                });\n            }\n            break;\n        case SERVICE_RULES_REQUEST:\n            return merge({}, state, {services: {isLoadingRules: true, loadRulesError: null}});\n        case SERVICE_RULES_FAILURE:\n            return merge({}, state, {services: {isLoadingRules: false, loadRulesError: error}});\n        case SERVICE_RULES_SUCCESS: {\n            const service = entity && state.services.data[entity];\n            const rules = {serviceRules: data?.serviceRules || []};\n            const serviceWithRules = Object.assign(service ? service : [entity], rules);\n            const normalizedService = normalize(serviceWithRules, Schemas.SERVICE).entities;\n            return merge({}, state, {\n                services: {\n                    data: normalizedService.services,\n                    isLoadingRules: false,\n                    loadRulesError: null\n                }\n            });\n        }\n        case ADD_SERVICE_RULES:\n            if (entity) {\n                const service = state.services.data[entity];\n                if (data?.rulesNames?.length) {\n                    if (service.serviceRules) {\n                        service.serviceRules.unshift(...data.rulesNames);\n                    } else {\n                        service.serviceRules = data.rulesNames;\n                    }\n                    return merge({}, state, {services: {data: {[service.serviceName]: {...service}}}});\n                }\n            }\n            break;\n        case REMOVE_SERVICE_RULES:\n            if (entity) {\n                const service = state.services.data[entity];\n                const filteredRules = service.serviceRules?.filter(rule => !data?.rulesNames?.includes(rule));\n                const serviceWithRules = Object.assign(service, {serviceRules: filteredRules});\n                const normalizeService = normalize(serviceWithRules, Schemas.SERVICE).entities;\n                return merge({}, state, {\n                    services: {\n                        ...state.services,\n                        data: normalizeService.services,\n                    }\n                });\n            }\n            break;\n        case SERVICE_SIMULATED_METRICS_REQUEST:\n            return merge({}, state, {services: {isLoadingSimulatedMetrics: true, loadSimulatedMetricsError: null}});\n        case SERVICE_SIMULATED_METRICS_FAILURE:\n            return merge({}, state, {services: {isLoadingSimulatedMetrics: false, loadSimulatedMetricsError: error}});\n        case SERVICE_SIMULATED_METRICS_SUCCESS: {\n            const service = entity && state.services.data[entity];\n            const simulatedMetrics = {serviceSimulatedMetrics: data?.simulatedServiceMetrics || []};\n            const serviceWithSimulatedMetrics = Object.assign(service ? service : [entity], simulatedMetrics);\n            const normalizedService = normalize(serviceWithSimulatedMetrics, Schemas.SERVICE).entities;\n            return merge({}, state, {\n                services: {\n                    data: normalizedService.services,\n                    isLoadingSimulatedMetrics: false,\n                    loadSimulatedMetricsError: null\n                }\n            });\n        }\n        case ADD_SERVICE_SIMULATED_METRICS:\n            if (entity) {\n                const service = state.services.data[entity];\n                if (data?.simulatedMetricNames?.length) {\n                    if (service.serviceSimulatedMetrics) {\n                        service.serviceSimulatedMetrics.unshift(...data.simulatedMetricNames);\n                    } else {\n                        service.serviceSimulatedMetrics = data.simulatedMetricNames;\n                    }\n                    return merge({}, state, {services: {data: {[service.serviceName]: {...service}}}});\n                }\n            }\n            break;\n        case REMOVE_SERVICE_SIMULATED_METRICS:\n            if (entity) {\n                const service = state.services.data[entity];\n                const filteredSimulatedMetrics = service.serviceSimulatedMetrics?.filter(simulatedMetric => !data?.simulatedMetricNames?.includes(simulatedMetric));\n                const serviceWithSimulatedMetrics = Object.assign(service, {serviceSimulatedMetrics: filteredSimulatedMetrics});\n                const normalizeService = normalize(serviceWithSimulatedMetrics, Schemas.SERVICE).entities;\n                return merge({}, state, {\n                    services: {\n                        ...state.services,\n                        data: normalizeService.services,\n                    }\n                });\n            }\n            break;\n        case CONTAINERS_REQUEST:\n        case CONTAINER_REQUEST:\n            return merge({}, state, {containers: {isLoadingContainers: true, loadContainersError: null}});\n        case CONTAINERS_FAILURE:\n        case CONTAINER_FAILURE:\n            return merge({}, state, {containers: {isLoadingContainers: false, loadContainersError: error}});\n        case CONTAINERS_SUCCESS:\n            return {\n                ...state,\n                containers: {\n                    ...state.containers,\n                    data: merge({}, pick(state.containers.data, keys(data?.containers)), data?.containers),\n                    isLoadingContainers: false,\n                    loadContainersError: null,\n                }\n            };\n        case CONTAINER_SUCCESS:\n            return {\n                ...state,\n                containers: {\n                    ...state.containers,\n                    data: merge({}, state.containers.data, data?.containers),\n                    isLoadingContainers: false,\n                    loadContainersError: null,\n                }\n            };\n        case ADD_CONTAINERS:\n            if (data?.containers?.length) {\n                const containers = normalize(data?.containers, Schemas.CONTAINER_ARRAY).entities.containers;\n                return merge({}, state, {\n                    containers: {\n                        data: containers,\n                        isLoadingContainers: false,\n                        loadContainersError: null\n                    }\n                });\n            }\n            break;\n        case DELETE_CONTAINER:\n            if (data?.containers?.length) {\n                const containersToDelete = data.containers[0];\n                const filteredContainers = Object.values(state.containers.data).filter(container => container.id !== containersToDelete.id);\n                const containers = normalize(filteredContainers, Schemas.CONTAINER_ARRAY).entities.containers || {};\n                return {\n                    ...state,\n                    containers: {\n                        ...state.containers,\n                        data: containers,\n                    }\n                }\n            }\n            break;\n        case CONTAINER_LOGS_REQUEST:\n            return merge({}, state, {containers: {isLoadingLogs: true, loadLogsError: null}});\n        case CONTAINER_LOGS_FAILURE:\n            return merge({}, state, {containers: {isLoadingLogs: false, loadLogsError: error}});\n        case CONTAINER_LOGS_SUCCESS:\n            const container = entity && state.containers.data[entity];\n            const logs = {logs: data || \"\"};\n            const containerWithLogs = Object.assign(container ? container : [entity], logs);\n            const normalizedContainer = normalize(containerWithLogs, Schemas.CONTAINER).entities;\n            return merge({}, state, {\n                containers: {\n                    ...state.containers,\n                    data: normalizedContainer.containers,\n                    isLoadingLogs: false,\n                    loadLogsError: null,\n                },\n            });\n        case CONTAINER_RULES_REQUEST:\n            return merge({}, state, {containers: {isLoadingRules: true, loadRulesError: null}});\n        case CONTAINER_RULES_FAILURE:\n            return merge({}, state, {containers: {isLoadingRules: false, loadRulesError: error}});\n        case CONTAINER_RULES_SUCCESS: {\n            const container = entity && state.containers.data[entity];\n            const rules = {containerRules: data?.containerRules || []};\n            const containerWithRules = Object.assign(container ? container : [entity], rules);\n            const normalizedContainer = normalize(containerWithRules, Schemas.CONTAINER).entities;\n            return merge({}, state, {\n                containers: {\n                    data: normalizedContainer.containers,\n                    isLoadingRules: false,\n                    loadRulesError: null\n                }\n            });\n        }\n        case ADD_CONTAINER_RULES:\n            if (entity) {\n                const container = state.containers.data[entity];\n                if (data?.rulesNames?.length) {\n                    if (container.containerRules) {\n                        container.containerRules.unshift(...data.rulesNames);\n                    } else {\n                        container.containerRules = data.rulesNames;\n                    }\n                    return merge({}, state, {containers: {data: {[container.containerId]: {...container}}}});\n                }\n            }\n            break;\n        case REMOVE_CONTAINER_RULES:\n            if (entity) {\n                const container = state.containers.data[entity];\n                const filteredRules = container.containerRules?.filter(rule => !data?.rulesNames?.includes(rule));\n                const containerWithRules = Object.assign(container, {rules: filteredRules});\n                const normalizeContainer = normalize(containerWithRules, Schemas.CONTAINER).entities;\n                return merge({}, state, {\n                    containers: {\n                        ...state.containers,\n                        data: normalizeContainer.containers,\n                    }\n                });\n            }\n            break;\n        case CONTAINER_SIMULATED_METRICS_REQUEST:\n            return merge({}, state, {containers: {isLoadingSimulatedMetrics: true, loadSimulatedMetricsError: null}});\n        case CONTAINER_SIMULATED_METRICS_FAILURE:\n            return merge({}, state, {containers: {isLoadingSimulatedMetrics: false, loadSimulatedMetricsError: error}});\n        case CONTAINER_SIMULATED_METRICS_SUCCESS: {\n            const container = entity && state.containers.data[entity];\n            const simulatedMetrics = {containerSimulatedMetrics: data?.simulatedContainerMetrics || []};\n            const containerWithSimulatedMetrics = Object.assign(container ? container : [entity], simulatedMetrics);\n            const normalizedContainer = normalize(containerWithSimulatedMetrics, Schemas.CONTAINER).entities;\n            return merge({}, state, {\n                containers: {\n                    data: normalizedContainer.containers,\n                    isLoadingSimulatedMetrics: false,\n                    loadSimulatedMetricsError: null\n                }\n            });\n        }\n        case ADD_CONTAINER_SIMULATED_METRICS:\n            if (entity) {\n                const container = state.containers.data[entity];\n                if (data?.simulatedMetricNames?.length) {\n                    if (container.containerSimulatedMetrics) {\n                        container.containerSimulatedMetrics.unshift(...data.simulatedMetricNames);\n                    } else {\n                        container.containerSimulatedMetrics = data.simulatedMetricNames;\n                    }\n                    return merge({}, state, {containers: {data: {[container.containerId]: {...container}}}});\n                }\n            }\n            break;\n        case REMOVE_CONTAINER_SIMULATED_METRICS:\n            if (entity) {\n                const container = state.containers.data[entity];\n                const filteredSimulatedMetrics = container.containerSimulatedMetrics?.filter(simulatedMetric => !data?.simulatedMetricNames?.includes(simulatedMetric));\n                const containerWithSimulatedMetrics = Object.assign(container, {containerSimulatedMetrics: filteredSimulatedMetrics});\n                const normalizeContainer = normalize(containerWithSimulatedMetrics, Schemas.CONTAINER).entities;\n                return merge({}, state, {\n                    containers: {\n                        ...state.containers,\n                        data: normalizeContainer.containers,\n                    }\n                });\n            }\n            break;\n        case CLOUD_HOSTS_REQUEST:\n        case CLOUD_HOST_REQUEST:\n            return merge({}, state, {hosts: {cloud: {isLoadingHosts: true, loadHostsError: null}}});\n        case CLOUD_HOSTS_FAILURE:\n        case CLOUD_HOST_FAILURE:\n            return merge({}, state, {hosts: {cloud: {isLoadingHosts: false, loadHostsError: error}}});\n        case CLOUD_HOSTS_SUCCESS:\n            return {\n                ...state,\n                hosts: {\n                    ...state.hosts,\n                    cloud: {\n                        ...state.hosts.cloud,\n                        data: merge({}, pick(state.hosts.cloud.data, keys(data?.cloudHosts)), data?.cloudHosts),\n                        isLoadingHosts: false,\n                        loadHostsError: null,\n                    }\n                }\n            };\n        case CLOUD_HOST_SUCCESS:\n            return {\n                ...state,\n                hosts: {\n                    ...state.hosts,\n                    cloud: {\n                        ...state.hosts.cloud,\n                        data: merge({}, state.hosts.cloud.data, data?.cloudHosts),\n                        isLoadingHosts: false,\n                        loadHostsError: null,\n                    }\n                }\n            };\n        case ADD_CLOUD_HOST:\n            if (data?.cloudHosts?.length) {\n                const cloudHosts = normalize(data?.cloudHosts, Schemas.CLOUD_HOST_ARRAY).entities.cloudHosts;\n                return merge({}, state, {\n                    hosts: {\n                        cloud: {\n                            data: cloudHosts,\n                            isLoadingCloudHosts: false,\n                            loadCloudHostsError: null\n                        }\n                    }\n                });\n            }\n            break;\n        case UPDATE_CLOUD_HOST:\n            if (data?.cloudHosts && data.cloudHosts?.length > 1) {\n                const previousCloudHost = data.cloudHosts[0];\n                const filteredCloudHosts = Object.values(state.hosts.cloud.data).filter(cloudHost => cloudHost.id !== previousCloudHost.id);\n                const currentCloudHost = {...previousCloudHost, ...data.cloudHosts[1]};\n                filteredCloudHosts.push(currentCloudHost);\n                const cloudHosts = normalize(filteredCloudHosts, Schemas.CLOUD_HOST_ARRAY).entities.cloudHosts || {};\n                return {\n                    ...state,\n                    hosts: {\n                        ...state.hosts,\n                        cloud: {\n                            ...state.hosts.cloud,\n                            data: cloudHosts,\n                        }\n                    }\n                }\n            }\n            break;\n        case DELETE_CLOUD_HOST:\n            if (data?.cloudHosts?.length) {\n                const cloudHostsToDelete = data.cloudHosts[0];\n                const filteredCloudHosts = Object.values(state.hosts.cloud.data).filter(cloudHost => cloudHost.id !== cloudHostsToDelete.id);\n                const cloudHosts = normalize(filteredCloudHosts, Schemas.CLOUD_HOST_ARRAY).entities.cloudHosts || {};\n                return {\n                    ...state,\n                    hosts: {\n                        ...state.hosts,\n                        cloud: {\n                            ...state.hosts.cloud,\n                            data: cloudHosts,\n                        }\n                    }\n                }\n            }\n            break;\n        case CLOUD_HOST_RULES_REQUEST:\n            return merge({}, state, {hosts: {cloud: {isLoadingRules: true, loadRulesError: null}}});\n        case CLOUD_HOST_RULES_FAILURE:\n            return merge({}, state, {hosts: {cloud: {isLoadingRules: false, loadRulesError: error}}});\n        case CLOUD_HOST_RULES_SUCCESS: {\n            const cloudHost = entity && state.hosts.cloud.data[entity];\n            const rules = {hostRules: data?.hostRules || []};\n            const hostWithRules = Object.assign(cloudHost ? cloudHost : [entity], rules);\n            const normalizedCloudHost = normalize(hostWithRules, Schemas.CLOUD_HOST).entities.cloudHosts;\n            return {\n                ...state,\n                hosts: {\n                    ...state.hosts,\n                    cloud: {\n                        ...state.hosts.cloud,\n                        data: merge({}, state.hosts.cloud.data, normalizedCloudHost),\n                        isLoadingRules: false,\n                        loadRulesError: null,\n                    }\n                }\n            }\n        }\n        case ADD_CLOUD_HOST_RULE:\n            if (entity && data?.rulesNames?.length) {\n                const cloudHost = state.hosts.cloud.data[entity];\n                if (cloudHost) {\n                    if (cloudHost.hostRules) {\n                        cloudHost.hostRules.unshift(...data.rulesNames);\n                    } else {\n                        cloudHost.hostRules = data.rulesNames;\n                    }\n                    const normalizedCloudHost = normalize(cloudHost, Schemas.CLOUD_HOST).entities.cloudHosts;\n                    return merge({}, state, {hosts: {cloud: {data: {...normalizedCloudHost}}}});\n                }\n                return state;\n            }\n            break;\n        case REMOVE_CLOUD_HOST_RULES:\n            if (entity) {\n                const cloudHost = state.hosts.cloud.data[entity];\n                const filteredRules = cloudHost.hostRules?.filter(rule => !data?.rulesNames?.includes(rule));\n                const cloudHostWithRules = Object.assign(cloudHost, {hostRules: filteredRules});\n                const normalizedCloudHost = normalize(cloudHostWithRules, Schemas.CLOUD_HOST).entities.cloudHosts;\n                return merge({}, state, {hosts: {cloud: {data: {...normalizedCloudHost}}}});\n            }\n            break;\n        case CLOUD_HOST_SIMULATED_METRICS_REQUEST:\n            return merge({}, state, {\n                hosts: {\n                    cloud: {\n                        isLoadingSimulatedMetrics: true,\n                        loadSimulatedMetricsError: null\n                    }\n                }\n            });\n        case CLOUD_HOST_SIMULATED_METRICS_FAILURE:\n            return merge({}, state, {\n                hosts: {\n                    cloud: {\n                        isLoadingSimulatedMetrics: false,\n                        loadSimulatedMetricsError: error\n                    }\n                }\n            });\n        case CLOUD_HOST_SIMULATED_METRICS_SUCCESS: {\n            const cloudHost = entity && state.hosts.cloud.data[entity];\n            const simulatedMetrics = {hostSimulatedMetrics: data?.simulatedHostMetrics || []};\n            const cloudHostWithSimulatedMetrics = Object.assign(cloudHost ? cloudHost : [entity], simulatedMetrics);\n            const normalizedCloudHost = normalize(cloudHostWithSimulatedMetrics, Schemas.CLOUD_HOST).entities.cloudHosts;\n            return {\n                ...state,\n                hosts: {\n                    ...state.hosts,\n                    cloud: {\n                        ...state.hosts.cloud,\n                        data: merge({}, state.hosts.cloud.data, normalizedCloudHost),\n                        isLoadingSimulatedMetrics: false,\n                        loadSimulatedMetricsError: null,\n                    }\n                }\n            }\n        }\n        case ADD_CLOUD_HOST_SIMULATED_METRICS:\n            if (entity) {\n                const cloudHost = state.hosts.cloud.data[entity];\n                if (data?.simulatedMetricNames?.length) {\n                    if (cloudHost.hostSimulatedMetrics) {\n                        cloudHost.hostSimulatedMetrics.unshift(...data.simulatedMetricNames);\n                    } else {\n                        cloudHost.hostSimulatedMetrics = data.simulatedMetricNames;\n                    }\n                    const normalizedCloudHost = normalize(cloudHost, Schemas.CLOUD_HOST).entities.cloudHosts;\n                    return merge({}, state, {hosts: {cloud: {data: {...normalizedCloudHost}}}});\n                }\n            }\n            break;\n        case REMOVE_CLOUD_HOST_SIMULATED_METRICS:\n            if (entity) {\n                const cloudHost = state.hosts.cloud.data[entity];\n                const filteredSimulatedMetrics = cloudHost.hostSimulatedMetrics?.filter(simulatedMetric => !data?.simulatedMetricNames?.includes(simulatedMetric));\n                const cloudHostWithSimulatedMetrics = Object.assign(cloudHost, {hostSimulatedMetrics: filteredSimulatedMetrics});\n                const normalizedCloudHost = normalize(cloudHostWithSimulatedMetrics, Schemas.CLOUD_HOST).entities.cloudHosts;\n                return merge({}, state, {hosts: {cloud: {data: {...normalizedCloudHost}}}});\n            }\n            break;\n        case CLOUD_REGIONS_REQUEST:\n            return merge({}, state, {hosts: {cloud: {regions: {isLoadingRegions: true, loadRegionsError: null}}}});\n        case CLOUD_REGIONS_FAILURE:\n            return merge({}, state, {hosts: {cloud: {regions: {isLoadingRegions: false, loadRegionsError: error}}}});\n        case CLOUD_REGIONS_SUCCESS:\n            return {\n                ...state,\n                hosts: {\n                    ...state.hosts,\n                    cloud: {\n                        ...state.hosts.cloud,\n                        regions: {\n                            data: merge([], pick(state.hosts.cloud.regions.data, keys(data)), data),\n                            isLoadingRegions: false,\n                            loadRegionsError: null,\n                        }\n                    }\n                }\n            };\n\n        case EDGE_HOSTS_REQUEST:\n        case EDGE_HOST_REQUEST:\n            return merge({}, state, {hosts: {edge: {isLoadingHosts: true, loadHostsError: null}}});\n        case EDGE_HOSTS_FAILURE:\n        case EDGE_HOST_FAILURE:\n            return merge({}, state, {hosts: {edge: {isLoadingHosts: false, loadHostsError: error}}});\n        case EDGE_HOSTS_SUCCESS:\n            return {\n                ...state,\n                hosts: {\n                    ...state.hosts,\n                    edge: {\n                        ...state.hosts.edge,\n                        data: merge({}, pick(state.hosts.edge.data, keys(data?.edgeHosts)), data?.edgeHosts),\n                        isLoadingHosts: false,\n                        loadHostsError: null,\n                    }\n                }\n            };\n        case EDGE_HOST_SUCCESS:\n            return {\n                ...state,\n                hosts: {\n                    ...state.hosts,\n                    edge: {\n                        ...state.hosts.edge,\n                        data: merge({}, state.hosts.edge.data, data?.edgeHosts),\n                        isLoadingHosts: false,\n                        loadHostsError: null,\n                    }\n                }\n            };\n        case ADD_EDGE_HOST:\n            if (data?.edgeHosts?.length) {\n                const edgeHosts = normalize(data?.edgeHosts, Schemas.EDGE_HOST_ARRAY).entities.edgeHosts;\n                return merge({}, state, {\n                    hosts: {\n                        edge: {\n                            data: edgeHosts,\n                            isLoadingEdgeHosts: false,\n                            loadEdgeHostsError: null\n                        }\n                    }\n                });\n            }\n            break;\n        case UPDATE_EDGE_HOST:\n            if (data?.edgeHosts && data.edgeHosts?.length > 1) {\n                const previousEdgeHost = data.edgeHosts[0];\n                const filteredEdgeHosts = Object.values(state.hosts.edge.data).filter(edgeHost => edgeHost.id !== previousEdgeHost.id);\n                const currentEdgeHost = {...previousEdgeHost, ...data.edgeHosts[1]};\n                filteredEdgeHosts.push(currentEdgeHost);\n                const edgeHosts = normalize(filteredEdgeHosts, Schemas.EDGE_HOST_ARRAY).entities.edgeHosts || {};\n                return {\n                    ...state,\n                    hosts: {\n                        ...state.hosts,\n                        edge: {\n                            ...state.hosts.edge,\n                            data: edgeHosts,\n                        }\n                    }\n                }\n            }\n            break;\n        case DELETE_EDGE_HOST:\n            if (data?.edgeHosts?.length) {\n                const edgeHostsToDelete = data.edgeHosts[0];\n                const filteredEdgeHosts = Object.values(state.hosts.edge.data).filter(edgeHost => edgeHost.id !== edgeHostsToDelete.id);\n                const edgeHosts = normalize(filteredEdgeHosts, Schemas.EDGE_HOST_ARRAY).entities.edgeHosts || {};\n                return {\n                    ...state,\n                    hosts: {\n                        ...state.hosts,\n                        edge: {\n                            ...state.hosts.edge,\n                            data: edgeHosts,\n                        }\n                    }\n                }\n            }\n            break;\n        case EDGE_HOST_RULES_REQUEST:\n            return merge({}, state, {hosts: {edge: {isLoadingRules: true, loadRulesError: null}}});\n        case EDGE_HOST_RULES_FAILURE:\n            return merge({}, state, {hosts: {edge: {isLoadingRules: false, loadRulesError: error}}});\n        case EDGE_HOST_RULES_SUCCESS: {\n            const host = entity && state.hosts.edge.data[entity];\n            const rules = {hostRules: data?.hostRules || []};\n            const hostWithRules = Object.assign(host ? host : [entity], rules);\n            const normalizedHost = normalize(hostWithRules, Schemas.EDGE_HOST).entities;\n            return {\n                ...state,\n                hosts: {\n                    ...state.hosts,\n                    edge: {\n                        ...state.hosts.edge,\n                        data: normalizedHost.edgeHosts || {},\n                        isLoadingRules: false,\n                        loadRulesError: null,\n                    }\n                }\n            };\n        }\n        case ADD_EDGE_HOST_RULES:\n            if (entity && data?.rulesNames?.length) {\n                const edgeHost = state.hosts.edge.data[entity];\n                if (edgeHost) {\n                    if (edgeHost.hostRules) {\n                        edgeHost.hostRules.unshift(...data.rulesNames);\n                    } else {\n                        edgeHost.hostRules = data.rulesNames;\n                    }\n                    const normalizedEdgeHost = normalize(edgeHost, Schemas.EDGE_HOST).entities.edgeHosts;\n                    return merge({}, state, {hosts: {edge: {data: {...normalizedEdgeHost}}}});\n                }\n                return state;\n            }\n            break;\n        case REMOVE_EDGE_HOST_RULES:\n            if (entity) {\n                const edgeHost = state.hosts.edge.data[entity];\n                const filteredRules = edgeHost.hostRules?.filter(rule => !data?.rulesNames?.includes(rule));\n                const edgeHostWithRules = Object.assign(edgeHost, {hostRules: filteredRules});\n                const normalizedEdgeHost = normalize(edgeHostWithRules, Schemas.EDGE_HOST).entities.edgeHosts;\n                return merge({}, state, {hosts: {edge: {data: {...normalizedEdgeHost}}}});\n            }\n            break;\n        case EDGE_HOST_SIMULATED_METRICS_REQUEST:\n            return merge({}, state, {\n                hosts: {\n                    edge: {\n                        isLoadingSimulatedMetrics: true,\n                        loadSimulatedMetricsError: null\n                    }\n                }\n            });\n        case EDGE_HOST_SIMULATED_METRICS_FAILURE:\n            return merge({}, state, {\n                hosts: {\n                    edge: {\n                        isLoadingSimulatedMetrics: false,\n                        loadSimulatedMetricsError: error\n                    }\n                }\n            });\n        case EDGE_HOST_SIMULATED_METRICS_SUCCESS: {\n            const edgeHost = entity && state.hosts.edge.data[entity];\n            const simulatedMetrics = {hostSimulatedMetrics: data?.simulatedHostMetrics || []};\n            const edgeHostWithSimulatedMetrics = Object.assign(edgeHost ? edgeHost : [entity], simulatedMetrics);\n            const normalizedEdgeHost = normalize(edgeHostWithSimulatedMetrics, Schemas.EDGE_HOST).entities.edgeHosts;\n            return {\n                ...state,\n                hosts: {\n                    ...state.hosts,\n                    edge: {\n                        ...state.hosts.edge,\n                        data: merge({}, state.hosts.edge.data, normalizedEdgeHost),\n                        isLoadingSimulatedMetrics: false,\n                        loadSimulatedMetricsError: null,\n                    }\n                }\n            }\n        }\n        case ADD_EDGE_HOST_SIMULATED_METRICS:\n            if (entity) {\n                const edgeHost = state.hosts.edge.data[entity];\n                if (data?.simulatedMetricNames?.length) {\n                    if (edgeHost.hostSimulatedMetrics) {\n                        edgeHost.hostSimulatedMetrics.unshift(...data.simulatedMetricNames);\n                    } else {\n                        edgeHost.hostSimulatedMetrics = data.simulatedMetricNames;\n                    }\n                    const normalizedEdgeHost = normalize(edgeHost, Schemas.EDGE_HOST).entities.edgeHosts;\n                    return merge({}, state, {hosts: {edge: {data: {...normalizedEdgeHost}}}});\n                }\n            }\n            break;\n        case REMOVE_EDGE_HOST_SIMULATED_METRICS:\n            if (entity) {\n                const edgeHost = state.hosts.edge.data[entity];\n                const filteredSimulatedMetrics = edgeHost.hostSimulatedMetrics?.filter(simulatedMetric => !data?.simulatedMetricNames?.includes(simulatedMetric));\n                const edgeHostWithSimulatedMetrics = Object.assign(edgeHost, {hostSimulatedMetrics: filteredSimulatedMetrics});\n                const normalizedEdgeHost = normalize(edgeHostWithSimulatedMetrics, Schemas.EDGE_HOST).entities.edgeHosts;\n                return merge({}, state, {hosts: {edge: {data: {...normalizedEdgeHost}}}});\n            }\n            break;\n        case NODES_REQUEST:\n        case NODE_REQUEST:\n            return merge({}, state, {nodes: {isLoadingNodes: true, loadNodesError: null}});\n        case NODES_FAILURE:\n        case NODE_FAILURE:\n            return merge({}, state, {nodes: {isLoadingNodes: false, loadNodesError: error}});\n        case NODES_SUCCESS:\n            return {\n                ...state,\n                nodes: {\n                    ...state.nodes,\n                    data: merge({}, pick(state.nodes.data, keys(data?.nodes)), data?.nodes),\n                    isLoadingNodes: false,\n                    loadNodesError: null,\n                }\n            };\n        case NODE_SUCCESS:\n            return {\n                ...state,\n                nodes: {\n                    data: merge({}, state.nodes.data, data?.nodes),\n                    isLoadingNodes: false,\n                    loadNodesError: null,\n                }\n            };\n        case ADD_NODES:\n            if (data?.nodes?.length) {\n                const nodes = normalize(data?.nodes, Schemas.NODE_ARRAY).entities.nodes;\n                return merge({}, state, {nodes: {data: nodes, isLoadingNodes: false, loadNodesError: null}});\n            }\n            break;\n        case UPDATE_NODE:\n            if (data?.nodes && data.nodes?.length > 1) {\n                const previousNode = data.nodes[0];\n                const filteredNodes = Object.values(state.nodes.data).filter(node => node.id !== previousNode.id);\n                const currentNode = {...previousNode, ...data.nodes[1]};\n                filteredNodes.push(currentNode);\n                const nodes = normalize(filteredNodes, Schemas.NODE_ARRAY).entities.nodes || {};\n                return {\n                    ...state,\n                    nodes: {\n                        ...state.nodes,\n                        data: nodes,\n                    }\n                }\n            }\n            break;\n        case DELETE_NODE:\n            if (data?.nodes?.length) {\n                const nodesToDelete = data.nodes[0];\n                const filteredNodes = Object.values(state.nodes.data).filter(node => node.id !== nodesToDelete.id);\n                const nodes = normalize(filteredNodes, Schemas.NODE_ARRAY).entities.nodes || {};\n                return {\n                    ...state,\n                    nodes: {\n                        ...state.nodes,\n                        data: nodes,\n                    }\n                }\n            }\n            break;\n        case REGIONS_REQUEST:\n        case REGION_REQUEST:\n            return merge({}, state, {regions: {isLoadingRegions: true, loadRegionsError: null}});\n        case REGIONS_FAILURE:\n        case REGION_FAILURE:\n            return merge({}, state, {regions: {isLoadingRegions: false, loadRegionsError: error}});\n        case REGIONS_SUCCESS:\n            return {\n                ...state,\n                regions: {\n                    ...state.regions,\n                    data: merge({}, pick(state.regions.data, keys(data?.regions)), data?.regions),\n                    isLoadingRegions: false,\n                    loadRegionsError: null,\n                }\n            };\n        case REGION_SUCCESS:\n            return {\n                ...state,\n                regions: {\n                    data: merge({}, state.regions.data, data?.regions),\n                    isLoadingRegions: false,\n                    loadRegionsError: null,\n                }\n            };\n        /*case ADD_REGION:\n            if (data?.regions?.length) {\n                const regions = normalize(data?.regions, Schemas.REGION_ARRAY).entities.regions;\n                return merge({}, state, {regions: {data: regions, isLoadingRegions: false, loadRegionsError: null}});\n            }\n            break;\n        case UPDATE_REGION:\n            if (data?.regions && data.regions?.length > 1) {\n                const previousRegion = data.regions[0];\n                const filteredRegions = Object.values(state.regions.data).filter(region => region.id !== previousRegion.id);\n                const currentRegion = {...previousRegion, ...data.regions[1]};\n                filteredRegions.push(currentRegion);\n                const regions = normalize(filteredRegions, Schemas.REGION_ARRAY).entities.regions || {};\n                return {\n                    ...state,\n                    regions: {\n                        ...state.regions,\n                        data: regions,\n                    }\n                }\n            }\n            break;\n        case DELETE_REGION:\n            if (data?.regions?.length) {\n                const regionToDelete = data.regions[0];\n                const filteredRegions = Object.values(state.regions.data).filter(region => region.id !== regionToDelete.id);\n                const regions = normalize(filteredRegions, Schemas.REGION_ARRAY).entities.regions || {};\n                return {\n                    ...state,\n                    regions: {\n                        ...state.regions,\n                        data: regions,\n                    }\n                }\n            }\n            break;*/\n        case RULES_HOST_REQUEST:\n        case RULE_HOST_REQUEST:\n            return merge({}, state, {rules: {hosts: {isLoadingRules: true, loadRulesError: null}}});\n        case RULES_HOST_FAILURE:\n        case RULE_HOST_FAILURE:\n            return merge({}, state, {rules: {hosts: {isLoadingRules: false, loadRulesError: error}}});\n        case RULES_HOST_SUCCESS:\n            return {\n                ...state,\n                rules: {\n                    ...state.rules,\n                    hosts: {\n                        ...state.rules.hosts,\n                        data: merge({}, pick(state.rules.hosts.data, keys(data?.hostRules)), data?.hostRules),\n                        isLoadingRules: false,\n                        loadRulesError: null,\n                    }\n                }\n            };\n        case RULE_HOST_SUCCESS:\n            return {\n                ...state,\n                rules: {\n                    ...state.rules,\n                    hosts: {\n                        ...state.rules.hosts,\n                        data: merge({}, state.rules.hosts.data, data?.hostRules),\n                        isLoadingRules: false,\n                        loadRulesError: null,\n                    }\n                }\n            };\n        case ADD_RULE_HOST:\n            if (data?.hostRules?.length) {\n                const hostRules = normalize(data?.hostRules, Schemas.RULE_HOST_ARRAY).entities.hostRules;\n                return merge({}, state, {\n                    rules: {\n                        hosts: {\n                            data: hostRules,\n                            isLoadingRules: false,\n                            loadRulesError: null\n                        }\n                    }\n                });\n            }\n            break;\n        case UPDATE_RULE_HOST:\n            if (data?.hostRules && data.hostRules?.length > 1) {\n                const previousHostRule = data.hostRules[0];\n                const filteredHostRules = Object.values(state.rules.hosts.data)\n                    .filter(hostRule => hostRule.id !== previousHostRule.id);\n                const currentHostRule = {...previousHostRule, ...data.hostRules[1]};\n                filteredHostRules.push(currentHostRule);\n                const hostRules = normalize(filteredHostRules, Schemas.RULE_HOST_ARRAY).entities.hostRules || {};\n                return {\n                    ...state,\n                    rules: {\n                        ...state.rules,\n                        hosts: {\n                            ...state.rules.hosts,\n                            data: hostRules,\n                        }\n                    }\n                }\n            }\n            break;\n        case DELETE_RULE_HOST:\n            if (data?.hostRules?.length) {\n                const hostRulesToDelete = data.hostRules[0];\n                const filteredHostRules = Object.values(state.rules.hosts.data).filter(hostRule => hostRule.id !== hostRulesToDelete.id);\n                const hostRules = normalize(filteredHostRules, Schemas.RULE_HOST_ARRAY).entities.hostRules || {};\n                return {\n                    ...state,\n                    rules: {\n                        ...state.rules,\n                        hosts: {\n                            ...state.rules.hosts,\n                            data: hostRules,\n                        }\n                    }\n                }\n            }\n            break;\n        case RULE_HOST_CONDITIONS_REQUEST:\n            return merge({}, state, {rules: {hosts: {isLoadingConditions: true, loadConditionsError: null}}});\n        case RULE_HOST_CONDITIONS_FAILURE:\n            return merge({}, state, {rules: {hosts: {isLoadingConditions: false, loadConditionsError: error}}});\n        case RULE_HOST_CONDITIONS_SUCCESS: {\n            const rule = entity && state.rules.hosts.data[entity];\n            const conditions = {conditions: data?.conditions || []};\n            const ruleWithConditions = Object.assign(rule ? rule : [entity], conditions);\n            const normalizedRule = normalize(ruleWithConditions, Schemas.RULE_HOST).entities;\n            return merge({}, state, {\n                rules: {\n                    ...state.rules,\n                    hosts: {\n                        ...state.rules.hosts,\n                        data: normalizedRule.hostRules,\n                        isLoadingConditions: false,\n                        loadConditionsError: null,\n                    },\n                }\n            });\n        }\n        case ADD_RULE_HOST_CONDITIONS:\n            if (entity && data?.conditionsNames?.length) {\n                const rule = state.rules.hosts.data[entity];\n                if (rule) {\n                    if (rule.conditions) {\n                        rule.conditions.unshift(...data.conditionsNames);\n                    } else {\n                        rule.conditions = data.conditionsNames;\n                    }\n                    return merge({}, state, {rules: {hosts: {data: {[rule.name]: {...rule}}}}});\n                }\n                return state;\n            }\n            break;\n        case REMOVE_RULE_HOST_CONDITIONS:\n            if (entity) {\n                const rule = state.rules.hosts.data[entity];\n                const filteredConditions = rule.conditions?.filter(condition => !data?.conditionsNames?.includes(condition));\n                const ruleWithConditions = Object.assign(rule, {conditions: filteredConditions});\n                const normalizeRule = normalize(ruleWithConditions, Schemas.RULE_HOST).entities;\n                return merge({}, state, {\n                    rules: {\n                        ...state.rules,\n                        hosts: {\n                            ...state.rules.hosts,\n                            data: normalizeRule.hostRules,\n                        }\n                    }\n                });\n            }\n            break;\n        case RULE_HOST_CLOUD_HOSTS_REQUEST:\n            return merge({}, state, {rules: {hosts: {isLoadingCloudHosts: true, loadCloudHostsError: null}}});\n        case RULE_HOST_CLOUD_HOSTS_FAILURE:\n            return merge({}, state, {rules: {hosts: {isLoadingCloudHosts: false, loadCloudHostsError: error}}});\n        case RULE_HOST_CLOUD_HOSTS_SUCCESS: {\n            const rule = entity && state.rules.hosts.data[entity];\n            const cloudHosts = {cloudHosts: data?.cloudHosts || []};\n            const ruleWithCloudHosts = Object.assign(rule ? rule : [entity], cloudHosts);\n            const normalizedRule = normalize(ruleWithCloudHosts, Schemas.RULE_HOST).entities;\n            return merge({}, state, {\n                rules: {\n                    ...state.rules,\n                    hosts: {\n                        ...state.rules.hosts,\n                        data: normalizedRule.hostRules,\n                        isLoadingCloudHosts: false,\n                        loadCloudHostsError: null,\n                    },\n                }\n            });\n        }\n        case ADD_RULE_HOST_CLOUD_HOSTS:\n            if (entity && data?.cloudHostsId?.length) {\n                const rule = state.rules.hosts.data[entity];\n                if (rule) {\n                    if (rule.cloudHosts) {\n                        rule.cloudHosts.unshift(...data.cloudHostsId);\n                    } else {\n                        rule.cloudHosts = data.cloudHostsId;\n                    }\n                    return merge({}, state, {rules: {hosts: {data: {[rule.name]: {...rule}}}}});\n                }\n                return state;\n            }\n            break;\n        case REMOVE_RULE_HOST_CLOUD_HOSTS:\n            if (entity) {\n                const rule = state.rules.hosts.data[entity];\n                const filteredCloudHosts = rule.cloudHosts?.filter(cloudHost => !data?.cloudHostsId?.includes(cloudHost));\n                const ruleWithCloudHosts = Object.assign(rule, {cloudHosts: filteredCloudHosts});\n                const normalizeRule = normalize(ruleWithCloudHosts, Schemas.RULE_HOST).entities;\n                return merge({}, state, {\n                    rules: {\n                        ...state.rules,\n                        hosts: {\n                            ...state.rules.hosts,\n                            data: normalizeRule.hostRules,\n                        }\n                    }\n                });\n            }\n            break;\n        case RULE_HOST_EDGE_HOSTS_REQUEST:\n            return merge({}, state, {rules: {hosts: {isLoadingEdgeHosts: true, loadEdgeHostsError: null}}});\n        case RULE_HOST_EDGE_HOSTS_FAILURE:\n            return merge({}, state, {rules: {hosts: {isLoadingEdgeHosts: false, loadEdgeHostsError: error}}});\n        case RULE_HOST_EDGE_HOSTS_SUCCESS: {\n            const rule = entity && state.rules.hosts.data[entity];\n            const edgeHosts = {edgeHosts: data?.edgeHosts || []};\n            const ruleWithEdgeHosts = Object.assign(rule ? rule : [entity], edgeHosts);\n            const normalizedRule = normalize(ruleWithEdgeHosts, Schemas.RULE_HOST).entities;\n            return merge({}, state, {\n                rules: {\n                    ...state.rules,\n                    hosts: {\n                        ...state.rules.hosts,\n                        data: normalizedRule.hostRules,\n                        isLoadingEdgeHosts: false,\n                        loadEdgeHostsError: null,\n                    },\n                }\n            });\n        }\n        case ADD_RULE_HOST_EDGE_HOSTS:\n            if (entity && data?.edgeHostsHostname?.length) {\n                const rule = state.rules.hosts.data[entity];\n                if (rule) {\n                    if (rule.edgeHosts) {\n                        rule.edgeHosts.unshift(...data.edgeHostsHostname);\n                    } else {\n                        rule.edgeHosts = data.edgeHostsHostname;\n                    }\n                    return merge({}, state, {rules: {hosts: {data: {[rule.name]: {...rule}}}}});\n                }\n                return state;\n            }\n            break;\n        case REMOVE_RULE_HOST_EDGE_HOSTS:\n            if (entity) {\n                const rule = state.rules.hosts.data[entity];\n                const filteredEdgeHosts = rule.edgeHosts?.filter(edgeHost => !data?.edgeHostsHostname?.includes(edgeHost));\n                const ruleWithEdgeHosts = Object.assign(rule, {edgeHosts: filteredEdgeHosts});\n                const normalizeRule = normalize(ruleWithEdgeHosts, Schemas.RULE_HOST).entities;\n                return merge({}, state, {\n                    rules: {\n                        ...state.rules,\n                        hosts: {\n                            ...state.rules.hosts,\n                            data: normalizeRule.hostRules,\n                        }\n                    }\n                });\n            }\n            break;\n        case RULES_APP_REQUEST:\n        case RULE_APP_REQUEST:\n            return merge({}, state, {rules: {apps: {isLoadingRules: true, loadRulesError: null}}});\n        case RULES_APP_FAILURE:\n        case RULE_APP_FAILURE:\n            return merge({}, state, {rules: {apps: {isLoadingRules: false, loadRulesError: error}}});\n        case RULES_APP_SUCCESS:\n            return {\n                ...state,\n                rules: {\n                    ...state.rules,\n                    apps: {\n                        ...state.rules.apps,\n                        data: merge({}, pick(state.rules.apps.data, keys(data?.appRules)), data?.appRules),\n                        isLoadingRules: false,\n                        loadRulesError: null,\n                    }\n                }\n            };\n        case RULE_APP_SUCCESS:\n            return {\n                ...state,\n                rules: {\n                    ...state.rules,\n                    apps: {\n                        ...state.rules.apps,\n                        data: merge({}, state.rules.apps.data, data?.appRules),\n                        isLoadingRules: false,\n                        loadRulesError: null,\n                    }\n                }\n            };\n        case ADD_RULE_APP:\n            if (data?.appRules?.length) {\n                const appRules = normalize(data?.appRules, Schemas.RULE_APP_ARRAY).entities.appRules;\n                return merge({}, state, {\n                    rules: {\n                        apps: {\n                            data: appRules,\n                            isLoadingRules: false,\n                            loadRulesError: null\n                        }\n                    }\n                });\n            }\n            break;\n        case UPDATE_RULE_APP:\n            if (data?.appRules && data.appRules?.length > 1) {\n                const previousAppRule = data.appRules[0];\n                const filteredAppRules = Object.values(state.rules.apps.data)\n                    .filter(appRule => appRule.id !== previousAppRule.id);\n                const currentAppRule = {...previousAppRule, ...data.appRules[1]};\n                filteredAppRules.push(currentAppRule);\n                const appRules = normalize(filteredAppRules, Schemas.RULE_APP_ARRAY).entities.appRules || {};\n                return {\n                    ...state,\n                    rules: {\n                        ...state.rules,\n                        apps: {\n                            ...state.rules.apps,\n                            data: appRules,\n                        }\n                    }\n                }\n            }\n            break;\n        case DELETE_RULE_APP:\n            if (data?.appRules?.length) {\n                const appRulesToDelete = data.appRules[0];\n                const filteredAppRules = Object.values(state.rules.apps.data).filter(appRule => appRule.id !== appRulesToDelete.id);\n                const appRules = normalize(filteredAppRules, Schemas.RULE_APP_ARRAY).entities.appRules || {};\n                return {\n                    ...state,\n                    rules: {\n                        ...state.rules,\n                        apps: {\n                            ...state.rules.apps,\n                            data: appRules,\n                        }\n                    }\n                }\n            }\n            break;\n        case RULE_APP_CONDITIONS_REQUEST:\n            return merge({}, state, {rules: {apps: {isLoadingConditions: true, loadConditionsError: null}}});\n        case RULE_APP_CONDITIONS_FAILURE:\n            return merge({}, state, {rules: {apps: {isLoadingConditions: false, loadConditionsError: error}}});\n        case RULE_APP_CONDITIONS_SUCCESS: {\n            const rule = entity && state.rules.apps.data[entity];\n            const conditions = {conditions: data?.conditions || []};\n            const ruleWithConditions = Object.assign(rule ? rule : [entity], conditions);\n            const normalizedRule = normalize(ruleWithConditions, Schemas.RULE_APP).entities;\n            return merge({}, state, {\n                rules: {\n                    ...state.rules,\n                    apps: {\n                        ...state.rules.apps,\n                        data: normalizedRule.appRules,\n                        isLoadingConditions: false,\n                        loadConditionsError: null,\n                    }\n                }\n            });\n        }\n        case ADD_RULE_APP_CONDITIONS:\n            if (entity && data?.conditionsNames?.length) {\n                const rule = state.rules.apps.data[entity];\n                if (rule) {\n                    if (rule.conditions) {\n                        rule.conditions.unshift(...data.conditionsNames);\n                    } else {\n                        rule.conditions = data.conditionsNames;\n                    }\n                    return merge({}, state, {rules: {apps: {data: {[rule.name]: {...rule}}}}});\n                }\n            }\n            break;\n        case REMOVE_RULE_APP_CONDITIONS:\n            if (entity) {\n                const rule = state.rules.apps.data[entity];\n                const filteredConditions = rule.conditions?.filter(condition => !data?.conditionsNames?.includes(condition));\n                const ruleWithConditions = Object.assign(rule, {conditions: filteredConditions});\n                const normalizeRule = normalize(ruleWithConditions, Schemas.RULE_APP).entities;\n                return merge({}, state, {\n                    rules: {\n                        ...state.rules,\n                        apps: {\n                            ...state.rules.apps,\n                            data: normalizeRule.appRules,\n                        }\n                    }\n                });\n            }\n            return state;\n        case RULE_APP_APPS_REQUEST:\n            return merge({}, state, {rules: {apps: {isLoadingApps: true, loadAppsError: null}}});\n        case RULE_APP_APPS_FAILURE:\n            return merge({}, state, {rules: {apps: {isLoadingApps: false, loadAppsError: error}}});\n        case RULE_APP_APPS_SUCCESS: {\n            const rule = entity && state.rules.apps.data[entity];\n            const apps = {apps: data?.apps || []};\n            const ruleWithApps = Object.assign(rule ? rule : [entity], apps);\n            const normalizedRule = normalize(ruleWithApps, Schemas.RULE_APP).entities;\n            return merge({}, state, {\n                rules: {\n                    ...state.rules,\n                    apps: {\n                        ...state.rules.apps,\n                        data: normalizedRule.appRules,\n                        isLoadingApps: false,\n                        loadAppsError: null,\n                    },\n                }\n            });\n        }\n        case ADD_RULE_APP_APPS:\n            if (entity && data?.appsNames?.length) {\n                const rule = state.rules.apps.data[entity];\n                if (rule) {\n                    if (rule.apps) {\n                        rule.apps.unshift(...data.appsNames);\n                    } else {\n                        rule.apps = data?.appsNames;\n                    }\n                    return merge({}, state, {rules: {apps: {data: {[rule.name]: {...rule}}}}});\n                }\n                return state;\n            }\n            break;\n        case REMOVE_RULE_APP_APPS:\n            if (entity) {\n                const rule = state.rules.apps.data[entity];\n                const filteredApps = rule.apps?.filter(app => !data?.appsNames?.includes(app));\n                const ruleWithApps = Object.assign(rule, {apps: filteredApps});\n                const normalizeRule = normalize(ruleWithApps, Schemas.RULE_APP).entities;\n                return merge({}, state, {\n                    rules: {\n                        ...state.rules,\n                        apps: {\n                            ...state.rules.apps,\n                            data: normalizeRule.appRules,\n                        }\n                    }\n                });\n            }\n            break;\n        case RULES_SERVICE_REQUEST:\n        case RULE_SERVICE_REQUEST:\n            return merge({}, state, {rules: {services: {isLoadingRules: true, loadRulesError: null}}});\n        case RULES_SERVICE_FAILURE:\n        case RULE_SERVICE_FAILURE:\n            return merge({}, state, {rules: {services: {isLoadingRules: false, loadRulesError: error}}});\n        case RULES_SERVICE_SUCCESS:\n            return {\n                ...state,\n                rules: {\n                    ...state.rules,\n                    services: {\n                        ...state.rules.services,\n                        data: merge({}, pick(state.rules.services.data, keys(data?.serviceRules)), data?.serviceRules),\n                        isLoadingRules: false,\n                        loadRulesError: null,\n                    }\n                }\n            };\n        case RULE_SERVICE_SUCCESS:\n            return {\n                ...state,\n                rules: {\n                    ...state.rules,\n                    services: {\n                        ...state.rules.services,\n                        data: merge({}, state.rules.services.data, data?.serviceRules),\n                        isLoadingRules: false,\n                        loadRulesError: null,\n                    }\n                }\n            };\n        case ADD_RULE_SERVICE:\n            if (data?.serviceRules?.length) {\n                const serviceRules = normalize(data?.serviceRules, Schemas.RULE_SERVICE_ARRAY).entities.serviceRules;\n                return merge({}, state, {\n                    rules: {\n                        services: {\n                            data: serviceRules,\n                            isLoadingRules: false,\n                            loadRulesError: null\n                        }\n                    }\n                });\n            }\n            break;\n        case UPDATE_RULE_SERVICE:\n            if (data?.serviceRules && data.serviceRules?.length > 1) {\n                const previousServiceRule = data.serviceRules[0];\n                const filteredServiceRules = Object.values(state.rules.services.data)\n                    .filter(serviceRule => serviceRule.id !== previousServiceRule.id);\n                const currentServiceRule = {...previousServiceRule, ...data.serviceRules[1]};\n                filteredServiceRules.push(currentServiceRule);\n                const serviceRules = normalize(filteredServiceRules, Schemas.RULE_SERVICE_ARRAY).entities.serviceRules || {};\n                return {\n                    ...state,\n                    rules: {\n                        ...state.rules,\n                        services: {\n                            ...state.rules.services,\n                            data: serviceRules,\n                        }\n                    }\n                }\n            }\n            break;\n        case DELETE_RULE_SERVICE:\n            if (data?.serviceRules?.length) {\n                const serviceRulesToDelete = data.serviceRules[0];\n                const filteredServiceRules = Object.values(state.rules.services.data).filter(serviceRule => serviceRule.id !== serviceRulesToDelete.id);\n                const serviceRules = normalize(filteredServiceRules, Schemas.RULE_SERVICE_ARRAY).entities.serviceRules || {};\n                return {\n                    ...state,\n                    rules: {\n                        ...state.rules,\n                        services: {\n                            ...state.rules.services,\n                            data: serviceRules,\n                        }\n                    }\n                }\n            }\n            break;\n        case RULE_SERVICE_CONDITIONS_REQUEST:\n            return merge({}, state, {rules: {services: {isLoadingConditions: true, loadConditionsError: null}}});\n        case RULE_SERVICE_CONDITIONS_FAILURE:\n            return merge({}, state, {rules: {services: {isLoadingConditions: false, loadConditionsError: error}}});\n        case RULE_SERVICE_CONDITIONS_SUCCESS: {\n            const rule = entity && state.rules.services.data[entity];\n            const conditions = {conditions: data?.conditions || []};\n            const ruleWithConditions = Object.assign(rule ? rule : [entity], conditions);\n            const normalizedRule = normalize(ruleWithConditions, Schemas.RULE_SERVICE).entities;\n            return merge({}, state, {\n                rules: {\n                    ...state.rules,\n                    services: {\n                        ...state.rules.services,\n                        data: normalizedRule.serviceRules,\n                        isLoadingConditions: false,\n                        loadConditionsError: null,\n                    }\n                }\n            });\n        }\n        case ADD_RULE_SERVICE_CONDITIONS:\n            if (entity && data?.conditionsNames?.length) {\n                const rule = state.rules.services.data[entity];\n                if (rule) {\n                    if (rule.conditions) {\n                        rule.conditions.unshift(...data.conditionsNames);\n                    } else {\n                        rule.conditions = data.conditionsNames;\n                    }\n                    return merge({}, state, {rules: {services: {data: {[rule.name]: {...rule}}}}});\n                }\n            }\n            break;\n        case REMOVE_RULE_SERVICE_CONDITIONS:\n            if (entity) {\n                const rule = state.rules.services.data[entity];\n                const filteredConditions = rule.conditions?.filter(condition => !data?.conditionsNames?.includes(condition));\n                const ruleWithConditions = Object.assign(rule, {conditions: filteredConditions});\n                const normalizeRule = normalize(ruleWithConditions, Schemas.RULE_SERVICE).entities;\n                return merge({}, state, {\n                    rules: {\n                        ...state.rules,\n                        services: {\n                            ...state.rules.services,\n                            data: normalizeRule.serviceRules,\n                        }\n                    }\n                });\n            }\n            return state;\n        case RULE_SERVICE_SERVICES_REQUEST:\n            return merge({}, state, {rules: {services: {isLoadingServices: true, loadServicesError: null}}});\n        case RULE_SERVICE_SERVICES_FAILURE:\n            return merge({}, state, {rules: {services: {isLoadingServices: false, loadServicesError: error}}});\n        case RULE_SERVICE_SERVICES_SUCCESS: {\n            const rule = entity && state.rules.services.data[entity];\n            const services = {services: data?.services || []};\n            const ruleWithServices = Object.assign(rule ? rule : [entity], services);\n            const normalizedRule = normalize(ruleWithServices, Schemas.RULE_SERVICE).entities;\n            return merge({}, state, {\n                rules: {\n                    ...state.rules,\n                    services: {\n                        ...state.rules.services,\n                        data: normalizedRule.serviceRules,\n                        isLoadingServices: false,\n                        loadServicesError: null,\n                    },\n                }\n            });\n        }\n        case ADD_RULE_SERVICE_SERVICES:\n            if (entity && data?.serviceNames?.length) {\n                const rule = state.rules.services.data[entity];\n                if (rule) {\n                    if (rule.services) {\n                        rule.services.unshift(...data.serviceNames);\n                    } else {\n                        rule.services = data.serviceNames;\n                    }\n                    return merge({}, state, {rules: {services: {data: {[rule.name]: {...rule}}}}});\n                }\n                return state;\n            }\n            break;\n        case REMOVE_RULE_SERVICE_SERVICES:\n            if (entity) {\n                const rule = state.rules.services.data[entity];\n                const filteredServices = rule.services?.filter(service => !data?.serviceNames?.includes(service));\n                const ruleWithServices = Object.assign(rule, {services: filteredServices});\n                const normalizeRule = normalize(ruleWithServices, Schemas.RULE_SERVICE).entities;\n                return merge({}, state, {\n                    rules: {\n                        ...state.rules,\n                        services: {\n                            ...state.rules.services,\n                            data: normalizeRule.serviceRules,\n                        }\n                    }\n                });\n            }\n            break;\n        case RULES_CONTAINER_REQUEST:\n        case RULE_CONTAINER_REQUEST:\n            return merge({}, state, {rules: {containers: {isLoadingRules: true, loadRulesError: null}}});\n        case RULES_CONTAINER_FAILURE:\n        case RULE_CONTAINER_FAILURE:\n            return merge({}, state, {rules: {containers: {isLoadingRules: false, loadRulesError: error}}});\n        case RULES_CONTAINER_SUCCESS:\n            return {\n                ...state,\n                rules: {\n                    ...state.rules,\n                    containers: {\n                        ...state.rules.containers,\n                        data: merge({}, pick(state.rules.containers.data, keys(data?.containerRules)), data?.containerRules),\n                        isLoadingRules: false,\n                        loadRulesError: null,\n                    }\n                }\n            };\n        case RULE_CONTAINER_SUCCESS:\n            return {\n                ...state,\n                rules: {\n                    ...state.rules,\n                    containers: {\n                        ...state.rules.containers,\n                        data: merge({}, state.rules.containers.data, data?.containerRules),\n                        isLoadingRules: false,\n                        loadRulesError: null,\n                    }\n                }\n            };\n        case ADD_RULE_CONTAINER:\n            if (data?.containerRules?.length) {\n                const containerRules = normalize(data?.containerRules, Schemas.RULE_CONTAINER_ARRAY).entities.containerRules;\n                return merge({}, state, {\n                    rules: {\n                        containers: {\n                            data: containerRules,\n                            isLoadingRules: false,\n                            loadRulesError: null\n                        }\n                    }\n                });\n            }\n            break;\n        case UPDATE_RULE_CONTAINER:\n            if (data?.containerRules && data.containerRules?.length > 1) {\n                const previousContainerRule = data.containerRules[0];\n                const filteredContainerRules = Object.values(state.rules.containers.data)\n                    .filter(containerRule => containerRule.id !== previousContainerRule.id);\n                const currentContainerRule = {...previousContainerRule, ...data.containerRules[1]};\n                filteredContainerRules.push(currentContainerRule);\n                const containerRules = normalize(filteredContainerRules, Schemas.RULE_CONTAINER_ARRAY).entities.containerRules || {};\n                return {\n                    ...state,\n                    rules: {\n                        ...state.rules,\n                        containers: {\n                            ...state.rules.containers,\n                            data: containerRules,\n                        }\n                    }\n                }\n            }\n            break;\n        case DELETE_RULE_CONTAINER:\n            if (data?.containerRules?.length) {\n                const containerRulesToDelete = data.containerRules[0];\n                const filteredContainerRules = Object.values(state.rules.containers.data).filter(containerRule => containerRule.id !== containerRulesToDelete.id);\n                const containerRules = normalize(filteredContainerRules, Schemas.RULE_CONTAINER_ARRAY).entities.containerRules || {};\n                return {\n                    ...state,\n                    rules: {\n                        ...state.rules,\n                        containers: {\n                            ...state.rules.containers,\n                            data: containerRules,\n                        }\n                    }\n                }\n            }\n            break;\n        case RULE_CONTAINER_CONDITIONS_REQUEST:\n            return merge({}, state, {rules: {containers: {isLoadingConditions: true, loadConditionsError: null}}});\n        case RULE_CONTAINER_CONDITIONS_FAILURE:\n            return merge({}, state, {rules: {containers: {isLoadingConditions: false, loadConditionsError: error}}});\n        case RULE_CONTAINER_CONDITIONS_SUCCESS: {\n            const rule = entity && state.rules.containers.data[entity];\n            const conditions = {conditions: data?.conditions || []};\n            const ruleWithConditions = Object.assign(rule ? rule : [entity], conditions);\n            const normalizedRule = normalize(ruleWithConditions, Schemas.RULE_CONTAINER).entities;\n            return merge({}, state, {\n                rules: {\n                    ...state.rules,\n                    containers: {\n                        ...state.rules.containers,\n                        data: normalizedRule.containerRules,\n                        isLoadingConditions: false,\n                        loadConditionsError: null,\n                    }\n                }\n            });\n        }\n        case ADD_RULE_CONTAINER_CONDITIONS:\n            if (entity && data?.conditionsNames?.length) {\n                const rule = state.rules.containers.data[entity];\n                if (rule) {\n                    if (rule.conditions) {\n                        rule.conditions.unshift(...data.conditionsNames);\n                    } else {\n                        rule.conditions = data.conditionsNames;\n                    }\n                    return merge({}, state, {rules: {containers: {data: {[rule.name]: {...rule}}}}});\n                }\n            }\n            break;\n        case REMOVE_RULE_CONTAINER_CONDITIONS:\n            if (entity) {\n                const rule = state.rules.containers.data[entity];\n                const filteredConditions = rule.conditions?.filter(condition => !data?.conditionsNames?.includes(condition));\n                const ruleWithConditions = Object.assign(rule, {conditions: filteredConditions});\n                const normalizeRule = normalize(ruleWithConditions, Schemas.RULE_CONTAINER).entities;\n                return merge({}, state, {\n                    rules: {\n                        ...state.rules,\n                        containers: {\n                            ...state.rules.containers,\n                            data: normalizeRule.containerRules,\n                        }\n                    }\n                });\n            }\n            return state;\n        case RULE_CONTAINER_CONTAINERS_REQUEST:\n            return merge({}, state, {rules: {containers: {isLoadingContainers: true, loadContainersError: null}}});\n        case RULE_CONTAINER_CONTAINERS_FAILURE:\n            return merge({}, state, {rules: {containers: {isLoadingContainers: false, loadContainersError: error}}});\n        case RULE_CONTAINER_CONTAINERS_SUCCESS: {\n            const rule = entity && state.rules.containers.data[entity];\n            const containers = {containers: data?.containers || []};\n            const ruleWithContainers = Object.assign(rule ? rule : [entity], containers);\n            const normalizedRule = normalize(ruleWithContainers, Schemas.RULE_CONTAINER).entities;\n            return merge({}, state, {\n                rules: {\n                    ...state.rules,\n                    containers: {\n                        ...state.rules.containers,\n                        data: normalizedRule.containerRules,\n                        isLoadingContainers: false,\n                        loadContainersError: null,\n                    },\n                }\n            });\n        }\n        case ADD_RULE_CONTAINER_CONTAINERS:\n            if (entity && data?.containerIds?.length) {\n                const rule = state.rules.containers.data[entity];\n                if (rule) {\n                    if (rule.containers) {\n                        rule.containers.unshift(...data.containerIds);\n                    } else {\n                        rule.containers = data?.containerIds;\n                    }\n                    return merge({}, state, {rules: {containers: {data: {[rule.name]: {...rule}}}}});\n                }\n                return state;\n            }\n            break;\n        case REMOVE_RULE_CONTAINER_CONTAINERS:\n            if (entity) {\n                const rule = state.rules.containers.data[entity];\n                const filteredContainers = rule.containers?.filter(container => !data?.containerIds?.includes(container));\n                const ruleWithContainers = Object.assign(rule, {containers: filteredContainers});\n                const normalizeRule = normalize(ruleWithContainers, Schemas.RULE_CONTAINER).entities;\n                return merge({}, state, {\n                    rules: {\n                        ...state.rules,\n                        containers: {\n                            ...state.rules.containers,\n                            data: normalizeRule.containerRules,\n                        }\n                    }\n                });\n            }\n            break;\n        case CONDITIONS_REQUEST:\n        case CONDITION_REQUEST:\n            return merge({}, state, {rules: {conditions: {isLoadingConditions: true, loadConditionsError: null}}});\n        case CONDITIONS_FAILURE:\n        case CONDITION_FAILURE:\n            return merge({}, state, {rules: {conditions: {isLoadingConditions: false, loadConditionsError: error}}});\n        case CONDITIONS_SUCCESS:\n            return {\n                ...state,\n                rules: {\n                    ...state.rules,\n                    conditions: {\n                        ...state.rules.conditions,\n                        data: merge({}, pick(state.rules.conditions.data, keys(data?.conditions)), data?.conditions),\n                        isLoadingConditions: false,\n                        loadConditionsError: null,\n                    }\n                }\n            };\n        case CONDITION_SUCCESS:\n            return {\n                ...state,\n                rules: {\n                    ...state.rules,\n                    conditions: {\n                        ...state.rules.conditions,\n                        data: merge({}, state.rules.conditions.data, data?.conditions),\n                        isLoadingConditions: false,\n                        loadConditionsError: null,\n                    }\n                }\n            };\n        case ADD_CONDITION:\n            if (data?.conditions?.length) {\n                const conditions = normalize(data?.conditions, Schemas.RULE_CONDITION_ARRAY).entities.conditions;\n                return merge({}, state, {\n                    rules: {\n                        conditions: {\n                            data: conditions,\n                            isLoadingConditions: false,\n                            loadConditionsError: null\n                        }\n                    }\n                });\n            }\n            break;\n        case UPDATE_CONDITION:\n            if (data?.conditions && data.conditions?.length > 1) {\n                const previousCondition = data.conditions[0];\n                const filteredConditions = Object.values(state.rules.conditions.data)\n                    .filter(condition => condition.id !== previousCondition.id);\n                const currentCondition = {...previousCondition, ...data.conditions[1]};\n                filteredConditions.push(currentCondition);\n                const conditions = normalize(filteredConditions, Schemas.RULE_CONDITION_ARRAY).entities.conditions || {};\n                return {\n                    ...state,\n                    rules: {\n                        ...state.rules,\n                        conditions: {\n                            ...state.rules.conditions,\n                            data: conditions,\n                        }\n                    }\n                }\n            }\n            break;\n        case DELETE_CONDITION:\n            if (data?.conditions?.length) {\n                const conditionsToDelete = data.conditions[0];\n                const filteredConditions = Object.values(state.rules.conditions.data).filter(condition => condition.id !== conditionsToDelete.id);\n                const conditions = normalize(filteredConditions, Schemas.RULE_CONDITION_ARRAY).entities.conditions || {};\n                return {\n                    ...state,\n                    rules: {\n                        ...state.rules,\n                        conditions: {\n                            ...state.rules.conditions,\n                            data: conditions,\n                        }\n                    }\n                }\n            }\n            break;\n        case VALUE_MODES_REQUEST:\n            return merge({}, state, {valueModes: {isLoadingValueModes: true, loadValueModesError: null}});\n        case VALUE_MODES_FAILURE:\n            return merge({}, state, {valueModes: {isLoadingValueModes: false, loadValueModesError: error}});\n        case VALUE_MODES_SUCCESS:\n            return {\n                ...state,\n                valueModes: {\n                    ...state.valueModes,\n                    data: merge({}, pick(state.valueModes.data, keys(data?.valueModes)), data?.valueModes),\n                    isLoadingValueModes: false,\n                    loadValueModesError: null,\n                }\n            };\n        case FIELDS_REQUEST:\n            return merge({}, state, {fields: {isLoadingFields: true, loadFieldsError: null}});\n        case FIELDS_FAILURE:\n            return merge({}, state, {fields: {isLoadingFields: false, loadFieldsError: error}});\n        case FIELDS_SUCCESS:\n            return {\n                ...state,\n                fields: {\n                    ...state.fields,\n                    data: merge({}, pick(state.fields.data, keys(data?.fields)), data?.fields),\n                    isLoadingFields: false,\n                    loadFieldsError: null,\n                }\n            };\n        case OPERATORS_REQUEST:\n            return merge({}, state, {operators: {isLoadingOperators: true, loadOperatorsError: null}});\n        case OPERATORS_FAILURE:\n            return merge({}, state, {operators: {isLoadingOperators: false, loadOperatorsError: error}});\n        case OPERATORS_SUCCESS:\n            return {\n                ...state,\n                operators: {\n                    ...state.operators,\n                    data: merge({}, pick(state.operators.data, keys(data?.operators)), data?.operators),\n                    isLoadingOperators: false,\n                    loadOperatorsError: null,\n                }\n            };\n        case DECISIONS_REQUEST:\n        case DECISION_REQUEST:\n            return merge({}, state, {decisions: {isLoadingDecisions: true, loadDecisionsError: null}});\n        case DECISIONS_FAILURE:\n        case DECISION_FAILURE:\n            return merge({}, state, {decisions: {isLoadingDecisions: false, loadDecisionsError: error}});\n        case DECISIONS_SUCCESS:\n            return {\n                ...state,\n                decisions: {\n                    ...state.nodes,\n                    data: merge({}, pick(state.decisions.data, keys(data?.decisions)), data?.decisions),\n                    isLoadingDecisions: false,\n                    loadDecisionsError: null,\n                }\n            };\n        case DECISION_SUCCESS:\n            return {\n                ...state,\n                decisions: {\n                    data: merge({}, state.decisions.data, data?.decisions),\n                    isLoadingDecisions: false,\n                    loadDecisionsError: null,\n                }\n            };\n        case SIMULATED_HOST_METRICS_REQUEST:\n        case SIMULATED_HOST_METRIC_REQUEST:\n            return merge({}, state, {\n                simulatedMetrics: {\n                    hosts: {\n                        isLoadingSimulatedHostMetrics: true,\n                        loadSimulatedHostMetricsError: null\n                    }\n                }\n            });\n        case SIMULATED_HOST_METRICS_FAILURE:\n        case SIMULATED_HOST_METRIC_FAILURE:\n            return merge({}, state, {\n                simulatedMetrics: {\n                    hosts: {\n                        isLoadingSimulatedHostMetrics: false,\n                        loadSimulatedHostMetricsError: error\n                    }\n                }\n            });\n        case SIMULATED_HOST_METRICS_SUCCESS:\n            return {\n                ...state,\n                simulatedMetrics: {\n                    ...state.simulatedMetrics,\n                    hosts: {\n                        ...state.simulatedMetrics.hosts,\n                        data: merge({}, pick(state.simulatedMetrics.hosts.data, keys(data?.simulatedHostMetrics)), data?.simulatedHostMetrics),\n                        isLoadingSimulatedHostMetrics: false,\n                        loadSimulatedHostMetricsError: null,\n                    }\n                }\n            };\n        case SIMULATED_HOST_METRIC_SUCCESS:\n            return {\n                ...state,\n                simulatedMetrics: {\n                    ...state.simulatedMetrics,\n                    hosts: {\n                        ...state.simulatedMetrics.hosts,\n                        data: merge({}, state.simulatedMetrics.hosts.data, data?.simulatedHostMetrics),\n                        isLoadingSimulatedHostMetrics: false,\n                        loadSimulatedHostMetricsError: null,\n                    }\n                }\n            };\n        case ADD_SIMULATED_HOST_METRIC:\n            if (data?.simulatedHostMetrics?.length) {\n                const simulatedHostMetrics = normalize(data?.simulatedHostMetrics, Schemas.SIMULATED_HOST_METRIC_ARRAY).entities.simulatedHostMetrics;\n                return merge({}, state, {\n                    simulatedMetrics: {\n                        hosts: {\n                            data: simulatedHostMetrics,\n                            isLoadingSimulatedHostMetrics: false,\n                            loadSimulatedHostMetricsError: null\n                        }\n                    }\n                });\n            }\n            break;\n        case UPDATE_SIMULATED_HOST_METRIC:\n            if (data?.simulatedHostMetrics && data?.simulatedHostMetrics?.length > 1) {\n                const previousSimulatedHostMetric = data.simulatedHostMetrics[0];\n                const filteredSimulatedHostMetrics = Object.values(state.simulatedMetrics.hosts.data)\n                    .filter(simulatedHostMetric => simulatedHostMetric.id !== previousSimulatedHostMetric.id);\n                const currentSimulatedHostMetric = {...previousSimulatedHostMetric, ...data.simulatedHostMetrics[1]};\n                filteredSimulatedHostMetrics.push(currentSimulatedHostMetric);\n                const simulatedHostMetrics = normalize(filteredSimulatedHostMetrics, Schemas.SIMULATED_HOST_METRIC_ARRAY).entities.simulatedHostMetrics || {};\n                return {\n                    ...state,\n                    simulatedMetrics: {\n                        ...state.simulatedMetrics,\n                        hosts: {\n                            ...state.simulatedMetrics.hosts,\n                            data: simulatedHostMetrics,\n                        }\n                    }\n                }\n            }\n            break;\n        case DELETE_SIMULATED_HOST_METRIC:\n            if (data?.simulatedHostMetrics?.length) {\n                const simulatedMetricToDelete = data.simulatedHostMetrics[0];\n                const filteredSimulatedHostMetrics = Object.values(state.simulatedMetrics.hosts.data)\n                    .filter(simulatedMetric => simulatedMetric.id !== simulatedMetricToDelete.id);\n                const simulatedHostMetrics = normalize(filteredSimulatedHostMetrics, Schemas.SIMULATED_HOST_METRIC_ARRAY).entities.simulatedHostMetrics || {};\n                return {\n                    ...state,\n                    simulatedMetrics: {\n                        ...state.simulatedMetrics,\n                        hosts: {\n                            ...state.simulatedMetrics.hosts,\n                            data: simulatedHostMetrics,\n                        }\n                    }\n                }\n            }\n            break;\n        case SIMULATED_HOST_METRIC_CLOUD_HOSTS_REQUEST:\n            return merge({}, state, {\n                simulatedMetrics: {\n                    hosts: {\n                        isLoadingCloudHosts: true,\n                        loadCloudHostsError: null\n                    }\n                }\n            });\n        case SIMULATED_HOST_METRIC_CLOUD_HOSTS_FAILURE:\n            return merge({}, state, {\n                simulatedMetrics: {\n                    hosts: {\n                        isLoadingCloudHosts: false,\n                        loadCloudHostsError: error\n                    }\n                }\n            });\n        case SIMULATED_HOST_METRIC_CLOUD_HOSTS_SUCCESS: {\n            const simulatedHostMetric = entity && state.simulatedMetrics.hosts.data[entity];\n            const cloudHosts = {cloudHosts: data?.cloudHosts || []};\n            const simulatedHostMetricWithCloudHosts = Object.assign(simulatedHostMetric ? simulatedHostMetric : [entity], cloudHosts);\n            const normalizedSimulatedHostMetric = normalize(simulatedHostMetricWithCloudHosts, Schemas.SIMULATED_HOST_METRIC).entities;\n            return merge({}, state, {\n                simulatedMetrics: {\n                    ...state.simulatedMetrics,\n                    hosts: {\n                        ...state.simulatedMetrics.hosts,\n                        data: normalizedSimulatedHostMetric.simulatedHostMetrics,\n                        isLoadingCloudHosts: false,\n                        loadCloudHostsError: null,\n                    }\n                }\n            });\n        }\n        case ADD_SIMULATED_HOST_METRIC_CLOUD_HOSTS:\n            if (entity && data?.cloudHostsId?.length) {\n                const simulatedHostMetric = state.simulatedMetrics.hosts.data[entity];\n                if (simulatedHostMetric) {\n                    if (simulatedHostMetric.cloudHosts) {\n                        simulatedHostMetric.cloudHosts.unshift(...data.cloudHostsId);\n                    } else {\n                        simulatedHostMetric.cloudHosts = data.cloudHostsId\n                    }\n                    return merge({}, state, {simulatedMetrics: {hosts: {data: {[simulatedHostMetric.name]: {...simulatedHostMetric}}}}});\n                }\n            }\n            break;\n        case REMOVE_SIMULATED_HOST_METRIC_CLOUD_HOSTS:\n            if (entity) {\n                const simulatedHostMetric = state.simulatedMetrics.hosts.data[entity];\n                const filteredCloudHosts = simulatedHostMetric.cloudHosts?.filter(cloudHost => !data?.cloudHostsId?.includes(cloudHost));\n                const simulatedHostMetricWithCloudHosts = Object.assign(simulatedHostMetric, {cloudHosts: filteredCloudHosts});\n                const normalizeSimulatedHostMetric = normalize(simulatedHostMetricWithCloudHosts, Schemas.SIMULATED_HOST_METRIC).entities;\n                return merge({}, state, {\n                    simulatedMetrics: {\n                        ...state.simulatedMetrics,\n                        hosts: {\n                            ...state.simulatedMetrics.hosts,\n                            data: normalizeSimulatedHostMetric.simulatedHostMetrics,\n                        }\n                    }\n                });\n            }\n            return state;\n        case SIMULATED_HOST_METRIC_EDGE_HOSTS_REQUEST:\n            return merge({}, state, {simulatedMetrics: {hosts: {isLoadingEdgeHosts: true, loadEdgeHostsError: null}}});\n        case SIMULATED_HOST_METRIC_EDGE_HOSTS_FAILURE:\n            return merge({}, state, {\n                simulatedMetrics: {\n                    hosts: {\n                        isLoadingEdgeHosts: false,\n                        loadEdgeHostsError: error\n                    }\n                }\n            });\n        case SIMULATED_HOST_METRIC_EDGE_HOSTS_SUCCESS: {\n            const simulatedHostMetric = entity && state.simulatedMetrics.hosts.data[entity];\n            const edgeHosts = {edgeHosts: data?.edgeHosts || []};\n            const simulatedHostMetricWithEdgeHosts = Object.assign(simulatedHostMetric ? simulatedHostMetric : [entity], edgeHosts);\n            const normalizedSimulatedHostMetric = normalize(simulatedHostMetricWithEdgeHosts, Schemas.SIMULATED_HOST_METRIC).entities;\n            return merge({}, state, {\n                simulatedMetrics: {\n                    ...state.simulatedMetrics,\n                    hosts: {\n                        ...state.simulatedMetrics.hosts,\n                        data: normalizedSimulatedHostMetric.simulatedHostMetrics,\n                        isLoadingEdgeHosts: false,\n                        loadEdgeHostsError: null,\n                    }\n                }\n            });\n        }\n        case ADD_SIMULATED_HOST_METRIC_EDGE_HOSTS:\n            if (entity && data?.edgeHostsHostname?.length) {\n                const simulatedHostMetric = state.simulatedMetrics.hosts.data[entity];\n                if (simulatedHostMetric) {\n                    if (simulatedHostMetric.edgeHosts) {\n                        simulatedHostMetric.edgeHosts.unshift(...data.edgeHostsHostname);\n                    } else {\n                        simulatedHostMetric.edgeHosts = data.edgeHostsHostname;\n                    }\n                    return merge({}, state, {simulatedMetrics: {hosts: {data: {[simulatedHostMetric.name]: {...simulatedHostMetric}}}}});\n                }\n            }\n            break;\n        case REMOVE_SIMULATED_HOST_METRIC_EDGE_HOSTS:\n            if (entity) {\n                const simulatedHostMetric = state.simulatedMetrics.hosts.data[entity];\n                const filteredEdgeHosts = simulatedHostMetric.edgeHosts?.filter(edgeHost => !data?.edgeHostsHostname?.includes(edgeHost));\n                const simulatedHostMetricWithEdgeHosts = Object.assign(simulatedHostMetric, {edgeHosts: filteredEdgeHosts});\n                const normalizeSimulatedHostMetric = normalize(simulatedHostMetricWithEdgeHosts, Schemas.SIMULATED_HOST_METRIC).entities;\n                return merge({}, state, {\n                    simulatedMetrics: {\n                        ...state.simulatedMetrics,\n                        hosts: {\n                            ...state.simulatedMetrics.hosts,\n                            data: normalizeSimulatedHostMetric.simulatedHostMetrics,\n                        }\n                    }\n                });\n            }\n            return state;\n        case SIMULATED_APP_METRICS_REQUEST:\n        case SIMULATED_APP_METRIC_REQUEST:\n            return merge({}, state, {\n                simulatedMetrics: {\n                    apps: {\n                        isLoadingSimulatedAppMetrics: true,\n                        loadSimulatedAppMetricsError: null\n                    }\n                }\n            });\n        case SIMULATED_APP_METRICS_FAILURE:\n        case SIMULATED_APP_METRIC_FAILURE:\n            return merge({}, state, {\n                simulatedMetrics: {\n                    apps: {\n                        isLoadingSimulatedAppMetrics: false,\n                        loadSimulatedAppMetricsError: error\n                    }\n                }\n            });\n        case SIMULATED_APP_METRICS_SUCCESS:\n            return {\n                ...state,\n                simulatedMetrics: {\n                    ...state.simulatedMetrics,\n                    apps: {\n                        ...state.simulatedMetrics.apps,\n                        data: merge({}, pick(state.simulatedMetrics.apps.data, keys(data?.simulatedAppMetrics)), data?.simulatedAppMetrics),\n                        isLoadingSimulatedAppMetrics: false,\n                        loadSimulatedAppMetricsError: null,\n                    }\n                }\n            };\n        case SIMULATED_APP_METRIC_SUCCESS:\n            return {\n                ...state,\n                simulatedMetrics: {\n                    ...state.simulatedMetrics,\n                    apps: {\n                        ...state.simulatedMetrics.apps,\n                        data: merge({}, state.simulatedMetrics.apps.data, data?.simulatedAppMetrics),\n                        isLoadingSimulatedAppMetrics: false,\n                        loadSimulatedAppMetricsError: null,\n                    }\n                }\n            };\n        case ADD_SIMULATED_APP_METRIC:\n            if (data?.simulatedAppMetrics?.length) {\n                const simulatedAppMetrics = normalize(data?.simulatedAppMetrics, Schemas.SIMULATED_APP_METRIC_ARRAY).entities.simulatedAppMetrics;\n                return merge({}, state, {\n                    simulatedMetrics: {\n                        apps: {\n                            data: simulatedAppMetrics,\n                            isLoadingSimulatedAppMetrics: false,\n                            loadSimulatedAppMetricsError: null\n                        }\n                    }\n                });\n            }\n            break;\n        case UPDATE_SIMULATED_APP_METRIC:\n            if (data?.simulatedAppMetrics && data.simulatedAppMetrics?.length > 1) {\n                const previousSimulatedAppMetric = data.simulatedAppMetrics[0];\n                const filteredSimulatedAppMetrics = Object.values(state.simulatedMetrics.apps.data)\n                    .filter(simulatedAppMetric => simulatedAppMetric.id !== previousSimulatedAppMetric.id);\n                const currentSimulatedAppMetric = {...previousSimulatedAppMetric, ...data.simulatedAppMetrics[1]};\n                filteredSimulatedAppMetrics.push(currentSimulatedAppMetric);\n                const simulatedAppMetrics = normalize(filteredSimulatedAppMetrics, Schemas.SIMULATED_APP_METRIC_ARRAY).entities.simulatedAppMetrics || {};\n                return {\n                    ...state,\n                    simulatedMetrics: {\n                        ...state.simulatedMetrics,\n                        apps: {\n                            ...state.simulatedMetrics.apps,\n                            data: simulatedAppMetrics,\n                        }\n                    }\n                }\n            }\n            break;\n        case DELETE_SIMULATED_APP_METRIC:\n            if (data?.simulatedAppMetrics?.length) {\n                const simulatedMetricToDelete = data.simulatedAppMetrics[0];\n                const filteredSimulatedAppMetrics = Object.values(state.simulatedMetrics.apps.data)\n                    .filter(simulatedMetric => simulatedMetric.id !== simulatedMetricToDelete.id);\n                const simulatedAppMetrics = normalize(filteredSimulatedAppMetrics, Schemas.SIMULATED_APP_METRIC_ARRAY).entities.simulatedAppMetrics || {};\n                return {\n                    ...state,\n                    simulatedMetrics: {\n                        ...state.simulatedMetrics,\n                        apps: {\n                            ...state.simulatedMetrics.apps,\n                            data: simulatedAppMetrics,\n                        }\n                    }\n                }\n            }\n            break;\n        case SIMULATED_APP_METRIC_APPS_REQUEST:\n            return merge({}, state, {\n                simulatedMetrics: {\n                    apps: {\n                        isLoadingApps: true,\n                        loadAppsError: null\n                    }\n                }\n            });\n        case SIMULATED_APP_METRIC_APPS_FAILURE:\n            return merge({}, state, {\n                simulatedMetrics: {\n                    apps: {\n                        isLoadingApps: false,\n                        loadAppsError: error\n                    }\n                }\n            });\n        case SIMULATED_APP_METRIC_APPS_SUCCESS: {\n            const simulatedAppMetric = entity && state.simulatedMetrics.apps.data[entity];\n            const apps = {apps: data?.apps || []};\n            const simulatedAppMetricWithApps = Object.assign(simulatedAppMetric ? simulatedAppMetric : [entity], apps);\n            const normalizedSimulatedAppMetric = normalize(simulatedAppMetricWithApps, Schemas.SIMULATED_APP_METRIC).entities;\n            return merge({}, state, {\n                simulatedMetrics: {\n                    ...state.simulatedMetrics,\n                    apps: {\n                        ...state.simulatedMetrics.apps,\n                        data: normalizedSimulatedAppMetric.simulatedAppMetrics,\n                        isLoadingApps: false,\n                        loadAppsError: null,\n                    }\n                }\n            });\n        }\n        case ADD_SIMULATED_APP_METRIC_APPS:\n            if (entity && data?.appsNames?.length) {\n                const simulatedAppMetric = state.simulatedMetrics.apps.data[entity];\n                if (simulatedAppMetric) {\n                    if (simulatedAppMetric.apps) {\n                        simulatedAppMetric.apps.unshift(...data.appsNames);\n                    } else {\n                        simulatedAppMetric.apps = data.appsNames;\n                    }\n                    return merge({}, state, {simulatedMetrics: {apps: {data: {[simulatedAppMetric.name]: {...simulatedAppMetric}}}}});\n                }\n            }\n            break;\n        case REMOVE_SIMULATED_APP_METRIC_APPS:\n            if (entity) {\n                const simulatedAppMetric = state.simulatedMetrics.apps.data[entity];\n                const filteredApps = simulatedAppMetric.apps?.filter(app => !data?.appsNames?.includes(app));\n                const simulatedAppMetricWithApps = Object.assign(simulatedAppMetric, {apps: filteredApps});\n                const normalizeSimulatedAppMetric = normalize(simulatedAppMetricWithApps, Schemas.SIMULATED_APP_METRIC).entities;\n                return merge({}, state, {\n                    simulatedMetrics: {\n                        ...state.simulatedMetrics,\n                        apps: {\n                            ...state.simulatedMetrics.apps,\n                            data: normalizeSimulatedAppMetric.simulatedAppMetrics,\n                        }\n                    }\n                });\n            }\n            return state;\n        case SIMULATED_SERVICE_METRICS_REQUEST:\n        case SIMULATED_SERVICE_METRIC_REQUEST:\n            return merge({}, state, {\n                simulatedMetrics: {\n                    services: {\n                        isLoadingSimulatedServiceMetrics: true,\n                        loadSimulatedServiceMetricsError: null\n                    }\n                }\n            });\n        case SIMULATED_SERVICE_METRICS_FAILURE:\n        case SIMULATED_SERVICE_METRIC_FAILURE:\n            return merge({}, state, {\n                simulatedMetrics: {\n                    services: {\n                        isLoadingSimulatedServiceMetrics: false,\n                        loadSimulatedServiceMetricsError: error\n                    }\n                }\n            });\n        case SIMULATED_SERVICE_METRICS_SUCCESS:\n            return {\n                ...state,\n                simulatedMetrics: {\n                    ...state.simulatedMetrics,\n                    services: {\n                        ...state.simulatedMetrics.services,\n                        data: merge({}, pick(state.simulatedMetrics.services.data, keys(data?.simulatedServiceMetrics)), data?.simulatedServiceMetrics),\n                        isLoadingSimulatedServiceMetrics: false,\n                        loadSimulatedServiceMetricsError: null,\n                    }\n                }\n            };\n        case SIMULATED_SERVICE_METRIC_SUCCESS:\n            return {\n                ...state,\n                simulatedMetrics: {\n                    ...state.simulatedMetrics,\n                    services: {\n                        ...state.simulatedMetrics.services,\n                        data: merge({}, state.simulatedMetrics.services.data, data?.simulatedServiceMetrics),\n                        isLoadingSimulatedServiceMetrics: false,\n                        loadSimulatedServiceMetricsError: null,\n                    }\n                }\n            };\n        case ADD_SIMULATED_SERVICE_METRIC:\n            if (data?.simulatedServiceMetrics?.length) {\n                const simulatedServiceMetrics = normalize(data?.simulatedServiceMetrics, Schemas.SIMULATED_SERVICE_METRIC_ARRAY).entities.simulatedServiceMetrics;\n                return merge({}, state, {\n                    simulatedMetrics: {\n                        services: {\n                            data: simulatedServiceMetrics,\n                            isLoadingSimulatedServiceMetrics: false,\n                            loadSimulatedServiceMetricsError: null\n                        }\n                    }\n                });\n            }\n            break;\n        case UPDATE_SIMULATED_SERVICE_METRIC:\n            if (data?.simulatedServiceMetrics && data.simulatedServiceMetrics?.length > 1) {\n                const previousSimulatedServiceMetric = data.simulatedServiceMetrics[0];\n                const filteredSimulatedServiceMetrics = Object.values(state.simulatedMetrics.services.data)\n                    .filter(simulatedServiceMetric => simulatedServiceMetric.id !== previousSimulatedServiceMetric.id);\n                const currentSimulatedServiceMetric = {...previousSimulatedServiceMetric, ...data.simulatedServiceMetrics[1]};\n                filteredSimulatedServiceMetrics.push(currentSimulatedServiceMetric);\n                const simulatedServiceMetrics = normalize(filteredSimulatedServiceMetrics, Schemas.SIMULATED_SERVICE_METRIC_ARRAY).entities.simulatedServiceMetrics || {};\n                return {\n                    ...state,\n                    simulatedMetrics: {\n                        ...state.simulatedMetrics,\n                        services: {\n                            ...state.simulatedMetrics.services,\n                            data: simulatedServiceMetrics,\n                        }\n                    }\n                }\n            }\n            break;\n        case DELETE_SIMULATED_SERVICE_METRIC:\n            if (data?.simulatedServiceMetrics?.length) {\n                const simulatedMetricToDelete = data.simulatedServiceMetrics[0];\n                const filteredSimulatedServiceMetrics = Object.values(state.simulatedMetrics.services.data)\n                    .filter(simulatedMetric => simulatedMetric.id !== simulatedMetricToDelete.id);\n                const simulatedServiceMetrics = normalize(filteredSimulatedServiceMetrics, Schemas.SIMULATED_SERVICE_METRIC_ARRAY).entities.simulatedServiceMetrics || {};\n                return {\n                    ...state,\n                    simulatedMetrics: {\n                        ...state.simulatedMetrics,\n                        services: {\n                            ...state.simulatedMetrics.services,\n                            data: simulatedServiceMetrics,\n                        }\n                    }\n                }\n            }\n            break;\n        case SIMULATED_SERVICE_METRIC_SERVICES_REQUEST:\n            return merge({}, state, {simulatedMetrics: {services: {isLoadingServices: true, loadServicesError: null}}});\n        case SIMULATED_SERVICE_METRIC_SERVICES_FAILURE:\n            return merge({}, state, {\n                simulatedMetrics: {\n                    services: {\n                        isLoadingServices: false,\n                        loadServicesError: error\n                    }\n                }\n            });\n        case SIMULATED_SERVICE_METRIC_SERVICES_SUCCESS: {\n            const simulatedServiceMetric = entity && state.simulatedMetrics.services.data[entity];\n            const services = {services: data?.services || []};\n            const simulatedServiceMetricWithServices = Object.assign(simulatedServiceMetric ? simulatedServiceMetric : [entity], services);\n            const normalizedSimulatedServiceMetric = normalize(simulatedServiceMetricWithServices, Schemas.SIMULATED_SERVICE_METRIC).entities;\n            return merge({}, state, {\n                simulatedMetrics: {\n                    ...state.simulatedMetrics,\n                    services: {\n                        ...state.simulatedMetrics.services,\n                        data: normalizedSimulatedServiceMetric.simulatedServiceMetrics,\n                        isLoadingServices: false,\n                        loadServicesError: null,\n                    }\n                }\n            });\n        }\n        case ADD_SIMULATED_SERVICE_METRIC_SERVICES:\n            if (entity && data?.serviceNames?.length) {\n                const simulatedServiceMetric = state.simulatedMetrics.services.data[entity];\n                if (simulatedServiceMetric) {\n                    if (simulatedServiceMetric.services) {\n                        simulatedServiceMetric.services.unshift(...data.serviceNames);\n                    } else {\n                        simulatedServiceMetric.services = data.serviceNames;\n                    }\n                    return merge({}, state, {simulatedMetrics: {services: {data: {[simulatedServiceMetric.name]: {...simulatedServiceMetric}}}}});\n                }\n            }\n            break;\n        case REMOVE_SIMULATED_SERVICE_METRIC_SERVICES:\n            if (entity) {\n                const simulatedServiceMetric = state.simulatedMetrics.services.data[entity];\n                const filteredServices = simulatedServiceMetric.services?.filter(service => !data?.serviceNames?.includes(service));\n                const simulatedServiceMetricWithServices = Object.assign(simulatedServiceMetric, {services: filteredServices});\n                const normalizeSimulatedServiceMetric = normalize(simulatedServiceMetricWithServices, Schemas.SIMULATED_SERVICE_METRIC).entities;\n                return merge({}, state, {\n                    simulatedMetrics: {\n                        ...state.simulatedMetrics,\n                        services: {\n                            ...state.simulatedMetrics.services,\n                            data: normalizeSimulatedServiceMetric.simulatedServiceMetrics,\n                        }\n                    }\n                });\n            }\n            return state;\n        case SIMULATED_CONTAINER_METRICS_REQUEST:\n        case SIMULATED_CONTAINER_METRIC_REQUEST:\n            return merge({}, state, {\n                simulatedMetrics: {\n                    containers: {\n                        isLoadingSimulatedContainerMetrics: true,\n                        loadSimulatedContainerMetricsError: null\n                    }\n                }\n            });\n        case SIMULATED_CONTAINER_METRICS_FAILURE:\n        case SIMULATED_CONTAINER_METRIC_FAILURE:\n            return merge({}, state, {\n                simulatedMetrics: {\n                    containers: {\n                        isLoadingSimulatedContainerMetrics: false,\n                        loadSimulatedContainerMetricsError: error\n                    }\n                }\n            });\n        case SIMULATED_CONTAINER_METRICS_SUCCESS:\n            return {\n                ...state,\n                simulatedMetrics: {\n                    ...state.simulatedMetrics,\n                    containers: {\n                        ...state.simulatedMetrics.containers,\n                        data: merge({}, pick(state.simulatedMetrics.containers.data, keys(data?.simulatedContainerMetrics)), data?.simulatedContainerMetrics),\n                        isLoadingSimulatedContainerMetrics: false,\n                        loadSimulatedContainerMetricsError: null,\n                    }\n                }\n            };\n        case SIMULATED_CONTAINER_METRIC_SUCCESS:\n            return {\n                ...state,\n                simulatedMetrics: {\n                    ...state.simulatedMetrics,\n                    containers: {\n                        ...state.simulatedMetrics.containers,\n                        data: merge({}, state.simulatedMetrics.containers.data, data?.simulatedContainerMetrics),\n                        isLoadingSimulatedContainerMetrics: false,\n                        loadSimulatedContainerMetricsError: null,\n                    }\n                }\n            };\n        case ADD_SIMULATED_CONTAINER_METRIC:\n            if (data?.simulatedContainerMetrics?.length) {\n                const simulatedContainerMetrics = normalize(data?.simulatedContainerMetrics, Schemas.SIMULATED_CONTAINER_METRIC_ARRAY).entities.simulatedContainerMetrics;\n                return merge({}, state, {\n                    simulatedMetrics: {\n                        containers: {\n                            data: simulatedContainerMetrics,\n                            isLoadingSimulatedContainerMetrics: false,\n                            loadSimulatedContainerMetricsError: null\n                        }\n                    }\n                });\n            }\n            break;\n        case UPDATE_SIMULATED_CONTAINER_METRIC:\n            if (data?.simulatedContainerMetrics && data.simulatedContainerMetrics?.length > 1) {\n                const previousSimulatedContainerMetric = data.simulatedContainerMetrics[0];\n                const filteredSimulatedContainerMetrics = Object.values(state.simulatedMetrics.containers.data)\n                    .filter(simulatedContainerMetric => simulatedContainerMetric.id !== previousSimulatedContainerMetric.id);\n                const currentSimulatedContainerMetric = {...previousSimulatedContainerMetric, ...data.simulatedContainerMetrics[1]};\n                filteredSimulatedContainerMetrics.push(currentSimulatedContainerMetric);\n                const simulatedContainerMetrics = normalize(filteredSimulatedContainerMetrics, Schemas.SIMULATED_CONTAINER_METRIC_ARRAY).entities.simulatedContainerMetrics || {};\n                return {\n                    ...state,\n                    simulatedMetrics: {\n                        ...state.simulatedMetrics,\n                        containers: {\n                            ...state.simulatedMetrics.containers,\n                            data: simulatedContainerMetrics,\n                        }\n                    }\n                }\n            }\n            break;\n        case DELETE_SIMULATED_CONTAINER_METRIC:\n            if (data?.simulatedContainerMetrics?.length) {\n                const simulatedMetricToDelete = data.simulatedContainerMetrics[0];\n                const filteredSimulatedContainerMetrics = Object.values(state.simulatedMetrics.containers.data)\n                    .filter(simulatedMetric => simulatedMetric.id !== simulatedMetricToDelete.id);\n                const simulatedContainerMetrics = normalize(filteredSimulatedContainerMetrics, Schemas.SIMULATED_CONTAINER_METRIC_ARRAY).entities.simulatedContainerMetrics || {};\n                return {\n                    ...state,\n                    simulatedMetrics: {\n                        ...state.simulatedMetrics,\n                        containers: {\n                            ...state.simulatedMetrics.containers,\n                            data: simulatedContainerMetrics,\n                        }\n                    }\n                }\n            }\n            break;\n        case SIMULATED_CONTAINER_METRIC_CONTAINERS_REQUEST:\n            return merge({}, state, {\n                simulatedMetrics: {\n                    containers: {\n                        isLoadingContainers: true,\n                        loadContainersError: null\n                    }\n                }\n            });\n        case SIMULATED_CONTAINER_METRIC_CONTAINERS_FAILURE:\n            return merge({}, state, {\n                simulatedMetrics: {\n                    containers: {\n                        isLoadingContainers: false,\n                        loadContainersError: error\n                    }\n                }\n            });\n        case SIMULATED_CONTAINER_METRIC_CONTAINERS_SUCCESS: {\n            const simulatedContainerMetric = entity && state.simulatedMetrics.containers.data[entity];\n            const containers = {containers: data?.containers || []};\n            const simulatedContainerMetricWithContainers = Object.assign(simulatedContainerMetric ? simulatedContainerMetric : [entity], containers);\n            const normalizedSimulatedContainerMetric = normalize(simulatedContainerMetricWithContainers, Schemas.SIMULATED_CONTAINER_METRIC).entities;\n            return merge({}, state, {\n                simulatedMetrics: {\n                    ...state.simulatedMetrics,\n                    containers: {\n                        ...state.simulatedMetrics.containers,\n                        data: normalizedSimulatedContainerMetric.simulatedContainerMetrics,\n                        isLoadingContainers: false,\n                        loadContainersError: null,\n                    }\n                }\n            });\n        }\n        case ADD_SIMULATED_CONTAINER_METRIC_CONTAINERS:\n            if (entity && data?.containerIds?.length) {\n                const simulatedContainerMetric = state.simulatedMetrics.containers.data[entity];\n                if (simulatedContainerMetric) {\n                    if (simulatedContainerMetric.containers) {\n                        simulatedContainerMetric.containers.unshift(...data.containerIds);\n                    } else {\n                        simulatedContainerMetric.containers = data.containerIds;\n                    }\n                    return merge({}, state, {simulatedMetrics: {containers: {data: {[simulatedContainerMetric.name]: {...simulatedContainerMetric}}}}});\n                }\n            }\n            break;\n        case REMOVE_SIMULATED_CONTAINER_METRIC_CONTAINERS:\n            if (entity) {\n                const simulatedContainerMetric = state.simulatedMetrics.containers.data[entity];\n                const filteredContainers = simulatedContainerMetric.containers?.filter(container => !data?.containerIds?.includes(container));\n                const simulatedContainerMetricWithContainers = Object.assign(simulatedContainerMetric, {containers: filteredContainers});\n                const normalizeSimulatedContainerMetric = normalize(simulatedContainerMetricWithContainers, Schemas.SIMULATED_CONTAINER_METRIC).entities;\n                return merge({}, state, {\n                    simulatedMetrics: {\n                        ...state.simulatedMetrics,\n                        containers: {\n                            ...state.simulatedMetrics.containers,\n                            data: normalizeSimulatedContainerMetric.simulatedContainerMetrics,\n                        }\n                    }\n                });\n            }\n            return state;\n        case LOAD_BALANCERS_REQUEST:\n        case LOAD_BALANCER_REQUEST:\n            return merge({}, state, {loadBalancers: {isLoadingLoadBalancers: true, loadLoadBalancersError: null}});\n        case LOAD_BALANCERS_FAILURE:\n        case LOAD_BALANCER_FAILURE:\n            return merge({}, state, {loadBalancers: {isLoadingLoadBalancers: false, loadLoadBalancersError: error}});\n        case LOAD_BALANCERS_SUCCESS:\n            return {\n                ...state,\n                loadBalancers: {\n                    ...state.loadBalancers,\n                    data: merge({}, pick(state.loadBalancers.data, keys(data?.loadBalancers)), data?.loadBalancers),\n                    isLoadingLoadBalancers: false,\n                    loadLoadBalancersError: null,\n                }\n            };\n        case LOAD_BALANCER_SUCCESS:\n            return {\n                ...state,\n                loadBalancers: {\n                    data: merge({}, state.loadBalancers.data, data?.loadBalancers),\n                    isLoadingLoadBalancers: false,\n                    loadLoadBalancersError: null,\n                }\n            };\n        case ADD_LOAD_BALANCERS:\n            if (data?.loadBalancers?.length) {\n                const loadBalancers = normalize(data?.loadBalancers, Schemas.LOAD_BALANCER_ARRAY).entities.loadBalancers;\n                return merge({}, state, {\n                    loadBalancers: {\n                        data: loadBalancers,\n                        isLoadingLoadBalancers: false,\n                        loadLoadBalancersError: null\n                    }\n                });\n            }\n            break;\n        case DELETE_LOAD_BALANCER:\n            if (data?.loadBalancers?.length) {\n                const loadBalancersToDelete = data.loadBalancers[0];\n                const filteredLoadBalancers = Object.values(state.loadBalancers.data).filter(loadBalancer => loadBalancer.id !== loadBalancersToDelete.id);\n                const loadBalancers = normalize(filteredLoadBalancers, Schemas.LOAD_BALANCER_ARRAY).entities.loadBalancers || {};\n                return {\n                    ...state,\n                    loadBalancers: {\n                        ...state.loadBalancers,\n                        data: loadBalancers,\n                    }\n                }\n            }\n            break;\n        case REGISTRATION_SERVERS_REQUEST:\n        case REGISTRATION_SERVER_REQUEST:\n            return merge({}, state, {\n                registrationServers: {\n                    isLoadingRegistrationServers: true,\n                    loadRegistrationServersError: null\n                }\n            });\n        case REGISTRATION_SERVERS_FAILURE:\n        case REGISTRATION_SERVER_FAILURE:\n            return merge({}, state, {\n                registrationServers: {\n                    isLoadingRegistrationServers: false,\n                    loadRegistrationServersError: error\n                }\n            });\n        case REGISTRATION_SERVERS_SUCCESS:\n            return {\n                ...state,\n                registrationServers: {\n                    ...state.registrationServers,\n                    data: merge({}, pick(state.registrationServers.data, keys(data?.registrationServers)), data?.registrationServers),\n                    isLoadingRegistrationServers: false,\n                    loadRegistrationServersError: null,\n                }\n            };\n        case REGISTRATION_SERVER_SUCCESS:\n            return {\n                ...state,\n                registrationServers: {\n                    data: merge({}, state.registrationServers.data, data?.registrationServers),\n                    isLoadingRegistrationServers: false,\n                    loadRegistrationServersError: null,\n                }\n            };\n        case ADD_REGISTRATION_SERVERS:\n            if (data?.registrationServers?.length) {\n                const registrationServers = normalize(data?.registrationServers, Schemas.REGISTRATION_SERVER_ARRAY).entities.registrationServers;\n                return merge({}, state, {\n                    registrationServers: {\n                        data: registrationServers,\n                        isLoadingRegistrationServers: false,\n                        loadRegistrationServersError: null\n                    }\n                });\n            }\n            break;\n        case DELETE_REGISTRATION_SERVER:\n            if (data?.registrationServers?.length) {\n                const registrationServersToDelete = data.registrationServers[0];\n                const filteredRegistrationServers = Object.values(state.registrationServers.data).filter(registrationServer => registrationServer.id !== registrationServersToDelete.id);\n                const registrationServers = normalize(filteredRegistrationServers, Schemas.REGISTRATION_SERVER_ARRAY).entities.registrationServers || {};\n                return {\n                    ...state,\n                    registrationServers: {\n                        ...state.registrationServers,\n                        data: registrationServers,\n                    }\n                }\n            }\n            break;\n        case WORKER_MANAGERS_REQUEST:\n        case WORKER_MANAGER_REQUEST:\n            return merge({}, state, {workerManagers: {isLoadingWorkerManagers: true, loadWorkerManagersError: null}});\n        case WORKER_MANAGERS_FAILURE:\n        case WORKER_MANAGER_FAILURE:\n            return merge({}, state, {workerManagers: {isLoadingWorkerManagers: false, loadWorkerManagersError: error}});\n        case WORKER_MANAGERS_SUCCESS:\n            return {\n                ...state,\n                workerManagers: {\n                    ...state.workerManagers,\n                    data: merge({}, pick(state.workerManagers.data, keys(data?.workerManagers)), data?.workerManagers),\n                    isLoadingWorkerManagers: false,\n                    loadWorkerManagersError: null,\n                }\n            };\n        case WORKER_MANAGER_SUCCESS:\n            return {\n                ...state,\n                workerManagers: {\n                    ...state.workerManagers,\n                    data: merge({}, state.workerManagers.data, data?.workerManagers),\n                    isLoadingWorkerManagers: false,\n                    loadWorkerManagersError: null,\n                }\n            };\n        case ADD_WORKER_MANAGERS:\n            if (data?.workerManagers?.length) {\n                const workerManager = normalize(data?.workerManagers, Schemas.WORKER_MANAGER_ARRAY).entities.workerManagers;\n                return merge({}, state, {\n                    workerManagers: {\n                        data: workerManager,\n                        isLoadingWorkerManagers: false,\n                        loadWorkerManagersError: null\n                    }\n                });\n            }\n            break;\n        case DELETE_WORKER_MANAGER:\n            if (data?.workerManagers?.length) {\n                const workerManagerToDelete = data.workerManagers[0];\n                const filteredApps = Object.values(state.workerManagers.data).filter(workerManager => workerManager.id !== workerManagerToDelete.id);\n                const workerManagers = normalize(filteredApps, Schemas.WORKER_MANAGER_ARRAY).entities.workerManagers || {};\n                return {\n                    ...state,\n                    workerManagers: {\n                        ...state.workerManagers,\n                        data: workerManagers,\n                    }\n                }\n            }\n            break;\n        case WORKER_MANAGER_HOSTS_REQUEST:\n            return merge({}, state, {workerManagers: {isLoadingAssignedHosts: true, loadAssignedHostsError: null}});\n        case WORKER_MANAGER_HOSTS_SUCCESS:\n            const workerManager = entity && state.workerManagers.data[entity];\n            const assignedHosts = {assignedHosts: data || []};\n            const workerManagerWithAssignedHosts = Object.assign(workerManager ? workerManager : [entity], assignedHosts);\n            const normalizedWorkerManager = normalize(workerManagerWithAssignedHosts, Schemas.WORKER_MANAGER).entities.workerManagers;\n            return merge({}, state, {\n                workerManagers: {\n                    data: normalizedWorkerManager,\n                    isLoadingServices: false,\n                    loadServicesError: null\n                }\n            });\n        case WORKER_MANAGER_HOSTS_FAILURE:\n            return merge({}, state, {workerManagers: {isLoadingAssignedHosts: false, loadAssignedHostsError: error}});\n        case ASSIGN_WORKER_MANAGER_MACHINES:\n            if (entity) {\n                if (data?.assignedHosts?.length) {\n                    const workerManager = state.workerManagers.data[entity];\n                    if (workerManager) {\n                        workerManager.assignedHosts = {...workerManager.assignedHosts, ...data?.assignedHosts};\n                        return merge({}, state, {workerManagers: {data: {[workerManager.id]: {...workerManager}}}});\n                    }\n                }\n            }\n            break;\n        case UNASSIGN_WORKER_MANAGER_MACHINES:\n            if (entity) {\n                const workerManager = state.workerManagers.data[entity];\n                const filteredHosts = (workerManager.assignedHosts &&\n                    Object.values(workerManager.assignedHosts)\n                        .filter(host => !data?.assignedHosts?.includes(host))) || [];\n                const workerManagerWithAssignedHosts = Object.assign(workerManager, !Object.keys(filteredHosts).length ? {assignedHosts: {}} : filteredHosts);\n                const normalizedWorkerManager = normalize(workerManagerWithAssignedHosts, Schemas.WORKER_MANAGER).entities;\n                return merge({}, state, {\n                    workerManagers: {\n                        ...state.workerManagers,\n                        data: normalizedWorkerManager.workerManagers,\n                    }\n                });\n            }\n            break;\n        case LOGS_REQUEST:\n            return merge({}, state, {logs: {isLoadingLogs: true, loadLogsError: null}});\n        case LOGS_FAILURE:\n            return merge({}, state, {logs: {isLoadingLogs: false, loadLogsError: error}});\n        case LOGS_SUCCESS:\n            return {\n                ...state,\n                logs: {\n                    data: merge({}, pick(state.logs.data, keys(data?.logs)), data?.logs),\n                    isLoadingLogs: false,\n                    loadLogsError: null,\n                }\n            };\n        case SCRIPTS_REQUEST:\n            return merge({}, state, {scripts: {isLoadingScripts: true, loadScriptsError: null}});\n        case SCRIPTS_FAILURE:\n            return merge({}, state, {scripts: {isLoadingScripts: false, loadScriptsError: error}});\n        case SCRIPTS_SUCCESS:\n            return {\n                ...state,\n                scripts: {\n                    data: merge([], pick(state.scripts.data, keys(data)), data),\n                    isLoadingScripts: false,\n                    loadScriptsError: null,\n                }\n            };\n        case ADD_COMMANDS:\n            if (data?.commands?.length) {\n                const commands = [...state.commands, ...data.commands];\n                return merge({}, state, {commands});\n            }\n            break;\n        case CLEAR_COMMANDS:\n            return {\n                ...state,\n                commands: []\n            }\n        default:\n            return state;\n    }\n    return state;\n};\n\nexport default entities;\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {\n    CHANGE_COMPONENT,\n    HIDE_CONFIRMATION_DIALOG,\n    SEARCH_UPDATE,\n    SIDENAV_SHOW_USER,\n    SIDENAV_SHOW_WIDTH\n} from \"../actions\";\nimport {loadingBarReducer} from \"react-redux-loading-bar\";\nimport {components, IComponent} from \"../containers/Root.dev\";\n\nexport interface UIState {\n    sidenav: { user: boolean, width: boolean };\n    search: string;\n    component: IComponent;\n    confirmationDialog: boolean;\n}\n\nexport const loadingBar = loadingBarReducer;\n\nexport const sidenav = (\n    state = {user: true, width: window.innerWidth > 992},\n    action: { type: string, value: boolean },\n) => {\n    const {type, value} = action;\n    switch (type) {\n        case SIDENAV_SHOW_USER:\n            return {\n                ...state,\n                user: value\n            };\n        case SIDENAV_SHOW_WIDTH:\n            return {\n                ...state,\n                width: value\n            };\n        default:\n            return state;\n    }\n};\n\nexport const search = (\n    state = \"\",\n    action: { type: string, search: string }\n) => {\n    const {type, search} = action;\n    switch (type) {\n        case SEARCH_UPDATE:\n            return search;\n        default:\n            return state;\n    }\n};\n\nexport const component = (\n    state = components[0],\n    action: { type: string, component: IComponent }\n) => {\n    const {type, component} = action;\n    switch (type) {\n        case CHANGE_COMPONENT:\n            return component;\n        default:\n            return state;\n    }\n}\n\nexport const confirmationDialog = (\n    state = true,\n    action: { type: string, hidden: boolean }\n) => {\n    const {type, hidden} = action;\n    switch (type) {\n        case HIDE_CONFIRMATION_DIALOG:\n            return !hidden;\n        default:\n            return state;\n    }\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {combineReducers} from 'redux'\nimport entities, {EntitiesState} from \"./entities\";\nimport {component, confirmationDialog, loadingBar, search, sidenav, UIState} from \"./ui\";\n\nexport interface ReduxState {\n    ui: UIState;\n    entities: EntitiesState;\n}\n\nconst ui = combineReducers({\n    sidenav,\n    search,\n    component,\n    confirmationDialog,\n});\n\nconst rootReducer = combineReducers({\n    loadingBar,\n    ui,\n    entities,\n});\n\nexport default rootReducer;\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {applyMiddleware, createStore} from 'redux'\nimport thunk from 'redux-thunk'\nimport promise from \"redux-promise-middleware\";\nimport {loadingBarMiddleware} from \"react-redux-loading-bar\";\nimport api from \"../middleware/api\";\nimport rootReducer from \"../reducers\";\nimport {loadState} from \"./localStorage\";\n\nconst configureStore = (persistedState = loadState()) =>\n    createStore(\n        rootReducer,\n        persistedState,\n        applyMiddleware(\n            thunk,\n            api,\n            promise(),\n            loadingBarMiddleware({\n                promiseTypeSuffixes: ['REQUEST', 'SUCCESS', 'FAILURE'],\n            })\n        )\n    );\n\nexport default configureStore;","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // IService worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet Root: any;\n\nif (process.env.NODE_ENV === 'production') {\n    Root = require('./Root.prod').default as JSX.Element;\n} else {\n    Root = require('./Root.dev').default as JSX.Element;\n}\n\nexport default Root;\n\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet configureStore: any;\n\nif (process.env.NODE_ENV === \"production\") {\n    configureStore = require(\"./configureStore.prod\").default;\n} else {\n    configureStore = require(\"./configureStore.dev\").default;\n}\n\nexport default configureStore;\n","/*\n * MIT License\n *\n * Copyright (c) 2020 manager\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport * as serviceWorker from './serviceWorker';\nimport Root from \"./containers/Root\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport configureStore from \"./store/configureStore\";\nimport {saveState} from \"./store/localStorage\";\n\nconst store = configureStore();\n\nstore.subscribe(() => {\n    saveState(store.getState());\n});\n\nReactDOM.render(\n    <BrowserRouter>\n        <Root store={store}/>\n    </BrowserRouter>,\n    document.getElementById('body'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}